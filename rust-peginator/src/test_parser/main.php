<?php

/**
 * Autogenerated with gemini using the following prompt:
 * 
 * I'll give you a large Rust parser and I want you to convert it to a PHP LALR parser that outputs an AST. Convert everything. I want to copy what you give me and paste it straight into the PHP interpreter and I want it to work. DO NOT SKIP ANY RULE, DO NOT REPLACE CODE CHUNKS WITH PLACEHOLDERS. Convert everything. Everything. Skip any prose whatsoever and reply directly with the PHP file. I DON'T WANT ANY TEXT OTHER THAN THE PHP CODE. DO NOT EXPLAIN TO ME WHAT RUST OR PHP OR PARSERS ARE. JUST CONVERT THE GRAMMAR. Do not use any library. Implement every single class you instantiate. Assume the entire program is a single, large PHP file. Use the exact same set of rules as listed in the original grammar. Do not inline any rule.  Keep it simple.
 *
 * Make sure to update the parser state whenever a lookahead matches correctly. Make sure to not update the parser state if a given branch did not match fully.
 *
 * (test_parser.rs code)
 */
require_once __DIR__ . '/test_parser.php';

$state = new ParseState("fn foo() -> &i32");
var_dump(
    parse_FunctionDef($state)
);

$state = new ParseState("fn foo(self: &mut Bar, baz: &Baz) -> &Quux");
var_dump(
    parse_FunctionDef($state)
);
