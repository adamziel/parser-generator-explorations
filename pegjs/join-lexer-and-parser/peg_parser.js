module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { Start: peg$parseStart },
        peg$startRuleFunction  = peg$parseStart,

        peg$c0 = peg$FAILED,
        peg$c1 = null,
        peg$c2 = function() {serverVersion >= 80000},
        peg$c3 = void 0,
        peg$c4 = function() {serverVersion >= 50604},
        peg$c5 = function() {serverVersion >= 80014},
        peg$c6 = function() {serverVersion >= 50713},
        peg$c7 = [],
        peg$c8 = function() {serverVersion < 80000},
        peg$c9 = function() {serverVersion < 50700},
        peg$c10 = function() {serverVersion >= 50704},
        peg$c11 = function() {serverVersion >= 50700},
        peg$c12 = function() {serverVersion >= 80017},
        peg$c13 = function() {serverVersion >= 80019},
        peg$c14 = function() {serverVersion >= 50708 && serverVersion < 80000},
        peg$c15 = function() {serverVersion >= 50706},
        peg$c16 = function() {serverVersion >= 80011},
        peg$c17 = function() {serverVersion >= 80016},
        peg$c18 = function() {serverVersion >= 50707},
        peg$c19 = function() {serverVersion >= 50602},
        peg$c20 = function() {serverVersion < 50709},
        peg$c21 = function() {serverVersion >= 50709},
        peg$c22 = function() { serverVersion >= 80018},
        peg$c23 = function() {serverVersion >= 50704 && serverVersion < 50708},
        peg$c24 = function() {serverVersion < 80017},
        peg$c25 = function() {serverVersion >= 80004},
        peg$c26 = function() {serverVersion >= 50605},
        peg$c27 = function() {serverVersion > 80000},
        peg$c28 = function() {serverVersion > 50706},
        peg$c29 = function() {serverVersion >= 50606},
        peg$c30 = function() {serverVersion < 80014},
        peg$c31 = function() {serverVersion >= 80018},
        peg$c32 = function() {serverVersion < 80011},
        peg$c33 = function() {serverVersion < 50706},
        peg$c34 = function() {serverVersion >= 50700 && serverVersion < 50706},
        peg$c35 = function() {serverVersion >= 50603},
        peg$c36 = function(head, tail) {
              return tail.reduce((result, element) => {
                return {
                  type: element.type,
                  left: result,
                  operator: element.operator,
                  right: element.right
                };
              }, head);
            },
        peg$c37 = function(right) { return { type: 'AND', operator: text(), right }; },
        peg$c38 = function(right) { return { type: 'XOR', operator: 'XOR', right }; },
        peg$c39 = function(right) { return { type: 'OR', operator: text(), right }; },
        peg$c40 = function(not) { return { type: 'IS_NULL', operator: 'IS', not, right: 'NULL' }; },
        peg$c41 = function(right) { return { type: 'COMP_OP', operator: text(), right }; },
        peg$c42 = function() { return { type: 'COMP_OP_SUBQUERY', operator: text(), subquery }; },
        peg$c43 = function(right) { return { type: 'MEMBER_OF', operator: 'MEMBER OF', right }; },
        peg$c44 = function(right) { return { type: 'SOUNDS_LIKE', operator: 'SOUNDS LIKE', right }; },
        peg$c45 = function(right) { return { type: 'BITWISE_XOR', operator: '^', right }; },
        peg$c46 = function(right) { return { type: 'MULT_DIV_MOD', operator: text(), right }; },
        peg$c47 = function(right) { return { type: 'PLUS_MINUS', operator: text(), right }; },
        peg$c48 = function(expr, interval) { return { type: 'PLUS_MINUS_INTERVAL', operator: text(), expr, interval }; },
        peg$c49 = function(right) { return { type: 'SHIFT', operator: text(), right }; },
        peg$c50 = function(right) { return { type: 'BITWISE_AND', operator: '&', right }; },
        peg$c51 = function(right) { return { type: 'BITWISE_OR', operator: '|', right }; },
        peg$c52 = function(right) { return { type: 'COLLATE', operator: 'COLLATE', right }; },
        peg$c53 = function(right) { return { type: 'CONCAT', operator: '||', right }; },
        peg$c54 = function(right) { return { type: 'INTERVAL_PLUS', operator: '+', expr, interval, right }; },
        peg$c55 = function() {serverVersion >= 50708},
        peg$c56 = function() {serverVersion < 50607},
        peg$c57 = function() {serverVersion < 80016},
        peg$c58 = function() {serverVersion >= 80013},
        peg$c59 = function() {serverVersion < 80013},
        peg$c60 = function() {serverVersion >= 50711},
        peg$c61 = function() {serverInfo.isSqlModeActive(serverInfo.ANSI_QUOTES)},
        peg$c62 = function() {
          const identifier = require('./identifier');
        },
        peg$c63 = "=",
        peg$c64 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c65 = ":=",
        peg$c66 = { type: "literal", value: ":=", description: "\":=\"" },
        peg$c67 = "<=>",
        peg$c68 = { type: "literal", value: "<=>", description: "\"<=>\"" },
        peg$c69 = ">=",
        peg$c70 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c71 = ">",
        peg$c72 = { type: "literal", value: ">", description: "\">\"" },
        peg$c73 = "<=",
        peg$c74 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c75 = "<",
        peg$c76 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c77 = "!=",
        peg$c78 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c79 = "<>",
        peg$c80 = { type: "literal", value: "<>", description: "\"<>\"" },
        peg$c81 = function() { return 'NOT_EQUAL_OPERATOR'; },
        peg$c82 = "+",
        peg$c83 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c84 = "-",
        peg$c85 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c86 = "*",
        peg$c87 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c88 = "/",
        peg$c89 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c90 = "%",
        peg$c91 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c92 = "!",
        peg$c93 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c94 = "~",
        peg$c95 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c96 = "<<",
        peg$c97 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c98 = ">>",
        peg$c99 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c100 = "&&",
        peg$c101 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c102 = "&",
        peg$c103 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c104 = "^",
        peg$c105 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c106 = "||",
        peg$c107 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c108 = function() { return options.isSqlModeActive('PipesAsConcat') ? 'CONCAT_PIPES_SYMBOL' : 'LOGICAL_OR_OPERATOR'; },
        peg$c109 = "|",
        peg$c110 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c111 = ".",
        peg$c112 = { type: "literal", value: ".", description: "\".\"" },
        peg$c113 = ",",
        peg$c114 = { type: "literal", value: ",", description: "\",\"" },
        peg$c115 = ";",
        peg$c116 = { type: "literal", value: ";", description: "\";\"" },
        peg$c117 = ":",
        peg$c118 = { type: "literal", value: ":", description: "\":\"" },
        peg$c119 = "(",
        peg$c120 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c121 = ")",
        peg$c122 = { type: "literal", value: ")", description: "\")\"" },
        peg$c123 = "{",
        peg$c124 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c125 = "}",
        peg$c126 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c127 = "_",
        peg$c128 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c129 = "->",
        peg$c130 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c131 = function() { return options.serverVersion >= 50708 ? 'JSON_SEPARATOR_SYMBOL' : null; },
        peg$c132 = "->>",
        peg$c133 = { type: "literal", value: "->>", description: "\"->>\"" },
        peg$c134 = function() { return options.serverVersion >= 50713 ? 'JSON_UNQUOTED_SEPARATOR_SYMBOL' : null; },
        peg$c135 = "@",
        peg$c136 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c137 = "@@",
        peg$c138 = { type: "literal", value: "@@", description: "\"@@\"" },
        peg$c139 = "\\N",
        peg$c140 = { type: "literal", value: "\\N", description: "\"\\\\N\"" },
        peg$c141 = "?",
        peg$c142 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c143 = "a",
        peg$c144 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c145 = "A",
        peg$c146 = { type: "literal", value: "A", description: "\"A\"" },
        peg$c147 = "b",
        peg$c148 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c149 = "B",
        peg$c150 = { type: "literal", value: "B", description: "\"B\"" },
        peg$c151 = "c",
        peg$c152 = { type: "literal", value: "c", description: "\"c\"" },
        peg$c153 = "C",
        peg$c154 = { type: "literal", value: "C", description: "\"C\"" },
        peg$c155 = "d",
        peg$c156 = { type: "literal", value: "d", description: "\"d\"" },
        peg$c157 = "D",
        peg$c158 = { type: "literal", value: "D", description: "\"D\"" },
        peg$c159 = "e",
        peg$c160 = { type: "literal", value: "e", description: "\"e\"" },
        peg$c161 = "E",
        peg$c162 = { type: "literal", value: "E", description: "\"E\"" },
        peg$c163 = "f",
        peg$c164 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c165 = "F",
        peg$c166 = { type: "literal", value: "F", description: "\"F\"" },
        peg$c167 = "g",
        peg$c168 = { type: "literal", value: "g", description: "\"g\"" },
        peg$c169 = "G",
        peg$c170 = { type: "literal", value: "G", description: "\"G\"" },
        peg$c171 = "h",
        peg$c172 = { type: "literal", value: "h", description: "\"h\"" },
        peg$c173 = "H",
        peg$c174 = { type: "literal", value: "H", description: "\"H\"" },
        peg$c175 = "i",
        peg$c176 = { type: "literal", value: "i", description: "\"i\"" },
        peg$c177 = "I",
        peg$c178 = { type: "literal", value: "I", description: "\"I\"" },
        peg$c179 = "j",
        peg$c180 = { type: "literal", value: "j", description: "\"j\"" },
        peg$c181 = "J",
        peg$c182 = { type: "literal", value: "J", description: "\"J\"" },
        peg$c183 = "k",
        peg$c184 = { type: "literal", value: "k", description: "\"k\"" },
        peg$c185 = "K",
        peg$c186 = { type: "literal", value: "K", description: "\"K\"" },
        peg$c187 = "l",
        peg$c188 = { type: "literal", value: "l", description: "\"l\"" },
        peg$c189 = "L",
        peg$c190 = { type: "literal", value: "L", description: "\"L\"" },
        peg$c191 = "m",
        peg$c192 = { type: "literal", value: "m", description: "\"m\"" },
        peg$c193 = "M",
        peg$c194 = { type: "literal", value: "M", description: "\"M\"" },
        peg$c195 = "n",
        peg$c196 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c197 = "N",
        peg$c198 = { type: "literal", value: "N", description: "\"N\"" },
        peg$c199 = "o",
        peg$c200 = { type: "literal", value: "o", description: "\"o\"" },
        peg$c201 = "O",
        peg$c202 = { type: "literal", value: "O", description: "\"O\"" },
        peg$c203 = "p",
        peg$c204 = { type: "literal", value: "p", description: "\"p\"" },
        peg$c205 = "P",
        peg$c206 = { type: "literal", value: "P", description: "\"P\"" },
        peg$c207 = "q",
        peg$c208 = { type: "literal", value: "q", description: "\"q\"" },
        peg$c209 = "Q",
        peg$c210 = { type: "literal", value: "Q", description: "\"Q\"" },
        peg$c211 = "r",
        peg$c212 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c213 = "R",
        peg$c214 = { type: "literal", value: "R", description: "\"R\"" },
        peg$c215 = "s",
        peg$c216 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c217 = "S",
        peg$c218 = { type: "literal", value: "S", description: "\"S\"" },
        peg$c219 = "t",
        peg$c220 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c221 = "T",
        peg$c222 = { type: "literal", value: "T", description: "\"T\"" },
        peg$c223 = "u",
        peg$c224 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c225 = "U",
        peg$c226 = { type: "literal", value: "U", description: "\"U\"" },
        peg$c227 = "v",
        peg$c228 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c229 = "V",
        peg$c230 = { type: "literal", value: "V", description: "\"V\"" },
        peg$c231 = "w",
        peg$c232 = { type: "literal", value: "w", description: "\"w\"" },
        peg$c233 = "W",
        peg$c234 = { type: "literal", value: "W", description: "\"W\"" },
        peg$c235 = "x",
        peg$c236 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c237 = "X",
        peg$c238 = { type: "literal", value: "X", description: "\"X\"" },
        peg$c239 = "y",
        peg$c240 = { type: "literal", value: "y", description: "\"y\"" },
        peg$c241 = "Y",
        peg$c242 = { type: "literal", value: "Y", description: "\"Y\"" },
        peg$c243 = "z",
        peg$c244 = { type: "literal", value: "z", description: "\"z\"" },
        peg$c245 = "Z",
        peg$c246 = { type: "literal", value: "Z", description: "\"Z\"" },
        peg$c247 = /^[0-9]/,
        peg$c248 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c249 = /^[0-9a-fA-F]/,
        peg$c250 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c251 = "0x",
        peg$c252 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c253 = "x'",
        peg$c254 = { type: "literal", value: "x'", description: "\"x'\"" },
        peg$c255 = "'",
        peg$c256 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c257 = "0b",
        peg$c258 = { type: "literal", value: "0b", description: "\"0b\"" },
        peg$c259 = /^[01]/,
        peg$c260 = { type: "class", value: "[01]", description: "[01]" },
        peg$c261 = "b'",
        peg$c262 = { type: "literal", value: "b'", description: "\"b'\"" },
        peg$c263 = function() { return identifier.determineNumericType(text()); },
        peg$c264 = /^[eE]/,
        peg$c265 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c266 = function() {
              options.emitDot();
              return 'IDENTIFIER';
            },
        peg$c267 = /^[a-z0-9]/,
        peg$c268 = { type: "class", value: "[a-z0-9]", description: "[a-z0-9]" },
        peg$c269 = function() { return options.checkCharset(text()); },
        peg$c270 = /^[nN]/,
        peg$c271 = { type: "class", value: "[nN]", description: "[nN]" },
        peg$c272 = "`",
        peg$c273 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c274 = "\"",
        peg$c275 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c276 = "\\",
        peg$c277 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c278 = { type: "any", description: "any character" },
        peg$c279 = "/*!",
        peg$c280 = { type: "literal", value: "/*!", description: "\"/*!\"" },
        peg$c281 = function() { return options.checkVersion(text()); },
        peg$c282 = "*/",
        peg$c283 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c284 = function() { return ''; },
        peg$c285 = function() { options.inVersionComment = true; return ''; },
        peg$c286 = function() { return options.inVersionComment; },
        peg$c287 = function() { options.inVersionComment = false; return ''; },
        peg$c288 = "/**/",
        peg$c289 = { type: "literal", value: "/**/", description: "\"/**/\"" },
        peg$c290 = "/*",
        peg$c291 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c292 = "#",
        peg$c293 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c294 = /^[^\n\r]/,
        peg$c295 = { type: "class", value: "[^\\n\\r]", description: "[^\\n\\r]" },
        peg$c296 = /^[ \t]/,
        peg$c297 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c298 = "",
        peg$c299 = "--",
        peg$c300 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c301 = /^[\n\r]/,
        peg$c302 = { type: "class", value: "[\\n\\r]", description: "[\\n\\r]" },
        peg$c303 = /^[a-zA-Z_$]/,
        peg$c304 = { type: "class", value: "[a-zA-Z_$]", description: "[a-zA-Z_$]" },
        peg$c305 = /^[a-zA-Z_$\x80-\uFFFF]/,
        peg$c306 = { type: "class", value: "[a-zA-Z_$\\x80-\\uFFFF]", description: "[a-zA-Z_$\\x80-\\uFFFF]" },
        peg$c307 = /^[a-df-zA-DF-Z_$\x80-\uFFFF]/,
        peg$c308 = { type: "class", value: "[a-df-zA-DF-Z_$\\x80-\\uFFFF]", description: "[a-df-zA-DF-Z_$\\x80-\\uFFFF]" },
        peg$c309 = "ACCESSIBLE",
        peg$c310 = { type: "literal", value: "ACCESSIBLE", description: "\"ACCESSIBLE\"" },
        peg$c311 = "ACCOUNT",
        peg$c312 = { type: "literal", value: "ACCOUNT", description: "\"ACCOUNT\"" },
        peg$c313 = function() { return options.serverVersion >= 50707; },
        peg$c314 = "ACTION",
        peg$c315 = { type: "literal", value: "ACTION", description: "\"ACTION\"" },
        peg$c316 = "ADD",
        peg$c317 = { type: "literal", value: "ADD", description: "\"ADD\"" },
        peg$c318 = "ADDDATE",
        peg$c319 = { type: "literal", value: "ADDDATE", description: "\"ADDDATE\"" },
        peg$c320 = function() { return identifier.determineFunction('ADDDATE_SYMBOL'); },
        peg$c321 = "AFTER",
        peg$c322 = { type: "literal", value: "AFTER", description: "\"AFTER\"" },
        peg$c323 = "AGAINST",
        peg$c324 = { type: "literal", value: "AGAINST", description: "\"AGAINST\"" },
        peg$c325 = "AGGREGATE",
        peg$c326 = { type: "literal", value: "AGGREGATE", description: "\"AGGREGATE\"" },
        peg$c327 = "ALGORITHM",
        peg$c328 = { type: "literal", value: "ALGORITHM", description: "\"ALGORITHM\"" },
        peg$c329 = "ALL",
        peg$c330 = { type: "literal", value: "ALL", description: "\"ALL\"" },
        peg$c331 = "ALTER",
        peg$c332 = { type: "literal", value: "ALTER", description: "\"ALTER\"" },
        peg$c333 = "ALWAYS",
        peg$c334 = { type: "literal", value: "ALWAYS", description: "\"ALWAYS\"" },
        peg$c335 = "ANALYSE",
        peg$c336 = { type: "literal", value: "ANALYSE", description: "\"ANALYSE\"" },
        peg$c337 = function() { return options.serverVersion < 80000; },
        peg$c338 = "ANALYZE",
        peg$c339 = { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
        peg$c340 = "AND",
        peg$c341 = { type: "literal", value: "AND", description: "\"AND\"" },
        peg$c342 = "ANY",
        peg$c343 = { type: "literal", value: "ANY", description: "\"ANY\"" },
        peg$c344 = "AS",
        peg$c345 = { type: "literal", value: "AS", description: "\"AS\"" },
        peg$c346 = "ASC",
        peg$c347 = { type: "literal", value: "ASC", description: "\"ASC\"" },
        peg$c348 = "ASCII",
        peg$c349 = { type: "literal", value: "ASCII", description: "\"ASCII\"" },
        peg$c350 = function() { return identifier.determineFunction('ASCII_SYMBOL'); },
        peg$c351 = "ASENSITIVE",
        peg$c352 = { type: "literal", value: "ASENSITIVE", description: "\"ASENSITIVE\"" },
        peg$c353 = "AT",
        peg$c354 = { type: "literal", value: "AT", description: "\"AT\"" },
        peg$c355 = "AUTHORS",
        peg$c356 = { type: "literal", value: "AUTHORS", description: "\"AUTHORS\"" },
        peg$c357 = function() { return options.serverVersion < 50700; },
        peg$c358 = "AUTOEXTEND_SIZE",
        peg$c359 = { type: "literal", value: "AUTOEXTEND_SIZE", description: "\"AUTOEXTEND_SIZE\"" },
        peg$c360 = "AUTO_INCREMENT",
        peg$c361 = { type: "literal", value: "AUTO_INCREMENT", description: "\"AUTO_INCREMENT\"" },
        peg$c362 = "AVG_ROW_LENGTH",
        peg$c363 = { type: "literal", value: "AVG_ROW_LENGTH", description: "\"AVG_ROW_LENGTH\"" },
        peg$c364 = "AVG",
        peg$c365 = { type: "literal", value: "AVG", description: "\"AVG\"" },
        peg$c366 = function() { return identifier.determineFunction('AVG_SYMBOL'); },
        peg$c367 = "BACKUP",
        peg$c368 = { type: "literal", value: "BACKUP", description: "\"BACKUP\"" },
        peg$c369 = "BEFORE",
        peg$c370 = { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
        peg$c371 = "BEGIN",
        peg$c372 = { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
        peg$c373 = "BETWEEN",
        peg$c374 = { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
        peg$c375 = "BIGINT",
        peg$c376 = { type: "literal", value: "BIGINT", description: "\"BIGINT\"" },
        peg$c377 = "BINARY",
        peg$c378 = { type: "literal", value: "BINARY", description: "\"BINARY\"" },
        peg$c379 = "BINLOG",
        peg$c380 = { type: "literal", value: "BINLOG", description: "\"BINLOG\"" },
        peg$c381 = "BIN_NUM",
        peg$c382 = { type: "literal", value: "BIN_NUM", description: "\"BIN_NUM\"" },
        peg$c383 = "BIT_AND",
        peg$c384 = { type: "literal", value: "BIT_AND", description: "\"BIT_AND\"" },
        peg$c385 = function() { return identifier.determineFunction('BIT_AND_SYMBOL'); },
        peg$c386 = "BIT_OR",
        peg$c387 = { type: "literal", value: "BIT_OR", description: "\"BIT_OR\"" },
        peg$c388 = function() { return identifier.determineFunction('BIT_OR_SYMBOL'); },
        peg$c389 = "BIT",
        peg$c390 = { type: "literal", value: "BIT", description: "\"BIT\"" },
        peg$c391 = "BIT_XOR",
        peg$c392 = { type: "literal", value: "BIT_XOR", description: "\"BIT_XOR\"" },
        peg$c393 = function() { return identifier.determineFunction('BIT_XOR_SYMBOL'); },
        peg$c394 = "BLOB",
        peg$c395 = { type: "literal", value: "BLOB", description: "\"BLOB\"" },
        peg$c396 = "BLOCK",
        peg$c397 = { type: "literal", value: "BLOCK", description: "\"BLOCK\"" },
        peg$c398 = "BOOLEAN",
        peg$c399 = { type: "literal", value: "BOOLEAN", description: "\"BOOLEAN\"" },
        peg$c400 = "BOOL",
        peg$c401 = { type: "literal", value: "BOOL", description: "\"BOOL\"" },
        peg$c402 = "BOTH",
        peg$c403 = { type: "literal", value: "BOTH", description: "\"BOTH\"" },
        peg$c404 = "BTREE",
        peg$c405 = { type: "literal", value: "BTREE", description: "\"BTREE\"" },
        peg$c406 = "BY",
        peg$c407 = { type: "literal", value: "BY", description: "\"BY\"" },
        peg$c408 = "BYTE",
        peg$c409 = { type: "literal", value: "BYTE", description: "\"BYTE\"" },
        peg$c410 = "CACHE",
        peg$c411 = { type: "literal", value: "CACHE", description: "\"CACHE\"" },
        peg$c412 = "CALL",
        peg$c413 = { type: "literal", value: "CALL", description: "\"CALL\"" },
        peg$c414 = "CASCADE",
        peg$c415 = { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
        peg$c416 = "CASCADED",
        peg$c417 = { type: "literal", value: "CASCADED", description: "\"CASCADED\"" },
        peg$c418 = "CASE",
        peg$c419 = { type: "literal", value: "CASE", description: "\"CASE\"" },
        peg$c420 = "CAST",
        peg$c421 = { type: "literal", value: "CAST", description: "\"CAST\"" },
        peg$c422 = function() { return identifier.determineFunction('CAST_SYMBOL'); },
        peg$c423 = "CATALOG_NAME",
        peg$c424 = { type: "literal", value: "CATALOG_NAME", description: "\"CATALOG_NAME\"" },
        peg$c425 = "CHAIN",
        peg$c426 = { type: "literal", value: "CHAIN", description: "\"CHAIN\"" },
        peg$c427 = "CHANGE",
        peg$c428 = { type: "literal", value: "CHANGE", description: "\"CHANGE\"" },
        peg$c429 = "CHANGED",
        peg$c430 = { type: "literal", value: "CHANGED", description: "\"CHANGED\"" },
        peg$c431 = "CHANNEL",
        peg$c432 = { type: "literal", value: "CHANNEL", description: "\"CHANNEL\"" },
        peg$c433 = function() { return options.serverVersion >= 50706; },
        peg$c434 = "CHARSET",
        peg$c435 = { type: "literal", value: "CHARSET", description: "\"CHARSET\"" },
        peg$c436 = "CHARACTER",
        peg$c437 = { type: "literal", value: "CHARACTER", description: "\"CHARACTER\"" },
        peg$c438 = function() { return 'CHAR_SYMBOL'; },
        peg$c439 = "CHAR",
        peg$c440 = { type: "literal", value: "CHAR", description: "\"CHAR\"" },
        peg$c441 = "CHECKSUM",
        peg$c442 = { type: "literal", value: "CHECKSUM", description: "\"CHECKSUM\"" },
        peg$c443 = "CHECK",
        peg$c444 = { type: "literal", value: "CHECK", description: "\"CHECK\"" },
        peg$c445 = "CIPHER",
        peg$c446 = { type: "literal", value: "CIPHER", description: "\"CIPHER\"" },
        peg$c447 = "CLASS_ORIGIN",
        peg$c448 = { type: "literal", value: "CLASS_ORIGIN", description: "\"CLASS_ORIGIN\"" },
        peg$c449 = "CLIENT",
        peg$c450 = { type: "literal", value: "CLIENT", description: "\"CLIENT\"" },
        peg$c451 = "CLOSE",
        peg$c452 = { type: "literal", value: "CLOSE", description: "\"CLOSE\"" },
        peg$c453 = "COALESCE",
        peg$c454 = { type: "literal", value: "COALESCE", description: "\"COALESCE\"" },
        peg$c455 = "CODE",
        peg$c456 = { type: "literal", value: "CODE", description: "\"CODE\"" },
        peg$c457 = "COLLATE",
        peg$c458 = { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
        peg$c459 = "COLLATION",
        peg$c460 = { type: "literal", value: "COLLATION", description: "\"COLLATION\"" },
        peg$c461 = "COLUMNS",
        peg$c462 = { type: "literal", value: "COLUMNS", description: "\"COLUMNS\"" },
        peg$c463 = "COLUMN",
        peg$c464 = { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
        peg$c465 = "COLUMN_NAME",
        peg$c466 = { type: "literal", value: "COLUMN_NAME", description: "\"COLUMN_NAME\"" },
        peg$c467 = "COLUMN_FORMAT",
        peg$c468 = { type: "literal", value: "COLUMN_FORMAT", description: "\"COLUMN_FORMAT\"" },
        peg$c469 = "COMMENT",
        peg$c470 = { type: "literal", value: "COMMENT", description: "\"COMMENT\"" },
        peg$c471 = "COMMITTED",
        peg$c472 = { type: "literal", value: "COMMITTED", description: "\"COMMITTED\"" },
        peg$c473 = "COMMIT",
        peg$c474 = { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
        peg$c475 = "COMPACT",
        peg$c476 = { type: "literal", value: "COMPACT", description: "\"COMPACT\"" },
        peg$c477 = "COMPLETION",
        peg$c478 = { type: "literal", value: "COMPLETION", description: "\"COMPLETION\"" },
        peg$c479 = "COMPRESSED",
        peg$c480 = { type: "literal", value: "COMPRESSED", description: "\"COMPRESSED\"" },
        peg$c481 = "COMPRESSION",
        peg$c482 = { type: "literal", value: "COMPRESSION", description: "\"COMPRESSION\"" },
        peg$c483 = "CONCURRENT",
        peg$c484 = { type: "literal", value: "CONCURRENT", description: "\"CONCURRENT\"" },
        peg$c485 = "CONDITION",
        peg$c486 = { type: "literal", value: "CONDITION", description: "\"CONDITION\"" },
        peg$c487 = "CONNECTION",
        peg$c488 = { type: "literal", value: "CONNECTION", description: "\"CONNECTION\"" },
        peg$c489 = "CONSISTENT",
        peg$c490 = { type: "literal", value: "CONSISTENT", description: "\"CONSISTENT\"" },
        peg$c491 = "CONSTRAINT",
        peg$c492 = { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
        peg$c493 = "CONSTRAINT_CATALOG",
        peg$c494 = { type: "literal", value: "CONSTRAINT_CATALOG", description: "\"CONSTRAINT_CATALOG\"" },
        peg$c495 = "CONSTRAINT_NAME",
        peg$c496 = { type: "literal", value: "CONSTRAINT_NAME", description: "\"CONSTRAINT_NAME\"" },
        peg$c497 = "CONSTRAINT_SCHEMA",
        peg$c498 = { type: "literal", value: "CONSTRAINT_SCHEMA", description: "\"CONSTRAINT_SCHEMA\"" },
        peg$c499 = "CONTAINS",
        peg$c500 = { type: "literal", value: "CONTAINS", description: "\"CONTAINS\"" },
        peg$c501 = "CONTEXT",
        peg$c502 = { type: "literal", value: "CONTEXT", description: "\"CONTEXT\"" },
        peg$c503 = "CONTINUE",
        peg$c504 = { type: "literal", value: "CONTINUE", description: "\"CONTINUE\"" },
        peg$c505 = "CONTRIBUTORS",
        peg$c506 = { type: "literal", value: "CONTRIBUTORS", description: "\"CONTRIBUTORS\"" },
        peg$c507 = "CONVERT",
        peg$c508 = { type: "literal", value: "CONVERT", description: "\"CONVERT\"" },
        peg$c509 = "COUNT",
        peg$c510 = { type: "literal", value: "COUNT", description: "\"COUNT\"" },
        peg$c511 = function() { return identifier.determineFunction('COUNT_SYMBOL'); },
        peg$c512 = "CPU",
        peg$c513 = { type: "literal", value: "CPU", description: "\"CPU\"" },
        peg$c514 = "CREATE",
        peg$c515 = { type: "literal", value: "CREATE", description: "\"CREATE\"" },
        peg$c516 = "CROSS",
        peg$c517 = { type: "literal", value: "CROSS", description: "\"CROSS\"" },
        peg$c518 = "CUBE",
        peg$c519 = { type: "literal", value: "CUBE", description: "\"CUBE\"" },
        peg$c520 = "CURDATE",
        peg$c521 = { type: "literal", value: "CURDATE", description: "\"CURDATE\"" },
        peg$c522 = function() { return identifier.determineFunction('CURDATE_SYMBOL'); },
        peg$c523 = "CURRENT",
        peg$c524 = { type: "literal", value: "CURRENT", description: "\"CURRENT\"" },
        peg$c525 = function() { return options.serverVersion >= 50604; },
        peg$c526 = "CURRENT_DATE",
        peg$c527 = { type: "literal", value: "CURRENT_DATE", description: "\"CURRENT_DATE\"" },
        peg$c528 = "CURRENT_TIME",
        peg$c529 = { type: "literal", value: "CURRENT_TIME", description: "\"CURRENT_TIME\"" },
        peg$c530 = function() { return identifier.determineFunction('CURTIME_SYMBOL'); },
        peg$c531 = "CURRENT_TIMESTAMP",
        peg$c532 = { type: "literal", value: "CURRENT_TIMESTAMP", description: "\"CURRENT_TIMESTAMP\"" },
        peg$c533 = function() { return 'NOW_SYMBOL'; },
        peg$c534 = "CURRENT_USER",
        peg$c535 = { type: "literal", value: "CURRENT_USER", description: "\"CURRENT_USER\"" },
        peg$c536 = "CURSOR",
        peg$c537 = { type: "literal", value: "CURSOR", description: "\"CURSOR\"" },
        peg$c538 = "CURSOR_NAME",
        peg$c539 = { type: "literal", value: "CURSOR_NAME", description: "\"CURSOR_NAME\"" },
        peg$c540 = "CURTIME",
        peg$c541 = { type: "literal", value: "CURTIME", description: "\"CURTIME\"" },
        peg$c542 = "DATABASE",
        peg$c543 = { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
        peg$c544 = "DATABASES",
        peg$c545 = { type: "literal", value: "DATABASES", description: "\"DATABASES\"" },
        peg$c546 = "DATAFILE",
        peg$c547 = { type: "literal", value: "DATAFILE", description: "\"DATAFILE\"" },
        peg$c548 = "DATA",
        peg$c549 = { type: "literal", value: "DATA", description: "\"DATA\"" },
        peg$c550 = "DATETIME",
        peg$c551 = { type: "literal", value: "DATETIME", description: "\"DATETIME\"" },
        peg$c552 = "DATE_ADD",
        peg$c553 = { type: "literal", value: "DATE_ADD", description: "\"DATE_ADD\"" },
        peg$c554 = function() { return identifier.determineFunction('DATE_ADD_SYMBOL'); },
        peg$c555 = "DATE_SUB",
        peg$c556 = { type: "literal", value: "DATE_SUB", description: "\"DATE_SUB\"" },
        peg$c557 = function() { return identifier.determineFunction('DATE_SUB_SYMBOL'); },
        peg$c558 = "DATE",
        peg$c559 = { type: "literal", value: "DATE", description: "\"DATE\"" },
        peg$c560 = "DAYOFMONTH",
        peg$c561 = { type: "literal", value: "DAYOFMONTH", description: "\"DAYOFMONTH\"" },
        peg$c562 = function() { return 'DAY_SYMBOL'; },
        peg$c563 = "DAY_HOUR",
        peg$c564 = { type: "literal", value: "DAY_HOUR", description: "\"DAY_HOUR\"" },
        peg$c565 = "DAY_MICROSECOND",
        peg$c566 = { type: "literal", value: "DAY_MICROSECOND", description: "\"DAY_MICROSECOND\"" },
        peg$c567 = "DAY_MINUTE",
        peg$c568 = { type: "literal", value: "DAY_MINUTE", description: "\"DAY_MINUTE\"" },
        peg$c569 = "DAY_SECOND",
        peg$c570 = { type: "literal", value: "DAY_SECOND", description: "\"DAY_SECOND\"" },
        peg$c571 = "DAY",
        peg$c572 = { type: "literal", value: "DAY", description: "\"DAY\"" },
        peg$c573 = "DEALLOCATE",
        peg$c574 = { type: "literal", value: "DEALLOCATE", description: "\"DEALLOCATE\"" },
        peg$c575 = "DEC",
        peg$c576 = { type: "literal", value: "DEC", description: "\"DEC\"" },
        peg$c577 = function() { return 'DECIMAL_SYMBOL'; },
        peg$c578 = "DECIMAL_NUM",
        peg$c579 = { type: "literal", value: "DECIMAL_NUM", description: "\"DECIMAL_NUM\"" },
        peg$c580 = "DECIMAL",
        peg$c581 = { type: "literal", value: "DECIMAL", description: "\"DECIMAL\"" },
        peg$c582 = "DECLARE",
        peg$c583 = { type: "literal", value: "DECLARE", description: "\"DECLARE\"" },
        peg$c584 = "DEFAULT",
        peg$c585 = { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
        peg$c586 = "DEFAULT_AUTH",
        peg$c587 = { type: "literal", value: "DEFAULT_AUTH", description: "\"DEFAULT_AUTH\"" },
        peg$c588 = "DEFINER",
        peg$c589 = { type: "literal", value: "DEFINER", description: "\"DEFINER\"" },
        peg$c590 = "DELAYED",
        peg$c591 = { type: "literal", value: "DELAYED", description: "\"DELAYED\"" },
        peg$c592 = "DELAY_KEY_WRITE",
        peg$c593 = { type: "literal", value: "DELAY_KEY_WRITE", description: "\"DELAY_KEY_WRITE\"" },
        peg$c594 = "DELETE",
        peg$c595 = { type: "literal", value: "DELETE", description: "\"DELETE\"" },
        peg$c596 = "DESC",
        peg$c597 = { type: "literal", value: "DESC", description: "\"DESC\"" },
        peg$c598 = "DESCRIBE",
        peg$c599 = { type: "literal", value: "DESCRIBE", description: "\"DESCRIBE\"" },
        peg$c600 = "DES_KEY_FILE",
        peg$c601 = { type: "literal", value: "DES_KEY_FILE", description: "\"DES_KEY_FILE\"" },
        peg$c602 = "DETERMINISTIC",
        peg$c603 = { type: "literal", value: "DETERMINISTIC", description: "\"DETERMINISTIC\"" },
        peg$c604 = "DIAGNOSTICS",
        peg$c605 = { type: "literal", value: "DIAGNOSTICS", description: "\"DIAGNOSTICS\"" },
        peg$c606 = "DIRECTORY",
        peg$c607 = { type: "literal", value: "DIRECTORY", description: "\"DIRECTORY\"" },
        peg$c608 = "DISABLE",
        peg$c609 = { type: "literal", value: "DISABLE", description: "\"DISABLE\"" },
        peg$c610 = "DISCARD",
        peg$c611 = { type: "literal", value: "DISCARD", description: "\"DISCARD\"" },
        peg$c612 = "DISK",
        peg$c613 = { type: "literal", value: "DISK", description: "\"DISK\"" },
        peg$c614 = "DISTINCT",
        peg$c615 = { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
        peg$c616 = "DISTINCTROW",
        peg$c617 = { type: "literal", value: "DISTINCTROW", description: "\"DISTINCTROW\"" },
        peg$c618 = function() { return 'DISTINCT_SYMBOL'; },
        peg$c619 = "DIV",
        peg$c620 = { type: "literal", value: "DIV", description: "\"DIV\"" },
        peg$c621 = "DOUBLE",
        peg$c622 = { type: "literal", value: "DOUBLE", description: "\"DOUBLE\"" },
        peg$c623 = "DO",
        peg$c624 = { type: "literal", value: "DO", description: "\"DO\"" },
        peg$c625 = "DROP",
        peg$c626 = { type: "literal", value: "DROP", description: "\"DROP\"" },
        peg$c627 = "DUAL",
        peg$c628 = { type: "literal", value: "DUAL", description: "\"DUAL\"" },
        peg$c629 = "DUMPFILE",
        peg$c630 = { type: "literal", value: "DUMPFILE", description: "\"DUMPFILE\"" },
        peg$c631 = "DUPLICATE",
        peg$c632 = { type: "literal", value: "DUPLICATE", description: "\"DUPLICATE\"" },
        peg$c633 = "DYNAMIC",
        peg$c634 = { type: "literal", value: "DYNAMIC", description: "\"DYNAMIC\"" },
        peg$c635 = "EACH",
        peg$c636 = { type: "literal", value: "EACH", description: "\"EACH\"" },
        peg$c637 = "ELSE",
        peg$c638 = { type: "literal", value: "ELSE", description: "\"ELSE\"" },
        peg$c639 = "ELSEIF",
        peg$c640 = { type: "literal", value: "ELSEIF", description: "\"ELSEIF\"" },
        peg$c641 = "ENABLE",
        peg$c642 = { type: "literal", value: "ENABLE", description: "\"ENABLE\"" },
        peg$c643 = "ENCLOSED",
        peg$c644 = { type: "literal", value: "ENCLOSED", description: "\"ENCLOSED\"" },
        peg$c645 = "ENCRYPTION",
        peg$c646 = { type: "literal", value: "ENCRYPTION", description: "\"ENCRYPTION\"" },
        peg$c647 = function() { return options.serverVersion >= 50711; },
        peg$c648 = "END",
        peg$c649 = { type: "literal", value: "END", description: "\"END\"" },
        peg$c650 = "ENDS",
        peg$c651 = { type: "literal", value: "ENDS", description: "\"ENDS\"" },
        peg$c652 = "END_OF_INPUT",
        peg$c653 = { type: "literal", value: "END_OF_INPUT", description: "\"END_OF_INPUT\"" },
        peg$c654 = "ENGINES",
        peg$c655 = { type: "literal", value: "ENGINES", description: "\"ENGINES\"" },
        peg$c656 = "ENGINE",
        peg$c657 = { type: "literal", value: "ENGINE", description: "\"ENGINE\"" },
        peg$c658 = "ENUM",
        peg$c659 = { type: "literal", value: "ENUM", description: "\"ENUM\"" },
        peg$c660 = "ERROR",
        peg$c661 = { type: "literal", value: "ERROR", description: "\"ERROR\"" },
        peg$c662 = "ERRORS",
        peg$c663 = { type: "literal", value: "ERRORS", description: "\"ERRORS\"" },
        peg$c664 = "ESCAPED",
        peg$c665 = { type: "literal", value: "ESCAPED", description: "\"ESCAPED\"" },
        peg$c666 = "ESCAPE",
        peg$c667 = { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
        peg$c668 = "EVENTS",
        peg$c669 = { type: "literal", value: "EVENTS", description: "\"EVENTS\"" },
        peg$c670 = "EVENT",
        peg$c671 = { type: "literal", value: "EVENT", description: "\"EVENT\"" },
        peg$c672 = "EVERY",
        peg$c673 = { type: "literal", value: "EVERY", description: "\"EVERY\"" },
        peg$c674 = "EXCHANGE",
        peg$c675 = { type: "literal", value: "EXCHANGE", description: "\"EXCHANGE\"" },
        peg$c676 = "EXECUTE",
        peg$c677 = { type: "literal", value: "EXECUTE", description: "\"EXECUTE\"" },
        peg$c678 = "EXISTS",
        peg$c679 = { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
        peg$c680 = "EXIT",
        peg$c681 = { type: "literal", value: "EXIT", description: "\"EXIT\"" },
        peg$c682 = "EXPANSION",
        peg$c683 = { type: "literal", value: "EXPANSION", description: "\"EXPANSION\"" },
        peg$c684 = "EXPIRE",
        peg$c685 = { type: "literal", value: "EXPIRE", description: "\"EXPIRE\"" },
        peg$c686 = function() { return options.serverVersion >= 50606; },
        peg$c687 = "EXPLAIN",
        peg$c688 = { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
        peg$c689 = "EXPORT",
        peg$c690 = { type: "literal", value: "EXPORT", description: "\"EXPORT\"" },
        peg$c691 = "EXTENDED",
        peg$c692 = { type: "literal", value: "EXTENDED", description: "\"EXTENDED\"" },
        peg$c693 = "EXTENT_SIZE",
        peg$c694 = { type: "literal", value: "EXTENT_SIZE", description: "\"EXTENT_SIZE\"" },
        peg$c695 = "EXTRACT",
        peg$c696 = { type: "literal", value: "EXTRACT", description: "\"EXTRACT\"" },
        peg$c697 = function() { return identifier.determineFunction('EXTRACT_SYMBOL'); },
        peg$c698 = "FALSE",
        peg$c699 = { type: "literal", value: "FALSE", description: "\"FALSE\"" },
        peg$c700 = "FAST",
        peg$c701 = { type: "literal", value: "FAST", description: "\"FAST\"" },
        peg$c702 = "FAULTS",
        peg$c703 = { type: "literal", value: "FAULTS", description: "\"FAULTS\"" },
        peg$c704 = "FETCH",
        peg$c705 = { type: "literal", value: "FETCH", description: "\"FETCH\"" },
        peg$c706 = "FIELDS",
        peg$c707 = { type: "literal", value: "FIELDS", description: "\"FIELDS\"" },
        peg$c708 = function() { return 'COLUMNS_SYMBOL'; },
        peg$c709 = "FILE",
        peg$c710 = { type: "literal", value: "FILE", description: "\"FILE\"" },
        peg$c711 = "FILE_BLOCK_SIZE",
        peg$c712 = { type: "literal", value: "FILE_BLOCK_SIZE", description: "\"FILE_BLOCK_SIZE\"" },
        peg$c713 = "FILTER",
        peg$c714 = { type: "literal", value: "FILTER", description: "\"FILTER\"" },
        peg$c715 = function() { return options.serverVersion >= 50700; },
        peg$c716 = "FIRST",
        peg$c717 = { type: "literal", value: "FIRST", description: "\"FIRST\"" },
        peg$c718 = "FIXED",
        peg$c719 = { type: "literal", value: "FIXED", description: "\"FIXED\"" },
        peg$c720 = "FLOAT4",
        peg$c721 = { type: "literal", value: "FLOAT4", description: "\"FLOAT4\"" },
        peg$c722 = function() { return 'FLOAT_SYMBOL'; },
        peg$c723 = "FLOAT8",
        peg$c724 = { type: "literal", value: "FLOAT8", description: "\"FLOAT8\"" },
        peg$c725 = function() { return 'DOUBLE_SYMBOL'; },
        peg$c726 = "FLOAT",
        peg$c727 = { type: "literal", value: "FLOAT", description: "\"FLOAT\"" },
        peg$c728 = "FLUSH",
        peg$c729 = { type: "literal", value: "FLUSH", description: "\"FLUSH\"" },
        peg$c730 = "FOLLOWS",
        peg$c731 = { type: "literal", value: "FOLLOWS", description: "\"FOLLOWS\"" },
        peg$c732 = "FORCE",
        peg$c733 = { type: "literal", value: "FORCE", description: "\"FORCE\"" },
        peg$c734 = "FOREIGN",
        peg$c735 = { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
        peg$c736 = "FOR",
        peg$c737 = { type: "literal", value: "FOR", description: "\"FOR\"" },
        peg$c738 = "FORMAT",
        peg$c739 = { type: "literal", value: "FORMAT", description: "\"FORMAT\"" },
        peg$c740 = "FOUND",
        peg$c741 = { type: "literal", value: "FOUND", description: "\"FOUND\"" },
        peg$c742 = "FROM",
        peg$c743 = { type: "literal", value: "FROM", description: "\"FROM\"" },
        peg$c744 = "FULL",
        peg$c745 = { type: "literal", value: "FULL", description: "\"FULL\"" },
        peg$c746 = "FULLTEXT",
        peg$c747 = { type: "literal", value: "FULLTEXT", description: "\"FULLTEXT\"" },
        peg$c748 = "FUNCTION",
        peg$c749 = { type: "literal", value: "FUNCTION", description: "\"FUNCTION\"" },
        peg$c750 = "GET",
        peg$c751 = { type: "literal", value: "GET", description: "\"GET\"" },
        peg$c752 = "GENERAL",
        peg$c753 = { type: "literal", value: "GENERAL", description: "\"GENERAL\"" },
        peg$c754 = "GENERATED",
        peg$c755 = { type: "literal", value: "GENERATED", description: "\"GENERATED\"" },
        peg$c756 = "GROUP_REPLICATION",
        peg$c757 = { type: "literal", value: "GROUP_REPLICATION", description: "\"GROUP_REPLICATION\"" },
        peg$c758 = "GEOMETRYCOLLECTION",
        peg$c759 = { type: "literal", value: "GEOMETRYCOLLECTION", description: "\"GEOMETRYCOLLECTION\"" },
        peg$c760 = "GEOMETRY",
        peg$c761 = { type: "literal", value: "GEOMETRY", description: "\"GEOMETRY\"" },
        peg$c762 = "GET_FORMAT",
        peg$c763 = { type: "literal", value: "GET_FORMAT", description: "\"GET_FORMAT\"" },
        peg$c764 = "GLOBAL",
        peg$c765 = { type: "literal", value: "GLOBAL", description: "\"GLOBAL\"" },
        peg$c766 = "GRANT",
        peg$c767 = { type: "literal", value: "GRANT", description: "\"GRANT\"" },
        peg$c768 = "GRANTS",
        peg$c769 = { type: "literal", value: "GRANTS", description: "\"GRANTS\"" },
        peg$c770 = "GROUP",
        peg$c771 = { type: "literal", value: "GROUP", description: "\"GROUP\"" },
        peg$c772 = "GROUP_CONCAT",
        peg$c773 = { type: "literal", value: "GROUP_CONCAT", description: "\"GROUP_CONCAT\"" },
        peg$c774 = function() { return identifier.determineFunction('GROUP_CONCAT_SYMBOL'); },
        peg$c775 = "HANDLER",
        peg$c776 = { type: "literal", value: "HANDLER", description: "\"HANDLER\"" },
        peg$c777 = "HASH",
        peg$c778 = { type: "literal", value: "HASH", description: "\"HASH\"" },
        peg$c779 = "HAVING",
        peg$c780 = { type: "literal", value: "HAVING", description: "\"HAVING\"" },
        peg$c781 = "HELP",
        peg$c782 = { type: "literal", value: "HELP", description: "\"HELP\"" },
        peg$c783 = "HIGH_PRIORITY",
        peg$c784 = { type: "literal", value: "HIGH_PRIORITY", description: "\"HIGH_PRIORITY\"" },
        peg$c785 = "HOST",
        peg$c786 = { type: "literal", value: "HOST", description: "\"HOST\"" },
        peg$c787 = "HOSTS",
        peg$c788 = { type: "literal", value: "HOSTS", description: "\"HOSTS\"" },
        peg$c789 = "HOUR_MICROSECOND",
        peg$c790 = { type: "literal", value: "HOUR_MICROSECOND", description: "\"HOUR_MICROSECOND\"" },
        peg$c791 = "HOUR_MINUTE",
        peg$c792 = { type: "literal", value: "HOUR_MINUTE", description: "\"HOUR_MINUTE\"" },
        peg$c793 = "HOUR_SECOND",
        peg$c794 = { type: "literal", value: "HOUR_SECOND", description: "\"HOUR_SECOND\"" },
        peg$c795 = "HOUR",
        peg$c796 = { type: "literal", value: "HOUR", description: "\"HOUR\"" },
        peg$c797 = "IDENTIFIED",
        peg$c798 = { type: "literal", value: "IDENTIFIED", description: "\"IDENTIFIED\"" },
        peg$c799 = "IF",
        peg$c800 = { type: "literal", value: "IF", description: "\"IF\"" },
        peg$c801 = "IGNORE",
        peg$c802 = { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
        peg$c803 = "IGNORE_SERVER_IDS",
        peg$c804 = { type: "literal", value: "IGNORE_SERVER_IDS", description: "\"IGNORE_SERVER_IDS\"" },
        peg$c805 = "IMPORT",
        peg$c806 = { type: "literal", value: "IMPORT", description: "\"IMPORT\"" },
        peg$c807 = "INDEXES",
        peg$c808 = { type: "literal", value: "INDEXES", description: "\"INDEXES\"" },
        peg$c809 = "INDEX",
        peg$c810 = { type: "literal", value: "INDEX", description: "\"INDEX\"" },
        peg$c811 = "INFILE",
        peg$c812 = { type: "literal", value: "INFILE", description: "\"INFILE\"" },
        peg$c813 = "INITIAL_SIZE",
        peg$c814 = { type: "literal", value: "INITIAL_SIZE", description: "\"INITIAL_SIZE\"" },
        peg$c815 = "INNER",
        peg$c816 = { type: "literal", value: "INNER", description: "\"INNER\"" },
        peg$c817 = "INOUT",
        peg$c818 = { type: "literal", value: "INOUT", description: "\"INOUT\"" },
        peg$c819 = "INSENSITIVE",
        peg$c820 = { type: "literal", value: "INSENSITIVE", description: "\"INSENSITIVE\"" },
        peg$c821 = "INSERT",
        peg$c822 = { type: "literal", value: "INSERT", description: "\"INSERT\"" },
        peg$c823 = "INSERT_METHOD",
        peg$c824 = { type: "literal", value: "INSERT_METHOD", description: "\"INSERT_METHOD\"" },
        peg$c825 = "INSTANCE",
        peg$c826 = { type: "literal", value: "INSTANCE", description: "\"INSTANCE\"" },
        peg$c827 = function() { return options.serverVersion >= 50713; },
        peg$c828 = "INSTALL",
        peg$c829 = { type: "literal", value: "INSTALL", description: "\"INSTALL\"" },
        peg$c830 = "INTEGER",
        peg$c831 = { type: "literal", value: "INTEGER", description: "\"INTEGER\"" },
        peg$c832 = function() { return 'INT_SYMBOL'; },
        peg$c833 = "INTERVAL",
        peg$c834 = { type: "literal", value: "INTERVAL", description: "\"INTERVAL\"" },
        peg$c835 = "INTO",
        peg$c836 = { type: "literal", value: "INTO", description: "\"INTO\"" },
        peg$c837 = "INT",
        peg$c838 = { type: "literal", value: "INT", description: "\"INT\"" },
        peg$c839 = "INVOKER",
        peg$c840 = { type: "literal", value: "INVOKER", description: "\"INVOKER\"" },
        peg$c841 = "IN",
        peg$c842 = { type: "literal", value: "IN", description: "\"IN\"" },
        peg$c843 = "IO_AFTER_GTIDS",
        peg$c844 = { type: "literal", value: "IO_AFTER_GTIDS", description: "\"IO_AFTER_GTIDS\"" },
        peg$c845 = "IO_BEFORE_GTIDS",
        peg$c846 = { type: "literal", value: "IO_BEFORE_GTIDS", description: "\"IO_BEFORE_GTIDS\"" },
        peg$c847 = "IO_THREAD",
        peg$c848 = { type: "literal", value: "IO_THREAD", description: "\"IO_THREAD\"" },
        peg$c849 = function() { return 'RELAY_THREAD_SYMBOL'; },
        peg$c850 = "IO",
        peg$c851 = { type: "literal", value: "IO", description: "\"IO\"" },
        peg$c852 = "IPC",
        peg$c853 = { type: "literal", value: "IPC", description: "\"IPC\"" },
        peg$c854 = "IS",
        peg$c855 = { type: "literal", value: "IS", description: "\"IS\"" },
        peg$c856 = "ISOLATION",
        peg$c857 = { type: "literal", value: "ISOLATION", description: "\"ISOLATION\"" },
        peg$c858 = "ISSUER",
        peg$c859 = { type: "literal", value: "ISSUER", description: "\"ISSUER\"" },
        peg$c860 = "ITERATE",
        peg$c861 = { type: "literal", value: "ITERATE", description: "\"ITERATE\"" },
        peg$c862 = "JOIN",
        peg$c863 = { type: "literal", value: "JOIN", description: "\"JOIN\"" },
        peg$c864 = "JSON",
        peg$c865 = { type: "literal", value: "JSON", description: "\"JSON\"" },
        peg$c866 = function() { return options.serverVersion >= 50708; },
        peg$c867 = "KEYS",
        peg$c868 = { type: "literal", value: "KEYS", description: "\"KEYS\"" },
        peg$c869 = "KEY_BLOCK_SIZE",
        peg$c870 = { type: "literal", value: "KEY_BLOCK_SIZE", description: "\"KEY_BLOCK_SIZE\"" },
        peg$c871 = "KEY",
        peg$c872 = { type: "literal", value: "KEY", description: "\"KEY\"" },
        peg$c873 = "KILL",
        peg$c874 = { type: "literal", value: "KILL", description: "\"KILL\"" },
        peg$c875 = "LANGUAGE",
        peg$c876 = { type: "literal", value: "LANGUAGE", description: "\"LANGUAGE\"" },
        peg$c877 = "LAST",
        peg$c878 = { type: "literal", value: "LAST", description: "\"LAST\"" },
        peg$c879 = "LEADING",
        peg$c880 = { type: "literal", value: "LEADING", description: "\"LEADING\"" },
        peg$c881 = "LEAVES",
        peg$c882 = { type: "literal", value: "LEAVES", description: "\"LEAVES\"" },
        peg$c883 = "LEAVE",
        peg$c884 = { type: "literal", value: "LEAVE", description: "\"LEAVE\"" },
        peg$c885 = "LEFT",
        peg$c886 = { type: "literal", value: "LEFT", description: "\"LEFT\"" },
        peg$c887 = "LESS",
        peg$c888 = { type: "literal", value: "LESS", description: "\"LESS\"" },
        peg$c889 = "LEVEL",
        peg$c890 = { type: "literal", value: "LEVEL", description: "\"LEVEL\"" },
        peg$c891 = "LIKE",
        peg$c892 = { type: "literal", value: "LIKE", description: "\"LIKE\"" },
        peg$c893 = "LIMIT",
        peg$c894 = { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
        peg$c895 = "LINEAR",
        peg$c896 = { type: "literal", value: "LINEAR", description: "\"LINEAR\"" },
        peg$c897 = "LINES",
        peg$c898 = { type: "literal", value: "LINES", description: "\"LINES\"" },
        peg$c899 = "LINESTRING",
        peg$c900 = { type: "literal", value: "LINESTRING", description: "\"LINESTRING\"" },
        peg$c901 = "LIST",
        peg$c902 = { type: "literal", value: "LIST", description: "\"LIST\"" },
        peg$c903 = "LOAD",
        peg$c904 = { type: "literal", value: "LOAD", description: "\"LOAD\"" },
        peg$c905 = "LOCALTIME",
        peg$c906 = { type: "literal", value: "LOCALTIME", description: "\"LOCALTIME\"" },
        peg$c907 = "LOCALTIMESTAMP",
        peg$c908 = { type: "literal", value: "LOCALTIMESTAMP", description: "\"LOCALTIMESTAMP\"" },
        peg$c909 = "LOCAL",
        peg$c910 = { type: "literal", value: "LOCAL", description: "\"LOCAL\"" },
        peg$c911 = "LOCATOR",
        peg$c912 = { type: "literal", value: "LOCATOR", description: "\"LOCATOR\"" },
        peg$c913 = "LOCKS",
        peg$c914 = { type: "literal", value: "LOCKS", description: "\"LOCKS\"" },
        peg$c915 = "LOCK",
        peg$c916 = { type: "literal", value: "LOCK", description: "\"LOCK\"" },
        peg$c917 = "LOGFILE",
        peg$c918 = { type: "literal", value: "LOGFILE", description: "\"LOGFILE\"" },
        peg$c919 = "LOGS",
        peg$c920 = { type: "literal", value: "LOGS", description: "\"LOGS\"" },
        peg$c921 = "LONGBLOB",
        peg$c922 = { type: "literal", value: "LONGBLOB", description: "\"LONGBLOB\"" },
        peg$c923 = "LONGTEXT",
        peg$c924 = { type: "literal", value: "LONGTEXT", description: "\"LONGTEXT\"" },
        peg$c925 = "LONG_NUM",
        peg$c926 = { type: "literal", value: "LONG_NUM", description: "\"LONG_NUM\"" },
        peg$c927 = "LONG",
        peg$c928 = { type: "literal", value: "LONG", description: "\"LONG\"" },
        peg$c929 = "LOOP",
        peg$c930 = { type: "literal", value: "LOOP", description: "\"LOOP\"" },
        peg$c931 = "LOW_PRIORITY",
        peg$c932 = { type: "literal", value: "LOW_PRIORITY", description: "\"LOW_PRIORITY\"" },
        peg$c933 = "MASTER_AUTO_POSITION",
        peg$c934 = { type: "literal", value: "MASTER_AUTO_POSITION", description: "\"MASTER_AUTO_POSITION\"" },
        peg$c935 = function() { return options.serverVersion >= 50605; },
        peg$c936 = "MASTER_BIND",
        peg$c937 = { type: "literal", value: "MASTER_BIND", description: "\"MASTER_BIND\"" },
        peg$c938 = function() { return options.serverVersion >= 50602; },
        peg$c939 = "MASTER_CONNECT_RETRY",
        peg$c940 = { type: "literal", value: "MASTER_CONNECT_RETRY", description: "\"MASTER_CONNECT_RETRY\"" },
        peg$c941 = "MASTER_DELAY",
        peg$c942 = { type: "literal", value: "MASTER_DELAY", description: "\"MASTER_DELAY\"" },
        peg$c943 = "MASTER_HOST",
        peg$c944 = { type: "literal", value: "MASTER_HOST", description: "\"MASTER_HOST\"" },
        peg$c945 = "MASTER_LOG_FILE",
        peg$c946 = { type: "literal", value: "MASTER_LOG_FILE", description: "\"MASTER_LOG_FILE\"" },
        peg$c947 = "MASTER_LOG_POS",
        peg$c948 = { type: "literal", value: "MASTER_LOG_POS", description: "\"MASTER_LOG_POS\"" },
        peg$c949 = "MASTER_PASSWORD",
        peg$c950 = { type: "literal", value: "MASTER_PASSWORD", description: "\"MASTER_PASSWORD\"" },
        peg$c951 = "MASTER_PORT",
        peg$c952 = { type: "literal", value: "MASTER_PORT", description: "\"MASTER_PORT\"" },
        peg$c953 = "MASTER_RETRY_COUNT",
        peg$c954 = { type: "literal", value: "MASTER_RETRY_COUNT", description: "\"MASTER_RETRY_COUNT\"" },
        peg$c955 = function() { return options.serverVersion >= 50601; },
        peg$c956 = "MASTER_SERVER_ID",
        peg$c957 = { type: "literal", value: "MASTER_SERVER_ID", description: "\"MASTER_SERVER_ID\"" },
        peg$c958 = "MASTER_SSL_CAPATH",
        peg$c959 = { type: "literal", value: "MASTER_SSL_CAPATH", description: "\"MASTER_SSL_CAPATH\"" },
        peg$c960 = "MASTER_SSL_CA",
        peg$c961 = { type: "literal", value: "MASTER_SSL_CA", description: "\"MASTER_SSL_CA\"" },
        peg$c962 = "MASTER_SSL_CERT",
        peg$c963 = { type: "literal", value: "MASTER_SSL_CERT", description: "\"MASTER_SSL_CERT\"" },
        peg$c964 = "MASTER_SSL_CIPHER",
        peg$c965 = { type: "literal", value: "MASTER_SSL_CIPHER", description: "\"MASTER_SSL_CIPHER\"" },
        peg$c966 = "MASTER_SSL_CRL",
        peg$c967 = { type: "literal", value: "MASTER_SSL_CRL", description: "\"MASTER_SSL_CRL\"" },
        peg$c968 = function() { return options.serverVersion >= 50603; },
        peg$c969 = "MASTER_SSL_CRLPATH",
        peg$c970 = { type: "literal", value: "MASTER_SSL_CRLPATH", description: "\"MASTER_SSL_CRLPATH\"" },
        peg$c971 = "MASTER_SSL_KEY",
        peg$c972 = { type: "literal", value: "MASTER_SSL_KEY", description: "\"MASTER_SSL_KEY\"" },
        peg$c973 = "MASTER_SSL",
        peg$c974 = { type: "literal", value: "MASTER_SSL", description: "\"MASTER_SSL\"" },
        peg$c975 = "MASTER_SSL_VERIFY_SERVER_CERT",
        peg$c976 = { type: "literal", value: "MASTER_SSL_VERIFY_SERVER_CERT", description: "\"MASTER_SSL_VERIFY_SERVER_CERT\"" },
        peg$c977 = "MASTER",
        peg$c978 = { type: "literal", value: "MASTER", description: "\"MASTER\"" },
        peg$c979 = "MASTER_TLS_VERSION",
        peg$c980 = { type: "literal", value: "MASTER_TLS_VERSION", description: "\"MASTER_TLS_VERSION\"" },
        peg$c981 = "MASTER_USER",
        peg$c982 = { type: "literal", value: "MASTER_USER", description: "\"MASTER_USER\"" },
        peg$c983 = "MASTER_HEARTBEAT_PERIOD",
        peg$c984 = { type: "literal", value: "MASTER_HEARTBEAT_PERIOD", description: "\"MASTER_HEARTBEAT_PERIOD\"" },
        peg$c985 = "MATCH",
        peg$c986 = { type: "literal", value: "MATCH", description: "\"MATCH\"" },
        peg$c987 = "MAX_CONNECTIONS_PER_HOUR",
        peg$c988 = { type: "literal", value: "MAX_CONNECTIONS_PER_HOUR", description: "\"MAX_CONNECTIONS_PER_HOUR\"" },
        peg$c989 = "MAX_QUERIES_PER_HOUR",
        peg$c990 = { type: "literal", value: "MAX_QUERIES_PER_HOUR", description: "\"MAX_QUERIES_PER_HOUR\"" },
        peg$c991 = "MAX_ROWS",
        peg$c992 = { type: "literal", value: "MAX_ROWS", description: "\"MAX_ROWS\"" },
        peg$c993 = "MAX_SIZE",
        peg$c994 = { type: "literal", value: "MAX_SIZE", description: "\"MAX_SIZE\"" },
        peg$c995 = "MAX_STATEMENT_TIME",
        peg$c996 = { type: "literal", value: "MAX_STATEMENT_TIME", description: "\"MAX_STATEMENT_TIME\"" },
        peg$c997 = function() { return 50704 < options.serverVersion && options.serverVersion < 50708; },
        peg$c998 = "MAX",
        peg$c999 = { type: "literal", value: "MAX", description: "\"MAX\"" },
        peg$c1000 = function() { return identifier.determineFunction('MAX_SYMBOL'); },
        peg$c1001 = "MAX_UPDATES_PER_HOUR",
        peg$c1002 = { type: "literal", value: "MAX_UPDATES_PER_HOUR", description: "\"MAX_UPDATES_PER_HOUR\"" },
        peg$c1003 = "MAX_USER_CONNECTIONS",
        peg$c1004 = { type: "literal", value: "MAX_USER_CONNECTIONS", description: "\"MAX_USER_CONNECTIONS\"" },
        peg$c1005 = "MAXVALUE",
        peg$c1006 = { type: "literal", value: "MAXVALUE", description: "\"MAXVALUE\"" },
        peg$c1007 = "MEDIUMBLOB",
        peg$c1008 = { type: "literal", value: "MEDIUMBLOB", description: "\"MEDIUMBLOB\"" },
        peg$c1009 = "MEDIUMINT",
        peg$c1010 = { type: "literal", value: "MEDIUMINT", description: "\"MEDIUMINT\"" },
        peg$c1011 = "MEDIUMTEXT",
        peg$c1012 = { type: "literal", value: "MEDIUMTEXT", description: "\"MEDIUMTEXT\"" },
        peg$c1013 = "MEDIUM",
        peg$c1014 = { type: "literal", value: "MEDIUM", description: "\"MEDIUM\"" },
        peg$c1015 = "MEMORY",
        peg$c1016 = { type: "literal", value: "MEMORY", description: "\"MEMORY\"" },
        peg$c1017 = "MERGE",
        peg$c1018 = { type: "literal", value: "MERGE", description: "\"MERGE\"" },
        peg$c1019 = "MESSAGE_TEXT",
        peg$c1020 = { type: "literal", value: "MESSAGE_TEXT", description: "\"MESSAGE_TEXT\"" },
        peg$c1021 = "MICROSECOND",
        peg$c1022 = { type: "literal", value: "MICROSECOND", description: "\"MICROSECOND\"" },
        peg$c1023 = "MID",
        peg$c1024 = { type: "literal", value: "MID", description: "\"MID\"" },
        peg$c1025 = function() { return identifier.determineFunction('SUBSTRING_SYMBOL'); },
        peg$c1026 = "MIDDLEINT",
        peg$c1027 = { type: "literal", value: "MIDDLEINT", description: "\"MIDDLEINT\"" },
        peg$c1028 = function() { return 'MEDIUMINT_SYMBOL'; },
        peg$c1029 = "MIGRATE",
        peg$c1030 = { type: "literal", value: "MIGRATE", description: "\"MIGRATE\"" },
        peg$c1031 = "MINUTE_MICROSECOND",
        peg$c1032 = { type: "literal", value: "MINUTE_MICROSECOND", description: "\"MINUTE_MICROSECOND\"" },
        peg$c1033 = "MINUTE_SECOND",
        peg$c1034 = { type: "literal", value: "MINUTE_SECOND", description: "\"MINUTE_SECOND\"" },
        peg$c1035 = "MINUTE",
        peg$c1036 = { type: "literal", value: "MINUTE", description: "\"MINUTE\"" },
        peg$c1037 = "MIN_ROWS",
        peg$c1038 = { type: "literal", value: "MIN_ROWS", description: "\"MIN_ROWS\"" },
        peg$c1039 = "MIN",
        peg$c1040 = { type: "literal", value: "MIN", description: "\"MIN\"" },
        peg$c1041 = function() { return identifier.determineFunction('MIN_SYMBOL'); },
        peg$c1042 = "MODE",
        peg$c1043 = { type: "literal", value: "MODE", description: "\"MODE\"" },
        peg$c1044 = "MODIFIES",
        peg$c1045 = { type: "literal", value: "MODIFIES", description: "\"MODIFIES\"" },
        peg$c1046 = "MODIFY",
        peg$c1047 = { type: "literal", value: "MODIFY", description: "\"MODIFY\"" },
        peg$c1048 = "MOD",
        peg$c1049 = { type: "literal", value: "MOD", description: "\"MOD\"" },
        peg$c1050 = "MONTH",
        peg$c1051 = { type: "literal", value: "MONTH", description: "\"MONTH\"" },
        peg$c1052 = "MULTILINESTRING",
        peg$c1053 = { type: "literal", value: "MULTILINESTRING", description: "\"MULTILINESTRING\"" },
        peg$c1054 = "MULTIPOINT",
        peg$c1055 = { type: "literal", value: "MULTIPOINT", description: "\"MULTIPOINT\"" },
        peg$c1056 = "MULTIPOLYGON",
        peg$c1057 = { type: "literal", value: "MULTIPOLYGON", description: "\"MULTIPOLYGON\"" },
        peg$c1058 = "MUTEX",
        peg$c1059 = { type: "literal", value: "MUTEX", description: "\"MUTEX\"" },
        peg$c1060 = "MYSQL_ERRNO",
        peg$c1061 = { type: "literal", value: "MYSQL_ERRNO", description: "\"MYSQL_ERRNO\"" },
        peg$c1062 = "NAMES",
        peg$c1063 = { type: "literal", value: "NAMES", description: "\"NAMES\"" },
        peg$c1064 = "NAME",
        peg$c1065 = { type: "literal", value: "NAME", description: "\"NAME\"" },
        peg$c1066 = "NATIONAL",
        peg$c1067 = { type: "literal", value: "NATIONAL", description: "\"NATIONAL\"" },
        peg$c1068 = "NATURAL",
        peg$c1069 = { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
        peg$c1070 = "NCHAR_STRING",
        peg$c1071 = { type: "literal", value: "NCHAR_STRING", description: "\"NCHAR_STRING\"" },
        peg$c1072 = "NCHAR",
        peg$c1073 = { type: "literal", value: "NCHAR", description: "\"NCHAR\"" },
        peg$c1074 = "NDB",
        peg$c1075 = { type: "literal", value: "NDB", description: "\"NDB\"" },
        peg$c1076 = function() { return 'NDBCLUSTER_SYMBOL'; },
        peg$c1077 = "NDBCLUSTER",
        peg$c1078 = { type: "literal", value: "NDBCLUSTER", description: "\"NDBCLUSTER\"" },
        peg$c1079 = "NEG",
        peg$c1080 = { type: "literal", value: "NEG", description: "\"NEG\"" },
        peg$c1081 = "NEVER",
        peg$c1082 = { type: "literal", value: "NEVER", description: "\"NEVER\"" },
        peg$c1083 = function() { return options.serverVersion >= 50704; },
        peg$c1084 = "NEW",
        peg$c1085 = { type: "literal", value: "NEW", description: "\"NEW\"" },
        peg$c1086 = "NEXT",
        peg$c1087 = { type: "literal", value: "NEXT", description: "\"NEXT\"" },
        peg$c1088 = "NODEGROUP",
        peg$c1089 = { type: "literal", value: "NODEGROUP", description: "\"NODEGROUP\"" },
        peg$c1090 = "NONE",
        peg$c1091 = { type: "literal", value: "NONE", description: "\"NONE\"" },
        peg$c1092 = "NONBLOCKING",
        peg$c1093 = { type: "literal", value: "NONBLOCKING", description: "\"NONBLOCKING\"" },
        peg$c1094 = function() { return 50700 < options.serverVersion && options.serverVersion < 50706; },
        peg$c1095 = "NOT",
        peg$c1096 = { type: "literal", value: "NOT", description: "\"NOT\"" },
        peg$c1097 = function() {
              return options.isSqlModeActive('HighNotPrecedence')
                ? 'NOT2_SYMBOL'
                : 'NOT_SYMBOL';
            },
        peg$c1098 = "NOW",
        peg$c1099 = { type: "literal", value: "NOW", description: "\"NOW\"" },
        peg$c1100 = function() { return identifier.determineFunction('NOW_SYMBOL'); },
        peg$c1101 = "NO",
        peg$c1102 = { type: "literal", value: "NO", description: "\"NO\"" },
        peg$c1103 = "NO_WAIT",
        peg$c1104 = { type: "literal", value: "NO_WAIT", description: "\"NO_WAIT\"" },
        peg$c1105 = "NO_WRITE_TO_BINLOG",
        peg$c1106 = { type: "literal", value: "NO_WRITE_TO_BINLOG", description: "\"NO_WRITE_TO_BINLOG\"" },
        peg$c1107 = "NULL",
        peg$c1108 = { type: "literal", value: "NULL", description: "\"NULL\"" },
        peg$c1109 = "NUMBER",
        peg$c1110 = { type: "literal", value: "NUMBER", description: "\"NUMBER\"" },
        peg$c1111 = "NUMERIC",
        peg$c1112 = { type: "literal", value: "NUMERIC", description: "\"NUMERIC\"" },
        peg$c1113 = "NVARCHAR",
        peg$c1114 = { type: "literal", value: "NVARCHAR", description: "\"NVARCHAR\"" },
        peg$c1115 = "OFFLINE",
        peg$c1116 = { type: "literal", value: "OFFLINE", description: "\"OFFLINE\"" },
        peg$c1117 = "OFFSET",
        peg$c1118 = { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
        peg$c1119 = "OLD_PASSWORD",
        peg$c1120 = { type: "literal", value: "OLD_PASSWORD", description: "\"OLD_PASSWORD\"" },
        peg$c1121 = function() { return options.serverVersion < 50706; },
        peg$c1122 = "ON",
        peg$c1123 = { type: "literal", value: "ON", description: "\"ON\"" },
        peg$c1124 = "ONE",
        peg$c1125 = { type: "literal", value: "ONE", description: "\"ONE\"" },
        peg$c1126 = "ONLINE",
        peg$c1127 = { type: "literal", value: "ONLINE", description: "\"ONLINE\"" },
        peg$c1128 = "ONLY",
        peg$c1129 = { type: "literal", value: "ONLY", description: "\"ONLY\"" },
        peg$c1130 = "OPEN",
        peg$c1131 = { type: "literal", value: "OPEN", description: "\"OPEN\"" },
        peg$c1132 = "OPTIMIZE",
        peg$c1133 = { type: "literal", value: "OPTIMIZE", description: "\"OPTIMIZE\"" },
        peg$c1134 = "OPTIMIZER_COSTS",
        peg$c1135 = { type: "literal", value: "OPTIMIZER_COSTS", description: "\"OPTIMIZER_COSTS\"" },
        peg$c1136 = "OPTIONS",
        peg$c1137 = { type: "literal", value: "OPTIONS", description: "\"OPTIONS\"" },
        peg$c1138 = "OPTION",
        peg$c1139 = { type: "literal", value: "OPTION", description: "\"OPTION\"" },
        peg$c1140 = "OPTIONALLY",
        peg$c1141 = { type: "literal", value: "OPTIONALLY", description: "\"OPTIONALLY\"" },
        peg$c1142 = "ORDER",
        peg$c1143 = { type: "literal", value: "ORDER", description: "\"ORDER\"" },
        peg$c1144 = "OR",
        peg$c1145 = { type: "literal", value: "OR", description: "\"OR\"" },
        peg$c1146 = "OUTER",
        peg$c1147 = { type: "literal", value: "OUTER", description: "\"OUTER\"" },
        peg$c1148 = "OUTFILE",
        peg$c1149 = { type: "literal", value: "OUTFILE", description: "\"OUTFILE\"" },
        peg$c1150 = "OUT",
        peg$c1151 = { type: "literal", value: "OUT", description: "\"OUT\"" },
        peg$c1152 = "OWNER",
        peg$c1153 = { type: "literal", value: "OWNER", description: "\"OWNER\"" },
        peg$c1154 = "PACK_KEYS",
        peg$c1155 = { type: "literal", value: "PACK_KEYS", description: "\"PACK_KEYS\"" },
        peg$c1156 = "PAGE",
        peg$c1157 = { type: "literal", value: "PAGE", description: "\"PAGE\"" },
        peg$c1158 = "PARSER",
        peg$c1159 = { type: "literal", value: "PARSER", description: "\"PARSER\"" },
        peg$c1160 = "PARTIAL",
        peg$c1161 = { type: "literal", value: "PARTIAL", description: "\"PARTIAL\"" },
        peg$c1162 = "PARTITIONING",
        peg$c1163 = { type: "literal", value: "PARTITIONING", description: "\"PARTITIONING\"" },
        peg$c1164 = "PARTITIONS",
        peg$c1165 = { type: "literal", value: "PARTITIONS", description: "\"PARTITIONS\"" },
        peg$c1166 = "PARTITION",
        peg$c1167 = { type: "literal", value: "PARTITION", description: "\"PARTITION\"" },
        peg$c1168 = "PASSWORD",
        peg$c1169 = { type: "literal", value: "PASSWORD", description: "\"PASSWORD\"" },
        peg$c1170 = "PHASE",
        peg$c1171 = { type: "literal", value: "PHASE", description: "\"PHASE\"" },
        peg$c1172 = "PLUGINS",
        peg$c1173 = { type: "literal", value: "PLUGINS", description: "\"PLUGINS\"" },
        peg$c1174 = "PLUGIN_DIR",
        peg$c1175 = { type: "literal", value: "PLUGIN_DIR", description: "\"PLUGIN_DIR\"" },
        peg$c1176 = "PLUGIN",
        peg$c1177 = { type: "literal", value: "PLUGIN", description: "\"PLUGIN\"" },
        peg$c1178 = "POINT",
        peg$c1179 = { type: "literal", value: "POINT", description: "\"POINT\"" },
        peg$c1180 = "POLYGON",
        peg$c1181 = { type: "literal", value: "POLYGON", description: "\"POLYGON\"" },
        peg$c1182 = "PORT",
        peg$c1183 = { type: "literal", value: "PORT", description: "\"PORT\"" },
        peg$c1184 = "POSITION",
        peg$c1185 = { type: "literal", value: "POSITION", description: "\"POSITION\"" },
        peg$c1186 = function() { return identifier.determineFunction('POSITION_SYMBOL'); },
        peg$c1187 = "PRECEDES",
        peg$c1188 = { type: "literal", value: "PRECEDES", description: "\"PRECEDES\"" },
        peg$c1189 = "PRECISION",
        peg$c1190 = { type: "literal", value: "PRECISION", description: "\"PRECISION\"" },
        peg$c1191 = "PREPARE",
        peg$c1192 = { type: "literal", value: "PREPARE", description: "\"PREPARE\"" },
        peg$c1193 = "PRESERVE",
        peg$c1194 = { type: "literal", value: "PRESERVE", description: "\"PRESERVE\"" },
        peg$c1195 = "PREV",
        peg$c1196 = { type: "literal", value: "PREV", description: "\"PREV\"" },
        peg$c1197 = "PRIMARY",
        peg$c1198 = { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
        peg$c1199 = "PRIVILEGES",
        peg$c1200 = { type: "literal", value: "PRIVILEGES", description: "\"PRIVILEGES\"" },
        peg$c1201 = "PROCEDURE",
        peg$c1202 = { type: "literal", value: "PROCEDURE", description: "\"PROCEDURE\"" },
        peg$c1203 = "PROCESS",
        peg$c1204 = { type: "literal", value: "PROCESS", description: "\"PROCESS\"" },
        peg$c1205 = "PROCESSLIST",
        peg$c1206 = { type: "literal", value: "PROCESSLIST", description: "\"PROCESSLIST\"" },
        peg$c1207 = "PROFILE",
        peg$c1208 = { type: "literal", value: "PROFILE", description: "\"PROFILE\"" },
        peg$c1209 = "PROFILES",
        peg$c1210 = { type: "literal", value: "PROFILES", description: "\"PROFILES\"" },
        peg$c1211 = "PROXY",
        peg$c1212 = { type: "literal", value: "PROXY", description: "\"PROXY\"" },
        peg$c1213 = "PURGE",
        peg$c1214 = { type: "literal", value: "PURGE", description: "\"PURGE\"" },
        peg$c1215 = "QUARTER",
        peg$c1216 = { type: "literal", value: "QUARTER", description: "\"QUARTER\"" },
        peg$c1217 = "QUERY",
        peg$c1218 = { type: "literal", value: "QUERY", description: "\"QUERY\"" },
        peg$c1219 = "QUICK",
        peg$c1220 = { type: "literal", value: "QUICK", description: "\"QUICK\"" },
        peg$c1221 = "RANGE",
        peg$c1222 = { type: "literal", value: "RANGE", description: "\"RANGE\"" },
        peg$c1223 = "READS",
        peg$c1224 = { type: "literal", value: "READS", description: "\"READS\"" },
        peg$c1225 = "READ_ONLY",
        peg$c1226 = { type: "literal", value: "READ_ONLY", description: "\"READ_ONLY\"" },
        peg$c1227 = "READ",
        peg$c1228 = { type: "literal", value: "READ", description: "\"READ\"" },
        peg$c1229 = "READ_WRITE",
        peg$c1230 = { type: "literal", value: "READ_WRITE", description: "\"READ_WRITE\"" },
        peg$c1231 = "REAL",
        peg$c1232 = { type: "literal", value: "REAL", description: "\"REAL\"" },
        peg$c1233 = "REBUILD",
        peg$c1234 = { type: "literal", value: "REBUILD", description: "\"REBUILD\"" },
        peg$c1235 = "RECOVER",
        peg$c1236 = { type: "literal", value: "RECOVER", description: "\"RECOVER\"" },
        peg$c1237 = "REDOFILE",
        peg$c1238 = { type: "literal", value: "REDOFILE", description: "\"REDOFILE\"" },
        peg$c1239 = "REDO_BUFFER_SIZE",
        peg$c1240 = { type: "literal", value: "REDO_BUFFER_SIZE", description: "\"REDO_BUFFER_SIZE\"" },
        peg$c1241 = "REDUNDANT",
        peg$c1242 = { type: "literal", value: "REDUNDANT", description: "\"REDUNDANT\"" },
        peg$c1243 = "REFERENCES",
        peg$c1244 = { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
        peg$c1245 = "REGEXP",
        peg$c1246 = { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
        peg$c1247 = "RELAY",
        peg$c1248 = { type: "literal", value: "RELAY", description: "\"RELAY\"" },
        peg$c1249 = "RELAYLOG",
        peg$c1250 = { type: "literal", value: "RELAYLOG", description: "\"RELAYLOG\"" },
        peg$c1251 = "RELAY_LOG_FILE",
        peg$c1252 = { type: "literal", value: "RELAY_LOG_FILE", description: "\"RELAY_LOG_FILE\"" },
        peg$c1253 = "RELAY_LOG_POS",
        peg$c1254 = { type: "literal", value: "RELAY_LOG_POS", description: "\"RELAY_LOG_POS\"" },
        peg$c1255 = "RELAY_THREAD",
        peg$c1256 = { type: "literal", value: "RELAY_THREAD", description: "\"RELAY_THREAD\"" },
        peg$c1257 = "RELEASE",
        peg$c1258 = { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
        peg$c1259 = "RELOAD",
        peg$c1260 = { type: "literal", value: "RELOAD", description: "\"RELOAD\"" },
        peg$c1261 = "REMOVE",
        peg$c1262 = { type: "literal", value: "REMOVE", description: "\"REMOVE\"" },
        peg$c1263 = "RENAME",
        peg$c1264 = { type: "literal", value: "RENAME", description: "\"RENAME\"" },
        peg$c1265 = "REORGANIZE",
        peg$c1266 = { type: "literal", value: "REORGANIZE", description: "\"REORGANIZE\"" },
        peg$c1267 = "REPAIR",
        peg$c1268 = { type: "literal", value: "REPAIR", description: "\"REPAIR\"" },
        peg$c1269 = "REPEATABLE",
        peg$c1270 = { type: "literal", value: "REPEATABLE", description: "\"REPEATABLE\"" },
        peg$c1271 = "REPEAT",
        peg$c1272 = { type: "literal", value: "REPEAT", description: "\"REPEAT\"" },
        peg$c1273 = function() { return identifier.determineFunction('REPEAT_SYMBOL'); },
        peg$c1274 = "REPLACE",
        peg$c1275 = { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
        peg$c1276 = function() { return identifier.determineFunction('REPLACE_SYMBOL'); },
        peg$c1277 = "REPLICATION",
        peg$c1278 = { type: "literal", value: "REPLICATION", description: "\"REPLICATION\"" },
        peg$c1279 = "REPLICATE_DO_DB",
        peg$c1280 = { type: "literal", value: "REPLICATE_DO_DB", description: "\"REPLICATE_DO_DB\"" },
        peg$c1281 = "REPLICATE_IGNORE_DB",
        peg$c1282 = { type: "literal", value: "REPLICATE_IGNORE_DB", description: "\"REPLICATE_IGNORE_DB\"" },
        peg$c1283 = "REPLICATE_DO_TABLE",
        peg$c1284 = { type: "literal", value: "REPLICATE_DO_TABLE", description: "\"REPLICATE_DO_TABLE\"" },
        peg$c1285 = "REPLICATE_IGNORE_TABLE",
        peg$c1286 = { type: "literal", value: "REPLICATE_IGNORE_TABLE", description: "\"REPLICATE_IGNORE_TABLE\"" },
        peg$c1287 = "REPLICATE_WILD_DO_TABLE",
        peg$c1288 = { type: "literal", value: "REPLICATE_WILD_DO_TABLE", description: "\"REPLICATE_WILD_DO_TABLE\"" },
        peg$c1289 = "REPLICATE_WILD_IGNORE_TABLE",
        peg$c1290 = { type: "literal", value: "REPLICATE_WILD_IGNORE_TABLE", description: "\"REPLICATE_WILD_IGNORE_TABLE\"" },
        peg$c1291 = "REPLICATE_REWRITE_DB",
        peg$c1292 = { type: "literal", value: "REPLICATE_REWRITE_DB", description: "\"REPLICATE_REWRITE_DB\"" },
        peg$c1293 = "REQUIRE",
        peg$c1294 = { type: "literal", value: "REQUIRE", description: "\"REQUIRE\"" },
        peg$c1295 = "RESET",
        peg$c1296 = { type: "literal", value: "RESET", description: "\"RESET\"" },
        peg$c1297 = "RESIGNAL",
        peg$c1298 = { type: "literal", value: "RESIGNAL", description: "\"RESIGNAL\"" },
        peg$c1299 = "RESTORE",
        peg$c1300 = { type: "literal", value: "RESTORE", description: "\"RESTORE\"" },
        peg$c1301 = "RESTRICT",
        peg$c1302 = { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
        peg$c1303 = "RESUME",
        peg$c1304 = { type: "literal", value: "RESUME", description: "\"RESUME\"" },
        peg$c1305 = "RETURNED_SQLSTATE",
        peg$c1306 = { type: "literal", value: "RETURNED_SQLSTATE", description: "\"RETURNED_SQLSTATE\"" },
        peg$c1307 = "RETURNS",
        peg$c1308 = { type: "literal", value: "RETURNS", description: "\"RETURNS\"" },
        peg$c1309 = "RETURN",
        peg$c1310 = { type: "literal", value: "RETURN", description: "\"RETURN\"" },
        peg$c1311 = "REVERSE",
        peg$c1312 = { type: "literal", value: "REVERSE", description: "\"REVERSE\"" },
        peg$c1313 = "REVOKE",
        peg$c1314 = { type: "literal", value: "REVOKE", description: "\"REVOKE\"" },
        peg$c1315 = "RIGHT",
        peg$c1316 = { type: "literal", value: "RIGHT", description: "\"RIGHT\"" },
        peg$c1317 = "RLIKE",
        peg$c1318 = { type: "literal", value: "RLIKE", description: "\"RLIKE\"" },
        peg$c1319 = function() { return 'REGEXP_SYMBOL'; },
        peg$c1320 = "ROLLBACK",
        peg$c1321 = { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
        peg$c1322 = "ROLLUP",
        peg$c1323 = { type: "literal", value: "ROLLUP", description: "\"ROLLUP\"" },
        peg$c1324 = "ROTATE",
        peg$c1325 = { type: "literal", value: "ROTATE", description: "\"ROTATE\"" },
        peg$c1326 = "ROUTINE",
        peg$c1327 = { type: "literal", value: "ROUTINE", description: "\"ROUTINE\"" },
        peg$c1328 = "ROWS",
        peg$c1329 = { type: "literal", value: "ROWS", description: "\"ROWS\"" },
        peg$c1330 = "ROW_COUNT",
        peg$c1331 = { type: "literal", value: "ROW_COUNT", description: "\"ROW_COUNT\"" },
        peg$c1332 = "ROW_FORMAT",
        peg$c1333 = { type: "literal", value: "ROW_FORMAT", description: "\"ROW_FORMAT\"" },
        peg$c1334 = "ROW",
        peg$c1335 = { type: "literal", value: "ROW", description: "\"ROW\"" },
        peg$c1336 = "RTREE",
        peg$c1337 = { type: "literal", value: "RTREE", description: "\"RTREE\"" },
        peg$c1338 = "SAVEPOINT",
        peg$c1339 = { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
        peg$c1340 = "SCHEDULE",
        peg$c1341 = { type: "literal", value: "SCHEDULE", description: "\"SCHEDULE\"" },
        peg$c1342 = "SCHEMA",
        peg$c1343 = { type: "literal", value: "SCHEMA", description: "\"SCHEMA\"" },
        peg$c1344 = function() { return 'DATABASE_SYMBOL'; },
        peg$c1345 = "SCHEMA_NAME",
        peg$c1346 = { type: "literal", value: "SCHEMA_NAME", description: "\"SCHEMA_NAME\"" },
        peg$c1347 = "SCHEMAS",
        peg$c1348 = { type: "literal", value: "SCHEMAS", description: "\"SCHEMAS\"" },
        peg$c1349 = function() { return 'DATABASES_SYMBOL'; },
        peg$c1350 = "SECOND_MICROSECOND",
        peg$c1351 = { type: "literal", value: "SECOND_MICROSECOND", description: "\"SECOND_MICROSECOND\"" },
        peg$c1352 = "SECOND",
        peg$c1353 = { type: "literal", value: "SECOND", description: "\"SECOND\"" },
        peg$c1354 = "SECURITY",
        peg$c1355 = { type: "literal", value: "SECURITY", description: "\"SECURITY\"" },
        peg$c1356 = "SELECT",
        peg$c1357 = { type: "literal", value: "SELECT", description: "\"SELECT\"" },
        peg$c1358 = "SENSITIVE",
        peg$c1359 = { type: "literal", value: "SENSITIVE", description: "\"SENSITIVE\"" },
        peg$c1360 = "SEPARATOR",
        peg$c1361 = { type: "literal", value: "SEPARATOR", description: "\"SEPARATOR\"" },
        peg$c1362 = "SERIALIZABLE",
        peg$c1363 = { type: "literal", value: "SERIALIZABLE", description: "\"SERIALIZABLE\"" },
        peg$c1364 = "SERIAL",
        peg$c1365 = { type: "literal", value: "SERIAL", description: "\"SERIAL\"" },
        peg$c1366 = "SESSION",
        peg$c1367 = { type: "literal", value: "SESSION", description: "\"SESSION\"" },
        peg$c1368 = "SERVER",
        peg$c1369 = { type: "literal", value: "SERVER", description: "\"SERVER\"" },
        peg$c1370 = "SERVER_OPTIONS",
        peg$c1371 = { type: "literal", value: "SERVER_OPTIONS", description: "\"SERVER_OPTIONS\"" },
        peg$c1372 = "SESSION_USER",
        peg$c1373 = { type: "literal", value: "SESSION_USER", description: "\"SESSION_USER\"" },
        peg$c1374 = function() { return identifier.determineFunction('USER_SYMBOL'); },
        peg$c1375 = "SET",
        peg$c1376 = { type: "literal", value: "SET", description: "\"SET\"" },
        peg$c1377 = "SET_VAR",
        peg$c1378 = { type: "literal", value: "SET_VAR", description: "\"SET_VAR\"" },
        peg$c1379 = "SHARE",
        peg$c1380 = { type: "literal", value: "SHARE", description: "\"SHARE\"" },
        peg$c1381 = "SHOW",
        peg$c1382 = { type: "literal", value: "SHOW", description: "\"SHOW\"" },
        peg$c1383 = "SHUTDOWN",
        peg$c1384 = { type: "literal", value: "SHUTDOWN", description: "\"SHUTDOWN\"" },
        peg$c1385 = "SIGNAL",
        peg$c1386 = { type: "literal", value: "SIGNAL", description: "\"SIGNAL\"" },
        peg$c1387 = "SIGNED",
        peg$c1388 = { type: "literal", value: "SIGNED", description: "\"SIGNED\"" },
        peg$c1389 = "SIMPLE",
        peg$c1390 = { type: "literal", value: "SIMPLE", description: "\"SIMPLE\"" },
        peg$c1391 = "SLAVE",
        peg$c1392 = { type: "literal", value: "SLAVE", description: "\"SLAVE\"" },
        peg$c1393 = "SLOW",
        peg$c1394 = { type: "literal", value: "SLOW", description: "\"SLOW\"" },
        peg$c1395 = "SMALLINT",
        peg$c1396 = { type: "literal", value: "SMALLINT", description: "\"SMALLINT\"" },
        peg$c1397 = "SNAPSHOT",
        peg$c1398 = { type: "literal", value: "SNAPSHOT", description: "\"SNAPSHOT\"" },
        peg$c1399 = "SOME",
        peg$c1400 = { type: "literal", value: "SOME", description: "\"SOME\"" },
        peg$c1401 = function() { return 'ANY_SYMBOL'; },
        peg$c1402 = "SOCKET",
        peg$c1403 = { type: "literal", value: "SOCKET", description: "\"SOCKET\"" },
        peg$c1404 = "SONAME",
        peg$c1405 = { type: "literal", value: "SONAME", description: "\"SONAME\"" },
        peg$c1406 = "SOUNDS",
        peg$c1407 = { type: "literal", value: "SOUNDS", description: "\"SOUNDS\"" },
        peg$c1408 = "SOURCE",
        peg$c1409 = { type: "literal", value: "SOURCE", description: "\"SOURCE\"" },
        peg$c1410 = "SPATIAL",
        peg$c1411 = { type: "literal", value: "SPATIAL", description: "\"SPATIAL\"" },
        peg$c1412 = "SPECIFIC",
        peg$c1413 = { type: "literal", value: "SPECIFIC", description: "\"SPECIFIC\"" },
        peg$c1414 = "SQLEXCEPTION",
        peg$c1415 = { type: "literal", value: "SQLEXCEPTION", description: "\"SQLEXCEPTION\"" },
        peg$c1416 = "SQLSTATE",
        peg$c1417 = { type: "literal", value: "SQLSTATE", description: "\"SQLSTATE\"" },
        peg$c1418 = "SQLWARNING",
        peg$c1419 = { type: "literal", value: "SQLWARNING", description: "\"SQLWARNING\"" },
        peg$c1420 = "SQL_AFTER_GTIDS",
        peg$c1421 = { type: "literal", value: "SQL_AFTER_GTIDS", description: "\"SQL_AFTER_GTIDS\"" },
        peg$c1422 = "SQL_AFTER_MTS_GAPS",
        peg$c1423 = { type: "literal", value: "SQL_AFTER_MTS_GAPS", description: "\"SQL_AFTER_MTS_GAPS\"" },
        peg$c1424 = "SQL_BEFORE_GTIDS",
        peg$c1425 = { type: "literal", value: "SQL_BEFORE_GTIDS", description: "\"SQL_BEFORE_GTIDS\"" },
        peg$c1426 = "SQL_BIG_RESULT",
        peg$c1427 = { type: "literal", value: "SQL_BIG_RESULT", description: "\"SQL_BIG_RESULT\"" },
        peg$c1428 = "SQL_BUFFER_RESULT",
        peg$c1429 = { type: "literal", value: "SQL_BUFFER_RESULT", description: "\"SQL_BUFFER_RESULT\"" },
        peg$c1430 = "SQL_CACHE",
        peg$c1431 = { type: "literal", value: "SQL_CACHE", description: "\"SQL_CACHE\"" },
        peg$c1432 = "SQL_CALC_FOUND_ROWS",
        peg$c1433 = { type: "literal", value: "SQL_CALC_FOUND_ROWS", description: "\"SQL_CALC_FOUND_ROWS\"" },
        peg$c1434 = "SQL_NO_CACHE",
        peg$c1435 = { type: "literal", value: "SQL_NO_CACHE", description: "\"SQL_NO_CACHE\"" },
        peg$c1436 = "SQL_SMALL_RESULT",
        peg$c1437 = { type: "literal", value: "SQL_SMALL_RESULT", description: "\"SQL_SMALL_RESULT\"" },
        peg$c1438 = "SQL",
        peg$c1439 = { type: "literal", value: "SQL", description: "\"SQL\"" },
        peg$c1440 = "SQL_THREAD",
        peg$c1441 = { type: "literal", value: "SQL_THREAD", description: "\"SQL_THREAD\"" },
        peg$c1442 = "SSL",
        peg$c1443 = { type: "literal", value: "SSL", description: "\"SSL\"" },
        peg$c1444 = "STACKED",
        peg$c1445 = { type: "literal", value: "STACKED", description: "\"STACKED\"" },
        peg$c1446 = "STARTING",
        peg$c1447 = { type: "literal", value: "STARTING", description: "\"STARTING\"" },
        peg$c1448 = "STARTS",
        peg$c1449 = { type: "literal", value: "STARTS", description: "\"STARTS\"" },
        peg$c1450 = "START",
        peg$c1451 = { type: "literal", value: "START", description: "\"START\"" },
        peg$c1452 = "STATS_AUTO_RECALC",
        peg$c1453 = { type: "literal", value: "STATS_AUTO_RECALC", description: "\"STATS_AUTO_RECALC\"" },
        peg$c1454 = "STATS_PERSISTENT",
        peg$c1455 = { type: "literal", value: "STATS_PERSISTENT", description: "\"STATS_PERSISTENT\"" },
        peg$c1456 = "STATS_SAMPLE_PAGES",
        peg$c1457 = { type: "literal", value: "STATS_SAMPLE_PAGES", description: "\"STATS_SAMPLE_PAGES\"" },
        peg$c1458 = "STATUS",
        peg$c1459 = { type: "literal", value: "STATUS", description: "\"STATUS\"" },
        peg$c1460 = "STDDEV_SAMP",
        peg$c1461 = { type: "literal", value: "STDDEV_SAMP", description: "\"STDDEV_SAMP\"" },
        peg$c1462 = function() { return identifier.determineFunction('STDDEV_SAMP_SYMBOL'); },
        peg$c1463 = "STDDEV",
        peg$c1464 = { type: "literal", value: "STDDEV", description: "\"STDDEV\"" },
        peg$c1465 = function() { return identifier.determineFunction('STD_SYMBOL'); },
        peg$c1466 = "STDDEV_POP",
        peg$c1467 = { type: "literal", value: "STDDEV_POP", description: "\"STDDEV_POP\"" },
        peg$c1468 = "STD",
        peg$c1469 = { type: "literal", value: "STD", description: "\"STD\"" },
        peg$c1470 = "STOP",
        peg$c1471 = { type: "literal", value: "STOP", description: "\"STOP\"" },
        peg$c1472 = "STORAGE",
        peg$c1473 = { type: "literal", value: "STORAGE", description: "\"STORAGE\"" },
        peg$c1474 = "STORED",
        peg$c1475 = { type: "literal", value: "STORED", description: "\"STORED\"" },
        peg$c1476 = "STRAIGHT_JOIN",
        peg$c1477 = { type: "literal", value: "STRAIGHT_JOIN", description: "\"STRAIGHT_JOIN\"" },
        peg$c1478 = "STRING",
        peg$c1479 = { type: "literal", value: "STRING", description: "\"STRING\"" },
        peg$c1480 = "SUBCLASS_ORIGIN",
        peg$c1481 = { type: "literal", value: "SUBCLASS_ORIGIN", description: "\"SUBCLASS_ORIGIN\"" },
        peg$c1482 = "SUBDATE",
        peg$c1483 = { type: "literal", value: "SUBDATE", description: "\"SUBDATE\"" },
        peg$c1484 = function() { return identifier.determineFunction('SUBDATE_SYMBOL'); },
        peg$c1485 = "SUBJECT",
        peg$c1486 = { type: "literal", value: "SUBJECT", description: "\"SUBJECT\"" },
        peg$c1487 = "SUBPARTITIONS",
        peg$c1488 = { type: "literal", value: "SUBPARTITIONS", description: "\"SUBPARTITIONS\"" },
        peg$c1489 = "SUBPARTITION",
        peg$c1490 = { type: "literal", value: "SUBPARTITION", description: "\"SUBPARTITION\"" },
        peg$c1491 = "SUBSTR",
        peg$c1492 = { type: "literal", value: "SUBSTR", description: "\"SUBSTR\"" },
        peg$c1493 = "SUBSTRING",
        peg$c1494 = { type: "literal", value: "SUBSTRING", description: "\"SUBSTRING\"" },
        peg$c1495 = "SUM",
        peg$c1496 = { type: "literal", value: "SUM", description: "\"SUM\"" },
        peg$c1497 = function() { return identifier.determineFunction('SUM_SYMBOL'); },
        peg$c1498 = "SUPER",
        peg$c1499 = { type: "literal", value: "SUPER", description: "\"SUPER\"" },
        peg$c1500 = "SUSPEND",
        peg$c1501 = { type: "literal", value: "SUSPEND", description: "\"SUSPEND\"" },
        peg$c1502 = "SWAPS",
        peg$c1503 = { type: "literal", value: "SWAPS", description: "\"SWAPS\"" },
        peg$c1504 = "SWITCHES",
        peg$c1505 = { type: "literal", value: "SWITCHES", description: "\"SWITCHES\"" },
        peg$c1506 = "SYSDATE",
        peg$c1507 = { type: "literal", value: "SYSDATE", description: "\"SYSDATE\"" },
        peg$c1508 = function() { return identifier.determineFunction('SYSDATE_SYMBOL'); },
        peg$c1509 = "SYSTEM_USER",
        peg$c1510 = { type: "literal", value: "SYSTEM_USER", description: "\"SYSTEM_USER\"" },
        peg$c1511 = "TABLES",
        peg$c1512 = { type: "literal", value: "TABLES", description: "\"TABLES\"" },
        peg$c1513 = "TABLESPACE",
        peg$c1514 = { type: "literal", value: "TABLESPACE", description: "\"TABLESPACE\"" },
        peg$c1515 = "TABLE_REF_PRIORITY",
        peg$c1516 = { type: "literal", value: "TABLE_REF_PRIORITY", description: "\"TABLE_REF_PRIORITY\"" },
        peg$c1517 = "TABLE",
        peg$c1518 = { type: "literal", value: "TABLE", description: "\"TABLE\"" },
        peg$c1519 = "TABLE_CHECKSUM",
        peg$c1520 = { type: "literal", value: "TABLE_CHECKSUM", description: "\"TABLE_CHECKSUM\"" },
        peg$c1521 = "TABLE_NAME",
        peg$c1522 = { type: "literal", value: "TABLE_NAME", description: "\"TABLE_NAME\"" },
        peg$c1523 = "TEMPORARY",
        peg$c1524 = { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
        peg$c1525 = "TEMPTABLE",
        peg$c1526 = { type: "literal", value: "TEMPTABLE", description: "\"TEMPTABLE\"" },
        peg$c1527 = "TERMINATED",
        peg$c1528 = { type: "literal", value: "TERMINATED", description: "\"TERMINATED\"" },
        peg$c1529 = "TEXT",
        peg$c1530 = { type: "literal", value: "TEXT", description: "\"TEXT\"" },
        peg$c1531 = "THAN",
        peg$c1532 = { type: "literal", value: "THAN", description: "\"THAN\"" },
        peg$c1533 = "THEN",
        peg$c1534 = { type: "literal", value: "THEN", description: "\"THEN\"" },
        peg$c1535 = "TIMESTAMP",
        peg$c1536 = { type: "literal", value: "TIMESTAMP", description: "\"TIMESTAMP\"" },
        peg$c1537 = "TIMESTAMP_ADD",
        peg$c1538 = { type: "literal", value: "TIMESTAMP_ADD", description: "\"TIMESTAMP_ADD\"" },
        peg$c1539 = "TIMESTAMP_DIFF",
        peg$c1540 = { type: "literal", value: "TIMESTAMP_DIFF", description: "\"TIMESTAMP_DIFF\"" },
        peg$c1541 = "TIME",
        peg$c1542 = { type: "literal", value: "TIME", description: "\"TIME\"" },
        peg$c1543 = "TINYBLOB",
        peg$c1544 = { type: "literal", value: "TINYBLOB", description: "\"TINYBLOB\"" },
        peg$c1545 = "TINYINT",
        peg$c1546 = { type: "literal", value: "TINYINT", description: "\"TINYINT\"" },
        peg$c1547 = "TINYTEXT",
        peg$c1548 = { type: "literal", value: "TINYTEXT", description: "\"TINYTEXT\"" },
        peg$c1549 = "TO",
        peg$c1550 = { type: "literal", value: "TO", description: "\"TO\"" },
        peg$c1551 = "TRAILING",
        peg$c1552 = { type: "literal", value: "TRAILING", description: "\"TRAILING\"" },
        peg$c1553 = "TRANSACTION",
        peg$c1554 = { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
        peg$c1555 = "TRIGGERS",
        peg$c1556 = { type: "literal", value: "TRIGGERS", description: "\"TRIGGERS\"" },
        peg$c1557 = "TRIGGER",
        peg$c1558 = { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
        peg$c1559 = "TRIM",
        peg$c1560 = { type: "literal", value: "TRIM", description: "\"TRIM\"" },
        peg$c1561 = function() { return identifier.determineFunction('TRIM_SYMBOL'); },
        peg$c1562 = "TRUE",
        peg$c1563 = { type: "literal", value: "TRUE", description: "\"TRUE\"" },
        peg$c1564 = "TRUNCATE",
        peg$c1565 = { type: "literal", value: "TRUNCATE", description: "\"TRUNCATE\"" },
        peg$c1566 = "TYPES",
        peg$c1567 = { type: "literal", value: "TYPES", description: "\"TYPES\"" },
        peg$c1568 = "TYPE",
        peg$c1569 = { type: "literal", value: "TYPE", description: "\"TYPE\"" },
        peg$c1570 = "UDF_RETURNS",
        peg$c1571 = { type: "literal", value: "UDF_RETURNS", description: "\"UDF_RETURNS\"" },
        peg$c1572 = "UNCOMMITTED",
        peg$c1573 = { type: "literal", value: "UNCOMMITTED", description: "\"UNCOMMITTED\"" },
        peg$c1574 = "UNDEFINED",
        peg$c1575 = { type: "literal", value: "UNDEFINED", description: "\"UNDEFINED\"" },
        peg$c1576 = "UNDOFILE",
        peg$c1577 = { type: "literal", value: "UNDOFILE", description: "\"UNDOFILE\"" },
        peg$c1578 = "UNDO_BUFFER_SIZE",
        peg$c1579 = { type: "literal", value: "UNDO_BUFFER_SIZE", description: "\"UNDO_BUFFER_SIZE\"" },
        peg$c1580 = "UNDO",
        peg$c1581 = { type: "literal", value: "UNDO", description: "\"UNDO\"" },
        peg$c1582 = "UNICODE",
        peg$c1583 = { type: "literal", value: "UNICODE", description: "\"UNICODE\"" },
        peg$c1584 = "UNINSTALL",
        peg$c1585 = { type: "literal", value: "UNINSTALL", description: "\"UNINSTALL\"" },
        peg$c1586 = "UNION",
        peg$c1587 = { type: "literal", value: "UNION", description: "\"UNION\"" },
        peg$c1588 = "UNIQUE",
        peg$c1589 = { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
        peg$c1590 = "UNKNOWN",
        peg$c1591 = { type: "literal", value: "UNKNOWN", description: "\"UNKNOWN\"" },
        peg$c1592 = "UNLOCK",
        peg$c1593 = { type: "literal", value: "UNLOCK", description: "\"UNLOCK\"" },
        peg$c1594 = "UNSIGNED",
        peg$c1595 = { type: "literal", value: "UNSIGNED", description: "\"UNSIGNED\"" },
        peg$c1596 = "UNTIL",
        peg$c1597 = { type: "literal", value: "UNTIL", description: "\"UNTIL\"" },
        peg$c1598 = "UPDATE",
        peg$c1599 = { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
        peg$c1600 = "UPGRADE",
        peg$c1601 = { type: "literal", value: "UPGRADE", description: "\"UPGRADE\"" },
        peg$c1602 = "USAGE",
        peg$c1603 = { type: "literal", value: "USAGE", description: "\"USAGE\"" },
        peg$c1604 = "USER_RESOURCES",
        peg$c1605 = { type: "literal", value: "USER_RESOURCES", description: "\"USER_RESOURCES\"" },
        peg$c1606 = "USER",
        peg$c1607 = { type: "literal", value: "USER", description: "\"USER\"" },
        peg$c1608 = "USE_FRM",
        peg$c1609 = { type: "literal", value: "USE_FRM", description: "\"USE_FRM\"" },
        peg$c1610 = "USE",
        peg$c1611 = { type: "literal", value: "USE", description: "\"USE\"" },
        peg$c1612 = "USING",
        peg$c1613 = { type: "literal", value: "USING", description: "\"USING\"" },
        peg$c1614 = "UTC_DATE",
        peg$c1615 = { type: "literal", value: "UTC_DATE", description: "\"UTC_DATE\"" },
        peg$c1616 = "UTC_TIMESTAMP",
        peg$c1617 = { type: "literal", value: "UTC_TIMESTAMP", description: "\"UTC_TIMESTAMP\"" },
        peg$c1618 = "UTC_TIME",
        peg$c1619 = { type: "literal", value: "UTC_TIME", description: "\"UTC_TIME\"" },
        peg$c1620 = "VALIDATION",
        peg$c1621 = { type: "literal", value: "VALIDATION", description: "\"VALIDATION\"" },
        peg$c1622 = "VALUES",
        peg$c1623 = { type: "literal", value: "VALUES", description: "\"VALUES\"" },
        peg$c1624 = "VALUE",
        peg$c1625 = { type: "literal", value: "VALUE", description: "\"VALUE\"" },
        peg$c1626 = "VARBINARY",
        peg$c1627 = { type: "literal", value: "VARBINARY", description: "\"VARBINARY\"" },
        peg$c1628 = "VARCHAR",
        peg$c1629 = { type: "literal", value: "VARCHAR", description: "\"VARCHAR\"" },
        peg$c1630 = "VARCHARACTER",
        peg$c1631 = { type: "literal", value: "VARCHARACTER", description: "\"VARCHARACTER\"" },
        peg$c1632 = function() { return 'VARCHAR_SYMBOL'; },
        peg$c1633 = "VARIABLES",
        peg$c1634 = { type: "literal", value: "VARIABLES", description: "\"VARIABLES\"" },
        peg$c1635 = "VARIANCE",
        peg$c1636 = { type: "literal", value: "VARIANCE", description: "\"VARIANCE\"" },
        peg$c1637 = function() { return identifier.determineFunction('VARIANCE_SYMBOL'); },
        peg$c1638 = "VARYING",
        peg$c1639 = { type: "literal", value: "VARYING", description: "\"VARYING\"" },
        peg$c1640 = "VAR_POP",
        peg$c1641 = { type: "literal", value: "VAR_POP", description: "\"VAR_POP\"" },
        peg$c1642 = "VAR_SAMP",
        peg$c1643 = { type: "literal", value: "VAR_SAMP", description: "\"VAR_SAMP\"" },
        peg$c1644 = function() { return identifier.determineFunction('VAR_SAMP_SYMBOL'); },
        peg$c1645 = "VIEW",
        peg$c1646 = { type: "literal", value: "VIEW", description: "\"VIEW\"" },
        peg$c1647 = "VIRTUAL",
        peg$c1648 = { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
        peg$c1649 = "WAIT",
        peg$c1650 = { type: "literal", value: "WAIT", description: "\"WAIT\"" },
        peg$c1651 = "WARNINGS",
        peg$c1652 = { type: "literal", value: "WARNINGS", description: "\"WARNINGS\"" },
        peg$c1653 = "WEEK",
        peg$c1654 = { type: "literal", value: "WEEK", description: "\"WEEK\"" },
        peg$c1655 = "WEIGHT_STRING",
        peg$c1656 = { type: "literal", value: "WEIGHT_STRING", description: "\"WEIGHT_STRING\"" },
        peg$c1657 = "WHEN",
        peg$c1658 = { type: "literal", value: "WHEN", description: "\"WHEN\"" },
        peg$c1659 = "WHERE",
        peg$c1660 = { type: "literal", value: "WHERE", description: "\"WHERE\"" },
        peg$c1661 = "WHILE",
        peg$c1662 = { type: "literal", value: "WHILE", description: "\"WHILE\"" },
        peg$c1663 = "WITH",
        peg$c1664 = { type: "literal", value: "WITH", description: "\"WITH\"" },
        peg$c1665 = "WITHOUT",
        peg$c1666 = { type: "literal", value: "WITHOUT", description: "\"WITHOUT\"" },
        peg$c1667 = "WORK",
        peg$c1668 = { type: "literal", value: "WORK", description: "\"WORK\"" },
        peg$c1669 = "WRAPPER",
        peg$c1670 = { type: "literal", value: "WRAPPER", description: "\"WRAPPER\"" },
        peg$c1671 = "WRITE",
        peg$c1672 = { type: "literal", value: "WRITE", description: "\"WRITE\"" },
        peg$c1673 = "X509",
        peg$c1674 = { type: "literal", value: "X509", description: "\"X509\"" },
        peg$c1675 = "XA",
        peg$c1676 = { type: "literal", value: "XA", description: "\"XA\"" },
        peg$c1677 = "XID",
        peg$c1678 = { type: "literal", value: "XID", description: "\"XID\"" },
        peg$c1679 = "XML",
        peg$c1680 = { type: "literal", value: "XML", description: "\"XML\"" },
        peg$c1681 = "XOR",
        peg$c1682 = { type: "literal", value: "XOR", description: "\"XOR\"" },
        peg$c1683 = "YEAR_MONTH",
        peg$c1684 = { type: "literal", value: "YEAR_MONTH", description: "\"YEAR_MONTH\"" },
        peg$c1685 = "YEAR",
        peg$c1686 = { type: "literal", value: "YEAR", description: "\"YEAR\"" },
        peg$c1687 = "ZEROFILL",
        peg$c1688 = { type: "literal", value: "ZEROFILL", description: "\"ZEROFILL\"" },
        peg$c1689 = "PERSIST",
        peg$c1690 = { type: "literal", value: "PERSIST", description: "\"PERSIST\"" },
        peg$c1691 = function() { return options.serverVersion >= 80000; },
        peg$c1692 = "ROLE",
        peg$c1693 = { type: "literal", value: "ROLE", description: "\"ROLE\"" },
        peg$c1694 = "ADMIN",
        peg$c1695 = { type: "literal", value: "ADMIN", description: "\"ADMIN\"" },
        peg$c1696 = "INVISIBLE",
        peg$c1697 = { type: "literal", value: "INVISIBLE", description: "\"INVISIBLE\"" },
        peg$c1698 = "VISIBLE",
        peg$c1699 = { type: "literal", value: "VISIBLE", description: "\"VISIBLE\"" },
        peg$c1700 = "EXCEPT",
        peg$c1701 = { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
        peg$c1702 = "COMPONENT",
        peg$c1703 = { type: "literal", value: "COMPONENT", description: "\"COMPONENT\"" },
        peg$c1704 = "RECURSIVE",
        peg$c1705 = { type: "literal", value: "RECURSIVE", description: "\"RECURSIVE\"" },
        peg$c1706 = "JSON_OBJECTAGG",
        peg$c1707 = { type: "literal", value: "JSON_OBJECTAGG", description: "\"JSON_OBJECTAGG\"" },
        peg$c1708 = "JSON_ARRAYAGG",
        peg$c1709 = { type: "literal", value: "JSON_ARRAYAGG", description: "\"JSON_ARRAYAGG\"" },
        peg$c1710 = "OF",
        peg$c1711 = { type: "literal", value: "OF", description: "\"OF\"" },
        peg$c1712 = "SKIP",
        peg$c1713 = { type: "literal", value: "SKIP", description: "\"SKIP\"" },
        peg$c1714 = "LOCKED",
        peg$c1715 = { type: "literal", value: "LOCKED", description: "\"LOCKED\"" },
        peg$c1716 = "NOWAIT",
        peg$c1717 = { type: "literal", value: "NOWAIT", description: "\"NOWAIT\"" },
        peg$c1718 = "GROUPING",
        peg$c1719 = { type: "literal", value: "GROUPING", description: "\"GROUPING\"" },
        peg$c1720 = "PERSIST_ONLY",
        peg$c1721 = { type: "literal", value: "PERSIST_ONLY", description: "\"PERSIST_ONLY\"" },
        peg$c1722 = "HISTOGRAM",
        peg$c1723 = { type: "literal", value: "HISTOGRAM", description: "\"HISTOGRAM\"" },
        peg$c1724 = "BUCKETS",
        peg$c1725 = { type: "literal", value: "BUCKETS", description: "\"BUCKETS\"" },
        peg$c1726 = "REMOTE",
        peg$c1727 = { type: "literal", value: "REMOTE", description: "\"REMOTE\"" },
        peg$c1728 = function() { return options.serverVersion >= 80003 && options.serverVersion < 80014; },
        peg$c1729 = "CLONE",
        peg$c1730 = { type: "literal", value: "CLONE", description: "\"CLONE\"" },
        peg$c1731 = "CUME_DIST",
        peg$c1732 = { type: "literal", value: "CUME_DIST", description: "\"CUME_DIST\"" },
        peg$c1733 = "DENSE_RANK",
        peg$c1734 = { type: "literal", value: "DENSE_RANK", description: "\"DENSE_RANK\"" },
        peg$c1735 = "EXCLUDE",
        peg$c1736 = { type: "literal", value: "EXCLUDE", description: "\"EXCLUDE\"" },
        peg$c1737 = "FIRST_VALUE",
        peg$c1738 = { type: "literal", value: "FIRST_VALUE", description: "\"FIRST_VALUE\"" },
        peg$c1739 = "FOLLOWING",
        peg$c1740 = { type: "literal", value: "FOLLOWING", description: "\"FOLLOWING\"" },
        peg$c1741 = "GROUPS",
        peg$c1742 = { type: "literal", value: "GROUPS", description: "\"GROUPS\"" },
        peg$c1743 = "LAG",
        peg$c1744 = { type: "literal", value: "LAG", description: "\"LAG\"" },
        peg$c1745 = "LAST_VALUE",
        peg$c1746 = { type: "literal", value: "LAST_VALUE", description: "\"LAST_VALUE\"" },
        peg$c1747 = "LEAD",
        peg$c1748 = { type: "literal", value: "LEAD", description: "\"LEAD\"" },
        peg$c1749 = "NTH_VALUE",
        peg$c1750 = { type: "literal", value: "NTH_VALUE", description: "\"NTH_VALUE\"" },
        peg$c1751 = "NTILE",
        peg$c1752 = { type: "literal", value: "NTILE", description: "\"NTILE\"" },
        peg$c1753 = "NULLS",
        peg$c1754 = { type: "literal", value: "NULLS", description: "\"NULLS\"" },
        peg$c1755 = "OTHERS",
        peg$c1756 = { type: "literal", value: "OTHERS", description: "\"OTHERS\"" },
        peg$c1757 = "OVER",
        peg$c1758 = { type: "literal", value: "OVER", description: "\"OVER\"" },
        peg$c1759 = "PERCENT_RANK",
        peg$c1760 = { type: "literal", value: "PERCENT_RANK", description: "\"PERCENT_RANK\"" },
        peg$c1761 = "PRECEDING",
        peg$c1762 = { type: "literal", value: "PRECEDING", description: "\"PRECEDING\"" },
        peg$c1763 = "RANK",
        peg$c1764 = { type: "literal", value: "RANK", description: "\"RANK\"" },
        peg$c1765 = "RESPECT",
        peg$c1766 = { type: "literal", value: "RESPECT", description: "\"RESPECT\"" },
        peg$c1767 = "ROW_NUMBER",
        peg$c1768 = { type: "literal", value: "ROW_NUMBER", description: "\"ROW_NUMBER\"" },
        peg$c1769 = "TIES",
        peg$c1770 = { type: "literal", value: "TIES", description: "\"TIES\"" },
        peg$c1771 = "UNBOUNDED",
        peg$c1772 = { type: "literal", value: "UNBOUNDED", description: "\"UNBOUNDED\"" },
        peg$c1773 = "WINDOW",
        peg$c1774 = { type: "literal", value: "WINDOW", description: "\"WINDOW\"" },
        peg$c1775 = "EMPTY",
        peg$c1776 = { type: "literal", value: "EMPTY", description: "\"EMPTY\"" },
        peg$c1777 = "JSON_TABLE",
        peg$c1778 = { type: "literal", value: "JSON_TABLE", description: "\"JSON_TABLE\"" },
        peg$c1779 = "NESTED",
        peg$c1780 = { type: "literal", value: "NESTED", description: "\"NESTED\"" },
        peg$c1781 = "ORDINALITY",
        peg$c1782 = { type: "literal", value: "ORDINALITY", description: "\"ORDINALITY\"" },
        peg$c1783 = "PATH",
        peg$c1784 = { type: "literal", value: "PATH", description: "\"PATH\"" },
        peg$c1785 = "HISTORY",
        peg$c1786 = { type: "literal", value: "HISTORY", description: "\"HISTORY\"" },
        peg$c1787 = "REUSE",
        peg$c1788 = { type: "literal", value: "REUSE", description: "\"REUSE\"" },
        peg$c1789 = "SRID",
        peg$c1790 = { type: "literal", value: "SRID", description: "\"SRID\"" },
        peg$c1791 = "THREAD_PRIORITY",
        peg$c1792 = { type: "literal", value: "THREAD_PRIORITY", description: "\"THREAD_PRIORITY\"" },
        peg$c1793 = "RESOURCE",
        peg$c1794 = { type: "literal", value: "RESOURCE", description: "\"RESOURCE\"" },
        peg$c1795 = "SYSTEM",
        peg$c1796 = { type: "literal", value: "SYSTEM", description: "\"SYSTEM\"" },
        peg$c1797 = "VCPU",
        peg$c1798 = { type: "literal", value: "VCPU", description: "\"VCPU\"" },
        peg$c1799 = "MASTER_PUBLIC_KEY_PATH",
        peg$c1800 = { type: "literal", value: "MASTER_PUBLIC_KEY_PATH", description: "\"MASTER_PUBLIC_KEY_PATH\"" },
        peg$c1801 = "GET_MASTER_PUBLIC_KEY_SYM",
        peg$c1802 = { type: "literal", value: "GET_MASTER_PUBLIC_KEY_SYM", description: "\"GET_MASTER_PUBLIC_KEY_SYM\"" },
        peg$c1803 = "RESTART",
        peg$c1804 = { type: "literal", value: "RESTART", description: "\"RESTART\"" },
        peg$c1805 = function() { return options.serverVersion >= 80011; },
        peg$c1806 = "DEFINITION",
        peg$c1807 = { type: "literal", value: "DEFINITION", description: "\"DEFINITION\"" },
        peg$c1808 = "DESCRIPTION",
        peg$c1809 = { type: "literal", value: "DESCRIPTION", description: "\"DESCRIPTION\"" },
        peg$c1810 = "ORGANIZATION",
        peg$c1811 = { type: "literal", value: "ORGANIZATION", description: "\"ORGANIZATION\"" },
        peg$c1812 = "REFERENCE",
        peg$c1813 = { type: "literal", value: "REFERENCE", description: "\"REFERENCE\"" },
        peg$c1814 = "OPTIONAL",
        peg$c1815 = { type: "literal", value: "OPTIONAL", description: "\"OPTIONAL\"" },
        peg$c1816 = function() { return options.serverVersion >= 80013; },
        peg$c1817 = "SECONDARY",
        peg$c1818 = { type: "literal", value: "SECONDARY", description: "\"SECONDARY\"" },
        peg$c1819 = "SECONDARY_ENGINE",
        peg$c1820 = { type: "literal", value: "SECONDARY_ENGINE", description: "\"SECONDARY_ENGINE\"" },
        peg$c1821 = "SECONDARY_LOAD",
        peg$c1822 = { type: "literal", value: "SECONDARY_LOAD", description: "\"SECONDARY_LOAD\"" },
        peg$c1823 = "SECONDARY_UNLOAD",
        peg$c1824 = { type: "literal", value: "SECONDARY_UNLOAD", description: "\"SECONDARY_UNLOAD\"" },
        peg$c1825 = "ACTIVE",
        peg$c1826 = { type: "literal", value: "ACTIVE", description: "\"ACTIVE\"" },
        peg$c1827 = function() { return options.serverVersion >= 80014; },
        peg$c1828 = "INACTIVE",
        peg$c1829 = { type: "literal", value: "INACTIVE", description: "\"INACTIVE\"" },
        peg$c1830 = "LATERAL",
        peg$c1831 = { type: "literal", value: "LATERAL", description: "\"LATERAL\"" },
        peg$c1832 = "RETAIN",
        peg$c1833 = { type: "literal", value: "RETAIN", description: "\"RETAIN\"" },
        peg$c1834 = "OLD",
        peg$c1835 = { type: "literal", value: "OLD", description: "\"OLD\"" },
        peg$c1836 = "NETWORK_NAMESPACE",
        peg$c1837 = { type: "literal", value: "NETWORK_NAMESPACE", description: "\"NETWORK_NAMESPACE\"" },
        peg$c1838 = function() { return options.serverVersion >= 80017; },
        peg$c1839 = "ENFORCED",
        peg$c1840 = { type: "literal", value: "ENFORCED", description: "\"ENFORCED\"" },
        peg$c1841 = "ARRAY",
        peg$c1842 = { type: "literal", value: "ARRAY", description: "\"ARRAY\"" },
        peg$c1843 = "OJ",
        peg$c1844 = { type: "literal", value: "OJ", description: "\"OJ\"" },
        peg$c1845 = "MEMBER",
        peg$c1846 = { type: "literal", value: "MEMBER", description: "\"MEMBER\"" },
        peg$c1847 = "RANDOM",
        peg$c1848 = { type: "literal", value: "RANDOM", description: "\"RANDOM\"" },
        peg$c1849 = function() { return options.serverVersion >= 80018; },
        peg$c1850 = "MASTER_COMPRESSION_ALGORITHM",
        peg$c1851 = { type: "literal", value: "MASTER_COMPRESSION_ALGORITHM", description: "\"MASTER_COMPRESSION_ALGORITHM\"" },
        peg$c1852 = "MASTER_ZSTD_COMPRESSION_LEVEL",
        peg$c1853 = { type: "literal", value: "MASTER_ZSTD_COMPRESSION_LEVEL", description: "\"MASTER_ZSTD_COMPRESSION_LEVEL\"" },
        peg$c1854 = "PRIVILEGE_CHECKS_USER",
        peg$c1855 = { type: "literal", value: "PRIVILEGE_CHECKS_USER", description: "\"PRIVILEGE_CHECKS_USER\"" },
        peg$c1856 = "MASTER_TLS_CIPHERSUITES",
        peg$c1857 = { type: "literal", value: "MASTER_TLS_CIPHERSUITES", description: "\"MASTER_TLS_CIPHERSUITES\"" },
        peg$c1858 = "REQUIRE_ROW_FORMAT",
        peg$c1859 = { type: "literal", value: "REQUIRE_ROW_FORMAT", description: "\"REQUIRE_ROW_FORMAT\"" },
        peg$c1860 = function() { return options.serverVersion >= 80019; },
        peg$c1861 = "PASSWORD_LOCK_TIME",
        peg$c1862 = { type: "literal", value: "PASSWORD_LOCK_TIME", description: "\"PASSWORD_LOCK_TIME\"" },
        peg$c1863 = "FAILED_LOGIN_ATTEMPTS",
        peg$c1864 = { type: "literal", value: "FAILED_LOGIN_ATTEMPTS", description: "\"FAILED_LOGIN_ATTEMPTS\"" },
        peg$c1865 = "REQUIRE_TABLE_PRIMARY_KEY_CHECK",
        peg$c1866 = { type: "literal", value: "REQUIRE_TABLE_PRIMARY_KEY_CHECK", description: "\"REQUIRE_TABLE_PRIMARY_KEY_CHECK\"" },
        peg$c1867 = "STREAM",
        peg$c1868 = { type: "literal", value: "STREAM", description: "\"STREAM\"" },
        peg$c1869 = "OFF",
        peg$c1870 = { type: "literal", value: "OFF", description: "\"OFF\"" },
        peg$c1871 = "INT1",
        peg$c1872 = { type: "literal", value: "INT1", description: "\"INT1\"" },
        peg$c1873 = function() { return 'TINYINT_SYMBOL'; },
        peg$c1874 = "INT2",
        peg$c1875 = { type: "literal", value: "INT2", description: "\"INT2\"" },
        peg$c1876 = function() { return 'SMALLINT_SYMBOL'; },
        peg$c1877 = "INT3",
        peg$c1878 = { type: "literal", value: "INT3", description: "\"INT3\"" },
        peg$c1879 = "INT4",
        peg$c1880 = { type: "literal", value: "INT4", description: "\"INT4\"" },
        peg$c1881 = "INT8",
        peg$c1882 = { type: "literal", value: "INT8", description: "\"INT8\"" },
        peg$c1883 = function() { return 'BIGINT_SYMBOL'; },
        peg$c1884 = "SQL_TSI_SECOND",
        peg$c1885 = { type: "literal", value: "SQL_TSI_SECOND", description: "\"SQL_TSI_SECOND\"" },
        peg$c1886 = function() { return 'SECOND_SYMBOL'; },
        peg$c1887 = "SQL_TSI_MINUTE",
        peg$c1888 = { type: "literal", value: "SQL_TSI_MINUTE", description: "\"SQL_TSI_MINUTE\"" },
        peg$c1889 = function() { return 'MINUTE_SYMBOL'; },
        peg$c1890 = "SQL_TSI_HOUR",
        peg$c1891 = { type: "literal", value: "SQL_TSI_HOUR", description: "\"SQL_TSI_HOUR\"" },
        peg$c1892 = function() { return 'HOUR_SYMBOL'; },
        peg$c1893 = "SQL_TSI_DAY",
        peg$c1894 = { type: "literal", value: "SQL_TSI_DAY", description: "\"SQL_TSI_DAY\"" },
        peg$c1895 = "SQL_TSI_WEEK",
        peg$c1896 = { type: "literal", value: "SQL_TSI_WEEK", description: "\"SQL_TSI_WEEK\"" },
        peg$c1897 = function() { return 'WEEK_SYMBOL'; },
        peg$c1898 = "SQL_TSI_MONTH",
        peg$c1899 = { type: "literal", value: "SQL_TSI_MONTH", description: "\"SQL_TSI_MONTH\"" },
        peg$c1900 = function() { return 'MONTH_SYMBOL'; },
        peg$c1901 = "SQL_TSI_QUARTER",
        peg$c1902 = { type: "literal", value: "SQL_TSI_QUARTER", description: "\"SQL_TSI_QUARTER\"" },
        peg$c1903 = function() { return 'QUARTER_SYMBOL'; },
        peg$c1904 = "SQL_TSI_YEAR",
        peg$c1905 = { type: "literal", value: "SQL_TSI_YEAR", description: "\"SQL_TSI_YEAR\"" },
        peg$c1906 = function() { return 'YEAR_SYMBOL'; },
        peg$c1907 = /^[ \t\f\r\n]/,
        peg$c1908 = { type: "class", value: "[ \\t\\f\\r\\n]", description: "[ \\t\\f\\r\\n]" },
        peg$c1909 = /^[\x01-\x08]/,
        peg$c1910 = { type: "class", value: "[\\x01-\\x08]", description: "[\\x01-\\x08]" },
        peg$c1911 = "\x0B",
        peg$c1912 = { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
        peg$c1913 = "\f",
        peg$c1914 = { type: "literal", value: "\f", description: "\"\\f\"" },
        peg$c1915 = /^[\x0E-\x1F]/,
        peg$c1916 = { type: "class", value: "[\\x0E-\\x1F]", description: "[\\x0E-\\x1F]" },
        peg$c1917 = "[",
        peg$c1918 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c1919 = "]",
        peg$c1920 = { type: "literal", value: "]", description: "\"]\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseStart() {
      var s0;

      s0 = peg$parsequery();

      return s0;
    }

    function peg$parsequery() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseEOF();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesimpleStatement();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebeginWork();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseSEMICOLON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOF();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$parseEOF();
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesimpleStatement() {
      var s0, s1, s2;

      s0 = peg$parsealterStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecreateStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedropStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parserenameTableStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetruncateTableStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s1 = peg$c2();
                if (s1) {
                  s1 = peg$c3;
                } else {
                  s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseimportStatement();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecallStatement();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsedeleteStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsedoStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsehandlerStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseinsertStatement();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseloadStatement();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsereplaceStatement();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseselectStatement();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseupdateStatement();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsetransactionOrLockingStatement();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsereplicationStatement();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsepreparedStatement();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          peg$reportedPos = peg$currPos;
                                          s1 = peg$c2();
                                          if (s1) {
                                            s1 = peg$c3;
                                          } else {
                                            s1 = peg$c0;
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parsecloneStatement();
                                            if (s2 !== peg$FAILED) {
                                              s1 = [s1, s2];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseaccountManagementStatement();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsetableAdministrationStatement();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseinstallUninstallStatment();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsesetStatement();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseshowStatement();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      peg$reportedPos = peg$currPos;
                                                      s1 = peg$c2();
                                                      if (s1) {
                                                        s1 = peg$c3;
                                                      } else {
                                                        s1 = peg$c0;
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parseresourceGroupManagement();
                                                        if (s2 !== peg$FAILED) {
                                                          s1 = [s1, s2];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseotherAdministrativeStatement();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseutilityStatement();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            peg$reportedPos = peg$currPos;
                                                            s1 = peg$c4();
                                                            if (s1) {
                                                              s1 = peg$c3;
                                                            } else {
                                                              s1 = peg$c0;
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parsegetDiagnostics();
                                                              if (s2 !== peg$FAILED) {
                                                                s1 = [s1, s2];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsesignalStatement();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseresignalStatement();
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseALTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealterTable();
        if (s2 === peg$FAILED) {
          s2 = peg$parsealterDatabase();
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsePROCEDURE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsequalifiedIdentifier();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseroutineAlterOptions();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseFUNCTION_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsequalifiedIdentifier();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseroutineAlterOptions();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsealterView();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsealterEvent();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsealterTablespace();
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s3 = peg$c5();
                      if (s3) {
                        s3 = peg$c3;
                      } else {
                        s3 = peg$c0;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsealterUndoTablespace();
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsealterLogfileGroup();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsealterServer();
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s3 = peg$c6();
                            if (s3) {
                              s3 = peg$c3;
                            } else {
                              s3 = peg$c0;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseINSTANCE_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseROTATE_SYMBOL();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parsetextOrIdentifier();
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parseMASTER_SYMBOL();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parseKEY_SYMBOL();
                                      if (s8 !== peg$FAILED) {
                                        s3 = [s3, s4, s5, s6, s7, s8];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterDatabase() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseDATABASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsecreateDatabaseOption();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsecreateDatabaseOption();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s4 = peg$c8();
            if (s4) {
              s4 = peg$c3;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseUPGRADE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseDATA_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseDIRECTORY_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseNAME_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7, s8];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterEvent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEVENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseON_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseSCHEDULE_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseschedule();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseON_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCOMPLETION_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseNOT_SYMBOL();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsePRESERVE_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseRENAME_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseTO_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseidentifier();
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseENABLE_SYMBOL();
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parseDISABLE_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseON_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseSLAVE_SYMBOL();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseCOMMENT_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsetextLiteral();
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseDO_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsecompoundStatement();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterLogfileGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLOGFILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGROUP_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseADD_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseUNDOFILE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextLiteral();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsealterLogfileGroupOptions();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterLogfileGroupOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterLogfileGroupOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterLogfileGroupOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterLogfileGroupOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterLogfileGroupOption() {
      var s0;

      s0 = peg$parsetsOptionInitialSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionEngine();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionWait();
        }
      }

      return s0;
    }

    function peg$parsealterServer() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSERVER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseserverOptions();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterTable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseonlineOption();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c9();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIGNORE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTABLE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRef();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsealterTableActions();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterTableActions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsealterCommandList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepartitionClause();
        if (s2 === peg$FAILED) {
          s2 = peg$parseremovePartitioning();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepartitionClause();
        if (s0 === peg$FAILED) {
          s0 = peg$parseremovePartitioning();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parsealterCommandsModifierList();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseCOMMA_SYMBOL();
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsestandaloneAlterCommands();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterCommandList() {
      var s0, s1, s2, s3;

      s0 = peg$parsealterCommandsModifierList();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsealterCommandsModifierList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOMMA_SYMBOL();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsealterList();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsealterCommandsModifierList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterCommandsModifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterCommandsModifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterCommandsModifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestandaloneAlterCommands() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDISCARD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIMPORT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTABLESPACE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsealterPartition();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c5();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseSECONDARY_LOAD_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseSECONDARY_UNLOAD_SYMBOL();
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterPartition() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseADD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenoWriteToBinLog();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepartitionDefinitions();
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsePARTITIONS_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsereal_ulong_number();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDROP_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePARTITION_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifierList();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseREBUILD_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePARTITION_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenoWriteToBinLog();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseallOrPartitionNameList();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseOPTIMIZE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsePARTITION_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenoWriteToBinLog();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseallOrPartitionNameList();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsenoWriteToBinLog();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseANALYZE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsePARTITION_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsenoWriteToBinLog();
                  if (s3 === peg$FAILED) {
                    s3 = peg$c1;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseallOrPartitionNameList();
                    if (s4 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCHECK_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsePARTITION_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseallOrPartitionNameList();
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parsecheckOption();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsecheckOption();
                      }
                      if (s4 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseREPAIR_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsePARTITION_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsenoWriteToBinLog();
                      if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseallOrPartitionNameList();
                        if (s4 !== peg$FAILED) {
                          s5 = [];
                          s6 = peg$parserepairType();
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parserepairType();
                          }
                          if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseCOALESCE_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsePARTITION_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsenoWriteToBinLog();
                        if (s3 === peg$FAILED) {
                          s3 = peg$c1;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsereal_ulong_number();
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseTRUNCATE_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsePARTITION_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseallOrPartitionNameList();
                          if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseREORGANIZE_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsePARTITION_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsenoWriteToBinLog();
                            if (s3 === peg$FAILED) {
                              s3 = peg$c1;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$currPos;
                              s5 = peg$parseidentifierList();
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parseINTO_SYMBOL();
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parsepartitionDefinitions();
                                  if (s7 !== peg$FAILED) {
                                    s5 = [s5, s6, s7];
                                    s4 = s5;
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$c0;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                              if (s4 === peg$FAILED) {
                                s4 = peg$c1;
                              }
                              if (s4 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseEXCHANGE_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsePARTITION_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseidentifier();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseWITH_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseTABLE_SYMBOL();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parsetableRef();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parsewithValidation();
                                      if (s7 === peg$FAILED) {
                                        s7 = peg$c1;
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s1 = peg$c10();
                            if (s1) {
                              s1 = peg$c3;
                            } else {
                              s1 = peg$c0;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseDISCARD_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsePARTITION_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseallOrPartitionNameList();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseTABLESPACE_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s1 = peg$c10();
                              if (s1) {
                                s1 = peg$c3;
                              } else {
                                s1 = peg$c0;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseIMPORT_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsePARTITION_SYMBOL();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseallOrPartitionNameList();
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parseTABLESPACE_SYMBOL();
                                      if (s5 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterListItem();
      if (s1 === peg$FAILED) {
        s1 = peg$parsecreateTableOptionsSpaceSeparated();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterListItem();
          if (s5 === peg$FAILED) {
            s5 = peg$parsealterCommandsModifier();
            if (s5 === peg$FAILED) {
              s5 = peg$parsecreateTableOptionsSpaceSeparated();
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterListItem();
            if (s5 === peg$FAILED) {
              s5 = peg$parsealterCommandsModifier();
              if (s5 === peg$FAILED) {
                s5 = peg$parsecreateTableOptionsSpaceSeparated();
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterCommandsModifier() {
      var s0;

      s0 = peg$parsealterAlgorithmOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parsealterLockOption();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewithValidation();
        }
      }

      return s0;
    }

    function peg$parsealterListItem() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseADD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLUMN_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefieldDefinition();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecheckOrReferences();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseplace();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetableElementList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseADD_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetableConstraintDef();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCHANGE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCOLUMN_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseidentifier();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsefieldDefinition();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseplace();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMODIFY_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseCOLUMN_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseidentifier();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsefieldDefinition();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseplace();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDROP_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseCOLUMN_SYMBOL();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseidentifier();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parserestrict();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s3 = [s3, s4, s5];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseFOREIGN_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseKEY_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s6 = peg$c11();
                      if (s6) {
                        s6 = peg$c3;
                      } else {
                        s6 = peg$c0;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseidentifier();
                        if (s7 !== peg$FAILED) {
                          s6 = [s6, s7];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                      if (s5 === peg$FAILED) {
                        s5 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s6 = peg$c9();
                        if (s6) {
                          s6 = peg$c3;
                        } else {
                          s6 = peg$c0;
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseidentifier();
                          if (s7 === peg$FAILED) {
                            s7 = peg$c1;
                          }
                          if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      }
                      if (s5 !== peg$FAILED) {
                        s3 = [s3, s4, s5];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsePRIMARY_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseKEY_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parsekeyOrIndex();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsefieldIdentifier();
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s3 = peg$c12();
                        if (s3) {
                          s3 = peg$c3;
                        } else {
                          s3 = peg$c0;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCHECK_SYMBOL();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseidentifier();
                            if (s5 !== peg$FAILED) {
                              s3 = [s3, s4, s5];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s3 = peg$c13();
                          if (s3) {
                            s3 = peg$c3;
                          } else {
                            s3 = peg$c0;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseCONSTRAINT_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseidentifier();
                              if (s5 !== peg$FAILED) {
                                s3 = [s3, s4, s5];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        }
                      }
                    }
                  }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDISABLE_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseKEYS_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseENABLE_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseKEYS_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseALTER_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseCOLUMN_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseidentifier();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = peg$parseSET_SYMBOL();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseDEFAULT_SYMBOL();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s8 = peg$c5();
                              if (s8) {
                                s8 = peg$c3;
                              } else {
                                s8 = peg$c0;
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseexprWithParentheses();
                                if (s9 !== peg$FAILED) {
                                  s8 = [s8, s9];
                                  s7 = s8;
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$c0;
                                }
                              } else {
                                peg$currPos = s7;
                                s7 = peg$c0;
                              }
                              if (s7 === peg$FAILED) {
                                s7 = peg$parsesignedLiteral();
                              }
                              if (s7 !== peg$FAILED) {
                                s5 = [s5, s6, s7];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c0;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                          }
                          if (s4 === peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$parseDROP_SYMBOL();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parseDEFAULT_SYMBOL();
                              if (s6 !== peg$FAILED) {
                                s5 = [s5, s6];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c0;
                            }
                          }
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s1 = peg$c2();
                      if (s1) {
                        s1 = peg$c3;
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseALTER_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseINDEX_SYMBOL();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsefieldIdentifier();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parsevisibility();
                              if (s5 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s1 = peg$c12();
                        if (s1) {
                          s1 = peg$c3;
                        } else {
                          s1 = peg$c0;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseALTER_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseCHECK_SYMBOL();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseidentifier();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseconstraintEnforcement();
                                if (s5 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4, s5];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s1 = peg$c13();
                          if (s1) {
                            s1 = peg$c3;
                          } else {
                            s1 = peg$c0;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseALTER_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseCONSTRAINT_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseidentifier();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseconstraintEnforcement();
                                  if (s5 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s1 = peg$c2();
                            if (s1) {
                              s1 = peg$c3;
                            } else {
                              s1 = peg$c0;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseRENAME_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseCOLUMN_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseidentifier();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseTO_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parseidentifier();
                                      if (s6 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseRENAME_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseTO_SYMBOL();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseAS_SYMBOL();
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$c1;
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsetableName();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s1 = peg$c11();
                                if (s1) {
                                  s1 = peg$c3;
                                } else {
                                  s1 = peg$c0;
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseRENAME_SYMBOL();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsekeyOrIndex();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parsefieldIdentifier();
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parseTO_SYMBOL();
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parseidentifier();
                                          if (s6 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5, s6];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseCONVERT_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseTO_SYMBOL();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parsecharset();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$currPos;
                                        peg$reportedPos = peg$currPos;
                                        s5 = peg$c5();
                                        if (s5) {
                                          s5 = peg$c3;
                                        } else {
                                          s5 = peg$c0;
                                        }
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parseDEFAULT_SYMBOL();
                                          if (s6 !== peg$FAILED) {
                                            s5 = [s5, s6];
                                            s4 = s5;
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$c0;
                                        }
                                        if (s4 === peg$FAILED) {
                                          s4 = peg$parsecharsetName();
                                        }
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parsecollate();
                                          if (s5 === peg$FAILED) {
                                            s5 = peg$c1;
                                          }
                                          if (s5 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseFORCE_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseORDER_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseBY_SYMBOL();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parsealterOrderList();
                                          if (s3 !== peg$FAILED) {
                                            s1 = [s1, s2, s3];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        peg$reportedPos = peg$currPos;
                                        s1 = peg$c14();
                                        if (s1) {
                                          s1 = peg$c3;
                                        } else {
                                          s1 = peg$c0;
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseUPGRADE_SYMBOL();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parsePARTITIONING_SYMBOL();
                                            if (s3 !== peg$FAILED) {
                                              s1 = [s1, s2, s3];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseplace() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAFTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseFIRST_SYMBOL();
      }

      return s0;
    }

    function peg$parserestrict() {
      var s0;

      s0 = peg$parseRESTRICT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCASCADE_SYMBOL();
      }

      return s0;
    }

    function peg$parsealterOrderList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedirection();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifier();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsedirection();
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseidentifier();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsedirection();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterAlgorithmOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseALGORITHM_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEFAULT_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseidentifier();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterLockOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLOCK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEFAULT_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseidentifier();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexLockAndAlgorithm() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsealterAlgorithmOption();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealterLockOption();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsealterLockOption();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsealterAlgorithmOption();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsewithValidation() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c15();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWITH_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseWITHOUT_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVALIDATION_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseremovePartitioning() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREMOVE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITIONING_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseallOrPartitionNameList() {
      var s0;

      s0 = peg$parseALL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierList();
      }

      return s0;
    }

    function peg$parsealterTablespace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parseTABLESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseADD_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDROP_SYMBOL();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDATAFILE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextLiteral();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsealterTablespaceOptions();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s4 = peg$c8();
            if (s4) {
              s4 = peg$c3;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseCHANGE_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDATAFILE_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetextLiteral();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parsechangeTablespaceOption();
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$currPos;
                      s13 = peg$parseCOMMA_SYMBOL();
                      if (s13 === peg$FAILED) {
                        s13 = peg$c1;
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parsechangeTablespaceOption();
                        if (s14 !== peg$FAILED) {
                          s13 = [s13, s14];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$c0;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$c0;
                      }
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$currPos;
                        s13 = peg$parseCOMMA_SYMBOL();
                        if (s13 === peg$FAILED) {
                          s13 = peg$c1;
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsechangeTablespaceOption();
                          if (s14 !== peg$FAILED) {
                            s13 = [s13, s14];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$c0;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$c0;
                        }
                      }
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$parseREAD_ONLY_SYMBOL();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseREAD_WRITE_SYMBOL();
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseNOT_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseACCESSIBLE_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseRENAME_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseTO_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseidentifier();
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s4 = peg$c5();
                if (s4) {
                  s4 = peg$c3;
                } else {
                  s4 = peg$c0;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsealterTablespaceOptions();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterUndoTablespace() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseUNDO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSET_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseACTIVE_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseINACTIVE_SYMBOL();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseundoTableSpaceOptions();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseundoTableSpaceOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetsOptionEngine();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetsOptionEngine();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetsOptionEngine();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterTablespaceOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterTablespaceOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterTablespaceOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterTablespaceOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterTablespaceOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseINITIAL_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionAutoextendSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionMaxSize();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionEngine();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionWait();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetsOptionEncryption();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsechangeTablespaceOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseINITIAL_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionAutoextendSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionMaxSize();
        }
      }

      return s0;
    }

    function peg$parsealterView() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseviewAlgorithm();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedefinerClause();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewSuid();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseVIEW_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseviewRef();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseviewTail();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewTail() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsecolumnInternalRefList();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewSelect();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewSelect() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsequeryExpressionOrParens();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseviewCheckOption();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewCheckOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCASCADED_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLOCAL_SYMBOL();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCHECK_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPTION_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCREATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateDatabase();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecreateTable();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecreateFunction();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecreateProcedure();
              if (s2 === peg$FAILED) {
                s2 = peg$parsecreateUdf();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsecreateLogfileGroup();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsecreateView();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsecreateTrigger();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsecreateIndex();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsecreateServer();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsecreateTablespace();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parsecreateEvent();
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s3 = peg$c2();
                                if (s3) {
                                  s3 = peg$c3;
                                } else {
                                  s3 = peg$c0;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsecreateRole();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s3 = peg$c16();
                                  if (s3) {
                                    s3 = peg$c3;
                                  } else {
                                    s3 = peg$c0;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsecreateSpatialReference();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$currPos;
                                    peg$reportedPos = peg$currPos;
                                    s3 = peg$c5();
                                    if (s3) {
                                      s3 = peg$c3;
                                    } else {
                                      s3 = peg$c0;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parsecreateUndoTablespace();
                                      if (s4 !== peg$FAILED) {
                                        s3 = [s3, s4];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateDatabase() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDATABASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifNotExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsecreateDatabaseOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsecreateDatabaseOption();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateDatabaseOption() {
      var s0, s1, s2;

      s0 = peg$parsedefaultCharset();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedefaultCollation();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c17();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedefaultEncryption();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsecreateTable() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseTEMPORARY_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseifNotExists();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableName();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parseOPEN_PAR_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetableElementList();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecreateTableOptions();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsepartitionClause();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseduplicateAsQueryExpression();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseLIKE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetableRef();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseOPEN_PAR_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseLIKE_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsetableRef();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s9 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableElementList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableElement() {
      var s0;

      s0 = peg$parsecolumnDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetableConstraintDef();
      }

      return s0;
    }

    function peg$parseduplicateAsQueryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseREPLACE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIGNORE_SYMBOL();
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAS_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequeryExpressionOrParens();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequeryExpressionOrParens() {
      var s0;

      s0 = peg$parsequeryExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsequeryExpressionParens();
      }

      return s0;
    }

    function peg$parsecreateRoutine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCREATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateProcedure();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecreateFunction();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecreateUdf();
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOF();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateProcedure() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePROCEDURE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseprocedureParameter();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parseCOMMA_SYMBOL();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseprocedureParameter();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$c0;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parseCOMMA_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseprocedureParameter();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseroutineCreateOption();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseroutineCreateOption();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecompoundStatement();
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFUNCTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsefunctionParameter();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parseCOMMA_SYMBOL();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsefunctionParameter();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$c0;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parseCOMMA_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsefunctionParameter();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRETURNS_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsetypeWithOptCollate();
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseroutineCreateOption();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseroutineCreateOption();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsecompoundStatement();
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUdf() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseAGGREGATE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFUNCTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRETURNS_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSTRING_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseINT_SYMBOL();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseREAL_SYMBOL();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseDECIMAL_SYMBOL();
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSONAME_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetextLiteral();
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseroutineCreateOption() {
      var s0, s1, s2;

      s0 = peg$parseroutineOption();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNOT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDETERMINISTIC_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseroutineAlterOptions() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseroutineCreateOption();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseroutineCreateOption();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseroutineOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCOMMENT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLANGUAGE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSQL_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNO_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSQL_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCONTAINS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseSQL_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseREADS_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseSQL_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseDATA_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMODIFIES_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseSQL_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseDATA_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseSQL_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseSECURITY_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseDEFINER_SYMBOL();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseINVOKER_SYMBOL();
                      }
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecreateIndex() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseonlineOption();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseUNIQUE_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseINDEX_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s6 = peg$c5();
            if (s6) {
              s6 = peg$c3;
            } else {
              s6 = peg$c0;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseidentifier();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseindexTypeClause();
                if (s8 === peg$FAILED) {
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseindexNameAndType();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecreateIndexTarget();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseindexOption();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseindexOption();
                }
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseFULLTEXT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINDEX_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifier();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecreateIndexTarget();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsefulltextIndexOption();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsefulltextIndexOption();
                  }
                  if (s7 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6, s7];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseSPATIAL_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseINDEX_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifier();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsecreateIndexTarget();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parsecommonIndexOption();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parsecommonIndexOption();
                    }
                    if (s7 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6, s7];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseindexLockAndAlgorithm();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexNameAndType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseUSING_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseindexType();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTYPE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseindexType();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecreateIndexTarget() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseON_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableRef();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekeyListVariants();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateLogfileGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLOGFILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGROUP_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseADD_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseUNDOFILE_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseREDOFILE_SYMBOL();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextLiteral();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parselogfileGroupOptions();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselogfileGroupOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parselogfileGroupOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parselogfileGroupOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parselogfileGroupOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselogfileGroupOption() {
      var s0;

      s0 = peg$parsetsOptionInitialSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionUndoRedoBufferSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionNodegroup();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionEngine();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionWait();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetsOptionComment();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecreateServer() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSERVER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFOREIGN_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDATA_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseWRAPPER_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextOrIdentifier();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseserverOptions();
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseserverOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseOPTIONS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseserverOption();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseserverOption();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseserverOption();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseserverOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHOST_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDATABASE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextLiteral();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUSER_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetextLiteral();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePASSWORD_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsetextLiteral();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSOCKET_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsetextLiteral();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseOWNER_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsetextLiteral();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePORT_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseulong_number();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecreateTablespace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseTABLESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetsDataFileName();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseUSE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseLOGFILE_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseGROUP_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseidentifier();
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetablespaceOptions();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUndoTablespace() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseUNDO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseADD_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetsDataFile();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseundoTableSpaceOptions();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsDataFileName() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c5();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseADD_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetsDataFile();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseADD_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetsDataFile();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetsDataFile() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDATAFILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetablespaceOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetablespaceOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetablespaceOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetablespaceOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetablespaceOption() {
      var s0, s1, s2;

      s0 = peg$parsetsOptionInitialSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionAutoextendSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionMaxSize();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionExtentSize();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionNodegroup();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetsOptionEngine();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetsOptionWait();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsetsOptionComment();
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s1 = peg$c18();
                      if (s1) {
                        s1 = peg$c3;
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsetsOptionFileblockSize();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s1 = peg$c5();
                        if (s1) {
                          s1 = peg$c3;
                        } else {
                          s1 = peg$c0;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsetsOptionEncryption();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetsOptionInitialSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseINITIAL_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionUndoRedoBufferSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionAutoextendSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionMaxSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMAX_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionExtentSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseEXTENT_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionNodegroup() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseNODEGROUP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsereal_ulong_number();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionEngine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSTORAGE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseENGINE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetextOrIdentifier();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionWait() {
      var s0;

      s0 = peg$parseWAIT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNO_WAIT_SYMBOL();
      }

      return s0;
    }

    function peg$parsetsOptionComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCOMMENT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextLiteral();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionFileblockSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionEncryption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseENCRYPTION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateView() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseviewReplaceOrAlgorithm();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedefinerClause();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewSuid();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseVIEW_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseviewName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseviewTail();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewReplaceOrAlgorithm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREPLACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewAlgorithm();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseviewAlgorithm();
      }

      return s0;
    }

    function peg$parseviewAlgorithm() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseALGORITHM_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealgorithm() {
      var s0;

      s0 = peg$parseUNDEFINED_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMERGE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTEMPTABLE_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseviewSuid() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSQL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSECURITY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEFINER_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseINVOKER_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateTrigger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTRIGGER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetiming() {
      var s0;

      s0 = peg$parseBEFORE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAFTER_SYMBOL();
      }

      return s0;
    }

    function peg$parseevent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseINSERT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUPDATE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDELETE_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableRef();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFOR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEACH_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseROW_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetriggerFollowsPrecedesClause();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecompoundStatement();
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetriggerFollowsPrecedesClause() {
      var s0;

      peg$reportedPos = peg$currPos;
      s0 = peg$c11();
      if (s0) {
        s0 = peg$c3;
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseordering() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFOLLOWS_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePRECEDES_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateEvent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEVENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseifNotExists();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsequalifiedIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseON_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSCHEDULE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseschedule();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseON_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseCOMPLETION_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseNOT_SYMBOL();
                        if (s11 === peg$FAILED) {
                          s11 = peg$c1;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsePRESERVE_SYMBOL();
                          if (s12 !== peg$FAILED) {
                            s9 = [s9, s10, s11, s12];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c0;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c0;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseENABLE_SYMBOL();
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parseDISABLE_SYMBOL();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$currPos;
                          s12 = peg$parseON_SYMBOL();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parseSLAVE_SYMBOL();
                            if (s13 !== peg$FAILED) {
                              s12 = [s12, s13];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c0;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c0;
                          }
                          if (s11 === peg$FAILED) {
                            s11 = peg$c1;
                          }
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$c0;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        s11 = peg$parseCOMMENT_SYMBOL();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsetextLiteral();
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$c0;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$c0;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseDO_SYMBOL();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsecompoundStatement();
                            if (s12 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateRole() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseROLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifNotExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseroleList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateSpatialReference() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREPLACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSPATIAL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseREFERENCE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSYSTEM_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsereal_ulonglong_number();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsesrsAttribute();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsesrsAttribute();
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSPATIAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseREFERENCE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSYSTEM_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseifNotExists();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsereal_ulonglong_number();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsesrsAttribute();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsesrsAttribute();
                  }
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesrsAttribute() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNAME_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTEXT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDEFINITION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTEXT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseORGANIZATION_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSINGLE_QUOTED_TEXT();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseIDENTIFIED_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseBY_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsereal_ulonglong_number();
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDESCRIPTION_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseTEXT_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSINGLE_QUOTED_TEXT();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedropStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDROP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedropDatabase();
        if (s2 === peg$FAILED) {
          s2 = peg$parsedropEvent();
          if (s2 === peg$FAILED) {
            s2 = peg$parsedropFunction();
            if (s2 === peg$FAILED) {
              s2 = peg$parsedropProcedure();
              if (s2 === peg$FAILED) {
                s2 = peg$parsedropIndex();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsedropLogfileGroup();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsedropServer();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsedropTable();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsedropTableSpace();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsedropTrigger();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsedropView();
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s3 = peg$c2();
                              if (s3) {
                                s3 = peg$c3;
                              } else {
                                s3 = peg$c0;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsedropRole();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s3 = peg$c16();
                                if (s3) {
                                  s3 = peg$c3;
                                } else {
                                  s3 = peg$c0;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsedropSpatialReference();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s3 = peg$c5();
                                  if (s3) {
                                    s3 = peg$c3;
                                  } else {
                                    s3 = peg$c0;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsedropUndoTablespace();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropDatabase() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDATABASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropEvent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseEVENT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropFunction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFUNCTION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropProcedure() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsePROCEDURE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropIndex() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseonlineOption();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINDEX_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefieldIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseON_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetableRef();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseindexLockAndAlgorithm();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropLogfileGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseLOGFILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGROUP_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsedropLogfileGroupOption();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 === peg$FAILED) {
                s8 = peg$c1;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsedropLogfileGroupOption();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 === peg$FAILED) {
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsedropLogfileGroupOption();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropLogfileGroupOption() {
      var s0;

      s0 = peg$parsetsOptionWait();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionEngine();
      }

      return s0;
    }

    function peg$parsedropServer() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSERVER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextOrIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropTable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseTEMPORARY_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTABLES_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseifExists();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRefList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRESTRICT_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseCASCADE_SYMBOL();
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropTableSpace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseTABLESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsedropLogfileGroupOption();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parseCOMMA_SYMBOL();
            if (s7 === peg$FAILED) {
              s7 = peg$c1;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsedropLogfileGroupOption();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsedropLogfileGroupOption();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropTrigger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseTRIGGER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropView() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseVIEW_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewRefList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRESTRICT_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$parseCASCADE_SYMBOL();
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropRole() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseROLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseroleList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropSpatialReference() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSPATIAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREFERENCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSYSTEM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseifExists();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsereal_ulonglong_number();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropUndoTablespace() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseUNDO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseundoTableSpaceOptions();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserenameTableStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseRENAME_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTABLES_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parserenamePair();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parserenamePair();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parserenamePair();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserenamePair() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTO_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableName();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetruncateTableStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseTRUNCATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableRef();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseimportStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIMPORT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFROM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetextStringLiteralList();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecallStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCALL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsequalifiedIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseOPEN_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexprList();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCLOSE_PAR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedeleteStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s2 = peg$c2();
      if (s2) {
        s2 = peg$c3;
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewithClause();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDELETE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedeleteStatementOption();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsedeleteStatementOption();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseFROM_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsetableAliasRefList();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseUSING_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetableReferenceList();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsewhereClause();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c1;
                    }
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parsetableRef();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  peg$reportedPos = peg$currPos;
                  s9 = peg$c12();
                  if (s9) {
                    s9 = peg$c3;
                  } else {
                    s9 = peg$c0;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsetableAlias();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsepartitionDelete();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsewhereClause();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c1;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseorderClause();
                        if (s11 === peg$FAILED) {
                          s11 = peg$c1;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsesimpleLimitClause();
                          if (s12 === peg$FAILED) {
                            s12 = peg$c1;
                          }
                          if (s12 !== peg$FAILED) {
                            s7 = [s7, s8, s9, s10, s11, s12];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c0;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsetableAliasRefList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseFROM_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetableReferenceList();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsewhereClause();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionDelete() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c19();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifierList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedeleteStatementOption() {
      var s0;

      s0 = peg$parseQUICK_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLOW_PRIORITY_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseQUICK_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIGNORE_SYMBOL();
          }
        }
      }

      return s0;
    }

    function peg$parsedoStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c20();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexprList();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c21();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseselectItemList();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehandlerStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseHANDLER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsetableRef();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseOPEN_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableAlias();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseREAD_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsehandlerReadOrScan();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsewhereClause();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parselimitClause();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehandlerReadOrScan() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$parseFIRST_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNEXT_SYMBOL();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFIRST_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseNEXT_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parsePREV_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseLAST_SYMBOL();
              }
            }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseEQUAL_OPERATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$parseLESS_THAN_OPERATOR();
              if (s3 === peg$FAILED) {
                s3 = peg$parseGREATER_THAN_OPERATOR();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseLESS_OR_EQUAL_OPERATOR();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseGREATER_OR_EQUAL_OPERATOR();
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseOPEN_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsevalues();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseinsertStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parseINSERT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinsertLockOption();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIGNORE_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINTO_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetableRef();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseusePartition();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseinsertFromConstructor();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s10 = peg$c22();
                    if (s10) {
                      s10 = peg$c3;
                    } else {
                      s10 = peg$c0;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsevaluesReference();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parseSET_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseupdateList();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s11 = peg$c22();
                        if (s11) {
                          s11 = peg$c3;
                        } else {
                          s11 = peg$c0;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsevaluesReference();
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$c0;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$c0;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$parseinsertQueryExpression();
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseinsertUpdateList();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertLockOption() {
      var s0;

      s0 = peg$parseLOW_PRIORITY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDELAYED_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseHIGH_PRIORITY_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseinsertFromConstructor() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefields();
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinsertValues();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefields() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseinsertIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseinsertIdentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseinsertIdentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertValues() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseVALUES_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseVALUE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalueList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertQueryExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsequeryExpressionOrParens();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPEN_PAR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefields();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCLOSE_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsequeryExpressionOrParens();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsevalueList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalues();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseOPEN_PAR_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsevalues();
                if (s8 === peg$FAILED) {
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseOPEN_PAR_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsevalues();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevalues() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDEFAULT_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDEFAULT_SYMBOL();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 === peg$FAILED) {
              s5 = peg$parseDEFAULT_SYMBOL();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevaluesReference() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumnInternalRefList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertUpdateList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseON_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDUPLICATE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseKEY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseUPDATE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseupdateList();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseloadStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

      s0 = peg$currPos;
      s1 = peg$parseLOAD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedataOrXml();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLOW_PRIORITY_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseCONCURRENT_SYMBOL();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLOCAL_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseINFILE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextLiteral();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseREPLACE_SYMBOL();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseIGNORE_SYMBOL();
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseINTO_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseTABLE_SYMBOL();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsetableRef();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseusePartition();
                          if (s11 === peg$FAILED) {
                            s11 = peg$c1;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsecharsetClause();
                            if (s12 === peg$FAILED) {
                              s12 = peg$c1;
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsexmlRowsIdentifiedBy();
                              if (s13 === peg$FAILED) {
                                s13 = peg$c1;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsefieldsClause();
                                if (s14 === peg$FAILED) {
                                  s14 = peg$c1;
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parselinesClause();
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$c1;
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parseloadDataFileTail();
                                    if (s16 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedataOrXml() {
      var s0;

      s0 = peg$parseDATA_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseXML_SYMBOL();
      }

      return s0;
    }

    function peg$parsexmlRowsIdentifiedBy() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseROWS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIDENTIFIED_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetextString();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseloadDataFileTail() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseIGNORE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINT_NUMBER();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLINES_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$parseROWS_SYMBOL();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseloadDataFileTargetList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSET_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseupdateList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseloadDataFileTargetList() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldOrVariableList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldOrVariableList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsefieldIdentifier();
      if (s1 === peg$FAILED) {
        s1 = peg$parseuserVariable();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefieldIdentifier();
          if (s5 === peg$FAILED) {
            s5 = peg$parseuserVariable();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefieldIdentifier();
            if (s5 === peg$FAILED) {
              s5 = peg$parseuserVariable();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsereplaceStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseREPLACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOW_PRIORITY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDELAYED_SYMBOL();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseINTO_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRef();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseusePartition();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseinsertFromConstructor();
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseSET_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseupdateList();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$parseinsertQueryExpression();
                  }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseselectStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsequeryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselockingClauseList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsequeryExpressionParens();
        if (s0 === peg$FAILED) {
          s0 = peg$parseselectStatementWithInto();
        }
      }

      return s0;
    }

    function peg$parseselectStatementWithInto() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselectStatementWithInto();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequeryExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseintoClause();
          if (s2 !== peg$FAILED) {
            s3 = peg$parselockingClauseList();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselockingClauseList();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseintoClause();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsequeryExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s2 = peg$c2();
      if (s2) {
        s2 = peg$c3;
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewithClause();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsequeryExpressionBody();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseorderClause();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parselimitClause();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsequeryExpressionParens();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseorderClause();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parselimitClause();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c8();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseprocedureAnalyseClause();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequeryExpressionBody() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsequeryPrimary();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsequeryExpressionParens();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseUNION_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseunionOption();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequeryPrimary();
              if (s5 === peg$FAILED) {
                s5 = peg$parsequeryExpressionParens();
              }
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseUNION_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseunionOption();
          if (s5 === peg$FAILED) {
            s5 = peg$c1;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsequeryPrimary();
            if (s6 === peg$FAILED) {
              s6 = peg$parsequeryExpressionParens();
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseUNION_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseunionOption();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsequeryPrimary();
              if (s6 === peg$FAILED) {
                s6 = peg$parsequeryExpressionParens();
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequeryExpressionParens() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsequeryExpressionParens();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsequeryExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parselockingClauseList();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequeryPrimary() {
      var s0, s1, s2;

      s0 = peg$parsequerySpecification();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c13();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetableValueConstructor();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c13();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexplicitTable();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsequerySpecification() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseSELECT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseselectOption();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseselectOption();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselectItemList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseintoClause();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefromClause();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsewhereClause();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsegroupByClause();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsehavingClause();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s10 = peg$c2();
                      if (s10) {
                        s10 = peg$c3;
                      } else {
                        s10 = peg$c0;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsewindowClause();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequerySpecOption() {
      var s0;

      s0 = peg$parseALL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDISTINCT_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseHIGH_PRIORITY_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSQL_SMALL_RESULT_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSQL_BIG_RESULT_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSQL_CALC_FOUND_ROWS_SYMBOL();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselimitClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLIMIT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselimitOptions();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleLimitClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLIMIT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselimitOption();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselimitOptions() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parselimitOption();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCOMMA_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseOFFSET_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parselimitOption();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselimitOption() {
      var s0;

      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePARAM_MARKER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseINT_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseINT_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseINT_NUMBER();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseintoClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseINTO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseOUTFILE_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSINGLE_QUOTED_TEXT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecharsetClause();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsefieldsClause();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parselinesClause();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseDUMPFILE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSINGLE_QUOTED_TEXT();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsetextOrIdentifier();
            if (s3 === peg$FAILED) {
              s3 = peg$parseuserVariable();
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetextOrIdentifier();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseuserVariable();
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parseCOMMA_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetextOrIdentifier();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseuserVariable();
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseprocedureAnalyseClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsePROCEDURE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseANALYSE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseINT_NUMBER();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseINT_NUMBER();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehavingClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHAVING_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowClause() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseWINDOW_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewindowDefinition();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewindowDefinition();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewindowDefinition();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowDefinition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewindowSpec();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowSpec() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewindowSpecDetails();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowSpecDetails() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsePARTITION_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseBY_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseorderList();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseorderClause();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewindowFrameClause();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowFrameClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsewindowFrameUnits();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewindowFrameExtent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewindowFrameExclusion();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowFrameUnits() {
      var s0;

      s0 = peg$parseROWS_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRANGE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGROUPS_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parsewindowFrameExtent() {
      var s0;

      s0 = peg$parsewindowFrameStart();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewindowFrameBetween();
      }

      return s0;
    }

    function peg$parsewindowFrameStart() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseUNBOUNDED_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePRECEDING_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseulonglong_number();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePRECEDING_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePARAM_MARKER();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePRECEDING_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseINTERVAL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexpr();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseinterval();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsePRECEDING_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCURRENT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseROW_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewindowFrameBetween() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBETWEEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewindowFrameBound();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewindowFrameBound();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowFrameBound() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsewindowFrameStart();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUNBOUNDED_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFOLLOWING_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseulonglong_number();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFOLLOWING_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePARAM_MARKER();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseFOLLOWING_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseINTERVAL_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseexpr();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseinterval();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseFOLLOWING_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewindowFrameExclusion() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseEXCLUDE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCURRENT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseROW_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseGROUP_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseTIES_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseNO_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseOTHERS_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewithClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRECURSIVE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecommonTableExpression();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecommonTableExpression();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecommonTableExpression();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecommonTableExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolumnInternalRefList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsequeryExpressionParens();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegroupByClause() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseGROUP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseorderList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseolapOption();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseolapOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseROLLUP_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c8();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWITH_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCUBE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseorderClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseORDER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseorderList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedirection() {
      var s0;

      s0 = peg$parseASC_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDESC_SYMBOL();
      }

      return s0;
    }

    function peg$parsefromClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFROM_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDUAL_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetableReferenceList();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableReferenceList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableReference();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableReference();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableReference();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableValueConstructor() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseVALUES_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserowValueExplicit();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parserowValueExplicit();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parserowValueExplicit();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexplicitTable() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTABLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableRef();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserowValueExplicit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseROW_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalues();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseselectOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsequerySpecOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSQL_NO_CACHE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c8();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSQL_CACHE_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c23();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseMAX_STATEMENT_TIME_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseEQUAL_OPERATOR();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsereal_ulong_number();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parselockingClauseList() {
      var s0, s1;

      s0 = [];
      s1 = peg$parselockingClause();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parselockingClause();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselockingClause() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseFOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselockStrengh();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c2();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOF_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetableAliasRefList();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s5 = peg$c2();
            if (s5) {
              s5 = peg$c3;
            } else {
              s5 = peg$c0;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parselockedRowAction();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLOCK_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIN_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSHARE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseMODE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parselockStrengh() {
      var s0, s1, s2;

      s0 = peg$parseUPDATE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c2();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSHARE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parselockedRowAction() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSKIP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOCKED_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseNOWAIT_SYMBOL();
      }

      return s0;
    }

    function peg$parseselectItemList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseselectItem();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMULT_OPERATOR();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseselectItem();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseselectItem();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseselectItem() {
      var s0, s1, s2;

      s0 = peg$parsetableWild();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexpr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseselectAlias();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseselectAlias() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAS_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSINGLE_QUOTED_TEXT();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewhereClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseWHERE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableReference() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableFactor();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseOPEN_CURLY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c24();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseOJ_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseescapedTableReference();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_CURLY_SYMBOL();
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsejoinedTable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsejoinedTable();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseescapedTableReference() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetableFactor();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsejoinedTable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsejoinedTable();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejoinedTable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseinnerJoinType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableReference();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseON_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseUSING_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierListWithParentheses();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseouterJoinType();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetableReference();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseON_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpr();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseUSING_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifierListWithParentheses();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenaturalJoinType();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetableFactor();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsenaturalJoinType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseNATURAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINNER_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseJOIN_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNATURAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLEFT_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseRIGHT_SYMBOL();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOUTER_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseJOIN_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseinnerJoinType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseINNER_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCROSS_SYMBOL();
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJOIN_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
      }

      return s0;
    }

    function peg$parseouterJoinType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseRIGHT_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOUTER_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseJOIN_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableFactor() {
      var s0, s1, s2;

      s0 = peg$parsesingleTable();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesingleTableParens();
        if (s0 === peg$FAILED) {
          s0 = peg$parsederivedTable();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetableReferenceListParens();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c25();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsetableFunction();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesingleTable() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseusePartition();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableAlias();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseindexHintList();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesingleTableParens() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesingleTable();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesingleTableParens();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsederivedTable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsequeryExpressionParens();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c2();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecolumnInternalRefList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c5();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLATERAL_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsequeryExpressionParens();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetableAlias();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecolumnInternalRefList();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetableReferenceListParens() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableReferenceList();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetableReferenceListParens();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseJSON_TABLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCOMMA_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSINGLE_QUOTED_TEXT();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecolumnsClause();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsetableAlias();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnsClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseCOLUMNS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsejtColumn();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsejtColumn();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsejtColumn();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejtColumn() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseORDINALITY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedataType();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s4 = peg$c5();
            if (s4) {
              s4 = peg$c3;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecollate();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEXISTS_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsePATH_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseSINGLE_QUOTED_TEXT();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseonEmptyOrError();
                    if (s7 === peg$FAILED) {
                      s7 = peg$c1;
                    }
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNESTED_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePATH_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecolumnsClause();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseonEmptyOrError() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseonEmpty();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseonError();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseonError();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseonEmpty();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseonEmpty() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsejtOnResponse();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEMPTY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseonError() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsejtOnResponse();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseERROR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejtOnResponse() {
      var s0, s1, s2;

      s0 = peg$parseERROR_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDEFAULT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSINGLE_QUOTED_TEXT();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseunionOption() {
      var s0;

      s0 = peg$parseDISTINCT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseALL_SYMBOL();
      }

      return s0;
    }

    function peg$parsetableAlias() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAS_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s2 = peg$c24();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexHintList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseindexHint();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseindexHint();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseindexHint();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexHint() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseindexHintType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyOrIndex();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseindexHintClause();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseindexList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUSE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyOrIndex();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseindexHintClause();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseOPEN_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseindexList();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseindexHintType() {
      var s0;

      s0 = peg$parseFORCE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIGNORE_SYMBOL();
      }

      return s0;
    }

    function peg$parsekeyOrIndex() {
      var s0;

      s0 = peg$parseKEY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINDEX_SYMBOL();
      }

      return s0;
    }

    function peg$parseconstraintKeyType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePRIMARY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKEY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUNIQUE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyOrIndex();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseindexHintClause() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseFOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJOIN_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseORDER_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBY_SYMBOL();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseGROUP_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseBY_SYMBOL();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseindexListElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseindexListElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseindexListElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexListElement() {
      var s0;

      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePRIMARY_SYMBOL();
      }

      return s0;
    }

    function peg$parseupdateStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s2 = peg$c2();
      if (s2) {
        s2 = peg$c3;
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewithClause();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUPDATE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLOW_PRIORITY_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIGNORE_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetableReferenceList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSET_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseupdateList();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsewhereClause();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseorderClause();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsesimpleLimitClause();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetransactionOrLockingStatement() {
      var s0;

      s0 = peg$parsetransactionStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesavepointStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parselockStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsexaStatement();
          }
        }
      }

      return s0;
    }

    function peg$parsetransactionStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSTART_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTRANSACTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsetransactionCharacteristic();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsetransactionCharacteristic();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCOMMIT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWORK_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseAND_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseNO_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCHAIN_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseNO_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRELEASE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsebeginWork() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWORK_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetransactionCharacteristic() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCONSISTENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSNAPSHOT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c26();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseREAD_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseWRITE_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$parseONLY_SYMBOL();
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesavepointStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSAVEPOINT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseROLLBACK_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWORK_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseTO_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSAVEPOINT_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseidentifier();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              s5 = peg$parseAND_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNO_SYMBOL();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCHAIN_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseNO_SYMBOL();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRELEASE_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRELEASE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSAVEPOINT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parselockStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLOCK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLES_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTABLE_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselockItem();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselockItem();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselockItem();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c2();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLOCK_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseINSTANCE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseFOR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseBACKUP_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUNLOCK_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTABLES_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseTABLE_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c2();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseINSTANCE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parselockItem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselockOption();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselockOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREAD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOCAL_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLOW_PRIORITY_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWRITE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsexaStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseXA_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseSTART_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBEGIN_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsexid();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseJOIN_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseRESUME_SYMBOL();
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseEND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsexid();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseSUSPEND_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseFOR_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseMIGRATE_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsePREPARE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsexid();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseCOMMIT_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsexid();
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseONE_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsePHASE_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseROLLBACK_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsexid();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseRECOVER_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsexaConvert();
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsexaConvert() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c10();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCONVERT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseXID_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsexid() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsetextString();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCOMMA_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextString();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseulong_number();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresetOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMASTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemasterResetOptions();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseQUERY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCACHE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSLAVE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseALL_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsechannel();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsemasterResetOptions() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsereal_ulong_number();
        if (s2 === peg$FAILED) {
          s2 = peg$parsereal_ulonglong_number();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsereplicationStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsePURGE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBINARY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMASTER_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLOGS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseTO_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextLiteral();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseBEFORE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsechangeMaster();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRESET_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseresetOption();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$currPos;
              s5 = peg$parseCOMMA_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseresetOption();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = peg$parseCOMMA_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseresetOption();
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c27();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseRESET_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsePERSIST_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parseifExists();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseidentifier();
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseslave();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s1 = peg$c11();
                if (s1) {
                  s1 = peg$c3;
                } else {
                  s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsechangeReplication();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parsereplicationLoad();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s1 = peg$c28();
                    if (s1) {
                      s1 = peg$c3;
                    } else {
                      s1 = peg$c0;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsegroupReplication();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereplicationLoad() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseLOAD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDATA_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseTABLE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRef();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFROM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMASTER_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechangeMaster() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCHANGE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMASTER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTO_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsechangeMasterOptions();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsechannel();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechangeMasterOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsemasterOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemasterOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemasterOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemasterOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMASTER_HOST_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNETWORK_NAMESPACE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMASTER_BIND_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMASTER_USER_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSINGLE_QUOTED_TEXT();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMASTER_PASSWORD_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseSINGLE_QUOTED_TEXT();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMASTER_PORT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseulong_number();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseulong_number();
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseEQUAL_OPERATOR();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseulong_number();
                        if (s3 !== peg$FAILED) {
                          s1 = [s1, s2, s3];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseMASTER_DELAY_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseEQUAL_OPERATOR();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseulong_number();
                          if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseMASTER_SSL_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseEQUAL_OPERATOR();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseulong_number();
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseMASTER_SSL_CA_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseEQUAL_OPERATOR();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseSINGLE_QUOTED_TEXT();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseEQUAL_OPERATOR();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseSINGLE_QUOTED_TEXT();
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseEQUAL_OPERATOR();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseSINGLE_QUOTED_TEXT();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseMASTER_SSL_CERT_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseEQUAL_OPERATOR();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseSINGLE_QUOTED_TEXT();
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseEQUAL_OPERATOR();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parsemasterTlsCiphersuitesDef();
                                      if (s3 !== peg$FAILED) {
                                        s1 = [s1, s2, s3];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseEQUAL_OPERATOR();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseSINGLE_QUOTED_TEXT();
                                        if (s3 !== peg$FAILED) {
                                          s1 = [s1, s2, s3];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseEQUAL_OPERATOR();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseSINGLE_QUOTED_TEXT();
                                          if (s3 !== peg$FAILED) {
                                            s1 = [s1, s2, s3];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseMASTER_SSL_VERIFY_SERVER_CERT_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseEQUAL_OPERATOR();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parseulong_number();
                                            if (s3 !== peg$FAILED) {
                                              s1 = [s1, s2, s3];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseEQUAL_OPERATOR();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parsetextLiteral();
                                              if (s3 !== peg$FAILED) {
                                                s1 = [s1, s2, s3];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseEQUAL_OPERATOR();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseSINGLE_QUOTED_TEXT();
                                                if (s3 !== peg$FAILED) {
                                                  s1 = [s1, s2, s3];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parseEQUAL_OPERATOR();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parseSINGLE_QUOTED_TEXT();
                                                  if (s3 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseEQUAL_OPERATOR();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseulong_number();
                                                    if (s3 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseEQUAL_OPERATOR();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseulong_number();
                                                      if (s3 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseEQUAL_OPERATOR();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parseserverIdList();
                                                        if (s3 !== peg$FAILED) {
                                                          s1 = [s1, s2, s3];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parseEQUAL_OPERATOR();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parseSINGLE_QUOTED_TEXT();
                                                          if (s3 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parseEQUAL_OPERATOR();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parseulong_number();
                                                            if (s3 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parseEQUAL_OPERATOR();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parseulong_number();
                                                              if (s3 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parseEQUAL_OPERATOR();
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parseprivilegeCheckDef();
                                                                if (s3 !== peg$FAILED) {
                                                                  s1 = [s1, s2, s3];
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseREQUIRE_ROW_FORMAT_SYMBOL();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseEQUAL_OPERATOR();
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parseulong_number();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s1 = [s1, s2, s3];
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = peg$parseEQUAL_OPERATOR();
                                                                  if (s2 !== peg$FAILED) {
                                                                    s3 = peg$parsetablePrimaryKeyCheckDef();
                                                                    if (s3 !== peg$FAILED) {
                                                                      s1 = [s1, s2, s3];
                                                                      s0 = s1;
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsemasterFileDef();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseprivilegeCheckDef() {
      var s0;

      s0 = peg$parseuserIdentifierOrText();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL_SYMBOL();
      }

      return s0;
    }

    function peg$parsetablePrimaryKeyCheckDef() {
      var s0;

      s0 = peg$parseSTREAM_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseON_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOFF_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parsemasterTlsCiphersuitesDef() {
      var s0;

      s0 = peg$parseSINGLE_QUOTED_TEXT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL_SYMBOL();
      }

      return s0;
    }

    function peg$parsemasterFileDef() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMASTER_LOG_FILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMASTER_LOG_POS_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseulonglong_number();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRELAY_LOG_FILE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseRELAY_LOG_POS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseulong_number();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseserverIdList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseulong_number();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseulong_number();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseulong_number();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechangeReplication() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseCHANGE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREPLICATION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFILTER_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefilterDefinition();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsefilterDefinition();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parseCOMMA_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsefilterDefinition();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s7 = peg$c2();
                if (s7) {
                  s7 = peg$c3;
                } else {
                  s7 = peg$c0;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsechannel();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefilterDefinition() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseREPLICATE_DO_DB_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefilterDbList();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsefilterDbList();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseOPEN_PAR_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsefilterTableList();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseOPEN_PAR_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsefilterTableList();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseOPEN_PAR_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsefilterStringList();
                    if (s4 === peg$FAILED) {
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseCLOSE_PAR_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseOPEN_PAR_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsefilterStringList();
                      if (s4 === peg$FAILED) {
                        s4 = peg$c1;
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s5 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseOPEN_PAR_SYMBOL();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsefilterDbPairList();
                        if (s4 === peg$FAILED) {
                          s4 = peg$c1;
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefilterDbList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefilterTableList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsefilterTableRef();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefilterTableRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefilterTableRef();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefilterStringList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSINGLE_QUOTED_TEXT();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSINGLE_QUOTED_TEXT();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSINGLE_QUOTED_TEXT();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefilterDbPairList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseschemaIdentifierPair();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseschemaIdentifierPair();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseschemaIdentifierPair();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslave() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSTART_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSLAVE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseslaveThreadOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseUNTIL_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseslaveUntilOptions();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseslaveConnectionOptions();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsechannel();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSTOP_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSLAVE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseslaveThreadOptions();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsechannel();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseslaveUntilOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsemasterFileDef();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s2 = peg$c29();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEQUAL_OPERATOR();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetextString();
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s2 = peg$c29();
          if (s2) {
            s2 = peg$c3;
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemasterFileDef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemasterFileDef();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslaveConnectionOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c4();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseUSER_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEQUAL_OPERATOR();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetextString();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsePASSWORD_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEQUAL_OPERATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextString();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseDEFAULT_AUTH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseEQUAL_OPERATOR();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetextString();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsePLUGIN_DIR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseEQUAL_OPERATOR();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetextString();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslaveThreadOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseslaveThreadOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseslaveThreadOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseslaveThreadOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslaveThreadOption() {
      var s0;

      s0 = peg$parseRELAY_THREAD_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSQL_THREAD_SYMBOL();
      }

      return s0;
    }

    function peg$parsegroupReplication() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSTART_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSTOP_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGROUP_REPLICATION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepreparedStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsePREPARE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFROM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetextLiteral();
            if (s4 === peg$FAILED) {
              s4 = peg$parseuserVariable();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseexecuteStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDEALLOCATE_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDROP_SYMBOL();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePREPARE_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseexecuteStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseEXECUTE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseUSING_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexecuteVarList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexecuteVarList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseuserVariable();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseuserVariable();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseuserVariable();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecloneStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parseCLONE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseLOCAL_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDATA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDIRECTORY_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseequal();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseSINGLE_QUOTED_TEXT();
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseREMOTE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseFOR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseREPLICATION_SYMBOL();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s3 = peg$c5();
            if (s3) {
              s3 = peg$c3;
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseINSTANCE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseFROM_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseuser();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseCOLON_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseulong_number();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseIDENTIFIED_SYMBOL();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseBY_SYMBOL();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseSINGLE_QUOTED_TEXT();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parsedataDirSSL();
                              if (s12 === peg$FAILED) {
                                s12 = peg$c1;
                              }
                              if (s12 !== peg$FAILED) {
                                s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedataDirSSL() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parsessl();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDATA_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDIRECTORY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseequal();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseSINGLE_QUOTED_TEXT();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsessl();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsessl() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseREQUIRE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNO_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSSL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaccountManagementStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c29();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealterUser();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecreateUser();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedropUser();
          if (s0 === peg$FAILED) {
            s0 = peg$parsegrant();
            if (s0 === peg$FAILED) {
              s0 = peg$parserenameUser();
              if (s0 === peg$FAILED) {
                s0 = peg$parserevoke();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  peg$reportedPos = peg$currPos;
                  s1 = peg$c2();
                  if (s1) {
                    s1 = peg$c3;
                  } else {
                    s1 = peg$c0;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsesetRole();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterUser() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseALTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c15();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseifExists();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsealterUserTail();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterUserTail() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s2 = peg$c30();
      if (s2) {
        s2 = peg$c3;
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecreateUserList();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s2 = peg$c5();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealterUserList();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateUserTail();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c15();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseuser();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIDENTIFIED_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseBY_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsetextString();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  peg$reportedPos = peg$currPos;
                  s7 = peg$c5();
                  if (s7) {
                    s7 = peg$c3;
                  } else {
                    s7 = peg$c0;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsereplacePassword();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s8 = peg$c5();
                    if (s8) {
                      s8 = peg$c3;
                    } else {
                      s8 = peg$c0;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseretainCurrentPassword();
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$c1;
                    }
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c5();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseuser();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsediscardOldPassword();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c2();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseuser();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseDEFAULT_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseROLE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseALL_SYMBOL();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseNONE_SYMBOL();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseroleList();
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c31();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseuser();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseIDENTIFIED_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$parseWITH_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsetextOrIdentifier();
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseBY_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseRANDOM_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parsePASSWORD_SYMBOL();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parseretainCurrentPassword();
                            if (s8 === peg$FAILED) {
                              s8 = peg$c1;
                            }
                            if (s8 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsereal_ulong_number();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePASSWORD_LOCK_TIME_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsereal_ulong_number();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseUNBOUNDED_SYMBOL();
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseuserFunction() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUSER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparentheses();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUser() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCREATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c15();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseifNotExists();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecreateUserList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedefaultRoleClause();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecreateUserTail();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUserTail() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c15();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parserequireClause();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseconnectOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseaccountLockPasswordExpireOptions();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseaccountLockPasswordExpireOptions();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedefaultRoleClause() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c2();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDEFAULT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseROLE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseroleList();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserequireClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREQUIRE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserequireList();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSSL_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseX509_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseNONE_SYMBOL();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconnectOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseulong_number();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseulong_number();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseulong_number();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseulong_number();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseulong_number();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseulong_number();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseulong_number();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseulong_number();
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                }
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaccountLockPasswordExpireOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseACCOUNT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOCK_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseUNLOCK_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePASSWORD_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseEXPIRE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseINTERVAL_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsereal_ulong_number();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDAY_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$parseNEVER_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$parseDEFAULT_SYMBOL();
              }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseHISTORY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsereal_ulong_number();
              if (s4 === peg$FAILED) {
                s4 = peg$parseDEFAULT_SYMBOL();
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseREUSE_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseINTERVAL_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parsereal_ulong_number();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseDAY_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseDEFAULT_SYMBOL();
                  }
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c5();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseREQUIRE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCURRENT_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseDEFAULT_SYMBOL();
                      if (s6 === peg$FAILED) {
                        s6 = peg$parseOPTIONAL_SYMBOL();
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsedropUser() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDROP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c15();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseifExists();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseuserList();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegrant() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseGRANT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c2();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseroleOrPrivilegesList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTO_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseuserList();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseWITH_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseADMIN_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseOPTION_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseroleOrPrivilegesList();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseALL_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsePRIVILEGES_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseON_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseaclType();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsegrantIdentifier();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseTO_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsegrantTargetList();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseversionedRequireClause();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsegrantOptions();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsegrantAs();
                          if (s11 === peg$FAILED) {
                            s11 = peg$c1;
                          }
                          if (s11 !== peg$FAILED) {
                            s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsePROXY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseON_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseuser();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseTO_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsegrantTargetList();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$currPos;
                      s9 = peg$parseWITH_SYMBOL();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseGRANT_SYMBOL();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseOPTION_SYMBOL();
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c0;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c0;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$c1;
                      }
                      if (s8 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegrantTargetList() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c32();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateUserList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c16();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseuserList();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsegrantOptions() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c32();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWITH_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsegrantOption();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsegrantOption();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c16();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWITH_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseGRANT_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseOPTION_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseexceptRoleList() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseEXCEPT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseroleList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewithRoles() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseROLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseroleList();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseALL_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexceptRoleList();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseNONE_SYMBOL();
              if (s3 === peg$FAILED) {
                s3 = peg$parseDEFAULT_SYMBOL();
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegrantAs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewithRoles();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseversionedRequireClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c32();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parserequireClause();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserenameUser() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseRENAME_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseuser();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTO_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseuser();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseuser();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseTO_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseuser();
                      if (s11 !== peg$FAILED) {
                        s8 = [s8, s9, s10, s11];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parseCOMMA_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseuser();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseTO_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseuser();
                        if (s11 !== peg$FAILED) {
                          s8 = [s8, s9, s10, s11];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserevoke() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseREVOKE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c2();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseroleOrPrivilegesList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseFROM_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseuserList();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseroleOrPrivilegesList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseonTypeTo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFROM_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseuserList();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseALL_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsePRIVILEGES_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s6 = peg$c2();
                if (s6) {
                  s6 = peg$c3;
                } else {
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseON_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseaclType();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsegrantIdentifier();
                      if (s9 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseCOMMA_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseGRANT_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseOPTION_SYMBOL();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseFROM_SYMBOL();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseuserList();
                          if (s10 !== peg$FAILED) {
                            s6 = [s6, s7, s8, s9, s10];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                }
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parsePROXY_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseON_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseuser();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseFROM_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseuserList();
                      if (s7 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseonTypeTo() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c8();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaclType();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsegrantIdentifier();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c2();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseaclType();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsegrantIdentifier();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseaclType() {
      var s0;

      s0 = peg$parseTABLE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFUNCTION_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePROCEDURE_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseroleOrPrivilegesList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseroleOrPrivilege();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseroleOrPrivilege();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseroleOrPrivilege();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseroleOrPrivilege() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c27();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseroleIdentifierOrText();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecolumnInternalRefList();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseroleIdentifierOrText();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAT_TEXT_SUFFIX();
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseAT_SIGN_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextOrIdentifier();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSELECT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseINSERT_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseUPDATE_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseREFERENCES_SYMBOL();
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecolumnInternalRefList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseDELETE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUSAGE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseINDEX_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseDROP_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseEXECUTE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseRELOAD_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSHUTDOWN_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsePROCESS_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseFILE_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsePROXY_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseSUPER_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseEVENT_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseTRIGGER_SYMBOL();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseGRANT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPTION_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSHOW_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDATABASES_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCREATE_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseTEMPORARY_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseTABLES_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseROUTINE_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseTABLESPACE_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseUSER_SYMBOL();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseVIEW_SYMBOL();
                        }
                      }
                    }
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseLOCK_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseTABLES_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseREPLICATION_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseCLIENT_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseSLAVE_SYMBOL();
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseSHOW_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseVIEW_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseALTER_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseROUTINE_SYMBOL();
                          if (s2 === peg$FAILED) {
                            s2 = peg$c1;
                          }
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s1 = peg$c27();
                          if (s1) {
                            s1 = peg$c3;
                          } else {
                            s1 = peg$c0;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseCREATE_SYMBOL();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseDROP_SYMBOL();
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseROLE_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegrantIdentifier() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseMULT_OPERATOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDOT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMULT_OPERATOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseDOT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMULT_OPERATOR();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsetableRef();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c12();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseidentifier();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseDOT_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetableRef();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parserequireList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserequireListElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseAND_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parserequireListElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseAND_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserequireListElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserequireListElement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCIPHER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextString();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseISSUER_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextString();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSUBJECT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetextString();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsegrantOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseGRANT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseulong_number();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseulong_number();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseulong_number();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseulong_number();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesetRole() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseROLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseroleList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSET_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseROLE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseNONE_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$parseDEFAULT_SYMBOL();
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSET_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDEFAULT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseROLE_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseroleList();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseNONE_SYMBOL();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseALL_SYMBOL();
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseTO_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseroleList();
                    if (s6 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSET_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseROLE_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseALL_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parseEXCEPT_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseroleList();
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseroleList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserole();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserole();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parserole();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserole() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseroleIdentifierOrText();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseAT_SIGN_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextOrIdentifier();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseAT_TEXT_SUFFIX();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableAdministrationStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseANALYZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenoWriteToBinLog();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTABLE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRefList();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s6 = peg$c2();
              if (s6) {
                s6 = peg$c3;
              } else {
                s6 = peg$c0;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsehistogram();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHECK_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTABLE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetableRefList();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsecheckOption();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsecheckOption();
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCHECKSUM_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTABLE_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetableRefList();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseQUICK_SYMBOL();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseEXTENDED_SYMBOL();
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseOPTIMIZE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenoWriteToBinLog();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseTABLE_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetableRefList();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseREPAIR_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenoWriteToBinLog();
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseTABLE_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetableRefList();
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parserepairType();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parserepairType();
                      }
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsehistogram() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseUPDATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHISTOGRAM_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifierList();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseWITH_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseINT_NUMBER();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseBUCKETS_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDROP_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHISTOGRAM_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseON_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseidentifierList();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecheckOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUPGRADE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseQUICK_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFAST_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMEDIUM_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseEXTENDED_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCHANGED_SYMBOL();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserepairType() {
      var s0;

      s0 = peg$parseQUICK_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEXTENDED_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUSE_FRM_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseinstallUninstallStatment() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseINSTALL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePLUGIN_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSONAME_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSINGLE_QUOTED_TEXT();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseINSTALL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCOMPONENT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetextStringLiteralList();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUNINSTALL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePLUGIN_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseUNINSTALL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseCOMPONENT_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSINGLE_QUOTED_TEXT();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$currPos;
                  s6 = peg$parseCOMMA_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseSINGLE_QUOTED_TEXT();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$currPos;
                    s6 = peg$parseCOMMA_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseSINGLE_QUOTED_TEXT();
                      if (s7 !== peg$FAILED) {
                        s6 = [s6, s7];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesetStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestartOptionValueList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestartOptionValueList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseoptionValueNoOptionType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoptionValueListContinued();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTRANSACTION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetransactionCharacteristics();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseoptionType();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsestartOptionValueListFollowingOptionType();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePASSWORD_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseFOR_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseuser();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseequal();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parsetextString();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsereplacePassword();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseretainCurrentPassword();
                      if (s7 === peg$FAILED) {
                        s7 = peg$c1;
                      }
                      if (s7 !== peg$FAILED) {
                        s5 = [s5, s6, s7];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$parsetextString();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsereplacePassword();
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseretainCurrentPassword();
                        if (s7 === peg$FAILED) {
                          s7 = peg$c1;
                        }
                        if (s7 !== peg$FAILED) {
                          s5 = [s5, s6, s7];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c0;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s5 = peg$c33();
                      if (s5) {
                        s5 = peg$c3;
                      } else {
                        s5 = peg$c0;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseOLD_PASSWORD_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseOPEN_PAR_SYMBOL();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsetextString();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseCLOSE_PAR_SYMBOL();
                              if (s9 !== peg$FAILED) {
                                s5 = [s5, s6, s7, s8, s9];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c0;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c0;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                      if (s4 === peg$FAILED) {
                        s4 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s5 = peg$c30();
                        if (s5) {
                          s5 = peg$c3;
                        } else {
                          s5 = peg$c0;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parsePASSWORD_SYMBOL();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseOPEN_PAR_SYMBOL();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parsetextString();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseCLOSE_PAR_SYMBOL();
                                if (s9 !== peg$FAILED) {
                                  s5 = [s5, s6, s7, s8, s9];
                                  s4 = s5;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$c0;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c0;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c0;
                        }
                      }
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c31();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsePASSWORD_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseFOR_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseuser();
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$c1;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseTO_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseRANDOM_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parsereplacePassword();
                        if (s6 === peg$FAILED) {
                          s6 = peg$c1;
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseretainCurrentPassword();
                          if (s7 === peg$FAILED) {
                            s7 = peg$c1;
                          }
                          if (s7 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetransactionCharacteristics() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsetransactionAccessMode();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseisolationLevel();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseisolationLevel();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseCOMMA_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetransactionAccessMode();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetransactionAccessMode() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREAD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWRITE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseONLY_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseisolationLevel() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseISOLATION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLEVEL_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseREPEATABLE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseREAD_SYMBOL();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseREAD_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCOMMITTED_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseUNCOMMITTED_SYMBOL();
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseSERIALIZABLE_SYMBOL();
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseoptionValueListContinued() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseCOMMA_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoptionValue();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseCOMMA_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoptionValue();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseoptionValueNoOptionType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseinternalVariableName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequal();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesetExprOrDefault();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecharsetClause();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseuserVariable();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseequal();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseexpr();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsesetSystemVariable();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseequal();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesetExprOrDefault();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseNAMES_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseequal();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseexpr();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parsecharsetName();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsecollate();
                    if (s4 === peg$FAILED) {
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s3 = peg$c16();
                    if (s3) {
                      s3 = peg$c3;
                    } else {
                      s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseDEFAULT_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseoptionValue() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseoptionType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinternalVariableName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseequal();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesetExprOrDefault();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseoptionValueNoOptionType();
      }

      return s0;
    }

    function peg$parsesetSystemVariable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAT_AT_SIGN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesetVarIdentType();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinternalVariableName();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestartOptionValueListFollowingOptionType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseoptionValueFollowingOptionType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoptionValueListContinued();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTRANSACTION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetransactionCharacteristics();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseoptionValueFollowingOptionType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseinternalVariableName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequal();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesetExprOrDefault();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesetExprOrDefault() {
      var s0, s1, s2;

      s0 = peg$parseexpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDEFAULT_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseON_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseALL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBINARY_SYMBOL();
            }
          }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c2();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseROW_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseSYSTEM_SYMBOL();
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseshowStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSHOW_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c9();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAUTHORS_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseDATABASES_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parselikeOrWhere();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseshowCommandType();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseTABLES_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseinDb();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parselikeOrWhere();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseFULL_SYMBOL();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseTRIGGERS_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseinDb();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parselikeOrWhere();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseEVENTS_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseinDb();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parselikeOrWhere();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s3 = [s3, s4, s5];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseTABLE_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseSTATUS_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseinDb();
                      if (s5 === peg$FAILED) {
                        s5 = peg$c1;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parselikeOrWhere();
                        if (s6 === peg$FAILED) {
                          s6 = peg$c1;
                        }
                        if (s6 !== peg$FAILED) {
                          s3 = [s3, s4, s5, s6];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseOPEN_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseTABLES_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseinDb();
                        if (s5 === peg$FAILED) {
                          s5 = peg$c1;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parselikeOrWhere();
                          if (s6 === peg$FAILED) {
                            s6 = peg$c1;
                          }
                          if (s6 !== peg$FAILED) {
                            s3 = [s3, s4, s5, s6];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsePLUGINS_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parseENGINE_SYMBOL();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsetextOrIdentifier();
                          if (s4 === peg$FAILED) {
                            s4 = peg$parseALL_SYMBOL();
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseSTATUS_SYMBOL();
                            if (s5 === peg$FAILED) {
                              s5 = peg$parseMUTEX_SYMBOL();
                              if (s5 === peg$FAILED) {
                                s5 = peg$parseLOGS_SYMBOL();
                              }
                            }
                            if (s5 !== peg$FAILED) {
                              s3 = [s3, s4, s5];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseshowCommandType();
                          if (s3 === peg$FAILED) {
                            s3 = peg$c1;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseCOLUMNS_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseFROM_SYMBOL();
                              if (s5 === peg$FAILED) {
                                s5 = peg$parseIN_SYMBOL();
                              }
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parsetableRef();
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parseinDb();
                                  if (s7 === peg$FAILED) {
                                    s7 = peg$c1;
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parselikeOrWhere();
                                    if (s8 === peg$FAILED) {
                                      s8 = peg$c1;
                                    }
                                    if (s8 !== peg$FAILED) {
                                      s3 = [s3, s4, s5, s6, s7, s8];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            s3 = peg$parseBINARY_SYMBOL();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parseMASTER_SYMBOL();
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseLOGS_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              s3 = peg$parseSLAVE_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseHOSTS_SYMBOL();
                                if (s4 === peg$FAILED) {
                                  s4 = peg$currPos;
                                  s5 = peg$parseSTATUS_SYMBOL();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parsenonBlocking();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parsechannel();
                                      if (s7 === peg$FAILED) {
                                        s7 = peg$c1;
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s5 = [s5, s6, s7];
                                        s4 = s5;
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$c0;
                                  }
                                }
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parseBINLOG_SYMBOL();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$parseRELAYLOG_SYMBOL();
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseEVENTS_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$currPos;
                                    s6 = peg$parseIN_SYMBOL();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parsetextString();
                                      if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                      } else {
                                        peg$currPos = s5;
                                        s5 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$c0;
                                    }
                                    if (s5 === peg$FAILED) {
                                      s5 = peg$c1;
                                    }
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$currPos;
                                      s7 = peg$parseFROM_SYMBOL();
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parseulonglong_number();
                                        if (s8 !== peg$FAILED) {
                                          s7 = [s7, s8];
                                          s6 = s7;
                                        } else {
                                          peg$currPos = s6;
                                          s6 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s6;
                                        s6 = peg$c0;
                                      }
                                      if (s6 === peg$FAILED) {
                                        s6 = peg$c1;
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s7 = peg$parselimitClause();
                                        if (s7 === peg$FAILED) {
                                          s7 = peg$c1;
                                        }
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parsechannel();
                                          if (s8 === peg$FAILED) {
                                            s8 = peg$c1;
                                          }
                                          if (s8 !== peg$FAILED) {
                                            s3 = [s3, s4, s5, s6, s7, s8];
                                            s2 = s3;
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  s3 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s4 = peg$c2();
                                  if (s4) {
                                    s4 = peg$c3;
                                  } else {
                                    s4 = peg$c0;
                                  }
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseEXTENDED_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s4 = [s4, s5];
                                      s3 = s4;
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                  }
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$c1;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseINDEX_SYMBOL();
                                    if (s4 === peg$FAILED) {
                                      s4 = peg$parseINDEXES_SYMBOL();
                                      if (s4 === peg$FAILED) {
                                        s4 = peg$parseKEYS_SYMBOL();
                                      }
                                    }
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parsefromOrIn();
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parsetableRef();
                                        if (s6 !== peg$FAILED) {
                                          s7 = peg$parseinDb();
                                          if (s7 === peg$FAILED) {
                                            s7 = peg$c1;
                                          }
                                          if (s7 !== peg$FAILED) {
                                            s8 = peg$parsewhereClause();
                                            if (s8 === peg$FAILED) {
                                              s8 = peg$c1;
                                            }
                                            if (s8 !== peg$FAILED) {
                                              s3 = [s3, s4, s5, s6, s7, s8];
                                              s2 = s3;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$currPos;
                                    s3 = peg$parseSTORAGE_SYMBOL();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$c1;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseENGINES_SYMBOL();
                                      if (s4 !== peg$FAILED) {
                                        s3 = [s3, s4];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$currPos;
                                      s3 = peg$parseCOUNT_SYMBOL();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseOPEN_PAR_SYMBOL();
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parseMULT_OPERATOR();
                                          if (s5 !== peg$FAILED) {
                                            s6 = peg$parseCLOSE_PAR_SYMBOL();
                                            if (s6 !== peg$FAILED) {
                                              s7 = peg$parseWARNINGS_SYMBOL();
                                              if (s7 === peg$FAILED) {
                                                s7 = peg$parseERRORS_SYMBOL();
                                              }
                                              if (s7 !== peg$FAILED) {
                                                s3 = [s3, s4, s5, s6, s7];
                                                s2 = s3;
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$currPos;
                                        s3 = peg$parseWARNINGS_SYMBOL();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parselimitClause();
                                          if (s4 === peg$FAILED) {
                                            s4 = peg$c1;
                                          }
                                          if (s4 !== peg$FAILED) {
                                            s3 = [s3, s4];
                                            s2 = s3;
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$c0;
                                        }
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$currPos;
                                          s3 = peg$parseERRORS_SYMBOL();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parselimitClause();
                                            if (s4 === peg$FAILED) {
                                              s4 = peg$c1;
                                            }
                                            if (s4 !== peg$FAILED) {
                                              s3 = [s3, s4];
                                              s2 = s3;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$parsePROFILES_SYMBOL();
                                            if (s2 === peg$FAILED) {
                                              s2 = peg$currPos;
                                              s3 = peg$parsePROFILE_SYMBOL();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$currPos;
                                                s5 = peg$parseprofileType();
                                                if (s5 !== peg$FAILED) {
                                                  s6 = [];
                                                  s7 = peg$currPos;
                                                  s8 = peg$parseCOMMA_SYMBOL();
                                                  if (s8 !== peg$FAILED) {
                                                    s9 = peg$parseprofileType();
                                                    if (s9 !== peg$FAILED) {
                                                      s8 = [s8, s9];
                                                      s7 = s8;
                                                    } else {
                                                      peg$currPos = s7;
                                                      s7 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s7;
                                                    s7 = peg$c0;
                                                  }
                                                  while (s7 !== peg$FAILED) {
                                                    s6.push(s7);
                                                    s7 = peg$currPos;
                                                    s8 = peg$parseCOMMA_SYMBOL();
                                                    if (s8 !== peg$FAILED) {
                                                      s9 = peg$parseprofileType();
                                                      if (s9 !== peg$FAILED) {
                                                        s8 = [s8, s9];
                                                        s7 = s8;
                                                      } else {
                                                        peg$currPos = s7;
                                                        s7 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s7;
                                                      s7 = peg$c0;
                                                    }
                                                  }
                                                  if (s6 !== peg$FAILED) {
                                                    s5 = [s5, s6];
                                                    s4 = s5;
                                                  } else {
                                                    peg$currPos = s4;
                                                    s4 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s4;
                                                  s4 = peg$c0;
                                                }
                                                if (s4 === peg$FAILED) {
                                                  s4 = peg$c1;
                                                }
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$currPos;
                                                  s6 = peg$parseFOR_SYMBOL();
                                                  if (s6 !== peg$FAILED) {
                                                    s7 = peg$parseQUERY_SYMBOL();
                                                    if (s7 !== peg$FAILED) {
                                                      s8 = peg$parseINT_NUMBER();
                                                      if (s8 !== peg$FAILED) {
                                                        s6 = [s6, s7, s8];
                                                        s5 = s6;
                                                      } else {
                                                        peg$currPos = s5;
                                                        s5 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s5;
                                                      s5 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s5;
                                                    s5 = peg$c0;
                                                  }
                                                  if (s5 === peg$FAILED) {
                                                    s5 = peg$c1;
                                                  }
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = peg$parselimitClause();
                                                    if (s6 === peg$FAILED) {
                                                      s6 = peg$c1;
                                                    }
                                                    if (s6 !== peg$FAILED) {
                                                      s3 = [s3, s4, s5, s6];
                                                      s2 = s3;
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$c0;
                                              }
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$currPos;
                                                s3 = peg$parseoptionType();
                                                if (s3 === peg$FAILED) {
                                                  s3 = peg$c1;
                                                }
                                                if (s3 !== peg$FAILED) {
                                                  s4 = peg$parseSTATUS_SYMBOL();
                                                  if (s4 === peg$FAILED) {
                                                    s4 = peg$parseVARIABLES_SYMBOL();
                                                  }
                                                  if (s4 !== peg$FAILED) {
                                                    s5 = peg$parselikeOrWhere();
                                                    if (s5 === peg$FAILED) {
                                                      s5 = peg$c1;
                                                    }
                                                    if (s5 !== peg$FAILED) {
                                                      s3 = [s3, s4, s5];
                                                      s2 = s3;
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$c0;
                                                }
                                                if (s2 === peg$FAILED) {
                                                  s2 = peg$currPos;
                                                  s3 = peg$parseFULL_SYMBOL();
                                                  if (s3 === peg$FAILED) {
                                                    s3 = peg$c1;
                                                  }
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parsePROCESSLIST_SYMBOL();
                                                    if (s4 !== peg$FAILED) {
                                                      s3 = [s3, s4];
                                                      s2 = s3;
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$c0;
                                                  }
                                                  if (s2 === peg$FAILED) {
                                                    s2 = peg$currPos;
                                                    s3 = peg$parsecharset();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parselikeOrWhere();
                                                      if (s4 === peg$FAILED) {
                                                        s4 = peg$c1;
                                                      }
                                                      if (s4 !== peg$FAILED) {
                                                        s3 = [s3, s4];
                                                        s2 = s3;
                                                      } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$c0;
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                      s2 = peg$currPos;
                                                      s3 = peg$parseCOLLATION_SYMBOL();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parselikeOrWhere();
                                                        if (s4 === peg$FAILED) {
                                                          s4 = peg$c1;
                                                        }
                                                        if (s4 !== peg$FAILED) {
                                                          s3 = [s3, s4];
                                                          s2 = s3;
                                                        } else {
                                                          peg$currPos = s2;
                                                          s2 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$c0;
                                                      }
                                                      if (s2 === peg$FAILED) {
                                                        s2 = peg$currPos;
                                                        peg$reportedPos = peg$currPos;
                                                        s3 = peg$c9();
                                                        if (s3) {
                                                          s3 = peg$c3;
                                                        } else {
                                                          s3 = peg$c0;
                                                        }
                                                        if (s3 !== peg$FAILED) {
                                                          s4 = peg$parseCONTRIBUTORS_SYMBOL();
                                                          if (s4 !== peg$FAILED) {
                                                            s3 = [s3, s4];
                                                            s2 = s3;
                                                          } else {
                                                            peg$currPos = s2;
                                                            s2 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s2;
                                                          s2 = peg$c0;
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                          s2 = peg$parsePRIVILEGES_SYMBOL();
                                                          if (s2 === peg$FAILED) {
                                                            s2 = peg$currPos;
                                                            s3 = peg$parseGRANTS_SYMBOL();
                                                            if (s3 !== peg$FAILED) {
                                                              s4 = peg$currPos;
                                                              s5 = peg$parseFOR_SYMBOL();
                                                              if (s5 !== peg$FAILED) {
                                                                s6 = peg$parseuser();
                                                                if (s6 !== peg$FAILED) {
                                                                  s5 = [s5, s6];
                                                                  s4 = s5;
                                                                } else {
                                                                  peg$currPos = s4;
                                                                  s4 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s4;
                                                                s4 = peg$c0;
                                                              }
                                                              if (s4 === peg$FAILED) {
                                                                s4 = peg$c1;
                                                              }
                                                              if (s4 !== peg$FAILED) {
                                                                s3 = [s3, s4];
                                                                s2 = s3;
                                                              } else {
                                                                peg$currPos = s2;
                                                                s2 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s2;
                                                              s2 = peg$c0;
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                              s2 = peg$currPos;
                                                              s3 = peg$parseGRANTS_SYMBOL();
                                                              if (s3 !== peg$FAILED) {
                                                                s4 = peg$parseFOR_SYMBOL();
                                                                if (s4 !== peg$FAILED) {
                                                                  s5 = peg$parseuser();
                                                                  if (s5 !== peg$FAILED) {
                                                                    s6 = peg$parseUSING_SYMBOL();
                                                                    if (s6 !== peg$FAILED) {
                                                                      s7 = peg$parseuserList();
                                                                      if (s7 !== peg$FAILED) {
                                                                        s3 = [s3, s4, s5, s6, s7];
                                                                        s2 = s3;
                                                                      } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s2;
                                                                  s2 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s2;
                                                                s2 = peg$c0;
                                                              }
                                                              if (s2 === peg$FAILED) {
                                                                s2 = peg$currPos;
                                                                s3 = peg$parseMASTER_SYMBOL();
                                                                if (s3 !== peg$FAILED) {
                                                                  s4 = peg$parseSTATUS_SYMBOL();
                                                                  if (s4 !== peg$FAILED) {
                                                                    s3 = [s3, s4];
                                                                    s2 = s3;
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s2;
                                                                  s2 = peg$c0;
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                  s2 = peg$currPos;
                                                                  s3 = peg$parseCREATE_SYMBOL();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s4 = peg$currPos;
                                                                    s5 = peg$parseDATABASE_SYMBOL();
                                                                    if (s5 !== peg$FAILED) {
                                                                      s6 = peg$parseifNotExists();
                                                                      if (s6 === peg$FAILED) {
                                                                        s6 = peg$c1;
                                                                      }
                                                                      if (s6 !== peg$FAILED) {
                                                                        s7 = peg$parseidentifier();
                                                                        if (s7 !== peg$FAILED) {
                                                                          s5 = [s5, s6, s7];
                                                                          s4 = s5;
                                                                        } else {
                                                                          peg$currPos = s4;
                                                                          s4 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s4;
                                                                        s4 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s4;
                                                                      s4 = peg$c0;
                                                                    }
                                                                    if (s4 === peg$FAILED) {
                                                                      s4 = peg$currPos;
                                                                      s5 = peg$parseEVENT_SYMBOL();
                                                                      if (s5 !== peg$FAILED) {
                                                                        s6 = peg$parsequalifiedIdentifier();
                                                                        if (s6 !== peg$FAILED) {
                                                                          s5 = [s5, s6];
                                                                          s4 = s5;
                                                                        } else {
                                                                          peg$currPos = s4;
                                                                          s4 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s4;
                                                                        s4 = peg$c0;
                                                                      }
                                                                      if (s4 === peg$FAILED) {
                                                                        s4 = peg$currPos;
                                                                        s5 = peg$parseFUNCTION_SYMBOL();
                                                                        if (s5 !== peg$FAILED) {
                                                                          s6 = peg$parsequalifiedIdentifier();
                                                                          if (s6 !== peg$FAILED) {
                                                                            s5 = [s5, s6];
                                                                            s4 = s5;
                                                                          } else {
                                                                            peg$currPos = s4;
                                                                            s4 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s4;
                                                                          s4 = peg$c0;
                                                                        }
                                                                        if (s4 === peg$FAILED) {
                                                                          s4 = peg$currPos;
                                                                          s5 = peg$parsePROCEDURE_SYMBOL();
                                                                          if (s5 !== peg$FAILED) {
                                                                            s6 = peg$parsequalifiedIdentifier();
                                                                            if (s6 !== peg$FAILED) {
                                                                              s5 = [s5, s6];
                                                                              s4 = s5;
                                                                            } else {
                                                                              peg$currPos = s4;
                                                                              s4 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s4;
                                                                            s4 = peg$c0;
                                                                          }
                                                                          if (s4 === peg$FAILED) {
                                                                            s4 = peg$currPos;
                                                                            s5 = peg$parseTABLE_SYMBOL();
                                                                            if (s5 !== peg$FAILED) {
                                                                              s6 = peg$parsetableRef();
                                                                              if (s6 !== peg$FAILED) {
                                                                                s5 = [s5, s6];
                                                                                s4 = s5;
                                                                              } else {
                                                                                peg$currPos = s4;
                                                                                s4 = peg$c0;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s4;
                                                                              s4 = peg$c0;
                                                                            }
                                                                            if (s4 === peg$FAILED) {
                                                                              s4 = peg$currPos;
                                                                              s5 = peg$parseTRIGGER_SYMBOL();
                                                                              if (s5 !== peg$FAILED) {
                                                                                s6 = peg$parsequalifiedIdentifier();
                                                                                if (s6 !== peg$FAILED) {
                                                                                  s5 = [s5, s6];
                                                                                  s4 = s5;
                                                                                } else {
                                                                                  peg$currPos = s4;
                                                                                  s4 = peg$c0;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s4;
                                                                                s4 = peg$c0;
                                                                              }
                                                                              if (s4 === peg$FAILED) {
                                                                                s4 = peg$currPos;
                                                                                s5 = peg$parseVIEW_SYMBOL();
                                                                                if (s5 !== peg$FAILED) {
                                                                                  s6 = peg$parseviewRef();
                                                                                  if (s6 !== peg$FAILED) {
                                                                                    s5 = [s5, s6];
                                                                                    s4 = s5;
                                                                                  } else {
                                                                                    peg$currPos = s4;
                                                                                    s4 = peg$c0;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s4;
                                                                                  s4 = peg$c0;
                                                                                }
                                                                                if (s4 === peg$FAILED) {
                                                                                  s4 = peg$currPos;
                                                                                  peg$reportedPos = peg$currPos;
                                                                                  s5 = peg$c10();
                                                                                  if (s5) {
                                                                                    s5 = peg$c3;
                                                                                  } else {
                                                                                    s5 = peg$c0;
                                                                                  }
                                                                                  if (s5 !== peg$FAILED) {
                                                                                    s6 = peg$parseUSER_SYMBOL();
                                                                                    if (s6 !== peg$FAILED) {
                                                                                      s7 = peg$parseuser();
                                                                                      if (s7 !== peg$FAILED) {
                                                                                        s5 = [s5, s6, s7];
                                                                                        s4 = s5;
                                                                                      } else {
                                                                                        peg$currPos = s4;
                                                                                        s4 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s4;
                                                                                      s4 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s4;
                                                                                    s4 = peg$c0;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    if (s4 !== peg$FAILED) {
                                                                      s3 = [s3, s4];
                                                                      s2 = s3;
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$c0;
                                                                  }
                                                                  if (s2 === peg$FAILED) {
                                                                    s2 = peg$currPos;
                                                                    s3 = peg$parsePROCEDURE_SYMBOL();
                                                                    if (s3 !== peg$FAILED) {
                                                                      s4 = peg$parseSTATUS_SYMBOL();
                                                                      if (s4 !== peg$FAILED) {
                                                                        s5 = peg$parselikeOrWhere();
                                                                        if (s5 === peg$FAILED) {
                                                                          s5 = peg$c1;
                                                                        }
                                                                        if (s5 !== peg$FAILED) {
                                                                          s3 = [s3, s4, s5];
                                                                          s2 = s3;
                                                                        } else {
                                                                          peg$currPos = s2;
                                                                          s2 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$c0;
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                      s2 = peg$currPos;
                                                                      s3 = peg$parseFUNCTION_SYMBOL();
                                                                      if (s3 !== peg$FAILED) {
                                                                        s4 = peg$parseSTATUS_SYMBOL();
                                                                        if (s4 !== peg$FAILED) {
                                                                          s5 = peg$parselikeOrWhere();
                                                                          if (s5 === peg$FAILED) {
                                                                            s5 = peg$c1;
                                                                          }
                                                                          if (s5 !== peg$FAILED) {
                                                                            s3 = [s3, s4, s5];
                                                                            s2 = s3;
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s2;
                                                                          s2 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$c0;
                                                                      }
                                                                      if (s2 === peg$FAILED) {
                                                                        s2 = peg$currPos;
                                                                        s3 = peg$parsePROCEDURE_SYMBOL();
                                                                        if (s3 !== peg$FAILED) {
                                                                          s4 = peg$parseCODE_SYMBOL();
                                                                          if (s4 !== peg$FAILED) {
                                                                            s5 = peg$parsequalifiedIdentifier();
                                                                            if (s5 !== peg$FAILED) {
                                                                              s3 = [s3, s4, s5];
                                                                              s2 = s3;
                                                                            } else {
                                                                              peg$currPos = s2;
                                                                              s2 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s2;
                                                                          s2 = peg$c0;
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                          s2 = peg$currPos;
                                                                          s3 = peg$parseFUNCTION_SYMBOL();
                                                                          if (s3 !== peg$FAILED) {
                                                                            s4 = peg$parseCODE_SYMBOL();
                                                                            if (s4 !== peg$FAILED) {
                                                                              s5 = peg$parsequalifiedIdentifier();
                                                                              if (s5 !== peg$FAILED) {
                                                                                s3 = [s3, s4, s5];
                                                                                s2 = s3;
                                                                              } else {
                                                                                peg$currPos = s2;
                                                                                s2 = peg$c0;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s2;
                                                                              s2 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$c0;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseshowCommandType() {
      var s0, s1, s2, s3;

      s0 = peg$parseFULL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c2();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEXTENDED_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFULL_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsenonBlocking() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c34();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNONBLOCKING_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefromOrIn() {
      var s0;

      s0 = peg$parseFROM_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIN_SYMBOL();
      }

      return s0;
    }

    function peg$parseinDb() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsefromOrIn();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseprofileType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBLOCK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIO_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCONTEXT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSWITCHES_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePAGE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFAULTS_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseALL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCPU_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIPC_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseMEMORY_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSOURCE_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSWAPS_SYMBOL();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseotherAdministrativeStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseBINLOG_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCACHE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseINDEX_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsekeyCacheListOrParts();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseIN_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifier();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseDEFAULT_SYMBOL();
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFLUSH_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenoWriteToBinLog();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseflushTables();
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseflushOption();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$currPos;
                  s7 = peg$parseCOMMA_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseflushOption();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$currPos;
                    s7 = peg$parseCOMMA_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseflushOption();
                      if (s8 !== peg$FAILED) {
                        s7 = [s7, s8];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseKILL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseCONNECTION_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseQUERY_SYMBOL();
              }
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpr();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseLOAD_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseINDEX_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseINTO_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCACHE_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsepreloadTail();
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s1 = peg$c21();
                if (s1) {
                  s1 = peg$c3;
                } else {
                  s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseSHUTDOWN_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekeyCacheListOrParts() {
      var s0;

      s0 = peg$parsekeyCacheList();
      if (s0 === peg$FAILED) {
        s0 = peg$parseassignToKeycachePartition();
      }

      return s0;
    }

    function peg$parsekeyCacheList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseassignToKeycache();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseassignToKeycache();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseassignToKeycache();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassignToKeycache() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecacheKeyList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassignToKeycachePartition() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseallOrPartitionNameList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecacheKeyList();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecacheKeyList() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekeyOrIndex();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekeyUsageList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeyUsageElement() {
      var s0;

      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePRIMARY_SYMBOL();
      }

      return s0;
    }

    function peg$parsekeyUsageList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsekeyUsageElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsekeyUsageElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsekeyUsageElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseflushOption() {
      var s0, s1, s2, s3;

      s0 = peg$parseDES_KEY_FILE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHOSTS_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePRIVILEGES_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSTATUS_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseUSER_RESOURCES_SYMBOL();
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselogType();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLOGS_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRELAY_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseLOGS_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsechannel();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c8();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseQUERY_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseCACHE_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c15();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPTIMIZER_COSTS_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselogType() {
      var s0;

      s0 = peg$parseBINARY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseENGINE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseERROR_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGENERAL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSLOW_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseflushTables() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseTABLES_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTABLE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseWITH_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseREAD_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLOCK_SYMBOL();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseidentifierList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseflushTablesOptions();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseflushTablesOptions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c29();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEXPORT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWITH_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseREAD_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLOCK_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsepreloadTail() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseadminPartition();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecacheKeyList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseIGNORE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseLEAVES_SYMBOL();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepreloadList();
      }

      return s0;
    }

    function peg$parsepreloadList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepreloadKeys();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsepreloadKeys();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepreloadKeys();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepreloadKeys() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecacheKeyList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseIGNORE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLEAVES_SYMBOL();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseadminPartition() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsePARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseallOrPartitionNameList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresourceGroupManagement() {
      var s0;

      s0 = peg$parsecreateResourceGroup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsealterResourceGroup();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesetResourceGroup();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedropResourceGroup();
          }
        }
      }

      return s0;
    }

    function peg$parsecreateResourceGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseCREATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRESOURCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseTYPE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseequal();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseUSER_SYMBOL();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseSYSTEM_SYMBOL();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseresourceGroupVcpuList();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseresourceGroupPriority();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseresourceGroupEnableDisable();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresourceGroupVcpuList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseVCPU_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequal();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevcpuNumOrRange();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevcpuNumOrRange();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsevcpuNumOrRange();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevcpuNumOrRange() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseINT_NUMBER();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMINUS_OPERATOR();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseINT_NUMBER();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresourceGroupPriority() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseTHREAD_PRIORITY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequal();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseINT_NUMBER();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresourceGroupEnableDisable() {
      var s0;

      s0 = peg$parseENABLE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDISABLE_SYMBOL();
      }

      return s0;
    }

    function peg$parsealterResourceGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseALTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRESOURCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseresourceGroupVcpuList();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseresourceGroupPriority();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseresourceGroupEnableDisable();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseFORCE_SYMBOL();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesetResourceGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRESOURCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseFOR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsethreadIdList();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsethreadIdList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsereal_ulong_number();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsereal_ulong_number();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsereal_ulong_number();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropResourceGroup() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDROP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRESOURCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFORCE_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseutilityStatement() {
      var s0, s1, s2;

      s0 = peg$parsedescribeStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexplainStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehelpCommand();
          if (s0 === peg$FAILED) {
            s0 = peg$parseuseCommand();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c16();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseRESTART_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedescribeStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseEXPLAIN_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDESCRIBE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDESC_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableRef();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextString();
          if (s3 === peg$FAILED) {
            s3 = peg$parsefieldIdentifier();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexplainStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseEXPLAIN_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDESCRIBE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDESC_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c8();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEXTENDED_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c8();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsePARTITIONS_SYMBOL();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s3 = peg$c26();
            if (s3) {
              s3 = peg$c3;
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseFORMAT_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseEQUAL_OPERATOR();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsetextOrIdentifier();
                  if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s3 = peg$c31();
              if (s3) {
                s3 = peg$c3;
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseANALYZE_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c13();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseANALYZE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseFORMAT_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseEQUAL_OPERATOR();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsetextOrIdentifier();
                        if (s7 !== peg$FAILED) {
                          s3 = [s3, s4, s5, s6, s7];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexplainableStatement();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexplainableStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseselectStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c35();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedeleteStatement();
          if (s2 === peg$FAILED) {
            s2 = peg$parseinsertStatement();
            if (s2 === peg$FAILED) {
              s2 = peg$parsereplaceStatement();
              if (s2 === peg$FAILED) {
                s2 = peg$parseupdateStatement();
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c11();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFOR_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseCONNECTION_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsereal_ulong_number();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsehelpCommand() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHELP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuseCommand() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseexprPrimary();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseexprTail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseexprTail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexprPrimary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseboolPri();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseIS_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenotRule();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTRUE_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseFALSE_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseUNKNOWN_SYMBOL();
              }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNOT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexprPrimary();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseexprTail() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAND_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLOGICAL_AND_OPERATOR();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c37(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseXOR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c38(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseOR_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLOGICAL_OR_OPERATOR();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpr();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c39(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseboolPri() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepredicate();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseboolPriTail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseboolPriTail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseboolPriTail() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenotRule();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNULL_SYMBOL();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c40(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecompOp();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepredicate();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c41(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecompOp();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseALL_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseANY_SYMBOL();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsequeryExpressionParens();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c42();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c12();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseMEMBER_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseOF_SYMBOL();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsesimpleExprWithParentheses();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c43(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSOUNDS_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseLIKE_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsebitExpr();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c44(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecompOp() {
      var s0;

      s0 = peg$parseEQUAL_OPERATOR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL_SAFE_EQUAL_OPERATOR();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGREATER_OR_EQUAL_OPERATOR();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGREATER_THAN_OPERATOR();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLESS_OR_EQUAL_OPERATOR();
              if (s0 === peg$FAILED) {
                s0 = peg$parseLESS_THAN_OPERATOR();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseNOT_EQUAL_OPERATOR();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepredicate() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebitExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsenotRule();
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepredicateOperations();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c12();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMEMBER_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseOF_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesimpleExprWithParentheses();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseSOUNDS_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseLIKE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsebitExpr();
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepredicateOperations() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsequeryExpressionParens();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexprList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBETWEEN_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsebitExpr();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseAND_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsepredicate();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLIKE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesimpleExpr();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseESCAPE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsesimpleExpr();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseREGEXP_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebitExpr();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsebitExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesimpleExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsebitExprTail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsebitExprTail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebitExprTail() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBITWISE_XOR_OPERATOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesimpleExpr();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c45(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMULT_OPERATOR();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDIV_OPERATOR();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMOD_OPERATOR();
            if (s1 === peg$FAILED) {
              s1 = peg$parseDIV_SYMBOL();
              if (s1 === peg$FAILED) {
                s1 = peg$parseMOD_SYMBOL();
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesimpleExpr();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c46(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePLUS_OPERATOR();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMINUS_OPERATOR();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesimpleExpr();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c47(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePLUS_OPERATOR();
            if (s1 === peg$FAILED) {
              s1 = peg$parseMINUS_OPERATOR();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseINTERVAL_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpr();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseinterval();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c48(s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSHIFT_LEFT_OPERATOR();
              if (s1 === peg$FAILED) {
                s1 = peg$parseSHIFT_RIGHT_OPERATOR();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsesimpleExpr();
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c49(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseBITWISE_AND_OPERATOR();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsesimpleExpr();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c50(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseBITWISE_OR_OPERATOR();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsesimpleExpr();
                    if (s2 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c51(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesimpleExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesimpleExprPrimary();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsesimpleExprTail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesimpleExprTail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleExprPrimary() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseequal();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexpr();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefieldIdentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsejsonOperator();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseruntimeFunctionCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefunctionCall();
            if (s0 === peg$FAILED) {
              s0 = peg$parseliteral();
              if (s0 === peg$FAILED) {
                s0 = peg$parsePARAM_MARKER();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesumExpr();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s1 = peg$c2();
                    if (s1) {
                      s1 = peg$c3;
                    } else {
                      s1 = peg$c0;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsegroupingOperation();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s1 = peg$c2();
                      if (s1) {
                        s1 = peg$c3;
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsewindowFunctionCall();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsePLUS_OPERATOR();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseMINUS_OPERATOR();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseBITWISE_NOT_OPERATOR();
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsesimpleExprPrimary();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsenot2Rule();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsesimpleExprPrimary();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseROW_SYMBOL();
                            if (s1 === peg$FAILED) {
                              s1 = peg$c1;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseOPEN_PAR_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseexprList();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseCLOSE_PAR_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseEXISTS_SYMBOL();
                              if (s1 === peg$FAILED) {
                                s1 = peg$c1;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parsequeryExpressionParens();
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseOPEN_CURLY_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseidentifier();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseexpr();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseCLOSE_CURLY_SYMBOL();
                                      if (s4 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseMATCH_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseidentListArg();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseAGAINST_SYMBOL();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseOPEN_PAR_SYMBOL();
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parsebitExpr();
                                          if (s5 !== peg$FAILED) {
                                            s6 = peg$parsefulltextOptions();
                                            if (s6 === peg$FAILED) {
                                              s6 = peg$c1;
                                            }
                                            if (s6 !== peg$FAILED) {
                                              s7 = peg$parseCLOSE_PAR_SYMBOL();
                                              if (s7 !== peg$FAILED) {
                                                s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseBINARY_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsesimpleExprPrimary();
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseCAST_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseOPEN_PAR_SYMBOL();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseexpr();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parseAS_SYMBOL();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parsecastType();
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parsearrayCast();
                                                if (s6 === peg$FAILED) {
                                                  s6 = peg$c1;
                                                }
                                                if (s6 !== peg$FAILED) {
                                                  s7 = peg$parseCLOSE_PAR_SYMBOL();
                                                  if (s7 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseCASE_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseexpr();
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$c1;
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s3 = [];
                                            s4 = peg$currPos;
                                            s5 = peg$parsewhenExpression();
                                            if (s5 !== peg$FAILED) {
                                              s6 = peg$parsethenExpression();
                                              if (s6 !== peg$FAILED) {
                                                s5 = [s5, s6];
                                                s4 = s5;
                                              } else {
                                                peg$currPos = s4;
                                                s4 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s4;
                                              s4 = peg$c0;
                                            }
                                            if (s4 !== peg$FAILED) {
                                              while (s4 !== peg$FAILED) {
                                                s3.push(s4);
                                                s4 = peg$currPos;
                                                s5 = peg$parsewhenExpression();
                                                if (s5 !== peg$FAILED) {
                                                  s6 = peg$parsethenExpression();
                                                  if (s6 !== peg$FAILED) {
                                                    s5 = [s5, s6];
                                                    s4 = s5;
                                                  } else {
                                                    peg$currPos = s4;
                                                    s4 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s4;
                                                  s4 = peg$c0;
                                                }
                                              }
                                            } else {
                                              s3 = peg$c0;
                                            }
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parseelseExpression();
                                              if (s4 === peg$FAILED) {
                                                s4 = peg$c1;
                                              }
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parseEND_SYMBOL();
                                                if (s5 !== peg$FAILED) {
                                                  s1 = [s1, s2, s3, s4, s5];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseCONVERT_SYMBOL();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseOPEN_PAR_SYMBOL();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseexpr();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseCOMMA_SYMBOL();
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$parsecastType();
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                    if (s6 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3, s4, s5, s6];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseCONVERT_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseOPEN_PAR_SYMBOL();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseexpr();
                                                if (s3 !== peg$FAILED) {
                                                  s4 = peg$parseUSING_SYMBOL();
                                                  if (s4 !== peg$FAILED) {
                                                    s5 = peg$parsecharsetName();
                                                    if (s5 !== peg$FAILED) {
                                                      s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                      if (s6 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3, s4, s5, s6];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseDEFAULT_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parsesimpleIdentifier();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parseCLOSE_PAR_SYMBOL();
                                                    if (s4 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3, s4];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseVALUES_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parsesimpleIdentifier();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parseCLOSE_PAR_SYMBOL();
                                                      if (s4 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3, s4];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseINTERVAL_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseexpr();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseinterval();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parsePLUS_OPERATOR();
                                                        if (s4 !== peg$FAILED) {
                                                          s5 = peg$parseexpr();
                                                          if (s5 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3, s4, s5];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesimpleExprTail() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCOLLATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c52(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLOGICAL_OR_OPERATOR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesimpleExpr();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c53(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseINTERVAL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpr();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseinterval();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsePLUS_OPERATOR();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseexpr();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c54(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsearrayCast() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c12();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseARRAY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejsonOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c55();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJSON_SEPARATOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c6();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseJSON_UNQUOTED_SEPARATOR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesumExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseAVG_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDISTINCT_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseinSumExpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s7 = peg$c2();
                if (s7) {
                  s7 = peg$c3;
                } else {
                  s7 = peg$c0;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsewindowingClause();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBIT_AND_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBIT_OR_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseBIT_XOR_SYMBOL();
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinSumExpr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s6 = peg$c2();
                if (s6) {
                  s6 = peg$c3;
                } else {
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsewindowingClause();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c2();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsejsonFunction();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCOUNT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPEN_PAR_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseALL_SYMBOL();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseMULT_OPERATOR();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s7 = peg$c2();
                      if (s7) {
                        s7 = peg$c3;
                      } else {
                        s7 = peg$c0;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsewindowingClause();
                        if (s8 !== peg$FAILED) {
                          s7 = [s7, s8];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCOUNT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPEN_PAR_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseALL_SYMBOL();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseMULT_OPERATOR();
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseinSumExpr();
                    if (s3 === peg$FAILED) {
                      s3 = peg$currPos;
                      s4 = peg$parseDISTINCT_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseexprList();
                        if (s5 !== peg$FAILED) {
                          s4 = [s4, s5];
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c0;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s6 = peg$c2();
                      if (s6) {
                        s6 = peg$c3;
                      } else {
                        s6 = peg$c0;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsewindowingClause();
                        if (s7 !== peg$FAILED) {
                          s6 = [s6, s7];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                      if (s5 === peg$FAILED) {
                        s5 = peg$c1;
                      }
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMIN_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseOPEN_PAR_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseDISTINCT_SYMBOL();
                    if (s3 === peg$FAILED) {
                      s3 = peg$c1;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseinSumExpr();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s7 = peg$c2();
                          if (s7) {
                            s7 = peg$c3;
                          } else {
                            s7 = peg$c0;
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsewindowingClause();
                            if (s8 !== peg$FAILED) {
                              s7 = [s7, s8];
                              s6 = s7;
                            } else {
                              peg$currPos = s6;
                              s6 = peg$c0;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c0;
                          }
                          if (s6 === peg$FAILED) {
                            s6 = peg$c1;
                          }
                          if (s6 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseMAX_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseDISTINCT_SYMBOL();
                      if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseinSumExpr();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s7 = peg$c2();
                            if (s7) {
                              s7 = peg$c3;
                            } else {
                              s7 = peg$c0;
                            }
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parsewindowingClause();
                              if (s8 !== peg$FAILED) {
                                s7 = [s7, s8];
                                s6 = s7;
                              } else {
                                peg$currPos = s6;
                                s6 = peg$c0;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$c0;
                            }
                            if (s6 === peg$FAILED) {
                              s6 = peg$c1;
                            }
                            if (s6 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseSTD_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseOPEN_PAR_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseinSumExpr();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s6 = peg$c2();
                            if (s6) {
                              s6 = peg$c3;
                            } else {
                              s6 = peg$c0;
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parsewindowingClause();
                              if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                              } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$c0;
                            }
                            if (s5 === peg$FAILED) {
                              s5 = peg$c1;
                            }
                            if (s5 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseVARIANCE_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseOPEN_PAR_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseinSumExpr();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseCLOSE_PAR_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s6 = peg$c2();
                              if (s6) {
                                s6 = peg$c3;
                              } else {
                                s6 = peg$c0;
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parsewindowingClause();
                                if (s7 !== peg$FAILED) {
                                  s6 = [s6, s7];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$c0;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                              }
                              if (s5 === peg$FAILED) {
                                s5 = peg$c1;
                              }
                              if (s5 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseSTDDEV_SAMP_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseOPEN_PAR_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseinSumExpr();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseCLOSE_PAR_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s6 = peg$c2();
                                if (s6) {
                                  s6 = peg$c3;
                                } else {
                                  s6 = peg$c0;
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parsewindowingClause();
                                  if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$c0;
                                }
                                if (s5 === peg$FAILED) {
                                  s5 = peg$c1;
                                }
                                if (s5 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4, s5];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseVAR_SAMP_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseOPEN_PAR_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseinSumExpr();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseCLOSE_PAR_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s6 = peg$c2();
                                  if (s6) {
                                    s6 = peg$c3;
                                  } else {
                                    s6 = peg$c0;
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parsewindowingClause();
                                    if (s7 !== peg$FAILED) {
                                      s6 = [s6, s7];
                                      s5 = s6;
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                  }
                                  if (s5 === peg$FAILED) {
                                    s5 = peg$c1;
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSUM_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseOPEN_PAR_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseDISTINCT_SYMBOL();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$c1;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseinSumExpr();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$currPos;
                                      peg$reportedPos = peg$currPos;
                                      s7 = peg$c2();
                                      if (s7) {
                                        s7 = peg$c3;
                                      } else {
                                        s7 = peg$c0;
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parsewindowingClause();
                                        if (s8 !== peg$FAILED) {
                                          s7 = [s7, s8];
                                          s6 = s7;
                                        } else {
                                          peg$currPos = s6;
                                          s6 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s6;
                                        s6 = peg$c0;
                                      }
                                      if (s6 === peg$FAILED) {
                                        s6 = peg$c1;
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseGROUP_CONCAT_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseDISTINCT_SYMBOL();
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$c1;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseexprList();
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parseorderClause();
                                      if (s5 === peg$FAILED) {
                                        s5 = peg$c1;
                                      }
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$currPos;
                                        s7 = peg$parseSEPARATOR_SYMBOL();
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parsetextString();
                                          if (s8 !== peg$FAILED) {
                                            s7 = [s7, s8];
                                            s6 = s7;
                                          } else {
                                            peg$currPos = s6;
                                            s6 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s6;
                                          s6 = peg$c0;
                                        }
                                        if (s6 === peg$FAILED) {
                                          s6 = peg$c1;
                                        }
                                        if (s6 !== peg$FAILED) {
                                          s7 = peg$parseCLOSE_PAR_SYMBOL();
                                          if (s7 !== peg$FAILED) {
                                            s8 = peg$currPos;
                                            peg$reportedPos = peg$currPos;
                                            s9 = peg$c2();
                                            if (s9) {
                                              s9 = peg$c3;
                                            } else {
                                              s9 = peg$c0;
                                            }
                                            if (s9 !== peg$FAILED) {
                                              s10 = peg$parsewindowingClause();
                                              if (s10 !== peg$FAILED) {
                                                s9 = [s9, s10];
                                                s8 = s9;
                                              } else {
                                                peg$currPos = s8;
                                                s8 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s8;
                                              s8 = peg$c0;
                                            }
                                            if (s8 === peg$FAILED) {
                                              s8 = peg$c1;
                                            }
                                            if (s8 !== peg$FAILED) {
                                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegroupingOperation() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseGROUPING_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexprList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowFunctionCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseROW_NUMBER_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseRANK_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDENSE_RANK_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseCUME_DIST_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parsePERCENT_RANK_SYMBOL();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparentheses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewindowingClause();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNTILE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesimpleExprWithParentheses();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsewindowingClause();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLEAD_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLAG_SYMBOL();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOPEN_PAR_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseexpr();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseleadLagInfo();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsenullTreatment();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsewindowingClause();
                      if (s7 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFIRST_VALUE_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseLAST_VALUE_SYMBOL();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexprWithParentheses();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenullTreatment();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsewindowingClause();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseNTH_VALUE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPEN_PAR_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpr();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCOMMA_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsesimpleExpr();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$currPos;
                          s8 = peg$parseFROM_SYMBOL();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseFIRST_SYMBOL();
                            if (s9 === peg$FAILED) {
                              s9 = peg$parseLAST_SYMBOL();
                            }
                            if (s9 !== peg$FAILED) {
                              s8 = [s8, s9];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$c0;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$c0;
                          }
                          if (s7 === peg$FAILED) {
                            s7 = peg$c1;
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsenullTreatment();
                            if (s8 === peg$FAILED) {
                              s8 = peg$c1;
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parsewindowingClause();
                              if (s9 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewindowingClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOVER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parsewindowSpec();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseleadLagInfo() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCOMMA_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseulonglong_number();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePARAM_MARKER();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenullTreatment() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseRESPECT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIGNORE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNULLS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejsonFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseJSON_ARRAYAGG_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinSumExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsewindowingClause();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseJSON_OBJECTAGG_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinSumExpr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCOMMA_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseinSumExpr();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsewindowingClause();
                    if (s7 === peg$FAILED) {
                      s7 = peg$c1;
                    }
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseinSumExpr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseALL_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidentListArg() {
      var s0, s1, s2, s3;

      s0 = peg$parseidentList();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPEN_PAR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentList();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCLOSE_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseidentList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesimpleIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesimpleIdentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesimpleIdentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefulltextOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBOOLEAN_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMODE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIN_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNATURAL_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLANGUAGE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseMODE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseWITH_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQUERY_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseEXPANSION_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseWITH_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseQUERY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseEXPANSION_SYMBOL();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseruntimeFunctionCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseCHAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexprList();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseUSING_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecharsetName();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCURRENT_USER_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseparentheses();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDATE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexprWithParentheses();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDAY_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexprWithParentheses();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseHOUR_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseexprWithParentheses();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseINSERT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseOPEN_PAR_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpr();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseCOMMA_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseexpr();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseCOMMA_SYMBOL();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseexpr();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseCOMMA_SYMBOL();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseexpr();
                                if (s9 !== peg$FAILED) {
                                  s10 = peg$parseCLOSE_PAR_SYMBOL();
                                  if (s10 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseINTERVAL_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseexpr();
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$currPos;
                        s6 = peg$parseCOMMA_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseexpr();
                          if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                        if (s5 !== peg$FAILED) {
                          while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$currPos;
                            s6 = peg$parseCOMMA_SYMBOL();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseexpr();
                              if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                              } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$c0;
                            }
                          }
                        } else {
                          s4 = peg$c0;
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseLEFT_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseOPEN_PAR_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseexpr();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCOMMA_SYMBOL();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseexpr();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parseCLOSE_PAR_SYMBOL();
                              if (s6 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseMINUTE_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseexprWithParentheses();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseMONTH_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseexprWithParentheses();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseRIGHT_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseOPEN_PAR_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseexpr();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseCOMMA_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseexpr();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                                    if (s6 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5, s6];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSECOND_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseexprWithParentheses();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseTIME_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseexprWithParentheses();
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseTIMESTAMP_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseexpr();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$currPos;
                                      s5 = peg$parseCOMMA_SYMBOL();
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parseexpr();
                                        if (s6 !== peg$FAILED) {
                                          s5 = [s5, s6];
                                          s4 = s5;
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$c0;
                                      }
                                      if (s4 === peg$FAILED) {
                                        s4 = peg$c1;
                                      }
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                                        if (s5 !== peg$FAILED) {
                                          s1 = [s1, s2, s3, s4, s5];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsetrimFunction();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseUSER_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseparentheses();
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseVALUES_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseexprWithParentheses();
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseYEAR_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseexprWithParentheses();
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseADDDATE_SYMBOL();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parseSUBDATE_SYMBOL();
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseOPEN_PAR_SYMBOL();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseexpr();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseCOMMA_SYMBOL();
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$parseexpr();
                                                  if (s5 === peg$FAILED) {
                                                    s5 = peg$currPos;
                                                    s6 = peg$parseINTERVAL_SYMBOL();
                                                    if (s6 !== peg$FAILED) {
                                                      s7 = peg$parseexpr();
                                                      if (s7 !== peg$FAILED) {
                                                        s8 = peg$parseinterval();
                                                        if (s8 !== peg$FAILED) {
                                                          s6 = [s6, s7, s8];
                                                          s5 = s6;
                                                        } else {
                                                          peg$currPos = s5;
                                                          s5 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s5;
                                                        s5 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s5;
                                                      s5 = peg$c0;
                                                    }
                                                  }
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                    if (s6 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3, s4, s5, s6];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseCURDATE_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseparentheses();
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$c1;
                                              }
                                              if (s2 !== peg$FAILED) {
                                                s1 = [s1, s2];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseCURTIME_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parsetimeFunctionParameters();
                                                if (s2 === peg$FAILED) {
                                                  s2 = peg$c1;
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  s1 = [s1, s2];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseDATE_ADD_SYMBOL();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parseDATE_SUB_SYMBOL();
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseexpr();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parseCOMMA_SYMBOL();
                                                      if (s4 !== peg$FAILED) {
                                                        s5 = peg$parseINTERVAL_SYMBOL();
                                                        if (s5 !== peg$FAILED) {
                                                          s6 = peg$parseexpr();
                                                          if (s6 !== peg$FAILED) {
                                                            s7 = peg$parseinterval();
                                                            if (s7 !== peg$FAILED) {
                                                              s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                              if (s8 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseEXTRACT_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseOPEN_PAR_SYMBOL();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseinterval();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parseFROM_SYMBOL();
                                                        if (s4 !== peg$FAILED) {
                                                          s5 = peg$parseexpr();
                                                          if (s5 !== peg$FAILED) {
                                                            s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                            if (s6 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3, s4, s5, s6];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseGET_FORMAT_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseOPEN_PAR_SYMBOL();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parsedateTimeTtype();
                                                        if (s3 !== peg$FAILED) {
                                                          s4 = peg$parseCOMMA_SYMBOL();
                                                          if (s4 !== peg$FAILED) {
                                                            s5 = peg$parseexpr();
                                                            if (s5 !== peg$FAILED) {
                                                              s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                              if (s6 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3, s4, s5, s6];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseNOW_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsetimeFunctionParameters();
                                                        if (s2 === peg$FAILED) {
                                                          s2 = peg$c1;
                                                        }
                                                        if (s2 !== peg$FAILED) {
                                                          s1 = [s1, s2];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parsePOSITION_SYMBOL();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parseOPEN_PAR_SYMBOL();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parsebitExpr();
                                                            if (s3 !== peg$FAILED) {
                                                              s4 = peg$parseIN_SYMBOL();
                                                              if (s4 !== peg$FAILED) {
                                                                s5 = peg$parseexpr();
                                                                if (s5 !== peg$FAILED) {
                                                                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                  if (s6 !== peg$FAILED) {
                                                                    s1 = [s1, s2, s3, s4, s5, s6];
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsesubstringFunction();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseSYSDATE_SYMBOL();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parsetimeFunctionParameters();
                                                              if (s2 === peg$FAILED) {
                                                                s2 = peg$c1;
                                                              }
                                                              if (s2 !== peg$FAILED) {
                                                                s1 = [s1, s2];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseTIMESTAMP_ADD_SYMBOL();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parseTIMESTAMP_DIFF_SYMBOL();
                                                              }
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parseintervalTimeStamp();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s4 = peg$parseCOMMA_SYMBOL();
                                                                    if (s4 !== peg$FAILED) {
                                                                      s5 = peg$parseexpr();
                                                                      if (s5 !== peg$FAILED) {
                                                                        s6 = peg$parseCOMMA_SYMBOL();
                                                                        if (s6 !== peg$FAILED) {
                                                                          s7 = peg$parseexpr();
                                                                          if (s7 !== peg$FAILED) {
                                                                            s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                            if (s8 !== peg$FAILED) {
                                                                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                              s0 = s1;
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parseUTC_DATE_SYMBOL();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = peg$parseparentheses();
                                                                  if (s2 === peg$FAILED) {
                                                                    s2 = peg$c1;
                                                                  }
                                                                  if (s2 !== peg$FAILED) {
                                                                    s1 = [s1, s2];
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  s1 = peg$parseUTC_TIME_SYMBOL();
                                                                  if (s1 !== peg$FAILED) {
                                                                    s2 = peg$parsetimeFunctionParameters();
                                                                    if (s2 === peg$FAILED) {
                                                                      s2 = peg$c1;
                                                                    }
                                                                    if (s2 !== peg$FAILED) {
                                                                      s1 = [s1, s2];
                                                                      s0 = s1;
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    s1 = peg$parseUTC_TIMESTAMP_SYMBOL();
                                                                    if (s1 !== peg$FAILED) {
                                                                      s2 = peg$parsetimeFunctionParameters();
                                                                      if (s2 === peg$FAILED) {
                                                                        s2 = peg$c1;
                                                                      }
                                                                      if (s2 !== peg$FAILED) {
                                                                        s1 = [s1, s2];
                                                                        s0 = s1;
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$currPos;
                                                                      s1 = peg$parseASCII_SYMBOL();
                                                                      if (s1 !== peg$FAILED) {
                                                                        s2 = peg$parseexprWithParentheses();
                                                                        if (s2 !== peg$FAILED) {
                                                                          s1 = [s1, s2];
                                                                          s0 = s1;
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        s1 = peg$parseCHARSET_SYMBOL();
                                                                        if (s1 !== peg$FAILED) {
                                                                          s2 = peg$parseexprWithParentheses();
                                                                          if (s2 !== peg$FAILED) {
                                                                            s1 = [s1, s2];
                                                                            s0 = s1;
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$currPos;
                                                                          s1 = peg$parseCOALESCE_SYMBOL();
                                                                          if (s1 !== peg$FAILED) {
                                                                            s2 = peg$parseexprListWithParentheses();
                                                                            if (s2 !== peg$FAILED) {
                                                                              s1 = [s1, s2];
                                                                              s0 = s1;
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$currPos;
                                                                            s1 = peg$parseCOLLATION_SYMBOL();
                                                                            if (s1 !== peg$FAILED) {
                                                                              s2 = peg$parseexprWithParentheses();
                                                                              if (s2 !== peg$FAILED) {
                                                                                s1 = [s1, s2];
                                                                                s0 = s1;
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c0;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c0;
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$currPos;
                                                                              s1 = peg$parseDATABASE_SYMBOL();
                                                                              if (s1 !== peg$FAILED) {
                                                                                s2 = peg$parseparentheses();
                                                                                if (s2 !== peg$FAILED) {
                                                                                  s1 = [s1, s2];
                                                                                  s0 = s1;
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$c0;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c0;
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$currPos;
                                                                                s1 = peg$parseIF_SYMBOL();
                                                                                if (s1 !== peg$FAILED) {
                                                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                  if (s2 !== peg$FAILED) {
                                                                                    s3 = peg$parseexpr();
                                                                                    if (s3 !== peg$FAILED) {
                                                                                      s4 = peg$parseCOMMA_SYMBOL();
                                                                                      if (s4 !== peg$FAILED) {
                                                                                        s5 = peg$parseexpr();
                                                                                        if (s5 !== peg$FAILED) {
                                                                                          s6 = peg$parseCOMMA_SYMBOL();
                                                                                          if (s6 !== peg$FAILED) {
                                                                                            s7 = peg$parseexpr();
                                                                                            if (s7 !== peg$FAILED) {
                                                                                              s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                              if (s8 !== peg$FAILED) {
                                                                                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$c0;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$c0;
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$currPos;
                                                                                  s1 = peg$parseFORMAT_SYMBOL();
                                                                                  if (s1 !== peg$FAILED) {
                                                                                    s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                    if (s2 !== peg$FAILED) {
                                                                                      s3 = peg$parseexpr();
                                                                                      if (s3 !== peg$FAILED) {
                                                                                        s4 = peg$parseCOMMA_SYMBOL();
                                                                                        if (s4 !== peg$FAILED) {
                                                                                          s5 = peg$parseexpr();
                                                                                          if (s5 !== peg$FAILED) {
                                                                                            s6 = peg$currPos;
                                                                                            s7 = peg$parseCOMMA_SYMBOL();
                                                                                            if (s7 !== peg$FAILED) {
                                                                                              s8 = peg$parseexpr();
                                                                                              if (s8 !== peg$FAILED) {
                                                                                                s7 = [s7, s8];
                                                                                                s6 = s7;
                                                                                              } else {
                                                                                                peg$currPos = s6;
                                                                                                s6 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s6;
                                                                                              s6 = peg$c0;
                                                                                            }
                                                                                            if (s6 === peg$FAILED) {
                                                                                              s6 = peg$c1;
                                                                                            }
                                                                                            if (s6 !== peg$FAILED) {
                                                                                              s7 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                              if (s7 !== peg$FAILED) {
                                                                                                s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$c0;
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$currPos;
                                                                                    s1 = peg$parseMICROSECOND_SYMBOL();
                                                                                    if (s1 !== peg$FAILED) {
                                                                                      s2 = peg$parseexprWithParentheses();
                                                                                      if (s2 !== peg$FAILED) {
                                                                                        s1 = [s1, s2];
                                                                                        s0 = s1;
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$c0;
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$currPos;
                                                                                      s1 = peg$parseMOD_SYMBOL();
                                                                                      if (s1 !== peg$FAILED) {
                                                                                        s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                        if (s2 !== peg$FAILED) {
                                                                                          s3 = peg$parseexpr();
                                                                                          if (s3 !== peg$FAILED) {
                                                                                            s4 = peg$parseCOMMA_SYMBOL();
                                                                                            if (s4 !== peg$FAILED) {
                                                                                              s5 = peg$parseexpr();
                                                                                              if (s5 !== peg$FAILED) {
                                                                                                s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                if (s6 !== peg$FAILED) {
                                                                                                  s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                  s0 = s1;
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$c0;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c0;
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$currPos;
                                                                                        peg$reportedPos = peg$currPos;
                                                                                        s1 = peg$c56();
                                                                                        if (s1) {
                                                                                          s1 = peg$c3;
                                                                                        } else {
                                                                                          s1 = peg$c0;
                                                                                        }
                                                                                        if (s1 !== peg$FAILED) {
                                                                                          s2 = peg$parseOLD_PASSWORD_SYMBOL();
                                                                                          if (s2 !== peg$FAILED) {
                                                                                            s3 = peg$parseOPEN_PAR_SYMBOL();
                                                                                            if (s3 !== peg$FAILED) {
                                                                                              s4 = peg$parsetextLiteral();
                                                                                              if (s4 !== peg$FAILED) {
                                                                                                s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                if (s5 !== peg$FAILED) {
                                                                                                  s1 = [s1, s2, s3, s4, s5];
                                                                                                  s0 = s1;
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$c0;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c0;
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$currPos;
                                                                                          peg$reportedPos = peg$currPos;
                                                                                          s1 = peg$c32();
                                                                                          if (s1) {
                                                                                            s1 = peg$c3;
                                                                                          } else {
                                                                                            s1 = peg$c0;
                                                                                          }
                                                                                          if (s1 !== peg$FAILED) {
                                                                                            s2 = peg$parsePASSWORD_SYMBOL();
                                                                                            if (s2 !== peg$FAILED) {
                                                                                              s3 = peg$parseexprWithParentheses();
                                                                                              if (s3 !== peg$FAILED) {
                                                                                                s1 = [s1, s2, s3];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$currPos;
                                                                                            s1 = peg$parseQUARTER_SYMBOL();
                                                                                            if (s1 !== peg$FAILED) {
                                                                                              s2 = peg$parseexprWithParentheses();
                                                                                              if (s2 !== peg$FAILED) {
                                                                                                s1 = [s1, s2];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$currPos;
                                                                                              s1 = peg$parseREPEAT_SYMBOL();
                                                                                              if (s1 !== peg$FAILED) {
                                                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                if (s2 !== peg$FAILED) {
                                                                                                  s3 = peg$parseexpr();
                                                                                                  if (s3 !== peg$FAILED) {
                                                                                                    s4 = peg$parseCOMMA_SYMBOL();
                                                                                                    if (s4 !== peg$FAILED) {
                                                                                                      s5 = peg$parseexpr();
                                                                                                      if (s5 !== peg$FAILED) {
                                                                                                        s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                        if (s6 !== peg$FAILED) {
                                                                                                          s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                          s0 = s1;
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$c0;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$c0;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$c0;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$c0;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$c0;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$currPos;
                                                                                                s1 = peg$parseREPLACE_SYMBOL();
                                                                                                if (s1 !== peg$FAILED) {
                                                                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                  if (s2 !== peg$FAILED) {
                                                                                                    s3 = peg$parseexpr();
                                                                                                    if (s3 !== peg$FAILED) {
                                                                                                      s4 = peg$parseCOMMA_SYMBOL();
                                                                                                      if (s4 !== peg$FAILED) {
                                                                                                        s5 = peg$parseexpr();
                                                                                                        if (s5 !== peg$FAILED) {
                                                                                                          s6 = peg$parseCOMMA_SYMBOL();
                                                                                                          if (s6 !== peg$FAILED) {
                                                                                                            s7 = peg$parseexpr();
                                                                                                            if (s7 !== peg$FAILED) {
                                                                                                              s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                              if (s8 !== peg$FAILED) {
                                                                                                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                                                                s0 = s1;
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$c0;
                                                                                                              }
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$c0;
                                                                                                            }
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$c0;
                                                                                                          }
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$c0;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$c0;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$c0;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$c0;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$c0;
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$currPos;
                                                                                                  s1 = peg$parseREVERSE_SYMBOL();
                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                    s2 = peg$parseexprWithParentheses();
                                                                                                    if (s2 !== peg$FAILED) {
                                                                                                      s1 = [s1, s2];
                                                                                                      s0 = s1;
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$c0;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$c0;
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$currPos;
                                                                                                    s1 = peg$parseROW_COUNT_SYMBOL();
                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                      s2 = peg$parseparentheses();
                                                                                                      if (s2 !== peg$FAILED) {
                                                                                                        s1 = [s1, s2];
                                                                                                        s0 = s1;
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$c0;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$c0;
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$currPos;
                                                                                                      s1 = peg$parseSCHEMA_SYMBOL();
                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                        s2 = peg$parseparentheses();
                                                                                                        if (s2 !== peg$FAILED) {
                                                                                                          s1 = [s1, s2];
                                                                                                          s0 = s1;
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$c0;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$c0;
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$currPos;
                                                                                                        s1 = peg$parseSESSION_USER_SYMBOL();
                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                          s2 = peg$parseparentheses();
                                                                                                          if (s2 !== peg$FAILED) {
                                                                                                            s1 = [s1, s2];
                                                                                                            s0 = s1;
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$c0;
                                                                                                          }
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$c0;
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$currPos;
                                                                                                          s1 = peg$parseSYSTEM_USER_SYMBOL();
                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                            s2 = peg$parseparentheses();
                                                                                                            if (s2 !== peg$FAILED) {
                                                                                                              s1 = [s1, s2];
                                                                                                              s0 = s1;
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$c0;
                                                                                                            }
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$c0;
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$currPos;
                                                                                                            s1 = peg$parseTRUNCATE_SYMBOL();
                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                              s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                              if (s2 !== peg$FAILED) {
                                                                                                                s3 = peg$parseexpr();
                                                                                                                if (s3 !== peg$FAILED) {
                                                                                                                  s4 = peg$parseCOMMA_SYMBOL();
                                                                                                                  if (s4 !== peg$FAILED) {
                                                                                                                    s5 = peg$parseexpr();
                                                                                                                    if (s5 !== peg$FAILED) {
                                                                                                                      s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                      if (s6 !== peg$FAILED) {
                                                                                                                        s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                                        s0 = s1;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$c0;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$c0;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$c0;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$c0;
                                                                                                              }
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$c0;
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$currPos;
                                                                                                              s1 = peg$parseWEEK_SYMBOL();
                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                                if (s2 !== peg$FAILED) {
                                                                                                                  s3 = peg$parseexpr();
                                                                                                                  if (s3 !== peg$FAILED) {
                                                                                                                    s4 = peg$currPos;
                                                                                                                    s5 = peg$parseCOMMA_SYMBOL();
                                                                                                                    if (s5 !== peg$FAILED) {
                                                                                                                      s6 = peg$parseexpr();
                                                                                                                      if (s6 !== peg$FAILED) {
                                                                                                                        s5 = [s5, s6];
                                                                                                                        s4 = s5;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s4;
                                                                                                                        s4 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s4;
                                                                                                                      s4 = peg$c0;
                                                                                                                    }
                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                      s4 = peg$c1;
                                                                                                                    }
                                                                                                                    if (s4 !== peg$FAILED) {
                                                                                                                      s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                      if (s5 !== peg$FAILED) {
                                                                                                                        s1 = [s1, s2, s3, s4, s5];
                                                                                                                        s0 = s1;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$c0;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$c0;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$c0;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$c0;
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$currPos;
                                                                                                                s1 = peg$parseWEIGHT_STRING_SYMBOL();
                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                                  if (s2 !== peg$FAILED) {
                                                                                                                    s3 = peg$parseexpr();
                                                                                                                    if (s3 !== peg$FAILED) {
                                                                                                                      s4 = peg$currPos;
                                                                                                                      s5 = peg$currPos;
                                                                                                                      s6 = peg$parseAS_SYMBOL();
                                                                                                                      if (s6 !== peg$FAILED) {
                                                                                                                        s7 = peg$parseCHAR_SYMBOL();
                                                                                                                        if (s7 !== peg$FAILED) {
                                                                                                                          s8 = peg$parsewsNumCodepoints();
                                                                                                                          if (s8 !== peg$FAILED) {
                                                                                                                            s6 = [s6, s7, s8];
                                                                                                                            s5 = s6;
                                                                                                                          } else {
                                                                                                                            peg$currPos = s5;
                                                                                                                            s5 = peg$c0;
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          peg$currPos = s5;
                                                                                                                          s5 = peg$c0;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s5;
                                                                                                                        s5 = peg$c0;
                                                                                                                      }
                                                                                                                      if (s5 === peg$FAILED) {
                                                                                                                        s5 = peg$c1;
                                                                                                                      }
                                                                                                                      if (s5 !== peg$FAILED) {
                                                                                                                        s6 = peg$currPos;
                                                                                                                        peg$reportedPos = peg$currPos;
                                                                                                                        s7 = peg$c8();
                                                                                                                        if (s7) {
                                                                                                                          s7 = peg$c3;
                                                                                                                        } else {
                                                                                                                          s7 = peg$c0;
                                                                                                                        }
                                                                                                                        if (s7 !== peg$FAILED) {
                                                                                                                          s8 = peg$parseweightStringLevels();
                                                                                                                          if (s8 !== peg$FAILED) {
                                                                                                                            s7 = [s7, s8];
                                                                                                                            s6 = s7;
                                                                                                                          } else {
                                                                                                                            peg$currPos = s6;
                                                                                                                            s6 = peg$c0;
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          peg$currPos = s6;
                                                                                                                          s6 = peg$c0;
                                                                                                                        }
                                                                                                                        if (s6 === peg$FAILED) {
                                                                                                                          s6 = peg$c1;
                                                                                                                        }
                                                                                                                        if (s6 !== peg$FAILED) {
                                                                                                                          s5 = [s5, s6];
                                                                                                                          s4 = s5;
                                                                                                                        } else {
                                                                                                                          peg$currPos = s4;
                                                                                                                          s4 = peg$c0;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s4;
                                                                                                                        s4 = peg$c0;
                                                                                                                      }
                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                        s4 = peg$currPos;
                                                                                                                        s5 = peg$parseAS_SYMBOL();
                                                                                                                        if (s5 !== peg$FAILED) {
                                                                                                                          s6 = peg$parseBINARY_SYMBOL();
                                                                                                                          if (s6 !== peg$FAILED) {
                                                                                                                            s7 = peg$parsewsNumCodepoints();
                                                                                                                            if (s7 !== peg$FAILED) {
                                                                                                                              s5 = [s5, s6, s7];
                                                                                                                              s4 = s5;
                                                                                                                            } else {
                                                                                                                              peg$currPos = s4;
                                                                                                                              s4 = peg$c0;
                                                                                                                            }
                                                                                                                          } else {
                                                                                                                            peg$currPos = s4;
                                                                                                                            s4 = peg$c0;
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          peg$currPos = s4;
                                                                                                                          s4 = peg$c0;
                                                                                                                        }
                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                          s4 = peg$currPos;
                                                                                                                          s5 = peg$parseCOMMA_SYMBOL();
                                                                                                                          if (s5 !== peg$FAILED) {
                                                                                                                            s6 = peg$parseulong_number();
                                                                                                                            if (s6 !== peg$FAILED) {
                                                                                                                              s7 = peg$parseCOMMA_SYMBOL();
                                                                                                                              if (s7 !== peg$FAILED) {
                                                                                                                                s8 = peg$parseulong_number();
                                                                                                                                if (s8 !== peg$FAILED) {
                                                                                                                                  s9 = peg$parseCOMMA_SYMBOL();
                                                                                                                                  if (s9 !== peg$FAILED) {
                                                                                                                                    s10 = peg$parseulong_number();
                                                                                                                                    if (s10 !== peg$FAILED) {
                                                                                                                                      s5 = [s5, s6, s7, s8, s9, s10];
                                                                                                                                      s4 = s5;
                                                                                                                                    } else {
                                                                                                                                      peg$currPos = s4;
                                                                                                                                      s4 = peg$c0;
                                                                                                                                    }
                                                                                                                                  } else {
                                                                                                                                    peg$currPos = s4;
                                                                                                                                    s4 = peg$c0;
                                                                                                                                  }
                                                                                                                                } else {
                                                                                                                                  peg$currPos = s4;
                                                                                                                                  s4 = peg$c0;
                                                                                                                                }
                                                                                                                              } else {
                                                                                                                                peg$currPos = s4;
                                                                                                                                s4 = peg$c0;
                                                                                                                              }
                                                                                                                            } else {
                                                                                                                              peg$currPos = s4;
                                                                                                                              s4 = peg$c0;
                                                                                                                            }
                                                                                                                          } else {
                                                                                                                            peg$currPos = s4;
                                                                                                                            s4 = peg$c0;
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                      if (s4 !== peg$FAILED) {
                                                                                                                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                        if (s5 !== peg$FAILED) {
                                                                                                                          s1 = [s1, s2, s3, s4, s5];
                                                                                                                          s0 = s1;
                                                                                                                        } else {
                                                                                                                          peg$currPos = s0;
                                                                                                                          s0 = peg$c0;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$c0;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$c0;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$c0;
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parsegeometryFunction();
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegeometryFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c33();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCONTAINS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCOMMA_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexprList();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLINESTRING_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexprListWithParentheses();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMULTILINESTRING_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexprListWithParentheses();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMULTIPOINT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseexprListWithParentheses();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMULTIPOLYGON_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseexprListWithParentheses();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePOINT_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseexpr();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseCOMMA_SYMBOL();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseexpr();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseCLOSE_PAR_SYMBOL();
                            if (s6 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsePOLYGON_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseexprListWithParentheses();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetimeFunctionParameters() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefractionalPrecision();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefractionalPrecision() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c4();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINT_NUMBER();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseweightStringLevels() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLEVEL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsereal_ulong_number();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMINUS_OPERATOR();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsereal_ulong_number();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseweightStringLevelListItem();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseweightStringLevelListItem();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseweightStringLevelListItem();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseweightStringLevelListItem() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsereal_ulong_number();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseASC_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDESC_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseREVERSE_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseREVERSE_SYMBOL();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedateTimeTtype() {
      var s0;

      s0 = peg$parseDATE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTIME_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDATETIME_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTIMESTAMP_SYMBOL();
          }
        }
      }

      return s0;
    }

    function peg$parsetrimFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseTRIM_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseexpr();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseFROM_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpr();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseLEADING_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpr();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseFROM_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexpr();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseTRAILING_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexpr();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseFROM_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseexpr();
                    if (s7 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseBOTH_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseexpr();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseFROM_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseexpr();
                      if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesubstringFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSUBSTRING_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSUBSTR_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpr();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseexpr();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseFROM_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseFOR_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseexpr();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefunctionCall() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepureIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseudfExprList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequalifiedIdentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexprList();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseudfExprList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseudfExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseudfExpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseudfExpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseudfExpr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselectAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevariable() {
      var s0;

      s0 = peg$parseuserVariable();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesystemVariable();
      }

      return s0;
    }

    function peg$parseuserVariable() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAT_SIGN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseAT_TEXT_SUFFIX();
      }

      return s0;
    }

    function peg$parsesystemVariable() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseAT_AT_SIGN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevarIdentType();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextOrIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsedotIdentifier();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinternalVariableName() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c24();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedotIdentifier();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c12();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parselValueIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedotIdentifier();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDEFAULT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedotIdentifier();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsewhenExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseWHEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsethenExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTHEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseelseExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseELSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecastType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseBINARY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldLength();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHAR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefieldLength();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecharsetWithOptBinary();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenchar();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefieldLength();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSIGNED_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseINT_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseUNSIGNED_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseINT_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parseDATE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseTIME_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsetypeDatetimePrecision();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseDATETIME_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsetypeDatetimePrecision();
                      if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseDECIMAL_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsefloatOptions();
                        if (s2 === peg$FAILED) {
                          s2 = peg$c1;
                        }
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s1 = peg$c55();
                        if (s1) {
                          s1 = peg$c3;
                        } else {
                          s1 = peg$c0;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseJSON_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s1 = peg$c12();
                          if (s1) {
                            s1 = peg$c3;
                          } else {
                            s1 = peg$c0;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parserealType();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseprecision();
                              if (s3 === peg$FAILED) {
                                s3 = peg$c1;
                              }
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s1 = peg$c12();
                            if (s1) {
                              s1 = peg$c3;
                            } else {
                              s1 = peg$c0;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseFLOAT_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseprecision();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$c1;
                                }
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseexprList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexprListWithParentheses() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexprList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexprWithParentheses() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleExprWithParentheses() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesimpleExpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseorderList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseorderExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseorderExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseorderExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseorderExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedirection();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegroupList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechannel() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c15();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCHANNEL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSINGLE_QUOTED_TEXT();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecompoundStatement() {
      var s0;

      s0 = peg$parsesimpleStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturnStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseifStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecaseStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parselabeledBlock();
              if (s0 === peg$FAILED) {
                s0 = peg$parsebeginEndBlock();
                if (s0 === peg$FAILED) {
                  s0 = peg$parselabeledControl();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunlabeledControl();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseleaveStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseiterateStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsecursorOpen();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsecursorFetch();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsecursorClose();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsespDeclarations();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereturnStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseRETURN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseifStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIF_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIF_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseifBody() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsethenStatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseELSEIF_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseifBody();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseELSE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecompoundStatementList();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsethenStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTHEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecompoundStatementList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecompoundStatementList() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsecompoundStatement();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSEMICOLON_SYMBOL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parsecompoundStatement();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSEMICOLON_SYMBOL();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecaseStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsewhenExpression();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsethenStatement();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsewhenExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsethenStatement();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseelseStatement();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCASE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseelseStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseELSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecompoundStatementList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselabeledBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselabel();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebeginEndBlock();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselabelIdentifier();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parselabelIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebeginEndBlock() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespDeclarations();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecompoundStatementList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEND_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselabeledControl() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselabel();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseunlabeledControl();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselabelIdentifier();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunlabeledControl() {
      var s0;

      s0 = peg$parseloopBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewhileDoBlock();
        if (s0 === peg$FAILED) {
          s0 = peg$parserepeatUntilBlock();
        }
      }

      return s0;
    }

    function peg$parseloopBlock() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseLOOP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecompoundStatementList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLOOP_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewhileDoBlock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseWHILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDO_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecompoundStatementList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseWHILE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserepeatUntilBlock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseREPEAT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecompoundStatementList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseUNTIL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseREPEAT_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespDeclarations() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsespDeclaration();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSEMICOLON_SYMBOL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parsespDeclaration();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSEMICOLON_SYMBOL();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespDeclaration() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDECLARE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevariableDeclaration();
        if (s2 === peg$FAILED) {
          s2 = peg$parseconditionDeclaration();
          if (s2 === peg$FAILED) {
            s2 = peg$parsehandlerDeclaration();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecursorDeclaration();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevariableDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseidentifierList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedataType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecollate();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseDEFAULT_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpr();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconditionDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCONDITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFOR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsespCondition();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespCondition() {
      var s0;

      s0 = peg$parseulong_number();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesqlstate();
      }

      return s0;
    }

    function peg$parsesqlstate() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSQLSTATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVALUE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextLiteral();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehandlerDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseCONTINUE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEXIT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseUNDO_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHANDLER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFOR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsehandlerCondition();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsehandlerCondition();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parseCOMMA_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsehandlerCondition();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecompoundStatement();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehandlerCondition() {
      var s0, s1, s2;

      s0 = peg$parsespCondition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifier();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSQLWARNING_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsenotRule();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseFOUND_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseSQLEXCEPTION_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecursorDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCURSOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFOR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseselectStatement();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseiterateStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseITERATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselabelIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseleaveStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLEAVE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselabelIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegetDiagnostics() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseGET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCURRENT_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c11();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSTACKED_SYMBOL();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDIAGNOSTICS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsestatementInformationItem();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsestatementInformationItem();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsestatementInformationItem();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseCONDITION_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesignalAllowedExpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseconditionInformationItem();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$currPos;
                    s10 = peg$parseCOMMA_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseconditionInformationItem();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$currPos;
                      s10 = peg$parseCOMMA_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseconditionInformationItem();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesignalAllowedExpr() {
      var s0;

      s0 = peg$parseliteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsevariable();
        if (s0 === peg$FAILED) {
          s0 = peg$parsequalifiedIdentifier();
        }
      }

      return s0;
    }

    function peg$parsestatementInformationItem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 === peg$FAILED) {
        s1 = peg$parseidentifier();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNUMBER_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseROW_COUNT_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconditionInformationItem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 === peg$FAILED) {
        s1 = peg$parseidentifier();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesignalInformationItemName();
          if (s3 === peg$FAILED) {
            s3 = peg$parseRETURNED_SQLSTATE_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesignalInformationItemName() {
      var s0;

      s0 = peg$parseCLASS_ORIGIN_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCATALOG_NAME_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSCHEMA_NAME_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseTABLE_NAME_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCOLUMN_NAME_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseCURSOR_NAME_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesignalStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSIGNAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesqlstate();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSET_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesignalInformationItem();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsesignalInformationItem();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsesignalInformationItem();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresignalStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseRESIGNAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesqlstate();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSET_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesignalInformationItem();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsesignalInformationItem();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsesignalInformationItem();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesignalInformationItem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesignalInformationItemName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesignalAllowedExpr();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecursorOpen() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecursorClose() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCLOSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecursorFetch() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseFETCH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseNEXT_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFROM_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINTO_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierList();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseschedule() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseAT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseEVERY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinterval();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseSTARTS_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseENDS_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexpr();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecolumnDefinition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsecolumnName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldDefinition();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecheckOrReferences();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecheckOrReferences() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c57();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecheckConstraint();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsereferences();
      }

      return s0;
    }

    function peg$parsecheckConstraint() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCHECK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexprWithParentheses();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconstraintEnforcement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseNOT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseENFORCED_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableConstraintDef() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseKEY_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINDEX_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseindexNameAndType();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekeyListVariants();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseindexOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseindexOption();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFULLTEXT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyOrIndex();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsekeyListVariants();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parsefulltextIndexOption();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsefulltextIndexOption();
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSPATIAL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsekeyOrIndex();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsekeyListVariants();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parsecommonIndexOption();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsecommonIndexOption();
                  }
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseconstraintName();
            if (s1 === peg$FAILED) {
              s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$currPos;
              s4 = peg$parsePRIMARY_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseKEY_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseUNIQUE_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsekeyOrIndex();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseindexNameAndType();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsekeyListVariants();
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseindexOption();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseindexOption();
                    }
                    if (s6 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseFOREIGN_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseKEY_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseidentifier();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsekeyList();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsereferences();
                        if (s7 !== peg$FAILED) {
                          s3 = [s3, s4, s5, s6, s7];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parsecheckConstraint();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s5 = peg$c12();
                    if (s5) {
                      s5 = peg$c3;
                    } else {
                      s5 = peg$c0;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseconstraintEnforcement();
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseconstraintName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCONSTRAINT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldDefinition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parsedataType();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecolumnAttribute();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecolumnAttribute();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c18();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecollate();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseGENERATED_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseALWAYS_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseAS_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexprWithParentheses();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseVIRTUAL_SYMBOL();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseSTORED_SYMBOL();
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s10 = peg$c8();
                      if (s10) {
                        s10 = peg$c3;
                      } else {
                        s10 = peg$c0;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parsegcolAttribute();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parsegcolAttribute();
                        }
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s10 = peg$c2();
                        if (s10) {
                          s10 = peg$c3;
                        } else {
                          s10 = peg$c0;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parsecolumnAttribute();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parsecolumnAttribute();
                          }
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$c0;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnAttribute() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseNOT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenullLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c5();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNOT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSECONDARY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDEFAULT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesignedLiteral();
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseNOW_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetimeFunctionParameters();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c58();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseexprWithParentheses();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseON_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseUPDATE_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseNOW_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetimeFunctionParameters();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseAUTO_INCREMENT_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseSERIAL_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseDEFAULT_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseVALUE_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePRIMARY_SYMBOL();
                  if (s1 === peg$FAILED) {
                    s1 = peg$c1;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseKEY_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseUNIQUE_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseKEY_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseCOMMENT_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsetextLiteral();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsecollate();
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseCOLUMN_FORMAT_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsecolumnFormat();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSTORAGE_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsestorageMedia();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s1 = peg$c2();
                              if (s1) {
                                s1 = peg$c3;
                              } else {
                                s1 = peg$c0;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseSRID_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsereal_ulonglong_number();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s1 = peg$c12();
                                if (s1) {
                                  s1 = peg$c3;
                                } else {
                                  s1 = peg$c0;
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseconstraintName();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$c1;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsecheckConstraint();
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s1 = peg$c12();
                                  if (s1) {
                                    s1 = peg$c3;
                                  } else {
                                    s1 = peg$c0;
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseconstraintEnforcement();
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecolumnFormat() {
      var s0;

      s0 = peg$parseFIXED_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDYNAMIC_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDEFAULT_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parsestorageMedia() {
      var s0;

      s0 = peg$parseDISK_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMEMORY_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDEFAULT_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parsegcolAttribute() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUNIQUE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKEY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCOMMENT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextString();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenotRule();
          if (s1 === peg$FAILED) {
            s1 = peg$c1;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNULL_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePRIMARY_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseKEY_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereferences() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseREFERENCES_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableRef();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifierListWithParentheses();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseMATCH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseFULL_SYMBOL();
              if (s6 === peg$FAILED) {
                s6 = peg$parsePARTIAL_SYMBOL();
                if (s6 === peg$FAILED) {
                  s6 = peg$parseSIMPLE_SYMBOL();
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parseON_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseUPDATE_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsedeleteOption();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseON_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseDELETE_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsedeleteOption();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$currPos;
                s7 = peg$parseON_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDELETE_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsedeleteOption();
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseON_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseUPDATE_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsedeleteOption();
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedeleteOption() {
      var s0, s1, s2;

      s0 = peg$parseRESTRICT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCASCADE_SYMBOL();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSET_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenullLiteral();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNO_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseACTION_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsekeyList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyPart();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsekeyPart();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsekeyPart();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeyPart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldLength();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedirection();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeyListWithExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyPartOrExpression();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsekeyPartOrExpression();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsekeyPartOrExpression();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeyPartOrExpression() {
      var s0, s1, s2;

      s0 = peg$parsekeyPart();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexprWithParentheses();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedirection();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsekeyListVariants() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c58();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyListWithExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c59();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyList();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseindexType() {
      var s0;

      s0 = peg$parseBTREE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRTREE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseHASH_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseindexOption() {
      var s0;

      s0 = peg$parsecommonIndexOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parseindexTypeClause();
      }

      return s0;
    }

    function peg$parsecommonIndexOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseulong_number();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCOMMENT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextLiteral();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c2();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsevisibility();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsevisibility() {
      var s0;

      s0 = peg$parseVISIBLE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINVISIBLE_SYMBOL();
      }

      return s0;
    }

    function peg$parseindexTypeClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUSING_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTYPE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseindexType();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefulltextIndexOption() {
      var s0, s1, s2, s3;

      s0 = peg$parsecommonIndexOption();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWITH_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePARSER_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsedataTypeDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsedataType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOF();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedataType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseINT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTINYINT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSMALLINT_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMEDIUMINT_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseBIGINT_SYMBOL();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldLength();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefieldOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseREAL_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseDOUBLE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsePRECISION_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprecision();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefieldOptions();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFLOAT_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDECIMAL_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseNUMERIC_SYMBOL();
              if (s1 === peg$FAILED) {
                s1 = peg$parseFIXED_SYMBOL();
              }
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefloatOptions();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsefieldOptions();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseBIT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsefieldLength();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseBOOL_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBOOLEAN_SYMBOL();
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCHAR_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsefieldLength();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsecharsetWithOptBinary();
                    if (s3 === peg$FAILED) {
                      s3 = peg$c1;
                    }
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsenchar();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsefieldLength();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseBINARY_SYMBOL();
                      if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                      }
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseBINARY_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsefieldLength();
                      if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$currPos;
                      s2 = peg$parseCHAR_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseVARYING_SYMBOL();
                        if (s3 !== peg$FAILED) {
                          s2 = [s2, s3];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c0;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                      }
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseVARCHAR_SYMBOL();
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsefieldLength();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsecharsetWithOptBinary();
                          if (s3 === peg$FAILED) {
                            s3 = peg$c1;
                          }
                          if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$currPos;
                        s2 = peg$parseNATIONAL_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseVARCHAR_SYMBOL();
                          if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c0;
                        }
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseNVARCHAR_SYMBOL();
                          if (s1 === peg$FAILED) {
                            s1 = peg$currPos;
                            s2 = peg$parseNCHAR_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseVARCHAR_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s2 = [s2, s3];
                                s1 = s2;
                              } else {
                                peg$currPos = s1;
                                s1 = peg$c0;
                              }
                            } else {
                              peg$currPos = s1;
                              s1 = peg$c0;
                            }
                            if (s1 === peg$FAILED) {
                              s1 = peg$currPos;
                              s2 = peg$parseNATIONAL_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseCHAR_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseVARYING_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s2 = [s2, s3, s4];
                                    s1 = s2;
                                  } else {
                                    peg$currPos = s1;
                                    s1 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$c0;
                                }
                              } else {
                                peg$currPos = s1;
                                s1 = peg$c0;
                              }
                              if (s1 === peg$FAILED) {
                                s1 = peg$currPos;
                                s2 = peg$parseNCHAR_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseVARYING_SYMBOL();
                                  if (s3 !== peg$FAILED) {
                                    s2 = [s2, s3];
                                    s1 = s2;
                                  } else {
                                    peg$currPos = s1;
                                    s1 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$c0;
                                }
                              }
                            }
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsefieldLength();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseBINARY_SYMBOL();
                            if (s3 === peg$FAILED) {
                              s3 = peg$c1;
                            }
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseVARBINARY_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsefieldLength();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseLONG_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseVARBINARY_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseLONG_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parseCHAR_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseVARYING_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseVARCHAR_SYMBOL();
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$c1;
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsecharsetWithOptBinary();
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$c1;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseYEAR_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parsefieldLength();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$c1;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsefieldOptions();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$c1;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseDATE_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseTIME_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsetypeDatetimePrecision();
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$c1;
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseTIMESTAMP_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsetypeDatetimePrecision();
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$c1;
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseDATETIME_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parsetypeDatetimePrecision();
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$c1;
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseTINYBLOB_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseBLOB_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parsefieldLength();
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$c1;
                                              }
                                              if (s2 !== peg$FAILED) {
                                                s1 = [s1, s2];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseMEDIUMBLOB_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseLONGBLOB_SYMBOL();
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseTINYTEXT_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parsecharsetWithOptBinary();
                                                  if (s2 === peg$FAILED) {
                                                    s2 = peg$c1;
                                                  }
                                                  if (s2 !== peg$FAILED) {
                                                    s1 = [s1, s2];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseTEXT_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parsefieldLength();
                                                    if (s2 === peg$FAILED) {
                                                      s2 = peg$c1;
                                                    }
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parsecharsetWithOptBinary();
                                                      if (s3 === peg$FAILED) {
                                                        s3 = peg$c1;
                                                      }
                                                      if (s3 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseMEDIUMTEXT_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parsecharsetWithOptBinary();
                                                      if (s2 === peg$FAILED) {
                                                        s2 = peg$c1;
                                                      }
                                                      if (s2 !== peg$FAILED) {
                                                        s1 = [s1, s2];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseLONGTEXT_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsecharsetWithOptBinary();
                                                        if (s2 === peg$FAILED) {
                                                          s2 = peg$c1;
                                                        }
                                                        if (s2 !== peg$FAILED) {
                                                          s1 = [s1, s2];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseENUM_SYMBOL();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parsestringList();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parsecharsetWithOptBinary();
                                                            if (s3 === peg$FAILED) {
                                                              s3 = peg$c1;
                                                            }
                                                            if (s3 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseSET_SYMBOL();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parsestringList();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parsecharsetWithOptBinary();
                                                              if (s3 === peg$FAILED) {
                                                                s3 = peg$c1;
                                                              }
                                                              if (s3 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseSERIAL_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              peg$reportedPos = peg$currPos;
                                                              s1 = peg$c55();
                                                              if (s1) {
                                                                s1 = peg$c3;
                                                              } else {
                                                                s1 = peg$c0;
                                                              }
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseJSON_SYMBOL();
                                                                if (s2 !== peg$FAILED) {
                                                                  s1 = [s1, s2];
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseGEOMETRY_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsePOINT_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseLINESTRING_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsePOLYGON_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenchar() {
      var s0, s1, s2;

      s0 = peg$parseNCHAR_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNATIONAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCHAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parserealType() {
      var s0, s1, s2;

      s0 = peg$parseREAL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDOUBLE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePRECISION_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsefieldLength() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsereal_ulonglong_number();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDECIMAL_NUMBER();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldOptions() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseSIGNED_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNSIGNED_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseZEROFILL_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseSIGNED_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseUNSIGNED_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseZEROFILL_SYMBOL();
            }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecharsetWithOptBinary() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseascii();
      if (s0 === peg$FAILED) {
        s0 = peg$parseunicode();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBYTE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecharset();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsecharsetName();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseBINARY_SYMBOL();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseBINARY_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parsecharset();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsecharsetName();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseascii() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseASCII_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBINARY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBINARY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseASCII_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseunicode() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUNICODE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBINARY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBINARY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseUNICODE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsewsNumCodepoints() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsereal_ulong_number();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetypeDatetimePrecision() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINT_NUMBER();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecharsetName() {
      var s0, s1, s2;

      s0 = peg$parsetextOrIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBINARY_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c32();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDEFAULT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsecollationName() {
      var s0, s1, s2;

      s0 = peg$parsetextOrIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c32();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDEFAULT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c31();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseBINARY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsecreateTableOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecreateTableOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecreateTableOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecreateTableOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateTableOptionsSpaceSeparated() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsecreateTableOption();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsecreateTableOption();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateTableOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseENGINE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextOrIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c5();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSECONDARY_ENGINE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseequal();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseNULL_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$parsetextOrIdentifier();
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMAX_ROWS_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseulonglong_number();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMIN_ROWS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseulonglong_number();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseAVG_ROW_LENGTH_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseulong_number();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePASSWORD_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSINGLE_QUOTED_TEXT();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseCOMMENT_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseSINGLE_QUOTED_TEXT();
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s1 = peg$c55();
                    if (s1) {
                      s1 = peg$c3;
                    } else {
                      s1 = peg$c0;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseCOMPRESSION_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseEQUAL_OPERATOR();
                        if (s3 === peg$FAILED) {
                          s3 = peg$c1;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsetextString();
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s1 = peg$c60();
                      if (s1) {
                        s1 = peg$c3;
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseENCRYPTION_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseEQUAL_OPERATOR();
                          if (s3 === peg$FAILED) {
                            s3 = peg$c1;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsetextString();
                            if (s4 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseAUTO_INCREMENT_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseEQUAL_OPERATOR();
                          if (s2 === peg$FAILED) {
                            s2 = peg$c1;
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseulonglong_number();
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsePACK_KEYS_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseEQUAL_OPERATOR();
                            if (s2 === peg$FAILED) {
                              s2 = peg$c1;
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseternaryOption();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseSTATS_PERSISTENT_SYMBOL();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
                              }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseEQUAL_OPERATOR();
                              if (s2 === peg$FAILED) {
                                s2 = peg$c1;
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseternaryOption();
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseCHECKSUM_SYMBOL();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseTABLE_CHECKSUM_SYMBOL();
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseEQUAL_OPERATOR();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$c1;
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseulong_number();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseEQUAL_OPERATOR();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$c1;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseulong_number();
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseROW_FORMAT_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseEQUAL_OPERATOR();
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$c1;
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseformat() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parseDEFAULT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDYNAMIC_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFIXED_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCOMPRESSED_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseREDUNDANT_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCOMPACT_SYMBOL();
              }
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUNION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetableRefList();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsedefaultCharset();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedefaultCollation();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseINSERT_METHOD_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemethod() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseNO_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFIRST_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLAST_SYMBOL();
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDATA_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDIRECTORY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEQUAL_OPERATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetextString();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseINDEX_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDIRECTORY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseEQUAL_OPERATOR();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetextString();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTABLESPACE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s3 = peg$c18();
              if (s3) {
                s3 = peg$c3;
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseEQUAL_OPERATOR();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseidentifier();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSTORAGE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDISK_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseMEMORY_SYMBOL();
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCONNECTION_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsetextString();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseulong_number();
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseternaryOption() {
      var s0;

      s0 = peg$parseulong_number();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDEFAULT_SYMBOL();
      }

      return s0;
    }

    function peg$parsedefaultCollation() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDEFAULT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLLATE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecollationName();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedefaultEncryption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDEFAULT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseENCRYPTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSINGLE_QUOTED_TEXT();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedefaultCharset() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDEFAULT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecharset();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecharsetName();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionClause() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsePARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepartitionTypeDef();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsePARTITIONS_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsereal_ulong_number();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesubPartitions();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepartitionDefinitions();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionTypeDef() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseLINEAR_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKEY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepartitionKeyAlgorithm();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierList();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLINEAR_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHASH_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsebitExpr();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRANGE_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLIST_SYMBOL();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsebitExpr();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseCOLUMNS_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseOPEN_PAR_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseidentifierList();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsesubPartitions() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseSUBPARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLINEAR_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseHASH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseOPEN_PAR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebitExpr();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseKEY_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepartitionKeyAlgorithm();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseidentifierListWithParentheses();
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseSUBPARTITIONS_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsereal_ulong_number();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionKeyAlgorithm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c11();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseALGORITHM_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsereal_ulong_number();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionDefinitions() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepartitionDefinition();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepartitionDefinition();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepartitionDefinition();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionDefinition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parsePARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseVALUES_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLESS_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseTHAN_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsepartitionValueItemListParen();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseMAXVALUE_SYMBOL();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseVALUES_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIN_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepartitionValuesIn();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsepartitionOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsepartitionOption();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseOPEN_PAR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesubpartitionDefinition();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$currPos;
                  s10 = peg$parseCOMMA_SYMBOL();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsesubpartitionDefinition();
                    if (s11 !== peg$FAILED) {
                      s10 = [s10, s11];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$c0;
                  }
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$currPos;
                    s10 = peg$parseCOMMA_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsesubpartitionDefinition();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionValuesIn() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$parsepartitionValueItemListParen();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPEN_PAR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepartitionValueItemListParen();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepartitionValueItemListParen();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parseCOMMA_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepartitionValueItemListParen();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsepartitionOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseTABLESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSTORAGE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseENGINE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEQUAL_OPERATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetextOrIdentifier();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNODEGROUP_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsereal_ulong_number();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMAX_ROWS_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseMIN_ROWS_SYMBOL();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsereal_ulong_number();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDATA_SYMBOL();
              if (s1 === peg$FAILED) {
                s1 = peg$parseINDEX_SYMBOL();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDIRECTORY_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseEQUAL_OPERATOR();
                  if (s3 === peg$FAILED) {
                    s3 = peg$c1;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetextLiteral();
                    if (s4 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCOMMENT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsetextLiteral();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesubpartitionDefinition() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSUBPARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsepartitionOption();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsepartitionOption();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionValueItemListParen() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepartitionValueItem();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepartitionValueItem();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepartitionValueItem();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionValueItem() {
      var s0;

      s0 = peg$parsebitExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMAXVALUE_SYMBOL();
      }

      return s0;
    }

    function peg$parsedefinerClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDEFINER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseuser();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseifExists() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIF_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEXISTS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseifNotExists() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIF_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenotRule();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEXISTS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseprocedureParameter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIN_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseOUT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseINOUT_SYMBOL();
        }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefunctionParameter();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefunctionParameter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetypeWithOptCollate();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecollate() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCOLLATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecollationName();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetypeWithOptCollate() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsedataType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecollate();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseschemaIdentifierPair() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOMMA_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewRefList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseviewRef();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseviewRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseviewRef();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseupdateList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseupdateElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseupdateElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseupdateElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseupdateElement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefieldIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 === peg$FAILED) {
            s3 = peg$parseDEFAULT_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecharsetClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsecharset();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecharsetName();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecharset() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCHAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSET_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseCHARSET_SYMBOL();
      }

      return s0;
    }

    function peg$parsefieldsClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCOLUMNS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsefieldTerm();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsefieldTerm();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldTerm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseTERMINATED_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextString();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPTIONALLY_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseENCLOSED_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseBY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetextString();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseESCAPED_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseBY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetextString();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parselinesClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLINES_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parselineTerm();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parselineTerm();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselineTerm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseTERMINATED_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSTARTING_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextString();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuserList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseuser();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseuser();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseuser();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUserList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecreateUserEntry();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecreateUserEntry();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecreateUserEntry();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterUserList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterUserEntry();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterUserEntry();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterUserEntry();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUserEntry() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseuser();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseIDENTIFIED_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseBY_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s7 = peg$c32();
            if (s7) {
              s7 = peg$c3;
            } else {
              s7 = peg$c0;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsePASSWORD_SYMBOL();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetextString();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseWITH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextOrIdentifier();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseAS_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetextStringHash();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$currPos;
                  peg$reportedPos = peg$currPos;
                  s8 = peg$c15();
                  if (s8) {
                    s8 = peg$c3;
                  } else {
                    s8 = peg$c0;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseBY_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsetextString();
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s5 = peg$c31();
              if (s5) {
                s5 = peg$c3;
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseWITH_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetextOrIdentifier();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseBY_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseRANDOM_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsePASSWORD_SYMBOL();
                      if (s9 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterUserEntry() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseuser();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseIDENTIFIED_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = peg$parseWITH_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetextOrIdentifier();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$c1;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseBY_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetextString();
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parseREPLACE_SYMBOL();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsetextString();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$c0;
                }
                if (s8 === peg$FAILED) {
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseretainCurrentPassword();
                  if (s9 === peg$FAILED) {
                    s9 = peg$c1;
                  }
                  if (s9 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8, s9];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseWITH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextOrIdentifier();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseAS_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetextStringHash();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseretainCurrentPassword();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c1;
                    }
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c5();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsediscardOldPassword();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseretainCurrentPassword() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseRETAIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCURRENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePASSWORD_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsediscardOldPassword() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDISCARD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOLD_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePASSWORD_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsereplacePassword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREPLACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextString();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuserIdentifierOrText() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsetextOrIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseAT_SIGN_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextOrIdentifier();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseAT_TEXT_SUFFIX();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuser() {
      var s0, s1, s2;

      s0 = peg$parseuserIdentifierOrText();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCURRENT_USER_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseparentheses();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parselikeClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLIKE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSINGLE_QUOTED_TEXT();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselikeOrWhere() {
      var s0;

      s0 = peg$parselikeClause();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewhereClause();
      }

      return s0;
    }

    function peg$parseonlineOption() {
      var s0;

      s0 = peg$parseONLINE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOFFLINE_SYMBOL();
      }

      return s0;
    }

    function peg$parsenoWriteToBinLog() {
      var s0;

      s0 = peg$parseLOCAL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNO_WRITE_TO_BINLOG_SYMBOL();
      }

      return s0;
    }

    function peg$parseusePartition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c19();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifierListWithParentheses();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldIdentifier() {
      var s0, s1, s2;

      s0 = peg$parsedotIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequalifiedIdentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedotIdentifier();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecolumnName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c2();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c8();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefieldIdentifier();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecolumnInternalRefList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifier();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseidentifier();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertIdentifier() {
      var s0;

      s0 = peg$parsefieldIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetableWild();
      }

      return s0;
    }

    function peg$parsetableWild() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDOT_SYMBOL();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMULT_OPERATOR();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewName() {
      var s0;

      s0 = peg$parsequalifiedIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedotIdentifier();
      }

      return s0;
    }

    function peg$parseviewRef() {
      var s0;

      s0 = peg$parsequalifiedIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedotIdentifier();
      }

      return s0;
    }

    function peg$parsetableName() {
      var s0;

      s0 = peg$parsequalifiedIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedotIdentifier();
      }

      return s0;
    }

    function peg$parsefilterTableRef() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedotIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableRefWithWildcard() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDOT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMULT_OPERATOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsedotIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseDOT_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseMULT_OPERATOR();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableRef() {
      var s0;

      s0 = peg$parsequalifiedIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedotIdentifier();
      }

      return s0;
    }

    function peg$parsetableRefList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableRef();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableAliasRefList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableRefWithWildcard();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableRefWithWildcard();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableRefWithWildcard();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselabelIdentifier() {
      var s0;

      s0 = peg$parsepureIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parselabelKeyword();
      }

      return s0;
    }

    function peg$parseroleIdentifier() {
      var s0;

      s0 = peg$parsepureIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseroleKeyword();
      }

      return s0;
    }

    function peg$parsepureIdentifier() {
      var s0, s1, s2;

      s0 = peg$parseIDENTIFIER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBACK_TICK_QUOTED_ID();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c61();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDOUBLE_QUOTED_TEXT();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0;

      s0 = peg$parsepureIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeyword();
      }

      return s0;
    }

    function peg$parseidentifierList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidentifierListWithParentheses() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequalifiedIdentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedotIdentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleIdentifier() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsedotIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedotIdentifier();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c8();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedotIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedotIdentifier();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsedotIdentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDOT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseulong_number() {
      var s0;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEX_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseINT_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseINT_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDECIMAL_NUMBER();
              if (s0 === peg$FAILED) {
                s0 = peg$parseFLOAT_NUMBER();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereal_ulong_number() {
      var s0;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEX_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseINT_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseINT_NUMBER();
          }
        }
      }

      return s0;
    }

    function peg$parseulonglong_number() {
      var s0;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINT_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseINT_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDECIMAL_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFLOAT_NUMBER();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereal_ulonglong_number() {
      var s0, s1, s2;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c12();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHEX_NUMBER();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseINT_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseINT_NUMBER();
          }
        }
      }

      return s0;
    }

    function peg$parseliteral() {
      var s0, s1, s2;

      s0 = peg$parsetextLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetemporalLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenullLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseboolLiteral();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseUNDERSCORE_CHARSET();
                if (s1 === peg$FAILED) {
                  s1 = peg$c1;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseHEX_NUMBER();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseBIN_NUMBER();
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesignedLiteral() {
      var s0, s1, s2;

      s0 = peg$parseliteral();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePLUS_OPERATOR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseulong_number();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMINUS_OPERATOR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseulong_number();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsestringList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextString();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetextString();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextString();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextString() {
      var s0;

      s0 = peg$parseSINGLE_QUOTED_TEXT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEX_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBIN_NUMBER();
        }
      }

      return s0;
    }

    function peg$parsetextStringHash() {
      var s0, s1, s2;

      s0 = peg$parseSINGLE_QUOTED_TEXT();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c12();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHEX_NUMBER();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetextLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseUNDERSCORE_CHARSET();
      if (s2 === peg$FAILED) {
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSINGLE_QUOTED_TEXT();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseNCHAR_TEXT();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSINGLE_QUOTED_TEXT();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSINGLE_QUOTED_TEXT();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextStringLiteralList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSINGLE_QUOTED_TEXT();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSINGLE_QUOTED_TEXT();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSINGLE_QUOTED_TEXT();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenumLiteral() {
      var s0;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINT_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseINT_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDECIMAL_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFLOAT_NUMBER();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseboolLiteral() {
      var s0;

      s0 = peg$parseTRUE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFALSE_SYMBOL();
      }

      return s0;
    }

    function peg$parsenullLiteral() {
      var s0;

      s0 = peg$parseNULL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL2_SYMBOL();
      }

      return s0;
    }

    function peg$parsetemporalLiteral() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSINGLE_QUOTED_TEXT();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTIME_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSINGLE_QUOTED_TEXT();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTIMESTAMP_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSINGLE_QUOTED_TEXT();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsefloatOptions() {
      var s0;

      s0 = peg$parsefieldLength();
      if (s0 === peg$FAILED) {
        s0 = peg$parseprecision();
      }

      return s0;
    }

    function peg$parseprecision() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINT_NUMBER();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOMMA_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINT_NUMBER();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextOrIdentifier() {
      var s0;

      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSINGLE_QUOTED_TEXT();
      }

      return s0;
    }

    function peg$parselValueIdentifier() {
      var s0;

      s0 = peg$parsepureIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parselValueKeyword();
      }

      return s0;
    }

    function peg$parseroleIdentifierOrText() {
      var s0;

      s0 = peg$parseroleIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSINGLE_QUOTED_TEXT();
      }

      return s0;
    }

    function peg$parsesizeNumber() {
      var s0;

      s0 = peg$parsereal_ulonglong_number();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepureIdentifier();
      }

      return s0;
    }

    function peg$parseparentheses() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCLOSE_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseequal() {
      var s0;

      s0 = peg$parseEQUAL_OPERATOR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseASSIGN_OPERATOR();
      }

      return s0;
    }

    function peg$parseoptionType() {
      var s0;

      s0 = peg$parsePERSIST_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePERSIST_ONLY_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGLOBAL_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLOCAL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSESSION_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsevarIdentType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseGLOBAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLOCAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDOT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSESSION_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDOT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsesetVarIdentType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePERSIST_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePERSIST_ONLY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDOT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseGLOBAL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDOT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseLOCAL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseDOT_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSESSION_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDOT_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenotRule() {
      var s0;

      s0 = peg$parseNOT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNOT_SYMBOL();
      }

      return s0;
    }

    function peg$parsenot2Rule() {
      var s0;

      s0 = peg$parseLOGICAL_NOT_OPERATOR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNOT_SYMBOL();
      }

      return s0;
    }

    function peg$parseinterval() {
      var s0;

      s0 = peg$parseintervalTimeStamp();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSECOND_MICROSECOND_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMINUTE_MICROSECOND_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMINUTE_SECOND_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseHOUR_MICROSECOND_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseHOUR_SECOND_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseHOUR_MINUTE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDAY_MICROSECOND_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseDAY_SECOND_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseDAY_MINUTE_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDAY_HOUR_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseYEAR_MONTH_SYMBOL();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseintervalTimeStamp() {
      var s0;

      s0 = peg$parseMICROSECOND_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSECOND_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMINUTE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseHOUR_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDAY_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseWEEK_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseMONTH_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseQUARTER_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseYEAR_SYMBOL();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeyword() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c24();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselabelKeyword();
        if (s2 === peg$FAILED) {
          s2 = peg$parseroleOrIdentifierKeyword();
          if (s2 === peg$FAILED) {
            s2 = peg$parseEXECUTE_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s3 = peg$c21();
              if (s3) {
                s3 = peg$c3;
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseSHUTDOWN_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c16();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseRESTART_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsUnambiguous();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous1RolesAndLabels();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
            if (s0 === peg$FAILED) {
              s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
              if (s0 === peg$FAILED) {
                s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsAmbiguous1RolesAndLabels() {
      var s0;

      s0 = peg$parseEXECUTE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRESTART_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSHUTDOWN_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsAmbiguous2Labels() {
      var s0;

      s0 = peg$parseASCII_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBEGIN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBYTE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCACHE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCHARSET_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCHECKSUM_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseCLONE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCOMMENT_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCOMMIT_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseCONTAINS_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDEALLOCATE_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseDO_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseEND_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseFLUSH_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseFOLLOWS_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseHANDLER_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseHELP_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseIMPORT_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseINSTALL_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseLANGUAGE_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseNO_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsePRECEDES_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsePREPARE_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseREPAIR_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseRESET_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseROLLBACK_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseSAVEPOINT_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseSIGNED_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseSLAVE_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseSTART_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseSTOP_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseTRUNCATE_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseUNICODE_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseUNINSTALL_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseXA_SYMBOL();
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselabelKeyword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c24();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseroleOrLabelKeyword();
        if (s2 === peg$FAILED) {
          s2 = peg$parseEVENT_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseFILE_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseNONE_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parsePROCESS_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsePROXY_SYMBOL();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseRELOAD_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseREPLICATION_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseRESOURCE_SYMBOL();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseSUPER_SYMBOL();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsUnambiguous();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsAmbiguous3Roles() {
      var s0;

      s0 = peg$parseEVENT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFILE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNONE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePROCESS_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePROXY_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseRELOAD_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseREPLICATION_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseRESOURCE_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSUPER_SYMBOL();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsUnambiguous() {
      var s0, s1, s2;

      s0 = peg$parseACTION_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseACCOUNT_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseACTIVE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseADDDATE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseADMIN_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAFTER_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAGAINST_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseAGGREGATE_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseALGORITHM_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseALWAYS_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseANY_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseAT_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseAUTO_INCREMENT_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseAVG_ROW_LENGTH_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseAVG_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseBACKUP_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseBINLOG_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseBIT_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseBLOCK_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseBOOLEAN_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseBOOL_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseBTREE_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseBUCKETS_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseCASCADED_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseCATALOG_NAME_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseCHAIN_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseCHANGED_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseCHANNEL_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseCIPHER_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseCLASS_ORIGIN_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseCLIENT_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseCLOSE_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseCOALESCE_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseCODE_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseCOLLATION_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseCOLUMNS_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseCOLUMN_FORMAT_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseCOLUMN_NAME_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseCOMMITTED_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseCOMPACT_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseCOMPLETION_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseCOMPONENT_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseCOMPRESSED_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseCOMPRESSION_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseCONCURRENT_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseCONNECTION_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseCONSISTENT_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseCONTEXT_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseCPU_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseCURRENT_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseCURSOR_NAME_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseDATAFILE_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseDATA_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseDATETIME_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseDATE_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseDAY_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseDEFAULT_AUTH_SYMBOL();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parseDEFINER_SYMBOL();
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$parseDEFINITION_SYMBOL();
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parseDESCRIPTION_SYMBOL();
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$parseDIAGNOSTICS_SYMBOL();
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$parseDIRECTORY_SYMBOL();
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$parseDISABLE_SYMBOL();
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$parseDISCARD_SYMBOL();
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$parseDISK_SYMBOL();
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$parseDUMPFILE_SYMBOL();
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$parseDUPLICATE_SYMBOL();
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$parseDYNAMIC_SYMBOL();
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        s0 = peg$parseENABLE_SYMBOL();
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          s0 = peg$parseENCRYPTION_SYMBOL();
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            s0 = peg$parseENDS_SYMBOL();
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              s0 = peg$parseENFORCED_SYMBOL();
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                s0 = peg$parseENGINES_SYMBOL();
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  s0 = peg$parseENGINE_SYMBOL();
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    s0 = peg$parseENUM_SYMBOL();
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      s0 = peg$parseERRORS_SYMBOL();
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        s0 = peg$parseERROR_SYMBOL();
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          s0 = peg$parseESCAPE_SYMBOL();
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            s0 = peg$parseEVENTS_SYMBOL();
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              s0 = peg$parseEVERY_SYMBOL();
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                s0 = peg$parseEXCHANGE_SYMBOL();
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                  s0 = peg$parseEXCLUDE_SYMBOL();
                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                    s0 = peg$parseEXPANSION_SYMBOL();
                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                      s0 = peg$parseEXPIRE_SYMBOL();
                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                        s0 = peg$parseEXPORT_SYMBOL();
                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                          s0 = peg$parseEXTENDED_SYMBOL();
                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                            s0 = peg$parseEXTENT_SIZE_SYMBOL();
                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                              s0 = peg$parseFAST_SYMBOL();
                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                s0 = peg$parseFAULTS_SYMBOL();
                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                  s0 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                    s0 = peg$parseFILTER_SYMBOL();
                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                      s0 = peg$parseFIRST_SYMBOL();
                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                        s0 = peg$parseFIXED_SYMBOL();
                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                          s0 = peg$parseFOLLOWING_SYMBOL();
                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                            s0 = peg$parseFORMAT_SYMBOL();
                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                              s0 = peg$parseFOUND_SYMBOL();
                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                s0 = peg$parseFULL_SYMBOL();
                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                  s0 = peg$parseGENERAL_SYMBOL();
                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                    s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                      s0 = peg$parseGEOMETRY_SYMBOL();
                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                        s0 = peg$parseGET_FORMAT_SYMBOL();
                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                          s0 = peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL();
                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                            s0 = peg$parseGRANTS_SYMBOL();
                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                              s0 = peg$parseGROUP_REPLICATION_SYMBOL();
                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                s0 = peg$parseHASH_SYMBOL();
                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                  s0 = peg$parseHISTOGRAM_SYMBOL();
                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                    s0 = peg$parseHISTORY_SYMBOL();
                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                      s0 = peg$parseHOSTS_SYMBOL();
                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                        s0 = peg$parseHOST_SYMBOL();
                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                          s0 = peg$parseHOUR_SYMBOL();
                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                            s0 = peg$parseIDENTIFIED_SYMBOL();
                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                              s0 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                s0 = peg$parseINACTIVE_SYMBOL();
                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                  s0 = peg$parseINDEXES_SYMBOL();
                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                    s0 = peg$parseINITIAL_SIZE_SYMBOL();
                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                      s0 = peg$parseINSERT_METHOD_SYMBOL();
                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                        s0 = peg$parseINSTANCE_SYMBOL();
                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                          s0 = peg$parseINVISIBLE_SYMBOL();
                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                            s0 = peg$parseINVOKER_SYMBOL();
                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                              s0 = peg$parseIO_SYMBOL();
                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                s0 = peg$parseIPC_SYMBOL();
                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s0 = peg$parseISOLATION_SYMBOL();
                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s0 = peg$parseISSUER_SYMBOL();
                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s0 = peg$parseJSON_SYMBOL();
                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s0 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s0 = peg$parseLAST_SYMBOL();
                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s0 = peg$parseLEAVES_SYMBOL();
                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s0 = peg$parseLESS_SYMBOL();
                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s0 = peg$parseLEVEL_SYMBOL();
                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s0 = peg$parseLINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s0 = peg$parseLIST_SYMBOL();
                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s0 = peg$parseLOCKED_SYMBOL();
                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s0 = peg$parseLOCKS_SYMBOL();
                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s0 = peg$parseLOGFILE_SYMBOL();
                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                            s0 = peg$parseLOGS_SYMBOL();
                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_DELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_HOST_SYMBOL();
                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                          s0 = peg$parseNETWORK_NAMESPACE_SYMBOL();
                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_PORT_SYMBOL();
                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SERVER_ID_SYMBOL();
                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_SSL_CA_SYMBOL();
                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_SSL_CERT_SYMBOL();
                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SSL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_USER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMAX_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMAX_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMEDIUM_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMEMORY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMERGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMICROSECOND_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMIGRATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMINUTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMIN_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMODE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMODIFY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMONTH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMUTEX_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNAMES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNAME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNATIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNDBCLUSTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNESTED_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNEVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNEW_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNODEGROUP_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNOWAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNO_WAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNULLS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNUMBER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNVARCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseOFFSET_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseOJ_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseOLD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseONE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseOPEN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseOPTIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseOPTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseORDINALITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseORGANIZATION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseOTHERS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseOWNER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePACK_KEYS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePAGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePARSER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePARTIAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePARTITIONING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePARTITIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePHASE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePLUGINS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePLUGIN_DIR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePLUGIN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePORT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePRECEDING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePRESERVE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePREV_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePRIVILEGES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePROCESSLIST_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePROFILES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePROFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseQUARTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseQUERY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseQUICK_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseREAD_ONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREBUILD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseRECOVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREDUNDANT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseREFERENCE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAYLOG_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_LOG_FILE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_LOG_POS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_THREAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREMOVE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseREORGANIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPEATABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_DO_DB_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseUSER_RESOURCES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESPECT_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseRESTORE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESUME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETAIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNED_SQLSTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNS_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREUSE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREVERSE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseROLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROLLUP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROUTINE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseROW_COUNT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROW_FORMAT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRTREE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseSCHEDULE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseSCHEMA_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_ENGINE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_LOAD_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseSECONDARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_UNLOAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECOND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECURITY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIALIZABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseSERVER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSHARE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSIMPLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSKIP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSLOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSNAPSHOT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOUNDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOURCE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BIG_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CALC_FOUND_ROWS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_NO_CACHE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseSQL_SMALL_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_THREAD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
s0 = peg$parseSRID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTACKED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTARTS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseSTATS_PERSISTENT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATUS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORAGE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTREAM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBDATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBJECT_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseSUBPARTITIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUSPEND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWAPS_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseSWITCHES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLESPACE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_CHECKSUM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPORARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPTABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTERMINATED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEXT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTHAN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTHREAD_PRIORITY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIES_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseTIMESTAMP_ADD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_DIFF_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseTRANSACTION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRIGGERS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNBOUNDED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNCOMMITTED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDEFINED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDOFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNKNOWN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNTIL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUPGRADE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSE_FRM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALIDATION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALUE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALUES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARBINARY_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseVARCHAR_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARIABLES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
s0 = peg$parseVARIANCE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARYING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVAR_POP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVAR_SAMP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVCPU_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIEW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIRTUAL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVISIBLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWAIT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWARNINGS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEEK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEIGHT_STRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWHEN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWHERE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWHILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseWINDOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWITH_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWITHOUT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWORK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWRAPPER_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseWRITE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseXA_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseX509_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseXID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXML_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXOR_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_MONTH_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseZEROFILL_SYMBOL();
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c13();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseARRAY_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseARRAY_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseMEMBER_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseOFF_SYMBOL();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsePASSWORD_LOCK_TIME_SYMBOL();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseRANDOM_SYMBOL();
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseREQUIRE_ROW_FORMAT_SYMBOL();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$parseSTREAM_SYMBOL();
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$parseTIMESTAMP_SYMBOL();
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$parseTIME_SYMBOL();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseroleKeyword() {
      var s0;

      s0 = peg$parseroleOrLabelKeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parseroleOrIdentifierKeyword();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsUnambiguous();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
          }
        }
      }

      return s0;
    }

    function peg$parselValueKeyword() {
      var s0;

      s0 = peg$parseidentifierKeywordsUnambiguous();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsAmbiguous1RolesAndLabels();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsAmbiguous4SystemVariables() {
      var s0;

      s0 = peg$parseGLOBAL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLOCAL_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePERSIST_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePERSIST_ONLY_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSESSION_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseroleOrIdentifierKeyword() {
      var s0;

      s0 = peg$parseACCOUNT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseASCII_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseALWAYS_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBACKUP_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBEGIN_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBYTE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseCACHE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCHARSET_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCHECKSUM_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseCLONE_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseCLOSE_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseCOMMENT_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseCOMMIT_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseCONTAINS_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseDEALLOCATE_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseDO_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseEND_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseFLUSH_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseFOLLOWS_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseFORMAT_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseGROUP_REPLICATION_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseHANDLER_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseHELP_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseHOST_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseINSTALL_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseINVISIBLE_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseLANGUAGE_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseNO_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseOPEN_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseOPTIONS_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseOWNER_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsePARSER_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsePARTITION_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsePORT_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsePRECEDES_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsePREPARE_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseREMOVE_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseREPAIR_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseRESET_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseRESTORE_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseROLE_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseROLLBACK_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseSAVEPOINT_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseSECONDARY_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseSECONDARY_ENGINE_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseSECONDARY_LOAD_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseSECONDARY_UNLOAD_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseSECURITY_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseSERVER_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseSIGNED_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseSOCKET_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseSLAVE_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseSONAME_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseSTART_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseSTOP_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseTRUNCATE_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseUNICODE_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseUNINSTALL_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseUPGRADE_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseVISIBLE_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseWRAPPER_SYMBOL();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parseXA_SYMBOL();
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseSHUTDOWN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIMPORT_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseroleOrLabelKeyword() {
      var s0, s1;

      s0 = peg$parseACTION_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseACTIVE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseADDDATE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAFTER_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAGAINST_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAGGREGATE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseALGORITHM_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseANALYSE_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseANY_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseAT_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseAUTHORS_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseAUTO_INCREMENT_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseAVG_ROW_LENGTH_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseAVG_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseBINLOG_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseBIT_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseBLOCK_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseBOOL_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseBOOLEAN_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseBTREE_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseBUCKETS_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseCASCADED_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseCATALOG_NAME_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseCHAIN_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseCHANGED_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseCHANNEL_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseCIPHER_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseCLIENT_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseCLASS_ORIGIN_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseCOALESCE_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseCODE_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseCOLLATION_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseCOLUMN_NAME_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseCOLUMN_FORMAT_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseCOLUMNS_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseCOMMITTED_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseCOMPACT_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseCOMPLETION_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseCOMPONENT_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseCOMPRESSED_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseCOMPRESSION_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseCONCURRENT_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseCONNECTION_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseCONSISTENT_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseCONTEXT_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseCONTRIBUTORS_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseCPU_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseCURRENT_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseCURSOR_NAME_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseDATA_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseDATAFILE_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseDATETIME_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseDATE_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseDAY_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseDEFAULT_AUTH_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseDEFINER_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parseDES_KEY_FILE_SYMBOL();
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$parseDESCRIPTION_SYMBOL();
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$parseDIAGNOSTICS_SYMBOL();
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parseDIRECTORY_SYMBOL();
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$parseDISABLE_SYMBOL();
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$parseDISCARD_SYMBOL();
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$parseDISK_SYMBOL();
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$parseDUMPFILE_SYMBOL();
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$parseDUPLICATE_SYMBOL();
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$parseDYNAMIC_SYMBOL();
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$parseENCRYPTION_SYMBOL();
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$parseENDS_SYMBOL();
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        s0 = peg$parseENUM_SYMBOL();
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          s0 = peg$parseENGINE_SYMBOL();
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            s0 = peg$parseENGINES_SYMBOL();
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              s0 = peg$parseERROR_SYMBOL();
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                s0 = peg$parseERRORS_SYMBOL();
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  s0 = peg$parseESCAPE_SYMBOL();
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    s0 = peg$parseEVENTS_SYMBOL();
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      s0 = peg$parseEVERY_SYMBOL();
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        s0 = peg$parseEXCLUDE_SYMBOL();
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          s0 = peg$parseEXPANSION_SYMBOL();
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            s0 = peg$parseEXPORT_SYMBOL();
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              s0 = peg$parseEXTENDED_SYMBOL();
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                s0 = peg$parseEXTENT_SIZE_SYMBOL();
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                  s0 = peg$parseFAULTS_SYMBOL();
                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                    s0 = peg$parseFAST_SYMBOL();
                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                      s0 = peg$parseFOLLOWING_SYMBOL();
                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                        s0 = peg$parseFOUND_SYMBOL();
                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                          s0 = peg$parseENABLE_SYMBOL();
                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                            s0 = peg$parseFULL_SYMBOL();
                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                              s0 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                s0 = peg$parseFILTER_SYMBOL();
                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                  s0 = peg$parseFIRST_SYMBOL();
                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                    s0 = peg$parseFIXED_SYMBOL();
                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                      s0 = peg$parseGENERAL_SYMBOL();
                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                        s0 = peg$parseGEOMETRY_SYMBOL();
                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                          s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                            s0 = peg$parseGET_FORMAT_SYMBOL();
                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                              s0 = peg$parseGRANTS_SYMBOL();
                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                s0 = peg$parseGLOBAL_SYMBOL();
                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                  s0 = peg$parseHASH_SYMBOL();
                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                    s0 = peg$parseHISTOGRAM_SYMBOL();
                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                      s0 = peg$parseHISTORY_SYMBOL();
                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                        s0 = peg$parseHOSTS_SYMBOL();
                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                          s0 = peg$parseHOUR_SYMBOL();
                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                            s0 = peg$parseIDENTIFIED_SYMBOL();
                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                              s0 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                s0 = peg$parseINVOKER_SYMBOL();
                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                  s0 = peg$parseINDEXES_SYMBOL();
                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                    s0 = peg$parseINITIAL_SIZE_SYMBOL();
                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                      s0 = peg$parseINSTANCE_SYMBOL();
                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                        s0 = peg$parseINACTIVE_SYMBOL();
                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                          s0 = peg$parseIO_SYMBOL();
                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                            s0 = peg$parseIPC_SYMBOL();
                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                              s0 = peg$parseISOLATION_SYMBOL();
                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                s0 = peg$parseISSUER_SYMBOL();
                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                  s0 = peg$parseINSERT_METHOD_SYMBOL();
                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                    s0 = peg$parseJSON_SYMBOL();
                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                      s0 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                        s0 = peg$parseLAST_SYMBOL();
                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                          s0 = peg$parseLEAVES_SYMBOL();
                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                            s0 = peg$parseLESS_SYMBOL();
                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                              s0 = peg$parseLEVEL_SYMBOL();
                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                s0 = peg$parseLINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s0 = peg$parseLIST_SYMBOL();
                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s0 = peg$parseLOCAL_SYMBOL();
                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s0 = peg$parseLOCKED_SYMBOL();
                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s0 = peg$parseLOCKS_SYMBOL();
                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s0 = peg$parseLOGFILE_SYMBOL();
                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s0 = peg$parseLOGS_SYMBOL();
                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s0 = peg$parseMAX_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_SYMBOL();
                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_HOST_SYMBOL();
                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_PORT_SYMBOL();
                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_USER_SYMBOL();
                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_SERVER_ID_SYMBOL();
                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_DELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SSL_SYMBOL();
                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_SSL_CA_SYMBOL();
                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_SSL_CERT_SYMBOL();
                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMAX_STATEMENT_TIME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMAX_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMEDIUM_SYMBOL();
                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMEMORY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMERGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMICROSECOND_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMIGRATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMINUTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMIN_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMODIFY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMODE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMONTH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMUTEX_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNAME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNAMES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNATIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNDBCLUSTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNESTED_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNEVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNEW_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNO_WAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNODEGROUP_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNULLS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNOWAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNUMBER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNVARCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseOFFSET_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseOLD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseOLD_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseONE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseOPTIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseORDINALITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseORGANIZATION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseOTHERS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePACK_KEYS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePAGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePARTIAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePARTITIONING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePARTITIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePHASE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePLUGIN_DIR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePLUGIN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePLUGINS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePRECEDING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePRESERVE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePREV_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseTHREAD_PRIORITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePRIVILEGES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePROCESSLIST_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePROFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePROFILES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseQUARTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseQUERY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseQUICK_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseREAD_ONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseREBUILD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseRECOVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREDOFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREDUNDANT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseRELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseRELAYLOG_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseRELAY_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseRELAY_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseRELAY_THREAD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREMOTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREORGANIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREPEATABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseREPLICATE_DO_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseUSER_RESOURCES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseRESPECT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESUME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETAIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNED_SQLSTATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
s0 = peg$parseRETURNS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREUSE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREVERSE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseROLLUP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROUTINE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROW_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
s0 = peg$parseROW_FORMAT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
s0 = peg$parseRTREE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSCHEDULE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSCHEMA_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECOND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIAL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIALIZABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSESSION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSHARE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSIMPLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSKIP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSLOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSNAPSHOT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseSOUNDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOURCE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_NO_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_THREAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSRID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTACKED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTARTS_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_PERSISTENT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATUS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORAGE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBDATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBJECT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITIONS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUPER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUSPEND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWITCHES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_NAME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
s0 = peg$parseTABLES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_CHECKSUM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLESPACE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPORARY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseTEMPTABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEXT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTHAN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRANSACTION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRIGGERS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_ADD_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseTIMESTAMP_DIFF_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseTYPES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseUDF_RETURNS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNBOUNDED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNCOMMITTED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDEFINED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDOFILE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNKNOWN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNTIL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSE_FRM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARIABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVCPU_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIEW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALUE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWARNINGS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWAIT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEEK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWORK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEIGHT_STRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseX509_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseXID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXML_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_SYMBOL();
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseSHUTDOWN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCUBE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIMPORT_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFUNCTION_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseROWS_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseROW_SYMBOL();
                }
              }
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseEXCHANGE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseEXPIRE_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseONLY_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSUPER_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseVALIDATION_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseWITHOUT_SYMBOL();
                    }
                  }
                }
              }
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseADMIN_SYMBOL();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c62();
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEQUAL_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c63;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }

      return s0;
    }

    function peg$parseASSIGN_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c65) {
        s0 = peg$c65;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }

      return s0;
    }

    function peg$parseNULL_SAFE_EQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c67) {
        s0 = peg$c67;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }

      return s0;
    }

    function peg$parseGREATER_OR_EQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c69) {
        s0 = peg$c69;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }

      return s0;
    }

    function peg$parseGREATER_THAN_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 62) {
        s0 = peg$c71;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }

      return s0;
    }

    function peg$parseLESS_OR_EQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c73) {
        s0 = peg$c73;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }

      return s0;
    }

    function peg$parseLESS_THAN_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 60) {
        s0 = peg$c75;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }

      return s0;
    }

    function peg$parseNOT_EQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c77) {
        s0 = peg$c77;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }

      return s0;
    }

    function peg$parseNOT_EQUAL2_OPERATOR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c79) {
        s1 = peg$c79;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c81();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePLUS_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c82;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }

      return s0;
    }

    function peg$parseMINUS_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c84;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }

      return s0;
    }

    function peg$parseMULT_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 42) {
        s0 = peg$c86;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      return s0;
    }

    function peg$parseDIV_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 47) {
        s0 = peg$c88;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parseMOD_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 37) {
        s0 = peg$c90;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parseLOGICAL_NOT_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 33) {
        s0 = peg$c92;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }

      return s0;
    }

    function peg$parseBITWISE_NOT_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 126) {
        s0 = peg$c94;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      return s0;
    }

    function peg$parseSHIFT_LEFT_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c96) {
        s0 = peg$c96;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      return s0;
    }

    function peg$parseSHIFT_RIGHT_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c98) {
        s0 = peg$c98;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }

      return s0;
    }

    function peg$parseLOGICAL_AND_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c100) {
        s0 = peg$c100;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }

      return s0;
    }

    function peg$parseBITWISE_AND_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 38) {
        s0 = peg$c102;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }

      return s0;
    }

    function peg$parseBITWISE_XOR_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 94) {
        s0 = peg$c104;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }

      return s0;
    }

    function peg$parseLOGICAL_OR_OPERATOR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c106) {
        s1 = peg$c106;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c108();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBITWISE_OR_OPERATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 124) {
        s0 = peg$c109;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }

      return s0;
    }

    function peg$parseDOT_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c111;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }

      return s0;
    }

    function peg$parseCOMMA_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c113;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }

      return s0;
    }

    function peg$parseSEMICOLON_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 59) {
        s0 = peg$c115;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }

      return s0;
    }

    function peg$parseCOLON_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 58) {
        s0 = peg$c117;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c118); }
      }

      return s0;
    }

    function peg$parseOPEN_PAR_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c119;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }

      return s0;
    }

    function peg$parseCLOSE_PAR_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c121;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }

      return s0;
    }

    function peg$parseOPEN_CURLY_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 123) {
        s0 = peg$c123;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c124); }
      }

      return s0;
    }

    function peg$parseCLOSE_CURLY_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 125) {
        s0 = peg$c125;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }

      return s0;
    }

    function peg$parseUNDERLINE_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 95) {
        s0 = peg$c127;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }

      return s0;
    }

    function peg$parseJSON_SEPARATOR_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c129) {
        s1 = peg$c129;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c131();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseJSON_UNQUOTED_SEPARATOR_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c132) {
        s1 = peg$c132;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c134();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAT_SIGN_SYMBOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 64) {
        s0 = peg$c135;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }

      return s0;
    }

    function peg$parseAT_TEXT_SUFFIX() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c135;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMPLE_IDENTIFIER();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAT_AT_SIGN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c137) {
        s0 = peg$c137;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }

      return s0;
    }

    function peg$parseNULL2_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c139) {
        s0 = peg$c139;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }

      return s0;
    }

    function peg$parsePARAM_MARKER() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 63) {
        s0 = peg$c141;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }

      return s0;
    }

    function peg$parseA() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 97) {
        s0 = peg$c143;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 65) {
          s0 = peg$c145;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c146); }
        }
      }

      return s0;
    }

    function peg$parseB() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 98) {
        s0 = peg$c147;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 66) {
          s0 = peg$c149;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c150); }
        }
      }

      return s0;
    }

    function peg$parseC() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 99) {
        s0 = peg$c151;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 67) {
          s0 = peg$c153;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c154); }
        }
      }

      return s0;
    }

    function peg$parseD() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 100) {
        s0 = peg$c155;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 68) {
          s0 = peg$c157;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c158); }
        }
      }

      return s0;
    }

    function peg$parseE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 101) {
        s0 = peg$c159;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 69) {
          s0 = peg$c161;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c162); }
        }
      }

      return s0;
    }

    function peg$parseF() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 102) {
        s0 = peg$c163;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 70) {
          s0 = peg$c165;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c166); }
        }
      }

      return s0;
    }

    function peg$parseG() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 103) {
        s0 = peg$c167;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c168); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 71) {
          s0 = peg$c169;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c170); }
        }
      }

      return s0;
    }

    function peg$parseH() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 104) {
        s0 = peg$c171;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c172); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 72) {
          s0 = peg$c173;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c174); }
        }
      }

      return s0;
    }

    function peg$parseI() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 105) {
        s0 = peg$c175;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 73) {
          s0 = peg$c177;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c178); }
        }
      }

      return s0;
    }

    function peg$parseJ() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 106) {
        s0 = peg$c179;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 74) {
          s0 = peg$c181;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c182); }
        }
      }

      return s0;
    }

    function peg$parseK() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 107) {
        s0 = peg$c183;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 75) {
          s0 = peg$c185;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c186); }
        }
      }

      return s0;
    }

    function peg$parseL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 108) {
        s0 = peg$c187;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 76) {
          s0 = peg$c189;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c190); }
        }
      }

      return s0;
    }

    function peg$parseM() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 109) {
        s0 = peg$c191;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 77) {
          s0 = peg$c193;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
      }

      return s0;
    }

    function peg$parseN() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 110) {
        s0 = peg$c195;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 78) {
          s0 = peg$c197;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c198); }
        }
      }

      return s0;
    }

    function peg$parseO() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 111) {
        s0 = peg$c199;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c200); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 79) {
          s0 = peg$c201;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
      }

      return s0;
    }

    function peg$parseP() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 112) {
        s0 = peg$c203;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 80) {
          s0 = peg$c205;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c206); }
        }
      }

      return s0;
    }

    function peg$parseQ() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 113) {
        s0 = peg$c207;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c208); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 81) {
          s0 = peg$c209;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c210); }
        }
      }

      return s0;
    }

    function peg$parseR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 114) {
        s0 = peg$c211;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 82) {
          s0 = peg$c213;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c214); }
        }
      }

      return s0;
    }

    function peg$parseS() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 115) {
        s0 = peg$c215;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 83) {
          s0 = peg$c217;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c218); }
        }
      }

      return s0;
    }

    function peg$parseT() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 116) {
        s0 = peg$c219;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c220); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 84) {
          s0 = peg$c221;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c222); }
        }
      }

      return s0;
    }

    function peg$parseU() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 117) {
        s0 = peg$c223;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c224); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 85) {
          s0 = peg$c225;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c226); }
        }
      }

      return s0;
    }

    function peg$parseV() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 118) {
        s0 = peg$c227;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c228); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 86) {
          s0 = peg$c229;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c230); }
        }
      }

      return s0;
    }

    function peg$parseW() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 119) {
        s0 = peg$c231;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c232); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 87) {
          s0 = peg$c233;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c234); }
        }
      }

      return s0;
    }

    function peg$parseX() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 120) {
        s0 = peg$c235;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c236); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 88) {
          s0 = peg$c237;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c238); }
        }
      }

      return s0;
    }

    function peg$parseY() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 121) {
        s0 = peg$c239;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 89) {
          s0 = peg$c241;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c242); }
        }
      }

      return s0;
    }

    function peg$parseZ() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 122) {
        s0 = peg$c243;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c244); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 90) {
          s0 = peg$c245;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c246); }
        }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c247.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c248); }
      }

      return s0;
    }

    function peg$parseDIGITS() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseDIGIT();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseDIGIT();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHEXDIGIT() {
      var s0;

      if (peg$c249.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c250); }
      }

      return s0;
    }

    function peg$parseHEX_NUMBER() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c251) {
        s1 = peg$c251;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c252); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseHEXDIGIT();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseHEXDIGIT();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c253) {
          s1 = peg$c253;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseHEXDIGIT();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseHEXDIGIT();
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c255;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c256); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseBIN_NUMBER() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c257) {
        s1 = peg$c257;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c259.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c259.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c260); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c261) {
          s1 = peg$c261;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c262); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c259.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c260); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c259.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c260); }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c255;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c256); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseINT_NUMBER() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseDIGITS();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c263();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDECIMAL_NUMBER() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDIGITS();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c111;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDIGITS();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFLOAT_NUMBER() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseDIGITS();
      if (s2 === peg$FAILED) {
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c111;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGITS();
        if (s2 !== peg$FAILED) {
          if (peg$c264.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c265); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMINUS_OPERATOR();
            if (s4 === peg$FAILED) {
              s4 = peg$parsePLUS_OPERATOR();
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDIGITS();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDOT_IDENTIFIER() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c111;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseLETTER_WHEN_UNQUOTED();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseLETTER_WHEN_UNQUOTED();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c266();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUNDERSCORE_CHARSET() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 95) {
        s1 = peg$c127;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c267.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c268); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c267.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c268); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c269();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIDENTIFIER() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDIGITS();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDIGITS();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c264.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c265); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseLETTER_WHEN_UNQUOTED();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseLETTER_WHEN_UNQUOTED();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseDIGITS();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseDIGITS();
          }
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLETTER_WITHOUT_FLOAT_PART();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseLETTER_WHEN_UNQUOTED();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseLETTER_WHEN_UNQUOTED();
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseLETTER_WHEN_UNQUOTED();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseLETTER_WHEN_UNQUOTED();
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseNCHAR_TEXT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c270.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c271); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSINGLE_QUOTED_TEXT();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBACK_TICK() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 96) {
        s0 = peg$c272;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }

      return s0;
    }

    function peg$parseSINGLE_QUOTE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c255;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c256); }
      }

      return s0;
    }

    function peg$parseDOUBLE_QUOTE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c274;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c275); }
      }

      return s0;
    }

    function peg$parseBACK_TICK_QUOTED_ID() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseBACK_TICK();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseBACK_TICK_ESCAPE();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBACK_TICK_CONTENT();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseBACK_TICK_ESCAPE();
          if (s3 === peg$FAILED) {
            s3 = peg$parseBACK_TICK_CONTENT();
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBACK_TICK();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBACK_TICK_ESCAPE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c276;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c277); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBACK_TICK_CONTENT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseBACK_TICK();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c3;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDOUBLE_QUOTED_TEXT() {
      var s0, s1, s2, s3, s4;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseDOUBLE_QUOTE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDOUBLE_QUOTED_CONTENT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDOUBLE_QUOTE();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parseDOUBLE_QUOTE();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDOUBLE_QUOTED_CONTENT();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseDOUBLE_QUOTE();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDOUBLE_QUOTED_CONTENT() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseDOUBLE_QUOTE_ESCAPE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDOUBLE_QUOTE_CHAR();
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseDOUBLE_QUOTE_ESCAPE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDOUBLE_QUOTE_CHAR();
        }
      }

      return s0;
    }

    function peg$parseDOUBLE_QUOTE_ESCAPE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c276;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c277); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDOUBLE_QUOTE_CHAR() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseDOUBLE_QUOTE();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c3;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSINGLE_QUOTED_TEXT() {
      var s0, s1, s2, s3, s4;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseSINGLE_QUOTE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSINGLE_QUOTED_CONTENT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSINGLE_QUOTE();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parseSINGLE_QUOTE();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_CONTENT();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseSINGLE_QUOTE();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSINGLE_QUOTED_CONTENT() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseSINGLE_QUOTE_ESCAPE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSINGLE_QUOTE_CHAR();
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseSINGLE_QUOTE_ESCAPE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSINGLE_QUOTE_CHAR();
        }
      }

      return s0;
    }

    function peg$parseSINGLE_QUOTE_ESCAPE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c276;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c277); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSINGLE_QUOTE_CHAR() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseSINGLE_QUOTE();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c3;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseVERSION_COMMENT_START() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c279) {
        s1 = peg$c279;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c280); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGITS();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c281();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseVERSION_COMMENT_CONTENT();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c282) {
                s5 = peg$c282;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c283); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c284();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseVERSION_COMMENT_CONTENT() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c282) {
        s3 = peg$c282;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c283); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = peg$c3;
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c282) {
          s3 = peg$c282;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c283); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c278); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseMYSQL_COMMENT_START() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c279) {
        s1 = peg$c279;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c280); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c285();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVERSION_COMMENT_END() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c282) {
        s1 = peg$c282;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c283); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c286();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c287();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBLOCK_COMMENT() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c288) {
        s1 = peg$c288;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c289); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c290) {
          s2 = peg$c290;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c291); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBLOCK_COMMENT_CONTENT();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c282) {
              s4 = peg$c282;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c283); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c284();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBLOCK_COMMENT_CONTENT() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c282) {
        s3 = peg$c282;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c283); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = peg$c3;
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c282) {
          s3 = peg$c282;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c283); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c278); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsePOUND_COMMENT() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c292;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c293); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c294.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c295); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c294.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c295); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c284();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDASHDASH_COMMENT() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDOUBLE_DASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (peg$c296.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c297); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c294.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c295); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c294.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c295); }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseLINEBREAK();
          if (s2 === peg$FAILED) {
            s2 = peg$c298;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c284();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDOUBLE_DASH() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c299) {
        s0 = peg$c299;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c300); }
      }

      return s0;
    }

    function peg$parseLINEBREAK() {
      var s0;

      if (peg$c301.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }

      return s0;
    }

    function peg$parseSIMPLE_IDENTIFIER() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseDIGIT();
      if (s1 === peg$FAILED) {
        if (peg$c303.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s1 = peg$c111;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseDIGIT();
          if (s1 === peg$FAILED) {
            if (peg$c303.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c304); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c111;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c112); }
              }
            }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseML_COMMENT_HEAD() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c290) {
        s0 = peg$c290;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }

      return s0;
    }

    function peg$parseML_COMMENT_END() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c282) {
        s0 = peg$c282;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c283); }
      }

      return s0;
    }

    function peg$parseLETTER_WHEN_UNQUOTED() {
      var s0;

      s0 = peg$parseDIGIT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT();
      }

      return s0;
    }

    function peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT() {
      var s0;

      if (peg$c305.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }

      return s0;
    }

    function peg$parseLETTER_WITHOUT_FLOAT_PART() {
      var s0;

      if (peg$c307.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c308); }
      }

      return s0;
    }

    function peg$parseACCESSIBLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c309) {
        s0 = peg$c309;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c310); }
      }

      return s0;
    }

    function peg$parseACCOUNT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c311) {
        s1 = peg$c311;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c312); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c313();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseACTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c314) {
        s0 = peg$c314;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c315); }
      }

      return s0;
    }

    function peg$parseADD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c316) {
        s0 = peg$c316;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c317); }
      }

      return s0;
    }

    function peg$parseADDDATE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c318) {
        s1 = peg$c318;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c319); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c320();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAFTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c321) {
        s0 = peg$c321;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c322); }
      }

      return s0;
    }

    function peg$parseAGAINST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c323) {
        s0 = peg$c323;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c324); }
      }

      return s0;
    }

    function peg$parseAGGREGATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c325) {
        s0 = peg$c325;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }

      return s0;
    }

    function peg$parseALGORITHM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c327) {
        s0 = peg$c327;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }

      return s0;
    }

    function peg$parseALL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c329) {
        s0 = peg$c329;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c330); }
      }

      return s0;
    }

    function peg$parseALTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c331) {
        s0 = peg$c331;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c332); }
      }

      return s0;
    }

    function peg$parseALWAYS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c333) {
        s1 = peg$c333;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c334); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c313();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseANALYSE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c335) {
        s1 = peg$c335;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c336); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c337();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseANALYZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c338) {
        s0 = peg$c338;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c339); }
      }

      return s0;
    }

    function peg$parseAND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c340) {
        s0 = peg$c340;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c341); }
      }

      return s0;
    }

    function peg$parseANY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c342) {
        s0 = peg$c342;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c343); }
      }

      return s0;
    }

    function peg$parseAS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c344) {
        s0 = peg$c344;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c345); }
      }

      return s0;
    }

    function peg$parseASC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c346) {
        s0 = peg$c346;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c347); }
      }

      return s0;
    }

    function peg$parseASCII_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c348) {
        s1 = peg$c348;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c349); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c350();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseASENSITIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c351) {
        s0 = peg$c351;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c352); }
      }

      return s0;
    }

    function peg$parseAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c353) {
        s0 = peg$c353;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }

      return s0;
    }

    function peg$parseAUTHORS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c355) {
        s1 = peg$c355;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c356); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c357();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAUTOEXTEND_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c358) {
        s0 = peg$c358;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c359); }
      }

      return s0;
    }

    function peg$parseAUTO_INCREMENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c360) {
        s0 = peg$c360;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c361); }
      }

      return s0;
    }

    function peg$parseAVG_ROW_LENGTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c362) {
        s0 = peg$c362;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c363); }
      }

      return s0;
    }

    function peg$parseAVG_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c364) {
        s1 = peg$c364;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c365); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c366();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBACKUP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c367) {
        s0 = peg$c367;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c368); }
      }

      return s0;
    }

    function peg$parseBEFORE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c369) {
        s0 = peg$c369;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c370); }
      }

      return s0;
    }

    function peg$parseBEGIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c371) {
        s0 = peg$c371;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c372); }
      }

      return s0;
    }

    function peg$parseBETWEEN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c373) {
        s0 = peg$c373;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c374); }
      }

      return s0;
    }

    function peg$parseBIGINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c375) {
        s0 = peg$c375;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c376); }
      }

      return s0;
    }

    function peg$parseBINARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c377) {
        s0 = peg$c377;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c378); }
      }

      return s0;
    }

    function peg$parseBINLOG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c379) {
        s0 = peg$c379;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c380); }
      }

      return s0;
    }

    function peg$parseBIN_NUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c381) {
        s0 = peg$c381;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c382); }
      }

      return s0;
    }

    function peg$parseBIT_AND_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c383) {
        s1 = peg$c383;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c384); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c385();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBIT_OR_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c386) {
        s1 = peg$c386;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c387); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c388();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c389) {
        s0 = peg$c389;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c390); }
      }

      return s0;
    }

    function peg$parseBIT_XOR_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c391) {
        s1 = peg$c391;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c392); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c393();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBLOB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c394) {
        s0 = peg$c394;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c395); }
      }

      return s0;
    }

    function peg$parseBLOCK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c396) {
        s0 = peg$c396;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c397); }
      }

      return s0;
    }

    function peg$parseBOOLEAN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c398) {
        s0 = peg$c398;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c399); }
      }

      return s0;
    }

    function peg$parseBOOL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c400) {
        s0 = peg$c400;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c401); }
      }

      return s0;
    }

    function peg$parseBOTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c402) {
        s0 = peg$c402;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c403); }
      }

      return s0;
    }

    function peg$parseBTREE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c404) {
        s0 = peg$c404;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c405); }
      }

      return s0;
    }

    function peg$parseBY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c406) {
        s0 = peg$c406;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c407); }
      }

      return s0;
    }

    function peg$parseBYTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c408) {
        s0 = peg$c408;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c409); }
      }

      return s0;
    }

    function peg$parseCACHE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c410) {
        s0 = peg$c410;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c411); }
      }

      return s0;
    }

    function peg$parseCALL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c412) {
        s0 = peg$c412;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c413); }
      }

      return s0;
    }

    function peg$parseCASCADE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c414) {
        s0 = peg$c414;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c415); }
      }

      return s0;
    }

    function peg$parseCASCADED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c416) {
        s0 = peg$c416;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c417); }
      }

      return s0;
    }

    function peg$parseCASE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c418) {
        s0 = peg$c418;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c419); }
      }

      return s0;
    }

    function peg$parseCAST_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c420) {
        s1 = peg$c420;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c421); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c422();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCATALOG_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c423) {
        s0 = peg$c423;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c424); }
      }

      return s0;
    }

    function peg$parseCHAIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c425) {
        s0 = peg$c425;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c426); }
      }

      return s0;
    }

    function peg$parseCHANGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c427) {
        s0 = peg$c427;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c428); }
      }

      return s0;
    }

    function peg$parseCHANGED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c429) {
        s0 = peg$c429;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c430); }
      }

      return s0;
    }

    function peg$parseCHANNEL_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c431) {
        s1 = peg$c431;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c432); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c433();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCHARSET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c434) {
        s0 = peg$c434;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c435); }
      }

      return s0;
    }

    function peg$parseCHARACTER_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c436) {
        s1 = peg$c436;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c437); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c438();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCHAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c439) {
        s0 = peg$c439;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c440); }
      }

      return s0;
    }

    function peg$parseCHECKSUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c441) {
        s0 = peg$c441;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c442); }
      }

      return s0;
    }

    function peg$parseCHECK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c443) {
        s0 = peg$c443;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c444); }
      }

      return s0;
    }

    function peg$parseCIPHER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c445) {
        s0 = peg$c445;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c446); }
      }

      return s0;
    }

    function peg$parseCLASS_ORIGIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c447) {
        s0 = peg$c447;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c448); }
      }

      return s0;
    }

    function peg$parseCLIENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c449) {
        s0 = peg$c449;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c450); }
      }

      return s0;
    }

    function peg$parseCLOSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c451) {
        s0 = peg$c451;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c452); }
      }

      return s0;
    }

    function peg$parseCOALESCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c453) {
        s0 = peg$c453;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c454); }
      }

      return s0;
    }

    function peg$parseCODE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c455) {
        s0 = peg$c455;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c456); }
      }

      return s0;
    }

    function peg$parseCOLLATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c457) {
        s0 = peg$c457;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c458); }
      }

      return s0;
    }

    function peg$parseCOLLATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c459) {
        s0 = peg$c459;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c460); }
      }

      return s0;
    }

    function peg$parseCOLUMNS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c461) {
        s0 = peg$c461;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c462); }
      }

      return s0;
    }

    function peg$parseCOLUMN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c463) {
        s0 = peg$c463;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c464); }
      }

      return s0;
    }

    function peg$parseCOLUMN_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c465) {
        s0 = peg$c465;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c466); }
      }

      return s0;
    }

    function peg$parseCOLUMN_FORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c467) {
        s0 = peg$c467;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c468); }
      }

      return s0;
    }

    function peg$parseCOMMENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c469) {
        s0 = peg$c469;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c470); }
      }

      return s0;
    }

    function peg$parseCOMMITTED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c471) {
        s0 = peg$c471;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c472); }
      }

      return s0;
    }

    function peg$parseCOMMIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c473) {
        s0 = peg$c473;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c474); }
      }

      return s0;
    }

    function peg$parseCOMPACT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c475) {
        s0 = peg$c475;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c476); }
      }

      return s0;
    }

    function peg$parseCOMPLETION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c477) {
        s0 = peg$c477;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c478); }
      }

      return s0;
    }

    function peg$parseCOMPRESSED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c479) {
        s0 = peg$c479;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c480); }
      }

      return s0;
    }

    function peg$parseCOMPRESSION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c481) {
        s1 = peg$c481;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c482); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c313();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCONCURRENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c483) {
        s0 = peg$c483;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c484); }
      }

      return s0;
    }

    function peg$parseCONDITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c485) {
        s0 = peg$c485;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c486); }
      }

      return s0;
    }

    function peg$parseCONNECTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c487) {
        s0 = peg$c487;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c488); }
      }

      return s0;
    }

    function peg$parseCONSISTENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c489) {
        s0 = peg$c489;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c490); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c491) {
        s0 = peg$c491;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c492); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT_CATALOG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c493) {
        s0 = peg$c493;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c494); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c495) {
        s0 = peg$c495;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c496); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT_SCHEMA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c497) {
        s0 = peg$c497;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c498); }
      }

      return s0;
    }

    function peg$parseCONTAINS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c499) {
        s0 = peg$c499;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c500); }
      }

      return s0;
    }

    function peg$parseCONTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c501) {
        s0 = peg$c501;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c502); }
      }

      return s0;
    }

    function peg$parseCONTINUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c503) {
        s0 = peg$c503;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c504); }
      }

      return s0;
    }

    function peg$parseCONTRIBUTORS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c505) {
        s1 = peg$c505;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c506); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c357();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCONVERT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c507) {
        s0 = peg$c507;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c508); }
      }

      return s0;
    }

    function peg$parseCOUNT_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c509) {
        s1 = peg$c509;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c510); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c511();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCPU_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c512) {
        s0 = peg$c512;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c513); }
      }

      return s0;
    }

    function peg$parseCREATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c514) {
        s0 = peg$c514;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c515); }
      }

      return s0;
    }

    function peg$parseCROSS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c516) {
        s0 = peg$c516;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c517); }
      }

      return s0;
    }

    function peg$parseCUBE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c518) {
        s0 = peg$c518;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c519); }
      }

      return s0;
    }

    function peg$parseCURDATE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c520) {
        s1 = peg$c520;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c521); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c522();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCURRENT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c523) {
        s1 = peg$c523;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c524); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c525();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCURRENT_DATE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c526) {
        s1 = peg$c526;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c527); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c522();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCURRENT_TIME_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c528) {
        s1 = peg$c528;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c529); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c530();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCURRENT_TIMESTAMP_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 17) === peg$c531) {
        s1 = peg$c531;
        peg$currPos += 17;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c532); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c533();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCURRENT_USER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c534) {
        s0 = peg$c534;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c535); }
      }

      return s0;
    }

    function peg$parseCURSOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c536) {
        s0 = peg$c536;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c537); }
      }

      return s0;
    }

    function peg$parseCURSOR_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c538) {
        s0 = peg$c538;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c539); }
      }

      return s0;
    }

    function peg$parseCURTIME_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c540) {
        s1 = peg$c540;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c541); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c530();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDATABASE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c542) {
        s0 = peg$c542;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c543); }
      }

      return s0;
    }

    function peg$parseDATABASES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c544) {
        s0 = peg$c544;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c545); }
      }

      return s0;
    }

    function peg$parseDATAFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c546) {
        s0 = peg$c546;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c547); }
      }

      return s0;
    }

    function peg$parseDATA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c548) {
        s0 = peg$c548;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c549); }
      }

      return s0;
    }

    function peg$parseDATETIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c550) {
        s0 = peg$c550;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c551); }
      }

      return s0;
    }

    function peg$parseDATE_ADD_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c552) {
        s1 = peg$c552;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c553); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c554();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDATE_SUB_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c555) {
        s1 = peg$c555;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c556); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c557();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c558) {
        s0 = peg$c558;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c559); }
      }

      return s0;
    }

    function peg$parseDAYOFMONTH_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c560) {
        s1 = peg$c560;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c561); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c562();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDAY_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c563) {
        s0 = peg$c563;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c564); }
      }

      return s0;
    }

    function peg$parseDAY_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c565) {
        s0 = peg$c565;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c566); }
      }

      return s0;
    }

    function peg$parseDAY_MINUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c567) {
        s0 = peg$c567;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c568); }
      }

      return s0;
    }

    function peg$parseDAY_SECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c569) {
        s0 = peg$c569;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c570); }
      }

      return s0;
    }

    function peg$parseDAY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c571) {
        s0 = peg$c571;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c572); }
      }

      return s0;
    }

    function peg$parseDEALLOCATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c573) {
        s0 = peg$c573;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c574); }
      }

      return s0;
    }

    function peg$parseDEC_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c575) {
        s1 = peg$c575;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c576); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c577();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDECIMAL_NUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c578) {
        s0 = peg$c578;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c579); }
      }

      return s0;
    }

    function peg$parseDECIMAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c580) {
        s0 = peg$c580;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c581); }
      }

      return s0;
    }

    function peg$parseDECLARE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c582) {
        s0 = peg$c582;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c583); }
      }

      return s0;
    }

    function peg$parseDEFAULT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c584) {
        s0 = peg$c584;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c585); }
      }

      return s0;
    }

    function peg$parseDEFAULT_AUTH_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c586) {
        s1 = peg$c586;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c587); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c525();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDEFINER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c588) {
        s0 = peg$c588;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c589); }
      }

      return s0;
    }

    function peg$parseDELAYED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c590) {
        s0 = peg$c590;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c591); }
      }

      return s0;
    }

    function peg$parseDELAY_KEY_WRITE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c592) {
        s0 = peg$c592;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c593); }
      }

      return s0;
    }

    function peg$parseDELETE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c594) {
        s0 = peg$c594;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c595); }
      }

      return s0;
    }

    function peg$parseDESC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c596) {
        s0 = peg$c596;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c597); }
      }

      return s0;
    }

    function peg$parseDESCRIBE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c598) {
        s0 = peg$c598;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c599); }
      }

      return s0;
    }

    function peg$parseDES_KEY_FILE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c600) {
        s1 = peg$c600;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c601); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c337();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDETERMINISTIC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c602) {
        s0 = peg$c602;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c603); }
      }

      return s0;
    }

    function peg$parseDIAGNOSTICS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c604) {
        s0 = peg$c604;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c605); }
      }

      return s0;
    }

    function peg$parseDIRECTORY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c606) {
        s0 = peg$c606;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c607); }
      }

      return s0;
    }

    function peg$parseDISABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c608) {
        s0 = peg$c608;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c609); }
      }

      return s0;
    }

    function peg$parseDISCARD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c610) {
        s0 = peg$c610;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c611); }
      }

      return s0;
    }

    function peg$parseDISK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c612) {
        s0 = peg$c612;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c613); }
      }

      return s0;
    }

    function peg$parseDISTINCT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c614) {
        s0 = peg$c614;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c615); }
      }

      return s0;
    }

    function peg$parseDISTINCTROW_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c616) {
        s1 = peg$c616;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c617); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c618();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDIV_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c619) {
        s0 = peg$c619;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c620); }
      }

      return s0;
    }

    function peg$parseDOUBLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c621) {
        s0 = peg$c621;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c622); }
      }

      return s0;
    }

    function peg$parseDO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c623) {
        s0 = peg$c623;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c624); }
      }

      return s0;
    }

    function peg$parseDROP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c625) {
        s0 = peg$c625;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c626); }
      }

      return s0;
    }

    function peg$parseDUAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c627) {
        s0 = peg$c627;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c628); }
      }

      return s0;
    }

    function peg$parseDUMPFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c629) {
        s0 = peg$c629;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c630); }
      }

      return s0;
    }

    function peg$parseDUPLICATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c631) {
        s0 = peg$c631;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c632); }
      }

      return s0;
    }

    function peg$parseDYNAMIC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c633) {
        s0 = peg$c633;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c634); }
      }

      return s0;
    }

    function peg$parseEACH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c635) {
        s0 = peg$c635;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c636); }
      }

      return s0;
    }

    function peg$parseELSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c637) {
        s0 = peg$c637;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c638); }
      }

      return s0;
    }

    function peg$parseELSEIF_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c639) {
        s0 = peg$c639;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c640); }
      }

      return s0;
    }

    function peg$parseENABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c641) {
        s0 = peg$c641;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c642); }
      }

      return s0;
    }

    function peg$parseENCLOSED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c643) {
        s0 = peg$c643;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c644); }
      }

      return s0;
    }

    function peg$parseENCRYPTION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c645) {
        s1 = peg$c645;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c646); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c647();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c648) {
        s0 = peg$c648;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c649); }
      }

      return s0;
    }

    function peg$parseENDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c650) {
        s0 = peg$c650;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c651); }
      }

      return s0;
    }

    function peg$parseEND_OF_INPUT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c652) {
        s0 = peg$c652;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c653); }
      }

      return s0;
    }

    function peg$parseENGINES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c654) {
        s0 = peg$c654;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c655); }
      }

      return s0;
    }

    function peg$parseENGINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c656) {
        s0 = peg$c656;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c657); }
      }

      return s0;
    }

    function peg$parseENUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c658) {
        s0 = peg$c658;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c659); }
      }

      return s0;
    }

    function peg$parseERROR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c660) {
        s0 = peg$c660;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c661); }
      }

      return s0;
    }

    function peg$parseERRORS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c662) {
        s0 = peg$c662;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c663); }
      }

      return s0;
    }

    function peg$parseESCAPED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c664) {
        s0 = peg$c664;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c665); }
      }

      return s0;
    }

    function peg$parseESCAPE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c666) {
        s0 = peg$c666;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c667); }
      }

      return s0;
    }

    function peg$parseEVENTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c668) {
        s0 = peg$c668;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c669); }
      }

      return s0;
    }

    function peg$parseEVENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c670) {
        s0 = peg$c670;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c671); }
      }

      return s0;
    }

    function peg$parseEVERY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c672) {
        s0 = peg$c672;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c673); }
      }

      return s0;
    }

    function peg$parseEXCHANGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c674) {
        s0 = peg$c674;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c675); }
      }

      return s0;
    }

    function peg$parseEXECUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c676) {
        s0 = peg$c676;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c677); }
      }

      return s0;
    }

    function peg$parseEXISTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c678) {
        s0 = peg$c678;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c679); }
      }

      return s0;
    }

    function peg$parseEXIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c680) {
        s0 = peg$c680;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c681); }
      }

      return s0;
    }

    function peg$parseEXPANSION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c682) {
        s0 = peg$c682;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c683); }
      }

      return s0;
    }

    function peg$parseEXPIRE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c684) {
        s1 = peg$c684;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c685); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c686();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEXPLAIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c687) {
        s0 = peg$c687;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c688); }
      }

      return s0;
    }

    function peg$parseEXPORT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c689) {
        s1 = peg$c689;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c690); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c686();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEXTENDED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c691) {
        s0 = peg$c691;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c692); }
      }

      return s0;
    }

    function peg$parseEXTENT_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c693) {
        s0 = peg$c693;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c694); }
      }

      return s0;
    }

    function peg$parseEXTRACT_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c695) {
        s1 = peg$c695;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c696); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c697();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFALSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c698) {
        s0 = peg$c698;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c699); }
      }

      return s0;
    }

    function peg$parseFAST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c700) {
        s0 = peg$c700;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c701); }
      }

      return s0;
    }

    function peg$parseFAULTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c702) {
        s0 = peg$c702;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c703); }
      }

      return s0;
    }

    function peg$parseFETCH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c704) {
        s0 = peg$c704;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c705); }
      }

      return s0;
    }

    function peg$parseFIELDS_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c706) {
        s1 = peg$c706;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c707); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c708();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c709) {
        s0 = peg$c709;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c710); }
      }

      return s0;
    }

    function peg$parseFILE_BLOCK_SIZE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c711) {
        s1 = peg$c711;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c712); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c313();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFILTER_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c713) {
        s1 = peg$c713;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c714); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFIRST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c716) {
        s0 = peg$c716;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c717); }
      }

      return s0;
    }

    function peg$parseFIXED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c718) {
        s0 = peg$c718;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c719); }
      }

      return s0;
    }

    function peg$parseFLOAT4_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c720) {
        s1 = peg$c720;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c721); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c722();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFLOAT8_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c723) {
        s1 = peg$c723;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c724); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c725();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFLOAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c726) {
        s0 = peg$c726;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c727); }
      }

      return s0;
    }

    function peg$parseFLUSH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c728) {
        s0 = peg$c728;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c729); }
      }

      return s0;
    }

    function peg$parseFOLLOWS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c730) {
        s1 = peg$c730;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c731); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFORCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c732) {
        s0 = peg$c732;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c733); }
      }

      return s0;
    }

    function peg$parseFOREIGN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c734) {
        s0 = peg$c734;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c735); }
      }

      return s0;
    }

    function peg$parseFOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c736) {
        s0 = peg$c736;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c737); }
      }

      return s0;
    }

    function peg$parseFORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c738) {
        s0 = peg$c738;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c739); }
      }

      return s0;
    }

    function peg$parseFOUND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c740) {
        s0 = peg$c740;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c741); }
      }

      return s0;
    }

    function peg$parseFROM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c742) {
        s0 = peg$c742;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c743); }
      }

      return s0;
    }

    function peg$parseFULL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c744) {
        s0 = peg$c744;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c745); }
      }

      return s0;
    }

    function peg$parseFULLTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c746) {
        s0 = peg$c746;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c747); }
      }

      return s0;
    }

    function peg$parseFUNCTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c748) {
        s0 = peg$c748;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c749); }
      }

      return s0;
    }

    function peg$parseGET_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c750) {
        s1 = peg$c750;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c751); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c525();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseGENERAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c752) {
        s0 = peg$c752;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c753); }
      }

      return s0;
    }

    function peg$parseGENERATED_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c754) {
        s1 = peg$c754;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c755); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c313();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseGROUP_REPLICATION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 17) === peg$c756) {
        s1 = peg$c756;
        peg$currPos += 17;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c757); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c313();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseGEOMETRYCOLLECTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c758) {
        s0 = peg$c758;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c759); }
      }

      return s0;
    }

    function peg$parseGEOMETRY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c760) {
        s0 = peg$c760;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c761); }
      }

      return s0;
    }

    function peg$parseGET_FORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c762) {
        s0 = peg$c762;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c763); }
      }

      return s0;
    }

    function peg$parseGLOBAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c764) {
        s0 = peg$c764;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c765); }
      }

      return s0;
    }

    function peg$parseGRANT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c766) {
        s0 = peg$c766;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c767); }
      }

      return s0;
    }

    function peg$parseGRANTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c768) {
        s0 = peg$c768;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c769); }
      }

      return s0;
    }

    function peg$parseGROUP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c770) {
        s0 = peg$c770;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c771); }
      }

      return s0;
    }

    function peg$parseGROUP_CONCAT_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c772) {
        s1 = peg$c772;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c773); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c774();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseHANDLER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c775) {
        s0 = peg$c775;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c776); }
      }

      return s0;
    }

    function peg$parseHASH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c777) {
        s0 = peg$c777;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c778); }
      }

      return s0;
    }

    function peg$parseHAVING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c779) {
        s0 = peg$c779;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c780); }
      }

      return s0;
    }

    function peg$parseHELP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c781) {
        s0 = peg$c781;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c782); }
      }

      return s0;
    }

    function peg$parseHIGH_PRIORITY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c783) {
        s0 = peg$c783;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c784); }
      }

      return s0;
    }

    function peg$parseHOST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c785) {
        s0 = peg$c785;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c786); }
      }

      return s0;
    }

    function peg$parseHOSTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c787) {
        s0 = peg$c787;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c788); }
      }

      return s0;
    }

    function peg$parseHOUR_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c789) {
        s0 = peg$c789;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c790); }
      }

      return s0;
    }

    function peg$parseHOUR_MINUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c791) {
        s0 = peg$c791;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c792); }
      }

      return s0;
    }

    function peg$parseHOUR_SECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c793) {
        s0 = peg$c793;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c794); }
      }

      return s0;
    }

    function peg$parseHOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c795) {
        s0 = peg$c795;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c796); }
      }

      return s0;
    }

    function peg$parseIDENTIFIED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c797) {
        s0 = peg$c797;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c798); }
      }

      return s0;
    }

    function peg$parseIF_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c799) {
        s0 = peg$c799;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c800); }
      }

      return s0;
    }

    function peg$parseIGNORE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c801) {
        s0 = peg$c801;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c802); }
      }

      return s0;
    }

    function peg$parseIGNORE_SERVER_IDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c803) {
        s0 = peg$c803;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c804); }
      }

      return s0;
    }

    function peg$parseIMPORT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c805) {
        s0 = peg$c805;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c806); }
      }

      return s0;
    }

    function peg$parseINDEXES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c807) {
        s0 = peg$c807;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c808); }
      }

      return s0;
    }

    function peg$parseINDEX_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c809) {
        s0 = peg$c809;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c810); }
      }

      return s0;
    }

    function peg$parseINFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c811) {
        s0 = peg$c811;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c812); }
      }

      return s0;
    }

    function peg$parseINITIAL_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c813) {
        s0 = peg$c813;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c814); }
      }

      return s0;
    }

    function peg$parseINNER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c815) {
        s0 = peg$c815;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c816); }
      }

      return s0;
    }

    function peg$parseINOUT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c817) {
        s0 = peg$c817;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c818); }
      }

      return s0;
    }

    function peg$parseINSENSITIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c819) {
        s0 = peg$c819;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c820); }
      }

      return s0;
    }

    function peg$parseINSERT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c821) {
        s0 = peg$c821;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c822); }
      }

      return s0;
    }

    function peg$parseINSERT_METHOD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c823) {
        s0 = peg$c823;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c824); }
      }

      return s0;
    }

    function peg$parseINSTANCE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c825) {
        s1 = peg$c825;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c826); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c827();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseINSTALL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c828) {
        s0 = peg$c828;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c829); }
      }

      return s0;
    }

    function peg$parseINTEGER_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c830) {
        s1 = peg$c830;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c831); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c832();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINTERVAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c833) {
        s0 = peg$c833;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c834); }
      }

      return s0;
    }

    function peg$parseINTO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c835) {
        s0 = peg$c835;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c836); }
      }

      return s0;
    }

    function peg$parseINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c837) {
        s0 = peg$c837;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c838); }
      }

      return s0;
    }

    function peg$parseINVOKER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c839) {
        s0 = peg$c839;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c840); }
      }

      return s0;
    }

    function peg$parseIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c841) {
        s0 = peg$c841;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c842); }
      }

      return s0;
    }

    function peg$parseIO_AFTER_GTIDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c843) {
        s0 = peg$c843;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c844); }
      }

      return s0;
    }

    function peg$parseIO_BEFORE_GTIDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c845) {
        s0 = peg$c845;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c846); }
      }

      return s0;
    }

    function peg$parseIO_THREAD_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c847) {
        s1 = peg$c847;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c848); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c849();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c850) {
        s0 = peg$c850;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c851); }
      }

      return s0;
    }

    function peg$parseIPC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c852) {
        s0 = peg$c852;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c853); }
      }

      return s0;
    }

    function peg$parseIS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c854) {
        s0 = peg$c854;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c855); }
      }

      return s0;
    }

    function peg$parseISOLATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c856) {
        s0 = peg$c856;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c857); }
      }

      return s0;
    }

    function peg$parseISSUER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c858) {
        s0 = peg$c858;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c859); }
      }

      return s0;
    }

    function peg$parseITERATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c860) {
        s0 = peg$c860;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c861); }
      }

      return s0;
    }

    function peg$parseJOIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c862) {
        s0 = peg$c862;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c863); }
      }

      return s0;
    }

    function peg$parseJSON_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c864) {
        s1 = peg$c864;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c865); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c866();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseKEYS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c867) {
        s0 = peg$c867;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c868); }
      }

      return s0;
    }

    function peg$parseKEY_BLOCK_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c869) {
        s0 = peg$c869;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c870); }
      }

      return s0;
    }

    function peg$parseKEY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c871) {
        s0 = peg$c871;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c872); }
      }

      return s0;
    }

    function peg$parseKILL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c873) {
        s0 = peg$c873;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c874); }
      }

      return s0;
    }

    function peg$parseLANGUAGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c875) {
        s0 = peg$c875;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c876); }
      }

      return s0;
    }

    function peg$parseLAST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c877) {
        s0 = peg$c877;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c878); }
      }

      return s0;
    }

    function peg$parseLEADING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c879) {
        s0 = peg$c879;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c880); }
      }

      return s0;
    }

    function peg$parseLEAVES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c881) {
        s0 = peg$c881;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c882); }
      }

      return s0;
    }

    function peg$parseLEAVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c883) {
        s0 = peg$c883;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c884); }
      }

      return s0;
    }

    function peg$parseLEFT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c885) {
        s0 = peg$c885;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c886); }
      }

      return s0;
    }

    function peg$parseLESS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c887) {
        s0 = peg$c887;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c888); }
      }

      return s0;
    }

    function peg$parseLEVEL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c889) {
        s0 = peg$c889;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c890); }
      }

      return s0;
    }

    function peg$parseLIKE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c891) {
        s0 = peg$c891;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c892); }
      }

      return s0;
    }

    function peg$parseLIMIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c893) {
        s0 = peg$c893;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c894); }
      }

      return s0;
    }

    function peg$parseLINEAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c895) {
        s0 = peg$c895;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c896); }
      }

      return s0;
    }

    function peg$parseLINES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c897) {
        s0 = peg$c897;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c898); }
      }

      return s0;
    }

    function peg$parseLINESTRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c899) {
        s0 = peg$c899;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c900); }
      }

      return s0;
    }

    function peg$parseLIST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c901) {
        s0 = peg$c901;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c902); }
      }

      return s0;
    }

    function peg$parseLOAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c903) {
        s0 = peg$c903;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c904); }
      }

      return s0;
    }

    function peg$parseLOCALTIME_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c905) {
        s1 = peg$c905;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c906); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c533();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLOCALTIMESTAMP_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c907) {
        s1 = peg$c907;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c908); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c533();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLOCAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c909) {
        s0 = peg$c909;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c910); }
      }

      return s0;
    }

    function peg$parseLOCATOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c911) {
        s0 = peg$c911;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c912); }
      }

      return s0;
    }

    function peg$parseLOCKS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c913) {
        s0 = peg$c913;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c914); }
      }

      return s0;
    }

    function peg$parseLOCK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c915) {
        s0 = peg$c915;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c916); }
      }

      return s0;
    }

    function peg$parseLOGFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c917) {
        s0 = peg$c917;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c918); }
      }

      return s0;
    }

    function peg$parseLOGS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c919) {
        s0 = peg$c919;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c920); }
      }

      return s0;
    }

    function peg$parseLONGBLOB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c921) {
        s0 = peg$c921;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c922); }
      }

      return s0;
    }

    function peg$parseLONGTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c923) {
        s0 = peg$c923;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c924); }
      }

      return s0;
    }

    function peg$parseLONG_NUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c925) {
        s0 = peg$c925;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c926); }
      }

      return s0;
    }

    function peg$parseLONG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c927) {
        s0 = peg$c927;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c928); }
      }

      return s0;
    }

    function peg$parseLOOP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c929) {
        s0 = peg$c929;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c930); }
      }

      return s0;
    }

    function peg$parseLOW_PRIORITY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c931) {
        s0 = peg$c931;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c932); }
      }

      return s0;
    }

    function peg$parseMASTER_AUTO_POSITION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 20) === peg$c933) {
        s1 = peg$c933;
        peg$currPos += 20;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c934); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c935();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_BIND_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c936) {
        s1 = peg$c936;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c937); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c938();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_CONNECT_RETRY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c939) {
        s0 = peg$c939;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c940); }
      }

      return s0;
    }

    function peg$parseMASTER_DELAY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c941) {
        s0 = peg$c941;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c942); }
      }

      return s0;
    }

    function peg$parseMASTER_HOST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c943) {
        s0 = peg$c943;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c944); }
      }

      return s0;
    }

    function peg$parseMASTER_LOG_FILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c945) {
        s0 = peg$c945;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c946); }
      }

      return s0;
    }

    function peg$parseMASTER_LOG_POS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c947) {
        s0 = peg$c947;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c948); }
      }

      return s0;
    }

    function peg$parseMASTER_PASSWORD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c949) {
        s0 = peg$c949;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c950); }
      }

      return s0;
    }

    function peg$parseMASTER_PORT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c951) {
        s0 = peg$c951;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c952); }
      }

      return s0;
    }

    function peg$parseMASTER_RETRY_COUNT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c953) {
        s1 = peg$c953;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c954); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c955();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_SERVER_ID_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c956) {
        s0 = peg$c956;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c957); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CAPATH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c958) {
        s0 = peg$c958;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c959); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c960) {
        s0 = peg$c960;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c961); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CERT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c962) {
        s0 = peg$c962;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c963); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CIPHER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c964) {
        s0 = peg$c964;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c965); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CRL_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c966) {
        s1 = peg$c966;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c967); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c968();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CRLPATH_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c969) {
        s1 = peg$c969;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c970); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c968();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_SSL_KEY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c971) {
        s0 = peg$c971;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c972); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c973) {
        s0 = peg$c973;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c974); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 29) === peg$c975) {
        s0 = peg$c975;
        peg$currPos += 29;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c976); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseMASTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c977) {
        s0 = peg$c977;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c978); }
      }

      return s0;
    }

    function peg$parseMASTER_TLS_VERSION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c979) {
        s1 = peg$c979;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c980); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c827();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_USER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c981) {
        s0 = peg$c981;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c982); }
      }

      return s0;
    }

    function peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c983) {
        s0 = peg$c983;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c984); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseMATCH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c985) {
        s0 = peg$c985;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c986); }
      }

      return s0;
    }

    function peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c987) {
        s0 = peg$c987;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c988); }
      }

      return s0;
    }

    function peg$parseMAX_QUERIES_PER_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c989) {
        s0 = peg$c989;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c990); }
      }

      return s0;
    }

    function peg$parseMAX_ROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c991) {
        s0 = peg$c991;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c992); }
      }

      return s0;
    }

    function peg$parseMAX_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c993) {
        s0 = peg$c993;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c994); }
      }

      return s0;
    }

    function peg$parseMAX_STATEMENT_TIME_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c995) {
        s1 = peg$c995;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c996); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c997();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMAX_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c998) {
        s1 = peg$c998;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c999); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1000();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMAX_UPDATES_PER_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1001) {
        s0 = peg$c1001;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1002); }
      }

      return s0;
    }

    function peg$parseMAX_USER_CONNECTIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1003) {
        s0 = peg$c1003;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1004); }
      }

      return s0;
    }

    function peg$parseMAXVALUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1005) {
        s0 = peg$c1005;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1006); }
      }

      return s0;
    }

    function peg$parseMEDIUMBLOB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1007) {
        s0 = peg$c1007;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1008); }
      }

      return s0;
    }

    function peg$parseMEDIUMINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1009) {
        s0 = peg$c1009;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1010); }
      }

      return s0;
    }

    function peg$parseMEDIUMTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1011) {
        s0 = peg$c1011;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1012); }
      }

      return s0;
    }

    function peg$parseMEDIUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1013) {
        s0 = peg$c1013;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1014); }
      }

      return s0;
    }

    function peg$parseMEMORY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1015) {
        s0 = peg$c1015;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1016); }
      }

      return s0;
    }

    function peg$parseMERGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1017) {
        s0 = peg$c1017;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1018); }
      }

      return s0;
    }

    function peg$parseMESSAGE_TEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1019) {
        s0 = peg$c1019;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1020); }
      }

      return s0;
    }

    function peg$parseMICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1021) {
        s0 = peg$c1021;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1022); }
      }

      return s0;
    }

    function peg$parseMID_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1023) {
        s1 = peg$c1023;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1024); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1025();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMIDDLEINT_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1026) {
        s1 = peg$c1026;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1027); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1028();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMIGRATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1029) {
        s0 = peg$c1029;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1030); }
      }

      return s0;
    }

    function peg$parseMINUTE_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1031) {
        s0 = peg$c1031;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1032); }
      }

      return s0;
    }

    function peg$parseMINUTE_SECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1033) {
        s0 = peg$c1033;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1034); }
      }

      return s0;
    }

    function peg$parseMINUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1035) {
        s0 = peg$c1035;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1036); }
      }

      return s0;
    }

    function peg$parseMIN_ROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1037) {
        s0 = peg$c1037;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1038); }
      }

      return s0;
    }

    function peg$parseMIN_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1039) {
        s1 = peg$c1039;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1040); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1041();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMODE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1042) {
        s0 = peg$c1042;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1043); }
      }

      return s0;
    }

    function peg$parseMODIFIES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1044) {
        s0 = peg$c1044;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1045); }
      }

      return s0;
    }

    function peg$parseMODIFY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1046) {
        s0 = peg$c1046;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1047); }
      }

      return s0;
    }

    function peg$parseMOD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1048) {
        s0 = peg$c1048;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1049); }
      }

      return s0;
    }

    function peg$parseMONTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1050) {
        s0 = peg$c1050;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1051); }
      }

      return s0;
    }

    function peg$parseMULTILINESTRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1052) {
        s0 = peg$c1052;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1053); }
      }

      return s0;
    }

    function peg$parseMULTIPOINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1054) {
        s0 = peg$c1054;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1055); }
      }

      return s0;
    }

    function peg$parseMULTIPOLYGON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1056) {
        s0 = peg$c1056;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1057); }
      }

      return s0;
    }

    function peg$parseMUTEX_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1058) {
        s0 = peg$c1058;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1059); }
      }

      return s0;
    }

    function peg$parseMYSQL_ERRNO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1060) {
        s0 = peg$c1060;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1061); }
      }

      return s0;
    }

    function peg$parseNAMES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1062) {
        s0 = peg$c1062;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1063); }
      }

      return s0;
    }

    function peg$parseNAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1064) {
        s0 = peg$c1064;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1065); }
      }

      return s0;
    }

    function peg$parseNATIONAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1066) {
        s0 = peg$c1066;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1067); }
      }

      return s0;
    }

    function peg$parseNATURAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1068) {
        s0 = peg$c1068;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1069); }
      }

      return s0;
    }

    function peg$parseNCHAR_STRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1070) {
        s0 = peg$c1070;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1071); }
      }

      return s0;
    }

    function peg$parseNCHAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1072) {
        s0 = peg$c1072;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1073); }
      }

      return s0;
    }

    function peg$parseNDB_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1074) {
        s1 = peg$c1074;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1075); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1076();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNDBCLUSTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1077) {
        s0 = peg$c1077;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1078); }
      }

      return s0;
    }

    function peg$parseNEG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1079) {
        s0 = peg$c1079;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1080); }
      }

      return s0;
    }

    function peg$parseNEVER_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1081) {
        s1 = peg$c1081;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1082); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1083();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNEW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1084) {
        s0 = peg$c1084;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1085); }
      }

      return s0;
    }

    function peg$parseNEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1086) {
        s0 = peg$c1086;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1087); }
      }

      return s0;
    }

    function peg$parseNODEGROUP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1088) {
        s0 = peg$c1088;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1089); }
      }

      return s0;
    }

    function peg$parseNONE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1090) {
        s0 = peg$c1090;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1091); }
      }

      return s0;
    }

    function peg$parseNONBLOCKING_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c1092) {
        s1 = peg$c1092;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1093); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1094();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNOT_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1095) {
        s1 = peg$c1095;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1096); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1097();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNOW_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1098) {
        s1 = peg$c1098;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1099); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1100();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c1101) {
        s0 = peg$c1101;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1102); }
      }

      return s0;
    }

    function peg$parseNO_WAIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1103) {
        s0 = peg$c1103;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1104); }
      }

      return s0;
    }

    function peg$parseNO_WRITE_TO_BINLOG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1105) {
        s0 = peg$c1105;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1106); }
      }

      return s0;
    }

    function peg$parseNULL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1107) {
        s0 = peg$c1107;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1108); }
      }

      return s0;
    }

    function peg$parseNUMBER_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1109) {
        s1 = peg$c1109;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1110); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c686();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNUMERIC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1111) {
        s0 = peg$c1111;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1112); }
      }

      return s0;
    }

    function peg$parseNVARCHAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1113) {
        s0 = peg$c1113;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1114); }
      }

      return s0;
    }

    function peg$parseOFFLINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1115) {
        s0 = peg$c1115;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1116); }
      }

      return s0;
    }

    function peg$parseOFFSET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1117) {
        s0 = peg$c1117;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1118); }
      }

      return s0;
    }

    function peg$parseOLD_PASSWORD_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1119) {
        s1 = peg$c1119;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1120); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1121();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c1122) {
        s0 = peg$c1122;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1123); }
      }

      return s0;
    }

    function peg$parseONE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1124) {
        s0 = peg$c1124;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1125); }
      }

      return s0;
    }

    function peg$parseONLINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1126) {
        s0 = peg$c1126;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1127); }
      }

      return s0;
    }

    function peg$parseONLY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1128) {
        s1 = peg$c1128;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1129); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c935();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOPEN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1130) {
        s0 = peg$c1130;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1131); }
      }

      return s0;
    }

    function peg$parseOPTIMIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1132) {
        s0 = peg$c1132;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1133); }
      }

      return s0;
    }

    function peg$parseOPTIMIZER_COSTS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c1134) {
        s1 = peg$c1134;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1135); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c433();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOPTIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1136) {
        s0 = peg$c1136;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1137); }
      }

      return s0;
    }

    function peg$parseOPTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1138) {
        s0 = peg$c1138;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1139); }
      }

      return s0;
    }

    function peg$parseOPTIONALLY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1140) {
        s0 = peg$c1140;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1141); }
      }

      return s0;
    }

    function peg$parseORDER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1142) {
        s0 = peg$c1142;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1143); }
      }

      return s0;
    }

    function peg$parseOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c1144) {
        s0 = peg$c1144;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1145); }
      }

      return s0;
    }

    function peg$parseOUTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1146) {
        s0 = peg$c1146;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1147); }
      }

      return s0;
    }

    function peg$parseOUTFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1148) {
        s0 = peg$c1148;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1149); }
      }

      return s0;
    }

    function peg$parseOUT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1150) {
        s0 = peg$c1150;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1151); }
      }

      return s0;
    }

    function peg$parseOWNER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1152) {
        s0 = peg$c1152;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1153); }
      }

      return s0;
    }

    function peg$parsePACK_KEYS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1154) {
        s0 = peg$c1154;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1155); }
      }

      return s0;
    }

    function peg$parsePAGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1156) {
        s0 = peg$c1156;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1157); }
      }

      return s0;
    }

    function peg$parsePARSER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1158) {
        s0 = peg$c1158;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1159); }
      }

      return s0;
    }

    function peg$parsePARTIAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1160) {
        s0 = peg$c1160;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1161); }
      }

      return s0;
    }

    function peg$parsePARTITIONING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1162) {
        s0 = peg$c1162;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1163); }
      }

      return s0;
    }

    function peg$parsePARTITIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1164) {
        s0 = peg$c1164;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1165); }
      }

      return s0;
    }

    function peg$parsePARTITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1166) {
        s0 = peg$c1166;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1167); }
      }

      return s0;
    }

    function peg$parsePASSWORD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1168) {
        s0 = peg$c1168;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1169); }
      }

      return s0;
    }

    function peg$parsePHASE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1170) {
        s0 = peg$c1170;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1171); }
      }

      return s0;
    }

    function peg$parsePLUGINS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1172) {
        s0 = peg$c1172;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1173); }
      }

      return s0;
    }

    function peg$parsePLUGIN_DIR_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1174) {
        s1 = peg$c1174;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1175); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c525();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePLUGIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1176) {
        s0 = peg$c1176;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1177); }
      }

      return s0;
    }

    function peg$parsePOINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1178) {
        s0 = peg$c1178;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1179); }
      }

      return s0;
    }

    function peg$parsePOLYGON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1180) {
        s0 = peg$c1180;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1181); }
      }

      return s0;
    }

    function peg$parsePORT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1182) {
        s0 = peg$c1182;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1183); }
      }

      return s0;
    }

    function peg$parsePOSITION_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1184) {
        s1 = peg$c1184;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1185); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1186();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePRECEDES_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1187) {
        s1 = peg$c1187;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1188); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePRECISION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1189) {
        s0 = peg$c1189;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1190); }
      }

      return s0;
    }

    function peg$parsePREPARE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1191) {
        s0 = peg$c1191;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1192); }
      }

      return s0;
    }

    function peg$parsePRESERVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1193) {
        s0 = peg$c1193;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1194); }
      }

      return s0;
    }

    function peg$parsePREV_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1195) {
        s0 = peg$c1195;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1196); }
      }

      return s0;
    }

    function peg$parsePRIMARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1197) {
        s0 = peg$c1197;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1198); }
      }

      return s0;
    }

    function peg$parsePRIVILEGES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1199) {
        s0 = peg$c1199;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1200); }
      }

      return s0;
    }

    function peg$parsePROCEDURE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1201) {
        s0 = peg$c1201;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1202); }
      }

      return s0;
    }

    function peg$parsePROCESS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1203) {
        s0 = peg$c1203;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1204); }
      }

      return s0;
    }

    function peg$parsePROCESSLIST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1205) {
        s0 = peg$c1205;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1206); }
      }

      return s0;
    }

    function peg$parsePROFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1207) {
        s0 = peg$c1207;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1208); }
      }

      return s0;
    }

    function peg$parsePROFILES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1209) {
        s0 = peg$c1209;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1210); }
      }

      return s0;
    }

    function peg$parsePROXY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1211) {
        s0 = peg$c1211;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1212); }
      }

      return s0;
    }

    function peg$parsePURGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1213) {
        s0 = peg$c1213;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1214); }
      }

      return s0;
    }

    function peg$parseQUARTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1215) {
        s0 = peg$c1215;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1216); }
      }

      return s0;
    }

    function peg$parseQUERY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1217) {
        s0 = peg$c1217;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1218); }
      }

      return s0;
    }

    function peg$parseQUICK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1219) {
        s0 = peg$c1219;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1220); }
      }

      return s0;
    }

    function peg$parseRANGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1221) {
        s0 = peg$c1221;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1222); }
      }

      return s0;
    }

    function peg$parseREADS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1223) {
        s0 = peg$c1223;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1224); }
      }

      return s0;
    }

    function peg$parseREAD_ONLY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1225) {
        s0 = peg$c1225;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1226); }
      }

      return s0;
    }

    function peg$parseREAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1227) {
        s0 = peg$c1227;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1228); }
      }

      return s0;
    }

    function peg$parseREAD_WRITE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1229) {
        s0 = peg$c1229;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1230); }
      }

      return s0;
    }

    function peg$parseREAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1231) {
        s0 = peg$c1231;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1232); }
      }

      return s0;
    }

    function peg$parseREBUILD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1233) {
        s0 = peg$c1233;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1234); }
      }

      return s0;
    }

    function peg$parseRECOVER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1235) {
        s0 = peg$c1235;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1236); }
      }

      return s0;
    }

    function peg$parseREDOFILE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1237) {
        s1 = peg$c1237;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1238); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c337();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREDO_BUFFER_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1239) {
        s0 = peg$c1239;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1240); }
      }

      return s0;
    }

    function peg$parseREDUNDANT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1241) {
        s0 = peg$c1241;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1242); }
      }

      return s0;
    }

    function peg$parseREFERENCES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1243) {
        s0 = peg$c1243;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1244); }
      }

      return s0;
    }

    function peg$parseREGEXP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1245) {
        s0 = peg$c1245;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1246); }
      }

      return s0;
    }

    function peg$parseRELAY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1247) {
        s0 = peg$c1247;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1248); }
      }

      return s0;
    }

    function peg$parseRELAYLOG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1249) {
        s0 = peg$c1249;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1250); }
      }

      return s0;
    }

    function peg$parseRELAY_LOG_FILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1251) {
        s0 = peg$c1251;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1252); }
      }

      return s0;
    }

    function peg$parseRELAY_LOG_POS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1253) {
        s0 = peg$c1253;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1254); }
      }

      return s0;
    }

    function peg$parseRELAY_THREAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1255) {
        s0 = peg$c1255;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1256); }
      }

      return s0;
    }

    function peg$parseRELEASE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1257) {
        s0 = peg$c1257;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1258); }
      }

      return s0;
    }

    function peg$parseRELOAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1259) {
        s0 = peg$c1259;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1260); }
      }

      return s0;
    }

    function peg$parseREMOVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1261) {
        s0 = peg$c1261;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1262); }
      }

      return s0;
    }

    function peg$parseRENAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1263) {
        s0 = peg$c1263;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1264); }
      }

      return s0;
    }

    function peg$parseREORGANIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1265) {
        s0 = peg$c1265;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1266); }
      }

      return s0;
    }

    function peg$parseREPAIR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1267) {
        s0 = peg$c1267;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1268); }
      }

      return s0;
    }

    function peg$parseREPEATABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1269) {
        s0 = peg$c1269;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1270); }
      }

      return s0;
    }

    function peg$parseREPEAT_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1271) {
        s1 = peg$c1271;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1272); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1273();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseREPLACE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1274) {
        s1 = peg$c1274;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1275); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1276();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseREPLICATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1277) {
        s0 = peg$c1277;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1278); }
      }

      return s0;
    }

    function peg$parseREPLICATE_DO_DB_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c1279) {
        s1 = peg$c1279;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1280); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREPLICATE_IGNORE_DB_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 19) === peg$c1281) {
        s1 = peg$c1281;
        peg$currPos += 19;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1282); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREPLICATE_DO_TABLE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c1283) {
        s1 = peg$c1283;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1284); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREPLICATE_IGNORE_TABLE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 22) === peg$c1285) {
        s1 = peg$c1285;
        peg$currPos += 22;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1286); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 23) === peg$c1287) {
        s1 = peg$c1287;
        peg$currPos += 23;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1288); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 27) === peg$c1289) {
        s1 = peg$c1289;
        peg$currPos += 27;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1290); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREPLICATE_REWRITE_DB_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 20) === peg$c1291) {
        s1 = peg$c1291;
        peg$currPos += 20;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1292); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREQUIRE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1293) {
        s0 = peg$c1293;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1294); }
      }

      return s0;
    }

    function peg$parseRESET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1295) {
        s0 = peg$c1295;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1296); }
      }

      return s0;
    }

    function peg$parseRESIGNAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1297) {
        s0 = peg$c1297;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1298); }
      }

      return s0;
    }

    function peg$parseRESTORE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1299) {
        s0 = peg$c1299;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1300); }
      }

      return s0;
    }

    function peg$parseRESTRICT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1301) {
        s0 = peg$c1301;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1302); }
      }

      return s0;
    }

    function peg$parseRESUME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1303) {
        s0 = peg$c1303;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1304); }
      }

      return s0;
    }

    function peg$parseRETURNED_SQLSTATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1305) {
        s0 = peg$c1305;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1306); }
      }

      return s0;
    }

    function peg$parseRETURNS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1307) {
        s0 = peg$c1307;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1308); }
      }

      return s0;
    }

    function peg$parseRETURN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1309) {
        s0 = peg$c1309;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1310); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseREVERSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1311) {
        s0 = peg$c1311;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1312); }
      }

      return s0;
    }

    function peg$parseREVOKE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1313) {
        s0 = peg$c1313;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1314); }
      }

      return s0;
    }

    function peg$parseRIGHT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1315) {
        s0 = peg$c1315;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1316); }
      }

      return s0;
    }

    function peg$parseRLIKE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1317) {
        s1 = peg$c1317;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1318); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1319();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseROLLBACK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1320) {
        s0 = peg$c1320;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1321); }
      }

      return s0;
    }

    function peg$parseROLLUP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1322) {
        s0 = peg$c1322;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1323); }
      }

      return s0;
    }

    function peg$parseROTATE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1324) {
        s1 = peg$c1324;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1325); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c827();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseROUTINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1326) {
        s0 = peg$c1326;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1327); }
      }

      return s0;
    }

    function peg$parseROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1328) {
        s0 = peg$c1328;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1329); }
      }

      return s0;
    }

    function peg$parseROW_COUNT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1330) {
        s0 = peg$c1330;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1331); }
      }

      return s0;
    }

    function peg$parseROW_FORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1332) {
        s0 = peg$c1332;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1333); }
      }

      return s0;
    }

    function peg$parseROW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1334) {
        s0 = peg$c1334;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1335); }
      }

      return s0;
    }

    function peg$parseRTREE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1336) {
        s0 = peg$c1336;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1337); }
      }

      return s0;
    }

    function peg$parseSAVEPOINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1338) {
        s0 = peg$c1338;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1339); }
      }

      return s0;
    }

    function peg$parseSCHEDULE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1340) {
        s0 = peg$c1340;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1341); }
      }

      return s0;
    }

    function peg$parseSCHEMA_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1342) {
        s1 = peg$c1342;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1343); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1344();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSCHEMA_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1345) {
        s0 = peg$c1345;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1346); }
      }

      return s0;
    }

    function peg$parseSCHEMAS_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1347) {
        s1 = peg$c1347;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1348); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1349();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSECOND_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1350) {
        s0 = peg$c1350;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1351); }
      }

      return s0;
    }

    function peg$parseSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1352) {
        s0 = peg$c1352;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1353); }
      }

      return s0;
    }

    function peg$parseSECURITY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1354) {
        s0 = peg$c1354;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1355); }
      }

      return s0;
    }

    function peg$parseSELECT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1356) {
        s0 = peg$c1356;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1357); }
      }

      return s0;
    }

    function peg$parseSENSITIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1358) {
        s0 = peg$c1358;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1359); }
      }

      return s0;
    }

    function peg$parseSEPARATOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1360) {
        s0 = peg$c1360;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1361); }
      }

      return s0;
    }

    function peg$parseSERIALIZABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1362) {
        s0 = peg$c1362;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1363); }
      }

      return s0;
    }

    function peg$parseSERIAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1364) {
        s0 = peg$c1364;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1365); }
      }

      return s0;
    }

    function peg$parseSESSION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1366) {
        s0 = peg$c1366;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1367); }
      }

      return s0;
    }

    function peg$parseSERVER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1368) {
        s0 = peg$c1368;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1369); }
      }

      return s0;
    }

    function peg$parseSERVER_OPTIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1370) {
        s0 = peg$c1370;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1371); }
      }

      return s0;
    }

    function peg$parseSESSION_USER_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1372) {
        s1 = peg$c1372;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1373); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1374();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1375) {
        s0 = peg$c1375;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1376); }
      }

      return s0;
    }

    function peg$parseSET_VAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1377) {
        s0 = peg$c1377;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1378); }
      }

      return s0;
    }

    function peg$parseSHARE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1379) {
        s0 = peg$c1379;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1380); }
      }

      return s0;
    }

    function peg$parseSHOW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1381) {
        s0 = peg$c1381;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1382); }
      }

      return s0;
    }

    function peg$parseSHUTDOWN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1383) {
        s0 = peg$c1383;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1384); }
      }

      return s0;
    }

    function peg$parseSIGNAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1385) {
        s0 = peg$c1385;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1386); }
      }

      return s0;
    }

    function peg$parseSIGNED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1387) {
        s0 = peg$c1387;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1388); }
      }

      return s0;
    }

    function peg$parseSIMPLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1389) {
        s0 = peg$c1389;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1390); }
      }

      return s0;
    }

    function peg$parseSLAVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1391) {
        s0 = peg$c1391;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1392); }
      }

      return s0;
    }

    function peg$parseSLOW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1393) {
        s0 = peg$c1393;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1394); }
      }

      return s0;
    }

    function peg$parseSMALLINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1395) {
        s0 = peg$c1395;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1396); }
      }

      return s0;
    }

    function peg$parseSNAPSHOT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1397) {
        s0 = peg$c1397;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1398); }
      }

      return s0;
    }

    function peg$parseSOME_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1399) {
        s1 = peg$c1399;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1400); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1401();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSOCKET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1402) {
        s0 = peg$c1402;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1403); }
      }

      return s0;
    }

    function peg$parseSONAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1404) {
        s0 = peg$c1404;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1405); }
      }

      return s0;
    }

    function peg$parseSOUNDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1406) {
        s0 = peg$c1406;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1407); }
      }

      return s0;
    }

    function peg$parseSOURCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1408) {
        s0 = peg$c1408;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1409); }
      }

      return s0;
    }

    function peg$parseSPATIAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1410) {
        s0 = peg$c1410;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1411); }
      }

      return s0;
    }

    function peg$parseSPECIFIC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1412) {
        s0 = peg$c1412;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1413); }
      }

      return s0;
    }

    function peg$parseSQLEXCEPTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1414) {
        s0 = peg$c1414;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1415); }
      }

      return s0;
    }

    function peg$parseSQLSTATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1416) {
        s0 = peg$c1416;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1417); }
      }

      return s0;
    }

    function peg$parseSQLWARNING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1418) {
        s0 = peg$c1418;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1419); }
      }

      return s0;
    }

    function peg$parseSQL_AFTER_GTIDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1420) {
        s0 = peg$c1420;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1421); }
      }

      return s0;
    }

    function peg$parseSQL_AFTER_MTS_GAPS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c1422) {
        s1 = peg$c1422;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1423); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c686();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSQL_BEFORE_GTIDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1424) {
        s0 = peg$c1424;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1425); }
      }

      return s0;
    }

    function peg$parseSQL_BIG_RESULT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1426) {
        s0 = peg$c1426;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1427); }
      }

      return s0;
    }

    function peg$parseSQL_BUFFER_RESULT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1428) {
        s0 = peg$c1428;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1429); }
      }

      return s0;
    }

    function peg$parseSQL_CACHE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1430) {
        s1 = peg$c1430;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1431); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c337();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSQL_CALC_FOUND_ROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1432) {
        s0 = peg$c1432;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1433); }
      }

      return s0;
    }

    function peg$parseSQL_NO_CACHE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1434) {
        s0 = peg$c1434;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1435); }
      }

      return s0;
    }

    function peg$parseSQL_SMALL_RESULT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1436) {
        s0 = peg$c1436;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1437); }
      }

      return s0;
    }

    function peg$parseSQL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1438) {
        s0 = peg$c1438;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1439); }
      }

      return s0;
    }

    function peg$parseSQL_THREAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1440) {
        s0 = peg$c1440;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1441); }
      }

      return s0;
    }

    function peg$parseSSL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1442) {
        s0 = peg$c1442;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1443); }
      }

      return s0;
    }

    function peg$parseSTACKED_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1444) {
        s1 = peg$c1444;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1445); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c715();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSTARTING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1446) {
        s0 = peg$c1446;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1447); }
      }

      return s0;
    }

    function peg$parseSTARTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1448) {
        s0 = peg$c1448;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1449); }
      }

      return s0;
    }

    function peg$parseSTART_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1450) {
        s0 = peg$c1450;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1451); }
      }

      return s0;
    }

    function peg$parseSTATS_AUTO_RECALC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1452) {
        s0 = peg$c1452;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1453); }
      }

      return s0;
    }

    function peg$parseSTATS_PERSISTENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1454) {
        s0 = peg$c1454;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1455); }
      }

      return s0;
    }

    function peg$parseSTATS_SAMPLE_PAGES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1456) {
        s0 = peg$c1456;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1457); }
      }

      return s0;
    }

    function peg$parseSTATUS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1458) {
        s0 = peg$c1458;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1459); }
      }

      return s0;
    }

    function peg$parseSTDDEV_SAMP_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c1460) {
        s1 = peg$c1460;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1461); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1462();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSTDDEV_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1463) {
        s1 = peg$c1463;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1464); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1465();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSTDDEV_POP_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1466) {
        s1 = peg$c1466;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1467); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1465();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSTD_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1468) {
        s1 = peg$c1468;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1469); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1465();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSTOP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1470) {
        s0 = peg$c1470;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1471); }
      }

      return s0;
    }

    function peg$parseSTORAGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1472) {
        s0 = peg$c1472;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1473); }
      }

      return s0;
    }

    function peg$parseSTORED_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1474) {
        s1 = peg$c1474;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1475); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c313();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSTRAIGHT_JOIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1476) {
        s0 = peg$c1476;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1477); }
      }

      return s0;
    }

    function peg$parseSTRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1478) {
        s0 = peg$c1478;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1479); }
      }

      return s0;
    }

    function peg$parseSUBCLASS_ORIGIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1480) {
        s0 = peg$c1480;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1481); }
      }

      return s0;
    }

    function peg$parseSUBDATE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1482) {
        s1 = peg$c1482;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1483); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1484();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSUBJECT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1485) {
        s0 = peg$c1485;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1486); }
      }

      return s0;
    }

    function peg$parseSUBPARTITIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1487) {
        s0 = peg$c1487;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1488); }
      }

      return s0;
    }

    function peg$parseSUBPARTITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1489) {
        s0 = peg$c1489;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1490); }
      }

      return s0;
    }

    function peg$parseSUBSTR_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1491) {
        s1 = peg$c1491;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1492); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1025();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSUBSTRING_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1493) {
        s1 = peg$c1493;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1494); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1025();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSUM_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1495) {
        s1 = peg$c1495;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1496); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1497();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSUPER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1498) {
        s0 = peg$c1498;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1499); }
      }

      return s0;
    }

    function peg$parseSUSPEND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1500) {
        s0 = peg$c1500;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1501); }
      }

      return s0;
    }

    function peg$parseSWAPS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1502) {
        s0 = peg$c1502;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1503); }
      }

      return s0;
    }

    function peg$parseSWITCHES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1504) {
        s0 = peg$c1504;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1505); }
      }

      return s0;
    }

    function peg$parseSYSDATE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1506) {
        s1 = peg$c1506;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1507); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1508();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSYSTEM_USER_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c1509) {
        s1 = peg$c1509;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1510); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1374();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTABLES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1511) {
        s0 = peg$c1511;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1512); }
      }

      return s0;
    }

    function peg$parseTABLESPACE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1513) {
        s0 = peg$c1513;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1514); }
      }

      return s0;
    }

    function peg$parseTABLE_REF_PRIORITY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c1515) {
        s1 = peg$c1515;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1516); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c337();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1517) {
        s0 = peg$c1517;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1518); }
      }

      return s0;
    }

    function peg$parseTABLE_CHECKSUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1519) {
        s0 = peg$c1519;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1520); }
      }

      return s0;
    }

    function peg$parseTABLE_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1521) {
        s0 = peg$c1521;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1522); }
      }

      return s0;
    }

    function peg$parseTEMPORARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1523) {
        s0 = peg$c1523;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1524); }
      }

      return s0;
    }

    function peg$parseTEMPTABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1525) {
        s0 = peg$c1525;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1526); }
      }

      return s0;
    }

    function peg$parseTERMINATED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1527) {
        s0 = peg$c1527;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1528); }
      }

      return s0;
    }

    function peg$parseTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1529) {
        s0 = peg$c1529;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1530); }
      }

      return s0;
    }

    function peg$parseTHAN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1531) {
        s0 = peg$c1531;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1532); }
      }

      return s0;
    }

    function peg$parseTHEN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1533) {
        s0 = peg$c1533;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1534); }
      }

      return s0;
    }

    function peg$parseTIMESTAMP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1535) {
        s0 = peg$c1535;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1536); }
      }

      return s0;
    }

    function peg$parseTIMESTAMP_ADD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1537) {
        s0 = peg$c1537;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1538); }
      }

      return s0;
    }

    function peg$parseTIMESTAMP_DIFF_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1539) {
        s0 = peg$c1539;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1540); }
      }

      return s0;
    }

    function peg$parseTIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1541) {
        s0 = peg$c1541;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1542); }
      }

      return s0;
    }

    function peg$parseTINYBLOB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1543) {
        s0 = peg$c1543;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1544); }
      }

      return s0;
    }

    function peg$parseTINYINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1545) {
        s0 = peg$c1545;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1546); }
      }

      return s0;
    }

    function peg$parseTINYTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1547) {
        s0 = peg$c1547;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1548); }
      }

      return s0;
    }

    function peg$parseTO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c1549) {
        s0 = peg$c1549;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1550); }
      }

      return s0;
    }

    function peg$parseTRAILING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1551) {
        s0 = peg$c1551;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1552); }
      }

      return s0;
    }

    function peg$parseTRANSACTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1553) {
        s0 = peg$c1553;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1554); }
      }

      return s0;
    }

    function peg$parseTRIGGERS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1555) {
        s0 = peg$c1555;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1556); }
      }

      return s0;
    }

    function peg$parseTRIGGER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1557) {
        s0 = peg$c1557;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1558); }
      }

      return s0;
    }

    function peg$parseTRIM_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1559) {
        s1 = peg$c1559;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1560); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1561();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTRUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1562) {
        s0 = peg$c1562;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1563); }
      }

      return s0;
    }

    function peg$parseTRUNCATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1564) {
        s0 = peg$c1564;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1565); }
      }

      return s0;
    }

    function peg$parseTYPES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1566) {
        s0 = peg$c1566;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1567); }
      }

      return s0;
    }

    function peg$parseTYPE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1568) {
        s0 = peg$c1568;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1569); }
      }

      return s0;
    }

    function peg$parseUDF_RETURNS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1570) {
        s0 = peg$c1570;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1571); }
      }

      return s0;
    }

    function peg$parseUNCOMMITTED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1572) {
        s0 = peg$c1572;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1573); }
      }

      return s0;
    }

    function peg$parseUNDEFINED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1574) {
        s0 = peg$c1574;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1575); }
      }

      return s0;
    }

    function peg$parseUNDOFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1576) {
        s0 = peg$c1576;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1577); }
      }

      return s0;
    }

    function peg$parseUNDO_BUFFER_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1578) {
        s0 = peg$c1578;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1579); }
      }

      return s0;
    }

    function peg$parseUNDO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1580) {
        s0 = peg$c1580;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1581); }
      }

      return s0;
    }

    function peg$parseUNICODE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1582) {
        s0 = peg$c1582;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1583); }
      }

      return s0;
    }

    function peg$parseUNINSTALL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1584) {
        s0 = peg$c1584;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1585); }
      }

      return s0;
    }

    function peg$parseUNION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1586) {
        s0 = peg$c1586;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1587); }
      }

      return s0;
    }

    function peg$parseUNIQUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1588) {
        s0 = peg$c1588;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1589); }
      }

      return s0;
    }

    function peg$parseUNKNOWN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1590) {
        s0 = peg$c1590;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1591); }
      }

      return s0;
    }

    function peg$parseUNLOCK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1592) {
        s0 = peg$c1592;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1593); }
      }

      return s0;
    }

    function peg$parseUNSIGNED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1594) {
        s0 = peg$c1594;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1595); }
      }

      return s0;
    }

    function peg$parseUNTIL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1596) {
        s0 = peg$c1596;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1597); }
      }

      return s0;
    }

    function peg$parseUPDATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1598) {
        s0 = peg$c1598;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1599); }
      }

      return s0;
    }

    function peg$parseUPGRADE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1600) {
        s0 = peg$c1600;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1601); }
      }

      return s0;
    }

    function peg$parseUSAGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1602) {
        s0 = peg$c1602;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1603); }
      }

      return s0;
    }

    function peg$parseUSER_RESOURCES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1604) {
        s0 = peg$c1604;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1605); }
      }

      return s0;
    }

    function peg$parseUSER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1606) {
        s0 = peg$c1606;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1607); }
      }

      return s0;
    }

    function peg$parseUSE_FRM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1608) {
        s0 = peg$c1608;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1609); }
      }

      return s0;
    }

    function peg$parseUSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1610) {
        s0 = peg$c1610;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1611); }
      }

      return s0;
    }

    function peg$parseUSING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1612) {
        s0 = peg$c1612;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1613); }
      }

      return s0;
    }

    function peg$parseUTC_DATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1614) {
        s0 = peg$c1614;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1615); }
      }

      return s0;
    }

    function peg$parseUTC_TIMESTAMP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1616) {
        s0 = peg$c1616;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1617); }
      }

      return s0;
    }

    function peg$parseUTC_TIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1618) {
        s0 = peg$c1618;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1619); }
      }

      return s0;
    }

    function peg$parseVALIDATION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1620) {
        s1 = peg$c1620;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1621); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c433();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseVALUES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c1622) {
        s0 = peg$c1622;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1623); }
      }

      return s0;
    }

    function peg$parseVALUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1624) {
        s0 = peg$c1624;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1625); }
      }

      return s0;
    }

    function peg$parseVARBINARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1626) {
        s0 = peg$c1626;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1627); }
      }

      return s0;
    }

    function peg$parseVARCHAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1628) {
        s0 = peg$c1628;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1629); }
      }

      return s0;
    }

    function peg$parseVARCHARACTER_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1630) {
        s1 = peg$c1630;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1631); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1632();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVARIABLES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1633) {
        s0 = peg$c1633;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1634); }
      }

      return s0;
    }

    function peg$parseVARIANCE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1635) {
        s1 = peg$c1635;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1636); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1637();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVARYING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1638) {
        s0 = peg$c1638;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1639); }
      }

      return s0;
    }

    function peg$parseVAR_POP_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1640) {
        s1 = peg$c1640;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1641); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1637();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVAR_SAMP_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1642) {
        s1 = peg$c1642;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1643); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1644();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVIEW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1645) {
        s0 = peg$c1645;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1646); }
      }

      return s0;
    }

    function peg$parseVIRTUAL_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1647) {
        s1 = peg$c1647;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1648); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c313();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseWAIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1649) {
        s0 = peg$c1649;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1650); }
      }

      return s0;
    }

    function peg$parseWARNINGS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1651) {
        s0 = peg$c1651;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1652); }
      }

      return s0;
    }

    function peg$parseWEEK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1653) {
        s0 = peg$c1653;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1654); }
      }

      return s0;
    }

    function peg$parseWEIGHT_STRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1655) {
        s0 = peg$c1655;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1656); }
      }

      return s0;
    }

    function peg$parseWHEN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1657) {
        s0 = peg$c1657;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1658); }
      }

      return s0;
    }

    function peg$parseWHERE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1659) {
        s0 = peg$c1659;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1660); }
      }

      return s0;
    }

    function peg$parseWHILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1661) {
        s0 = peg$c1661;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1662); }
      }

      return s0;
    }

    function peg$parseWITH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1663) {
        s0 = peg$c1663;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1664); }
      }

      return s0;
    }

    function peg$parseWITHOUT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1665) {
        s0 = peg$c1665;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1666); }
      }

      return s0;
    }

    function peg$parseWORK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1667) {
        s0 = peg$c1667;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1668); }
      }

      return s0;
    }

    function peg$parseWRAPPER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c1669) {
        s0 = peg$c1669;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1670); }
      }

      return s0;
    }

    function peg$parseWRITE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c1671) {
        s0 = peg$c1671;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1672); }
      }

      return s0;
    }

    function peg$parseX509_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1673) {
        s0 = peg$c1673;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1674); }
      }

      return s0;
    }

    function peg$parseXA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c1675) {
        s0 = peg$c1675;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1676); }
      }

      return s0;
    }

    function peg$parseXID_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1677) {
        s1 = peg$c1677;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1678); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1083();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseXML_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1679) {
        s0 = peg$c1679;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1680); }
      }

      return s0;
    }

    function peg$parseXOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1681) {
        s0 = peg$c1681;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1682); }
      }

      return s0;
    }

    function peg$parseYEAR_MONTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1683) {
        s0 = peg$c1683;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1684); }
      }

      return s0;
    }

    function peg$parseYEAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c1685) {
        s0 = peg$c1685;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1686); }
      }

      return s0;
    }

    function peg$parseZEROFILL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c1687) {
        s0 = peg$c1687;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1688); }
      }

      return s0;
    }

    function peg$parsePERSIST_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1689) {
        s1 = peg$c1689;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1690); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseROLE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1692) {
        s1 = peg$c1692;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1693); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseADMIN_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1694) {
        s1 = peg$c1694;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1695); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseINVISIBLE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1696) {
        s1 = peg$c1696;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1697); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseVISIBLE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1698) {
        s1 = peg$c1698;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1699); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEXCEPT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1700) {
        s1 = peg$c1700;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1701); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCOMPONENT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1702) {
        s1 = peg$c1702;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1703); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRECURSIVE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1704) {
        s1 = peg$c1704;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1705); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJSON_OBJECTAGG_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c1706) {
        s1 = peg$c1706;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1707); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJSON_ARRAYAGG_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c1708) {
        s1 = peg$c1708;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1709); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOF_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c1710) {
        s1 = peg$c1710;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1711); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSKIP_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1712) {
        s1 = peg$c1712;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1713); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLOCKED_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1714) {
        s1 = peg$c1714;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1715); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNOWAIT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1716) {
        s1 = peg$c1716;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1717); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseGROUPING_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1718) {
        s1 = peg$c1718;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1719); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePERSIST_ONLY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1720) {
        s1 = peg$c1720;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1721); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHISTOGRAM_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1722) {
        s1 = peg$c1722;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1723); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBUCKETS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1724) {
        s1 = peg$c1724;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1725); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREMOTE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1726) {
        s1 = peg$c1726;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1727); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1728();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCLONE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1729) {
        s1 = peg$c1729;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1730); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCUME_DIST_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1731) {
        s1 = peg$c1731;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1732); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDENSE_RANK_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1733) {
        s1 = peg$c1733;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1734); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEXCLUDE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1735) {
        s1 = peg$c1735;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1736); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFIRST_VALUE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c1737) {
        s1 = peg$c1737;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1738); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFOLLOWING_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1739) {
        s1 = peg$c1739;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1740); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseGROUPS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1741) {
        s1 = peg$c1741;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1742); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLAG_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1743) {
        s1 = peg$c1743;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1744); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLAST_VALUE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1745) {
        s1 = peg$c1745;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1746); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLEAD_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1747) {
        s1 = peg$c1747;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1748); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNTH_VALUE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1749) {
        s1 = peg$c1749;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1750); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNTILE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1751) {
        s1 = peg$c1751;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1752); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNULLS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1753) {
        s1 = peg$c1753;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1754); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOTHERS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1755) {
        s1 = peg$c1755;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1756); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOVER_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1757) {
        s1 = peg$c1757;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1758); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePERCENT_RANK_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1759) {
        s1 = peg$c1759;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1760); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePRECEDING_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1761) {
        s1 = peg$c1761;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1762); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRANK_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1763) {
        s1 = peg$c1763;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1764); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRESPECT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1765) {
        s1 = peg$c1765;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1766); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseROW_NUMBER_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1767) {
        s1 = peg$c1767;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1768); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTIES_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1769) {
        s1 = peg$c1769;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1770); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUNBOUNDED_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1771) {
        s1 = peg$c1771;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1772); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseWINDOW_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1773) {
        s1 = peg$c1773;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1774); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEMPTY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1775) {
        s1 = peg$c1775;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1776); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJSON_TABLE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1777) {
        s1 = peg$c1777;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1778); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNESTED_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1779) {
        s1 = peg$c1779;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1780); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseORDINALITY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1781) {
        s1 = peg$c1781;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1782); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePATH_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1783) {
        s1 = peg$c1783;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1784); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHISTORY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1785) {
        s1 = peg$c1785;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1786); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREUSE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1787) {
        s1 = peg$c1787;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1788); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSRID_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1789) {
        s1 = peg$c1789;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1790); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTHREAD_PRIORITY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c1791) {
        s1 = peg$c1791;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1792); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRESOURCE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1793) {
        s1 = peg$c1793;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1794); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSYSTEM_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1795) {
        s1 = peg$c1795;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1796); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseVCPU_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1797) {
        s1 = peg$c1797;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1798); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 22) === peg$c1799) {
        s1 = peg$c1799;
        peg$currPos += 22;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1800); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 25) === peg$c1801) {
        s1 = peg$c1801;
        peg$currPos += 25;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1802); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1691();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRESTART_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1803) {
        s1 = peg$c1803;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1804); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1805();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDEFINITION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c1806) {
        s1 = peg$c1806;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1807); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1805();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDESCRIPTION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c1808) {
        s1 = peg$c1808;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1809); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1805();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseORGANIZATION_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1810) {
        s1 = peg$c1810;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1811); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1805();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREFERENCE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1812) {
        s1 = peg$c1812;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1813); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1805();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOPTIONAL_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1814) {
        s1 = peg$c1814;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1815); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1816();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSECONDARY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c1817) {
        s1 = peg$c1817;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1818); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1816();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSECONDARY_ENGINE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c1819) {
        s1 = peg$c1819;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1820); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1816();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSECONDARY_LOAD_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c1821) {
        s1 = peg$c1821;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1822); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1816();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSECONDARY_UNLOAD_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c1823) {
        s1 = peg$c1823;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1824); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1816();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseACTIVE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1825) {
        s1 = peg$c1825;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1826); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1827();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseINACTIVE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1828) {
        s1 = peg$c1828;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1829); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1827();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLATERAL_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c1830) {
        s1 = peg$c1830;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1831); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1827();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRETAIN_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1832) {
        s1 = peg$c1832;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1833); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1827();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOLD_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1834) {
        s1 = peg$c1834;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1835); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1827();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNETWORK_NAMESPACE_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 17) === peg$c1836) {
        s1 = peg$c1836;
        peg$currPos += 17;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1837); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1838();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseENFORCED_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c1839) {
        s1 = peg$c1839;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1840); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1838();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseARRAY_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c1841) {
        s1 = peg$c1841;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1842); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1838();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOJ_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c1843) {
        s1 = peg$c1843;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1844); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1838();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMEMBER_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1845) {
        s1 = peg$c1845;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1846); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1838();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRANDOM_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1847) {
        s1 = peg$c1847;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1848); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1849();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 28) === peg$c1850) {
        s1 = peg$c1850;
        peg$currPos += 28;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1851); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1849();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 29) === peg$c1852) {
        s1 = peg$c1852;
        peg$currPos += 29;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1853); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1849();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePRIVILEGE_CHECKS_USER_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 21) === peg$c1854) {
        s1 = peg$c1854;
        peg$currPos += 21;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1855); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1849();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 23) === peg$c1856) {
        s1 = peg$c1856;
        peg$currPos += 23;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1857); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1849();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREQUIRE_ROW_FORMAT_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c1858) {
        s1 = peg$c1858;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1859); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1860();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePASSWORD_LOCK_TIME_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c1861) {
        s1 = peg$c1861;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1862); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1860();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 21) === peg$c1863) {
        s1 = peg$c1863;
        peg$currPos += 21;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1864); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1860();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 31) === peg$c1865) {
        s1 = peg$c1865;
        peg$currPos += 31;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1866); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1860();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSTREAM_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c1867) {
        s1 = peg$c1867;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1868); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1860();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOFF_SYMBOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c1869) {
        s1 = peg$c1869;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1870); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c1860();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseINT1_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1871) {
        s1 = peg$c1871;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1872); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1873();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINT2_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1874) {
        s1 = peg$c1874;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1875); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1876();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINT3_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1877) {
        s1 = peg$c1877;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1878); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1028();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINT4_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1879) {
        s1 = peg$c1879;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1880); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c832();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINT8_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c1881) {
        s1 = peg$c1881;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1882); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1883();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSQL_TSI_SECOND_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c1884) {
        s1 = peg$c1884;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1885); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1886();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSQL_TSI_MINUTE_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c1887) {
        s1 = peg$c1887;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1888); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1889();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSQL_TSI_HOUR_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1890) {
        s1 = peg$c1890;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1891); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1892();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSQL_TSI_DAY_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c1893) {
        s1 = peg$c1893;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1894); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c562();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSQL_TSI_WEEK_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1895) {
        s1 = peg$c1895;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1896); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1897();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSQL_TSI_MONTH_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c1898) {
        s1 = peg$c1898;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1899); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1900();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSQL_TSI_QUARTER_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c1901) {
        s1 = peg$c1901;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1902); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1903();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSQL_TSI_YEAR_SYMBOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c1904) {
        s1 = peg$c1904;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1905); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1906();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseWHITESPACE() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c1907.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1908); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c284();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINVALID_INPUT() {
      var s0;

      if (peg$c1909.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1910); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c1911;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1912); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c1913;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c1914); }
          }
          if (s0 === peg$FAILED) {
            if (peg$c1915.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1916); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 91) {
                s0 = peg$c1917;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1918); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s0 = peg$c1919;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1920); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c278); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = peg$c3;
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }


      const serverInfo = {
        ANSI_QUOTES: 1,
        isSqlModeActive() {
          return false;
        },
        getServerVersion() {
          return 80000;
        }
      };
      const serverVersion = serverInfo.getServerVersion();

      function override(rule) {
        return function() {
          WHITESPACE();  // Skip leading whitespace before every match
          return rule.apply(this, arguments);
        };
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
