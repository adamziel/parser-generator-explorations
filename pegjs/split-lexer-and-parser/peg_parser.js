module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { Start: peg$parseStart },
        peg$startRuleFunction  = peg$parseStart,

        peg$c0 = peg$FAILED,
        peg$c1 = null,
        peg$c2 = function() {serverVersion >= 80000},
        peg$c3 = void 0,
        peg$c4 = function() {serverVersion >= 50604},
        peg$c5 = function() {serverVersion >= 80014},
        peg$c6 = function() {serverVersion >= 50713},
        peg$c7 = [],
        peg$c8 = function() {serverVersion < 80000},
        peg$c9 = function() {serverVersion < 50700},
        peg$c10 = function() {serverVersion >= 50704},
        peg$c11 = function() {serverVersion >= 50700},
        peg$c12 = function() {serverVersion >= 80017},
        peg$c13 = function() {serverVersion >= 80019},
        peg$c14 = function() {serverVersion >= 50708 && serverVersion < 80000},
        peg$c15 = function() {serverVersion >= 50706},
        peg$c16 = function() {serverVersion >= 80011},
        peg$c17 = function() {serverVersion >= 80016},
        peg$c18 = function() {serverVersion >= 50707},
        peg$c19 = function() {serverVersion >= 50602},
        peg$c20 = function() {serverVersion < 50709},
        peg$c21 = function() {serverVersion >= 50709},
        peg$c22 = function() { serverVersion >= 80018},
        peg$c23 = function() {serverVersion >= 50704 && serverVersion < 50708},
        peg$c24 = function() {serverVersion < 80017},
        peg$c25 = function() {serverVersion >= 80004},
        peg$c26 = function() {serverVersion >= 50605},
        peg$c27 = function() {serverVersion > 80000},
        peg$c28 = function() {serverVersion > 50706},
        peg$c29 = function() {serverVersion >= 50606},
        peg$c30 = function() {serverVersion < 80014},
        peg$c31 = function() {serverVersion >= 80018},
        peg$c32 = function() {serverVersion < 80011},
        peg$c33 = function() {serverVersion < 50706},
        peg$c34 = function() {serverVersion >= 50700 && serverVersion < 50706},
        peg$c35 = function() {serverVersion >= 50603},
        peg$c36 = function(head, tail) {
              return tail.reduce((result, element) => {
                return {
                  type: element.type,
                  left: result,
                  operator: element.operator,
                  right: element.right
                };
              }, head);
            },
        peg$c37 = function(right) { return { type: 'AND', operator: text(), right }; },
        peg$c38 = function(right) { return { type: 'XOR', operator: 'XOR', right }; },
        peg$c39 = function(right) { return { type: 'OR', operator: text(), right }; },
        peg$c40 = function(not) { return { type: 'IS_NULL', operator: 'IS', not, right: 'NULL' }; },
        peg$c41 = function(right) { return { type: 'COMP_OP', operator: text(), right }; },
        peg$c42 = function() { return { type: 'COMP_OP_SUBQUERY', operator: text(), subquery }; },
        peg$c43 = function(right) { return { type: 'MEMBER_OF', operator: 'MEMBER OF', right }; },
        peg$c44 = function(right) { return { type: 'SOUNDS_LIKE', operator: 'SOUNDS LIKE', right }; },
        peg$c45 = function(right) { return { type: 'BITWISE_XOR', operator: '^', right }; },
        peg$c46 = function(right) { return { type: 'MULT_DIV_MOD', operator: text(), right }; },
        peg$c47 = function(right) { return { type: 'PLUS_MINUS', operator: text(), right }; },
        peg$c48 = function(expr, interval) { return { type: 'PLUS_MINUS_INTERVAL', operator: text(), expr, interval }; },
        peg$c49 = function(right) { return { type: 'SHIFT', operator: text(), right }; },
        peg$c50 = function(right) { return { type: 'BITWISE_AND', operator: '&', right }; },
        peg$c51 = function(right) { return { type: 'BITWISE_OR', operator: '|', right }; },
        peg$c52 = function(right) { return { type: 'COLLATE', operator: 'COLLATE', right }; },
        peg$c53 = function(right) { return { type: 'CONCAT', operator: '||', right }; },
        peg$c54 = function(right) { return { type: 'INTERVAL_PLUS', operator: '+', expr, interval, right }; },
        peg$c55 = function() {serverVersion >= 50708},
        peg$c56 = function() {serverVersion < 50607},
        peg$c57 = function() {serverVersion < 80016},
        peg$c58 = function() {serverVersion >= 80013},
        peg$c59 = function() {serverVersion < 80013},
        peg$c60 = function() {serverVersion >= 50711},
        peg$c61 = function() {serverInfo.isSqlModeActive(serverInfo.ANSI_QUOTES)},
        peg$c62 = "EQUAL_OPERATOR",
        peg$c63 = { type: "literal", value: "EQUAL_OPERATOR", description: "\"EQUAL_OPERATOR\"" },
        peg$c64 = "ASSIGN_OPERATOR",
        peg$c65 = { type: "literal", value: "ASSIGN_OPERATOR", description: "\"ASSIGN_OPERATOR\"" },
        peg$c66 = "NULL_SAFE_EQUAL_OPERATOR",
        peg$c67 = { type: "literal", value: "NULL_SAFE_EQUAL_OPERATOR", description: "\"NULL_SAFE_EQUAL_OPERATOR\"" },
        peg$c68 = "GREATER_OR_EQUAL_OPERATOR",
        peg$c69 = { type: "literal", value: "GREATER_OR_EQUAL_OPERATOR", description: "\"GREATER_OR_EQUAL_OPERATOR\"" },
        peg$c70 = "GREATER_THAN_OPERATOR",
        peg$c71 = { type: "literal", value: "GREATER_THAN_OPERATOR", description: "\"GREATER_THAN_OPERATOR\"" },
        peg$c72 = "LESS_OR_EQUAL_OPERATOR",
        peg$c73 = { type: "literal", value: "LESS_OR_EQUAL_OPERATOR", description: "\"LESS_OR_EQUAL_OPERATOR\"" },
        peg$c74 = "LESS_THAN_OPERATOR",
        peg$c75 = { type: "literal", value: "LESS_THAN_OPERATOR", description: "\"LESS_THAN_OPERATOR\"" },
        peg$c76 = "NOT_EQUAL_OPERATOR",
        peg$c77 = { type: "literal", value: "NOT_EQUAL_OPERATOR", description: "\"NOT_EQUAL_OPERATOR\"" },
        peg$c78 = "PLUS_OPERATOR",
        peg$c79 = { type: "literal", value: "PLUS_OPERATOR", description: "\"PLUS_OPERATOR\"" },
        peg$c80 = "MINUS_OPERATOR",
        peg$c81 = { type: "literal", value: "MINUS_OPERATOR", description: "\"MINUS_OPERATOR\"" },
        peg$c82 = "MULT_OPERATOR",
        peg$c83 = { type: "literal", value: "MULT_OPERATOR", description: "\"MULT_OPERATOR\"" },
        peg$c84 = "DIV_OPERATOR",
        peg$c85 = { type: "literal", value: "DIV_OPERATOR", description: "\"DIV_OPERATOR\"" },
        peg$c86 = "MOD_OPERATOR",
        peg$c87 = { type: "literal", value: "MOD_OPERATOR", description: "\"MOD_OPERATOR\"" },
        peg$c88 = "LOGICAL_NOT_OPERATOR",
        peg$c89 = { type: "literal", value: "LOGICAL_NOT_OPERATOR", description: "\"LOGICAL_NOT_OPERATOR\"" },
        peg$c90 = "BITWISE_NOT_OPERATOR",
        peg$c91 = { type: "literal", value: "BITWISE_NOT_OPERATOR", description: "\"BITWISE_NOT_OPERATOR\"" },
        peg$c92 = "SHIFT_LEFT_OPERATOR",
        peg$c93 = { type: "literal", value: "SHIFT_LEFT_OPERATOR", description: "\"SHIFT_LEFT_OPERATOR\"" },
        peg$c94 = "SHIFT_RIGHT_OPERATOR",
        peg$c95 = { type: "literal", value: "SHIFT_RIGHT_OPERATOR", description: "\"SHIFT_RIGHT_OPERATOR\"" },
        peg$c96 = "LOGICAL_AND_OPERATOR",
        peg$c97 = { type: "literal", value: "LOGICAL_AND_OPERATOR", description: "\"LOGICAL_AND_OPERATOR\"" },
        peg$c98 = "BITWISE_AND_OPERATOR",
        peg$c99 = { type: "literal", value: "BITWISE_AND_OPERATOR", description: "\"BITWISE_AND_OPERATOR\"" },
        peg$c100 = "BITWISE_XOR_OPERATOR",
        peg$c101 = { type: "literal", value: "BITWISE_XOR_OPERATOR", description: "\"BITWISE_XOR_OPERATOR\"" },
        peg$c102 = "LOGICAL_OR_OPERATOR",
        peg$c103 = { type: "literal", value: "LOGICAL_OR_OPERATOR", description: "\"LOGICAL_OR_OPERATOR\"" },
        peg$c104 = "BITWISE_OR_OPERATOR",
        peg$c105 = { type: "literal", value: "BITWISE_OR_OPERATOR", description: "\"BITWISE_OR_OPERATOR\"" },
        peg$c106 = "DOT_SYMBOL",
        peg$c107 = { type: "literal", value: "DOT_SYMBOL", description: "\"DOT_SYMBOL\"" },
        peg$c108 = "COMMA_SYMBOL",
        peg$c109 = { type: "literal", value: "COMMA_SYMBOL", description: "\"COMMA_SYMBOL\"" },
        peg$c110 = "SEMICOLON_SYMBOL",
        peg$c111 = { type: "literal", value: "SEMICOLON_SYMBOL", description: "\"SEMICOLON_SYMBOL\"" },
        peg$c112 = "COLON_SYMBOL",
        peg$c113 = { type: "literal", value: "COLON_SYMBOL", description: "\"COLON_SYMBOL\"" },
        peg$c114 = "OPEN_PAR_SYMBOL",
        peg$c115 = { type: "literal", value: "OPEN_PAR_SYMBOL", description: "\"OPEN_PAR_SYMBOL\"" },
        peg$c116 = "CLOSE_PAR_SYMBOL",
        peg$c117 = { type: "literal", value: "CLOSE_PAR_SYMBOL", description: "\"CLOSE_PAR_SYMBOL\"" },
        peg$c118 = "OPEN_CURLY_SYMBOL",
        peg$c119 = { type: "literal", value: "OPEN_CURLY_SYMBOL", description: "\"OPEN_CURLY_SYMBOL\"" },
        peg$c120 = "CLOSE_CURLY_SYMBOL",
        peg$c121 = { type: "literal", value: "CLOSE_CURLY_SYMBOL", description: "\"CLOSE_CURLY_SYMBOL\"" },
        peg$c122 = "UNDERLINE_SYMBOL",
        peg$c123 = { type: "literal", value: "UNDERLINE_SYMBOL", description: "\"UNDERLINE_SYMBOL\"" },
        peg$c124 = "JSON_SEPARATOR_SYMBOL",
        peg$c125 = { type: "literal", value: "JSON_SEPARATOR_SYMBOL", description: "\"JSON_SEPARATOR_SYMBOL\"" },
        peg$c126 = "JSON_UNQUOTED_SEPARATOR_SYMBOL",
        peg$c127 = { type: "literal", value: "JSON_UNQUOTED_SEPARATOR_SYMBOL", description: "\"JSON_UNQUOTED_SEPARATOR_SYMBOL\"" },
        peg$c128 = "AT_SIGN_SYMBOL",
        peg$c129 = { type: "literal", value: "AT_SIGN_SYMBOL", description: "\"AT_SIGN_SYMBOL\"" },
        peg$c130 = "AT_TEXT_SUFFIX",
        peg$c131 = { type: "literal", value: "AT_TEXT_SUFFIX", description: "\"AT_TEXT_SUFFIX\"" },
        peg$c132 = "AT_AT_SIGN_SYMBOL",
        peg$c133 = { type: "literal", value: "AT_AT_SIGN_SYMBOL", description: "\"AT_AT_SIGN_SYMBOL\"" },
        peg$c134 = "NULL2_SYMBOL",
        peg$c135 = { type: "literal", value: "NULL2_SYMBOL", description: "\"NULL2_SYMBOL\"" },
        peg$c136 = "PARAM_MARKER",
        peg$c137 = { type: "literal", value: "PARAM_MARKER", description: "\"PARAM_MARKER\"" },
        peg$c138 = "INT_SYMBOL",
        peg$c139 = { type: "literal", value: "INT_SYMBOL", description: "\"INT_SYMBOL\"" },
        peg$c140 = "TINYINT_SYMBOL",
        peg$c141 = { type: "literal", value: "TINYINT_SYMBOL", description: "\"TINYINT_SYMBOL\"" },
        peg$c142 = "SMALLINT_SYMBOL",
        peg$c143 = { type: "literal", value: "SMALLINT_SYMBOL", description: "\"SMALLINT_SYMBOL\"" },
        peg$c144 = "MEDIUMINT_SYMBOL",
        peg$c145 = { type: "literal", value: "MEDIUMINT_SYMBOL", description: "\"MEDIUMINT_SYMBOL\"" },
        peg$c146 = "BIGINT_SYMBOL",
        peg$c147 = { type: "literal", value: "BIGINT_SYMBOL", description: "\"BIGINT_SYMBOL\"" },
        peg$c148 = "REAL_SYMBOL",
        peg$c149 = { type: "literal", value: "REAL_SYMBOL", description: "\"REAL_SYMBOL\"" },
        peg$c150 = "DOUBLE_SYMBOL",
        peg$c151 = { type: "literal", value: "DOUBLE_SYMBOL", description: "\"DOUBLE_SYMBOL\"" },
        peg$c152 = "FLOAT_SYMBOL",
        peg$c153 = { type: "literal", value: "FLOAT_SYMBOL", description: "\"FLOAT_SYMBOL\"" },
        peg$c154 = "DECIMAL_SYMBOL",
        peg$c155 = { type: "literal", value: "DECIMAL_SYMBOL", description: "\"DECIMAL_SYMBOL\"" },
        peg$c156 = "NUMERIC_SYMBOL",
        peg$c157 = { type: "literal", value: "NUMERIC_SYMBOL", description: "\"NUMERIC_SYMBOL\"" },
        peg$c158 = "DATE_SYMBOL",
        peg$c159 = { type: "literal", value: "DATE_SYMBOL", description: "\"DATE_SYMBOL\"" },
        peg$c160 = "TIME_SYMBOL",
        peg$c161 = { type: "literal", value: "TIME_SYMBOL", description: "\"TIME_SYMBOL\"" },
        peg$c162 = "TIMESTAMP_SYMBOL",
        peg$c163 = { type: "literal", value: "TIMESTAMP_SYMBOL", description: "\"TIMESTAMP_SYMBOL\"" },
        peg$c164 = "DATETIME_SYMBOL",
        peg$c165 = { type: "literal", value: "DATETIME_SYMBOL", description: "\"DATETIME_SYMBOL\"" },
        peg$c166 = "YEAR_SYMBOL",
        peg$c167 = { type: "literal", value: "YEAR_SYMBOL", description: "\"YEAR_SYMBOL\"" },
        peg$c168 = "CHAR_SYMBOL",
        peg$c169 = { type: "literal", value: "CHAR_SYMBOL", description: "\"CHAR_SYMBOL\"" },
        peg$c170 = "VARCHAR_SYMBOL",
        peg$c171 = { type: "literal", value: "VARCHAR_SYMBOL", description: "\"VARCHAR_SYMBOL\"" },
        peg$c172 = "BINARY_SYMBOL",
        peg$c173 = { type: "literal", value: "BINARY_SYMBOL", description: "\"BINARY_SYMBOL\"" },
        peg$c174 = "VARBINARY_SYMBOL",
        peg$c175 = { type: "literal", value: "VARBINARY_SYMBOL", description: "\"VARBINARY_SYMBOL\"" },
        peg$c176 = "TINYBLOB_SYMBOL",
        peg$c177 = { type: "literal", value: "TINYBLOB_SYMBOL", description: "\"TINYBLOB_SYMBOL\"" },
        peg$c178 = "BLOB_SYMBOL",
        peg$c179 = { type: "literal", value: "BLOB_SYMBOL", description: "\"BLOB_SYMBOL\"" },
        peg$c180 = "MEDIUMBLOB_SYMBOL",
        peg$c181 = { type: "literal", value: "MEDIUMBLOB_SYMBOL", description: "\"MEDIUMBLOB_SYMBOL\"" },
        peg$c182 = "LONGBLOB_SYMBOL",
        peg$c183 = { type: "literal", value: "LONGBLOB_SYMBOL", description: "\"LONGBLOB_SYMBOL\"" },
        peg$c184 = "TINYTEXT_SYMBOL",
        peg$c185 = { type: "literal", value: "TINYTEXT_SYMBOL", description: "\"TINYTEXT_SYMBOL\"" },
        peg$c186 = "TEXT_SYMBOL",
        peg$c187 = { type: "literal", value: "TEXT_SYMBOL", description: "\"TEXT_SYMBOL\"" },
        peg$c188 = "MEDIUMTEXT_SYMBOL",
        peg$c189 = { type: "literal", value: "MEDIUMTEXT_SYMBOL", description: "\"MEDIUMTEXT_SYMBOL\"" },
        peg$c190 = "LONGTEXT_SYMBOL",
        peg$c191 = { type: "literal", value: "LONGTEXT_SYMBOL", description: "\"LONGTEXT_SYMBOL\"" },
        peg$c192 = "ENUM_SYMBOL",
        peg$c193 = { type: "literal", value: "ENUM_SYMBOL", description: "\"ENUM_SYMBOL\"" },
        peg$c194 = "SET_SYMBOL",
        peg$c195 = { type: "literal", value: "SET_SYMBOL", description: "\"SET_SYMBOL\"" },
        peg$c196 = "JSON_SYMBOL",
        peg$c197 = { type: "literal", value: "JSON_SYMBOL", description: "\"JSON_SYMBOL\"" },
        peg$c198 = "GEOMETRY_SYMBOL",
        peg$c199 = { type: "literal", value: "GEOMETRY_SYMBOL", description: "\"GEOMETRY_SYMBOL\"" },
        peg$c200 = "POINT_SYMBOL",
        peg$c201 = { type: "literal", value: "POINT_SYMBOL", description: "\"POINT_SYMBOL\"" },
        peg$c202 = "LINESTRING_SYMBOL",
        peg$c203 = { type: "literal", value: "LINESTRING_SYMBOL", description: "\"LINESTRING_SYMBOL\"" },
        peg$c204 = "POLYGON_SYMBOL",
        peg$c205 = { type: "literal", value: "POLYGON_SYMBOL", description: "\"POLYGON_SYMBOL\"" },
        peg$c206 = "GEOMETRYCOLLECTION_SYMBOL",
        peg$c207 = { type: "literal", value: "GEOMETRYCOLLECTION_SYMBOL", description: "\"GEOMETRYCOLLECTION_SYMBOL\"" },
        peg$c208 = "MULTIPOINT_SYMBOL",
        peg$c209 = { type: "literal", value: "MULTIPOINT_SYMBOL", description: "\"MULTIPOINT_SYMBOL\"" },
        peg$c210 = "MULTILINESTRING_SYMBOL",
        peg$c211 = { type: "literal", value: "MULTILINESTRING_SYMBOL", description: "\"MULTILINESTRING_SYMBOL\"" },
        peg$c212 = "MULTIPOLYGON_SYMBOL",
        peg$c213 = { type: "literal", value: "MULTIPOLYGON_SYMBOL", description: "\"MULTIPOLYGON_SYMBOL\"" },
        peg$c214 = "ACCESSIBLE_SYMBOL",
        peg$c215 = { type: "literal", value: "ACCESSIBLE_SYMBOL", description: "\"ACCESSIBLE_SYMBOL\"" },
        peg$c216 = "ACCOUNT_SYMBOL",
        peg$c217 = { type: "literal", value: "ACCOUNT_SYMBOL", description: "\"ACCOUNT_SYMBOL\"" },
        peg$c218 = "ACTION_SYMBOL",
        peg$c219 = { type: "literal", value: "ACTION_SYMBOL", description: "\"ACTION_SYMBOL\"" },
        peg$c220 = "ADD_SYMBOL",
        peg$c221 = { type: "literal", value: "ADD_SYMBOL", description: "\"ADD_SYMBOL\"" },
        peg$c222 = "AFTER_SYMBOL",
        peg$c223 = { type: "literal", value: "AFTER_SYMBOL", description: "\"AFTER_SYMBOL\"" },
        peg$c224 = "AGAINST_SYMBOL",
        peg$c225 = { type: "literal", value: "AGAINST_SYMBOL", description: "\"AGAINST_SYMBOL\"" },
        peg$c226 = "AGGREGATE_SYMBOL",
        peg$c227 = { type: "literal", value: "AGGREGATE_SYMBOL", description: "\"AGGREGATE_SYMBOL\"" },
        peg$c228 = "ALGORITHM_SYMBOL",
        peg$c229 = { type: "literal", value: "ALGORITHM_SYMBOL", description: "\"ALGORITHM_SYMBOL\"" },
        peg$c230 = "ALL_SYMBOL",
        peg$c231 = { type: "literal", value: "ALL_SYMBOL", description: "\"ALL_SYMBOL\"" },
        peg$c232 = "ALTER_SYMBOL",
        peg$c233 = { type: "literal", value: "ALTER_SYMBOL", description: "\"ALTER_SYMBOL\"" },
        peg$c234 = "ALWAYS_SYMBOL",
        peg$c235 = { type: "literal", value: "ALWAYS_SYMBOL", description: "\"ALWAYS_SYMBOL\"" },
        peg$c236 = "ANALYSE_SYMBOL",
        peg$c237 = { type: "literal", value: "ANALYSE_SYMBOL", description: "\"ANALYSE_SYMBOL\"" },
        peg$c238 = "ANALYZE_SYMBOL",
        peg$c239 = { type: "literal", value: "ANALYZE_SYMBOL", description: "\"ANALYZE_SYMBOL\"" },
        peg$c240 = "AND_SYMBOL",
        peg$c241 = { type: "literal", value: "AND_SYMBOL", description: "\"AND_SYMBOL\"" },
        peg$c242 = "ANY_SYMBOL",
        peg$c243 = { type: "literal", value: "ANY_SYMBOL", description: "\"ANY_SYMBOL\"" },
        peg$c244 = "AS_SYMBOL",
        peg$c245 = { type: "literal", value: "AS_SYMBOL", description: "\"AS_SYMBOL\"" },
        peg$c246 = "ASC_SYMBOL",
        peg$c247 = { type: "literal", value: "ASC_SYMBOL", description: "\"ASC_SYMBOL\"" },
        peg$c248 = "ASENSITIVE_SYMBOL",
        peg$c249 = { type: "literal", value: "ASENSITIVE_SYMBOL", description: "\"ASENSITIVE_SYMBOL\"" },
        peg$c250 = "AT_SYMBOL",
        peg$c251 = { type: "literal", value: "AT_SYMBOL", description: "\"AT_SYMBOL\"" },
        peg$c252 = "AUTOEXTEND_SIZE_SYMBOL",
        peg$c253 = { type: "literal", value: "AUTOEXTEND_SIZE_SYMBOL", description: "\"AUTOEXTEND_SIZE_SYMBOL\"" },
        peg$c254 = "AUTO_INCREMENT_SYMBOL",
        peg$c255 = { type: "literal", value: "AUTO_INCREMENT_SYMBOL", description: "\"AUTO_INCREMENT_SYMBOL\"" },
        peg$c256 = "AVG_ROW_LENGTH_SYMBOL",
        peg$c257 = { type: "literal", value: "AVG_ROW_LENGTH_SYMBOL", description: "\"AVG_ROW_LENGTH_SYMBOL\"" },
        peg$c258 = "AVG_SYMBOL",
        peg$c259 = { type: "literal", value: "AVG_SYMBOL", description: "\"AVG_SYMBOL\"" },
        peg$c260 = "BACKUP_SYMBOL",
        peg$c261 = { type: "literal", value: "BACKUP_SYMBOL", description: "\"BACKUP_SYMBOL\"" },
        peg$c262 = "BEFORE_SYMBOL",
        peg$c263 = { type: "literal", value: "BEFORE_SYMBOL", description: "\"BEFORE_SYMBOL\"" },
        peg$c264 = "BEGIN_SYMBOL",
        peg$c265 = { type: "literal", value: "BEGIN_SYMBOL", description: "\"BEGIN_SYMBOL\"" },
        peg$c266 = "BETWEEN_SYMBOL",
        peg$c267 = { type: "literal", value: "BETWEEN_SYMBOL", description: "\"BETWEEN_SYMBOL\"" },
        peg$c268 = "BINLOG_SYMBOL",
        peg$c269 = { type: "literal", value: "BINLOG_SYMBOL", description: "\"BINLOG_SYMBOL\"" },
        peg$c270 = "BIT_AND_SYMBOL",
        peg$c271 = { type: "literal", value: "BIT_AND_SYMBOL", description: "\"BIT_AND_SYMBOL\"" },
        peg$c272 = "BIT_OR_SYMBOL",
        peg$c273 = { type: "literal", value: "BIT_OR_SYMBOL", description: "\"BIT_OR_SYMBOL\"" },
        peg$c274 = "BIT_XOR_SYMBOL",
        peg$c275 = { type: "literal", value: "BIT_XOR_SYMBOL", description: "\"BIT_XOR_SYMBOL\"" },
        peg$c276 = "BLOCK_SYMBOL",
        peg$c277 = { type: "literal", value: "BLOCK_SYMBOL", description: "\"BLOCK_SYMBOL\"" },
        peg$c278 = "BOOL_SYMBOL",
        peg$c279 = { type: "literal", value: "BOOL_SYMBOL", description: "\"BOOL_SYMBOL\"" },
        peg$c280 = "BOOLEAN_SYMBOL",
        peg$c281 = { type: "literal", value: "BOOLEAN_SYMBOL", description: "\"BOOLEAN_SYMBOL\"" },
        peg$c282 = "BOTH_SYMBOL",
        peg$c283 = { type: "literal", value: "BOTH_SYMBOL", description: "\"BOTH_SYMBOL\"" },
        peg$c284 = "BTREE_SYMBOL",
        peg$c285 = { type: "literal", value: "BTREE_SYMBOL", description: "\"BTREE_SYMBOL\"" },
        peg$c286 = "BY_SYMBOL",
        peg$c287 = { type: "literal", value: "BY_SYMBOL", description: "\"BY_SYMBOL\"" },
        peg$c288 = "BYTE_SYMBOL",
        peg$c289 = { type: "literal", value: "BYTE_SYMBOL", description: "\"BYTE_SYMBOL\"" },
        peg$c290 = "CACHE_SYMBOL",
        peg$c291 = { type: "literal", value: "CACHE_SYMBOL", description: "\"CACHE_SYMBOL\"" },
        peg$c292 = "CALL_SYMBOL",
        peg$c293 = { type: "literal", value: "CALL_SYMBOL", description: "\"CALL_SYMBOL\"" },
        peg$c294 = "CASCADE_SYMBOL",
        peg$c295 = { type: "literal", value: "CASCADE_SYMBOL", description: "\"CASCADE_SYMBOL\"" },
        peg$c296 = "CASCADED_SYMBOL",
        peg$c297 = { type: "literal", value: "CASCADED_SYMBOL", description: "\"CASCADED_SYMBOL\"" },
        peg$c298 = "CASE_SYMBOL",
        peg$c299 = { type: "literal", value: "CASE_SYMBOL", description: "\"CASE_SYMBOL\"" },
        peg$c300 = "CAST_SYMBOL",
        peg$c301 = { type: "literal", value: "CAST_SYMBOL", description: "\"CAST_SYMBOL\"" },
        peg$c302 = "CATALOG_NAME_SYMBOL",
        peg$c303 = { type: "literal", value: "CATALOG_NAME_SYMBOL", description: "\"CATALOG_NAME_SYMBOL\"" },
        peg$c304 = "CHAIN_SYMBOL",
        peg$c305 = { type: "literal", value: "CHAIN_SYMBOL", description: "\"CHAIN_SYMBOL\"" },
        peg$c306 = "CHANGE_SYMBOL",
        peg$c307 = { type: "literal", value: "CHANGE_SYMBOL", description: "\"CHANGE_SYMBOL\"" },
        peg$c308 = "CHANGED_SYMBOL",
        peg$c309 = { type: "literal", value: "CHANGED_SYMBOL", description: "\"CHANGED_SYMBOL\"" },
        peg$c310 = "CHANNEL_SYMBOL",
        peg$c311 = { type: "literal", value: "CHANNEL_SYMBOL", description: "\"CHANNEL_SYMBOL\"" },
        peg$c312 = "CHARSET_SYMBOL",
        peg$c313 = { type: "literal", value: "CHARSET_SYMBOL", description: "\"CHARSET_SYMBOL\"" },
        peg$c314 = "CHARACTER_SYMBOL",
        peg$c315 = { type: "literal", value: "CHARACTER_SYMBOL", description: "\"CHARACTER_SYMBOL\"" },
        peg$c316 = "CHECK_SYMBOL",
        peg$c317 = { type: "literal", value: "CHECK_SYMBOL", description: "\"CHECK_SYMBOL\"" },
        peg$c318 = "CHECKSUM_SYMBOL",
        peg$c319 = { type: "literal", value: "CHECKSUM_SYMBOL", description: "\"CHECKSUM_SYMBOL\"" },
        peg$c320 = "CIPHER_SYMBOL",
        peg$c321 = { type: "literal", value: "CIPHER_SYMBOL", description: "\"CIPHER_SYMBOL\"" },
        peg$c322 = "CLASS_ORIGIN_SYMBOL",
        peg$c323 = { type: "literal", value: "CLASS_ORIGIN_SYMBOL", description: "\"CLASS_ORIGIN_SYMBOL\"" },
        peg$c324 = "CLIENT_SYMBOL",
        peg$c325 = { type: "literal", value: "CLIENT_SYMBOL", description: "\"CLIENT_SYMBOL\"" },
        peg$c326 = "CLOSE_SYMBOL",
        peg$c327 = { type: "literal", value: "CLOSE_SYMBOL", description: "\"CLOSE_SYMBOL\"" },
        peg$c328 = "COALESCE_SYMBOL",
        peg$c329 = { type: "literal", value: "COALESCE_SYMBOL", description: "\"COALESCE_SYMBOL\"" },
        peg$c330 = "CODE_SYMBOL",
        peg$c331 = { type: "literal", value: "CODE_SYMBOL", description: "\"CODE_SYMBOL\"" },
        peg$c332 = "COLLATE_SYMBOL",
        peg$c333 = { type: "literal", value: "COLLATE_SYMBOL", description: "\"COLLATE_SYMBOL\"" },
        peg$c334 = "COLLATION_SYMBOL",
        peg$c335 = { type: "literal", value: "COLLATION_SYMBOL", description: "\"COLLATION_SYMBOL\"" },
        peg$c336 = "COLUMN_FORMAT_SYMBOL",
        peg$c337 = { type: "literal", value: "COLUMN_FORMAT_SYMBOL", description: "\"COLUMN_FORMAT_SYMBOL\"" },
        peg$c338 = "COLUMN_NAME_SYMBOL",
        peg$c339 = { type: "literal", value: "COLUMN_NAME_SYMBOL", description: "\"COLUMN_NAME_SYMBOL\"" },
        peg$c340 = "COLUMNS_SYMBOL",
        peg$c341 = { type: "literal", value: "COLUMNS_SYMBOL", description: "\"COLUMNS_SYMBOL\"" },
        peg$c342 = "COLUMN_SYMBOL",
        peg$c343 = { type: "literal", value: "COLUMN_SYMBOL", description: "\"COLUMN_SYMBOL\"" },
        peg$c344 = "COMMENT_SYMBOL",
        peg$c345 = { type: "literal", value: "COMMENT_SYMBOL", description: "\"COMMENT_SYMBOL\"" },
        peg$c346 = "COMMITTED_SYMBOL",
        peg$c347 = { type: "literal", value: "COMMITTED_SYMBOL", description: "\"COMMITTED_SYMBOL\"" },
        peg$c348 = "COMMIT_SYMBOL",
        peg$c349 = { type: "literal", value: "COMMIT_SYMBOL", description: "\"COMMIT_SYMBOL\"" },
        peg$c350 = "COMPACT_SYMBOL",
        peg$c351 = { type: "literal", value: "COMPACT_SYMBOL", description: "\"COMPACT_SYMBOL\"" },
        peg$c352 = "COMPLETION_SYMBOL",
        peg$c353 = { type: "literal", value: "COMPLETION_SYMBOL", description: "\"COMPLETION_SYMBOL\"" },
        peg$c354 = "COMPRESSED_SYMBOL",
        peg$c355 = { type: "literal", value: "COMPRESSED_SYMBOL", description: "\"COMPRESSED_SYMBOL\"" },
        peg$c356 = "COMPRESSION_SYMBOL",
        peg$c357 = { type: "literal", value: "COMPRESSION_SYMBOL", description: "\"COMPRESSION_SYMBOL\"" },
        peg$c358 = "CONCURRENT_SYMBOL",
        peg$c359 = { type: "literal", value: "CONCURRENT_SYMBOL", description: "\"CONCURRENT_SYMBOL\"" },
        peg$c360 = "CONDITION_SYMBOL",
        peg$c361 = { type: "literal", value: "CONDITION_SYMBOL", description: "\"CONDITION_SYMBOL\"" },
        peg$c362 = "CONNECTION_SYMBOL",
        peg$c363 = { type: "literal", value: "CONNECTION_SYMBOL", description: "\"CONNECTION_SYMBOL\"" },
        peg$c364 = "CONSISTENT_SYMBOL",
        peg$c365 = { type: "literal", value: "CONSISTENT_SYMBOL", description: "\"CONSISTENT_SYMBOL\"" },
        peg$c366 = "CONSTRAINT_SYMBOL",
        peg$c367 = { type: "literal", value: "CONSTRAINT_SYMBOL", description: "\"CONSTRAINT_SYMBOL\"" },
        peg$c368 = "CONSTRAINTS_SYMBOL",
        peg$c369 = { type: "literal", value: "CONSTRAINTS_SYMBOL", description: "\"CONSTRAINTS_SYMBOL\"" },
        peg$c370 = "OVER_SYMBOL",
        peg$c371 = { type: "literal", value: "OVER_SYMBOL", description: "\"OVER_SYMBOL\"" },
        peg$c372 = "REPLICA_SYMBOL",
        peg$c373 = { type: "literal", value: "REPLICA_SYMBOL", description: "\"REPLICA_SYMBOL\"" },
        peg$c374 = "CONSTRAINT_CATALOG_SYMBOL",
        peg$c375 = { type: "literal", value: "CONSTRAINT_CATALOG_SYMBOL", description: "\"CONSTRAINT_CATALOG_SYMBOL\"" },
        peg$c376 = "CONSTRAINT_NAME_SYMBOL",
        peg$c377 = { type: "literal", value: "CONSTRAINT_NAME_SYMBOL", description: "\"CONSTRAINT_NAME_SYMBOL\"" },
        peg$c378 = "CONSTRAINT_SCHEMA_SYMBOL",
        peg$c379 = { type: "literal", value: "CONSTRAINT_SCHEMA_SYMBOL", description: "\"CONSTRAINT_SCHEMA_SYMBOL\"" },
        peg$c380 = "CONTAINS_SYMBOL",
        peg$c381 = { type: "literal", value: "CONTAINS_SYMBOL", description: "\"CONTAINS_SYMBOL\"" },
        peg$c382 = "CONTEXT_SYMBOL",
        peg$c383 = { type: "literal", value: "CONTEXT_SYMBOL", description: "\"CONTEXT_SYMBOL\"" },
        peg$c384 = "CONTINUE_SYMBOL",
        peg$c385 = { type: "literal", value: "CONTINUE_SYMBOL", description: "\"CONTINUE_SYMBOL\"" },
        peg$c386 = "CONTRIBUTORS_SYMBOL",
        peg$c387 = { type: "literal", value: "CONTRIBUTORS_SYMBOL", description: "\"CONTRIBUTORS_SYMBOL\"" },
        peg$c388 = "CONVERT_SYMBOL",
        peg$c389 = { type: "literal", value: "CONVERT_SYMBOL", description: "\"CONVERT_SYMBOL\"" },
        peg$c390 = "COUNT_SYMBOL",
        peg$c391 = { type: "literal", value: "COUNT_SYMBOL", description: "\"COUNT_SYMBOL\"" },
        peg$c392 = "CPU_SYMBOL",
        peg$c393 = { type: "literal", value: "CPU_SYMBOL", description: "\"CPU_SYMBOL\"" },
        peg$c394 = "CREATE_SYMBOL",
        peg$c395 = { type: "literal", value: "CREATE_SYMBOL", description: "\"CREATE_SYMBOL\"" },
        peg$c396 = "CROSS_SYMBOL",
        peg$c397 = { type: "literal", value: "CROSS_SYMBOL", description: "\"CROSS_SYMBOL\"" },
        peg$c398 = "CUBE_SYMBOL",
        peg$c399 = { type: "literal", value: "CUBE_SYMBOL", description: "\"CUBE_SYMBOL\"" },
        peg$c400 = "CURDATE_SYMBOL",
        peg$c401 = { type: "literal", value: "CURDATE_SYMBOL", description: "\"CURDATE_SYMBOL\"" },
        peg$c402 = "CURRENT_DATE_SYMBOL",
        peg$c403 = { type: "literal", value: "CURRENT_DATE_SYMBOL", description: "\"CURRENT_DATE_SYMBOL\"" },
        peg$c404 = "CURRENT_TIME_SYMBOL",
        peg$c405 = { type: "literal", value: "CURRENT_TIME_SYMBOL", description: "\"CURRENT_TIME_SYMBOL\"" },
        peg$c406 = "CURRENT_TIMESTAMP_SYMBOL",
        peg$c407 = { type: "literal", value: "CURRENT_TIMESTAMP_SYMBOL", description: "\"CURRENT_TIMESTAMP_SYMBOL\"" },
        peg$c408 = "CURRENT_USER_SYMBOL",
        peg$c409 = { type: "literal", value: "CURRENT_USER_SYMBOL", description: "\"CURRENT_USER_SYMBOL\"" },
        peg$c410 = "CURRENT_SYMBOL",
        peg$c411 = { type: "literal", value: "CURRENT_SYMBOL", description: "\"CURRENT_SYMBOL\"" },
        peg$c412 = "CURSOR_SYMBOL",
        peg$c413 = { type: "literal", value: "CURSOR_SYMBOL", description: "\"CURSOR_SYMBOL\"" },
        peg$c414 = "CURSOR_NAME_SYMBOL",
        peg$c415 = { type: "literal", value: "CURSOR_NAME_SYMBOL", description: "\"CURSOR_NAME_SYMBOL\"" },
        peg$c416 = "CURTIME_SYMBOL",
        peg$c417 = { type: "literal", value: "CURTIME_SYMBOL", description: "\"CURTIME_SYMBOL\"" },
        peg$c418 = "DATABASE_SYMBOL",
        peg$c419 = { type: "literal", value: "DATABASE_SYMBOL", description: "\"DATABASE_SYMBOL\"" },
        peg$c420 = "DATABASES_SYMBOL",
        peg$c421 = { type: "literal", value: "DATABASES_SYMBOL", description: "\"DATABASES_SYMBOL\"" },
        peg$c422 = "DATAFILE_SYMBOL",
        peg$c423 = { type: "literal", value: "DATAFILE_SYMBOL", description: "\"DATAFILE_SYMBOL\"" },
        peg$c424 = "DATA_SYMBOL",
        peg$c425 = { type: "literal", value: "DATA_SYMBOL", description: "\"DATA_SYMBOL\"" },
        peg$c426 = "DATE_ADD_SYMBOL",
        peg$c427 = { type: "literal", value: "DATE_ADD_SYMBOL", description: "\"DATE_ADD_SYMBOL\"" },
        peg$c428 = "DATE_SUB_SYMBOL",
        peg$c429 = { type: "literal", value: "DATE_SUB_SYMBOL", description: "\"DATE_SUB_SYMBOL\"" },
        peg$c430 = "DAY_HOUR_SYMBOL",
        peg$c431 = { type: "literal", value: "DAY_HOUR_SYMBOL", description: "\"DAY_HOUR_SYMBOL\"" },
        peg$c432 = "DAY_MICROSECOND_SYMBOL",
        peg$c433 = { type: "literal", value: "DAY_MICROSECOND_SYMBOL", description: "\"DAY_MICROSECOND_SYMBOL\"" },
        peg$c434 = "DAY_MINUTE_SYMBOL",
        peg$c435 = { type: "literal", value: "DAY_MINUTE_SYMBOL", description: "\"DAY_MINUTE_SYMBOL\"" },
        peg$c436 = "DAY_SECOND_SYMBOL",
        peg$c437 = { type: "literal", value: "DAY_SECOND_SYMBOL", description: "\"DAY_SECOND_SYMBOL\"" },
        peg$c438 = "DAY_SYMBOL",
        peg$c439 = { type: "literal", value: "DAY_SYMBOL", description: "\"DAY_SYMBOL\"" },
        peg$c440 = "DAYOFMONTH_SYMBOL",
        peg$c441 = { type: "literal", value: "DAYOFMONTH_SYMBOL", description: "\"DAYOFMONTH_SYMBOL\"" },
        peg$c442 = "DEALLOCATE_SYMBOL",
        peg$c443 = { type: "literal", value: "DEALLOCATE_SYMBOL", description: "\"DEALLOCATE_SYMBOL\"" },
        peg$c444 = "DEC_SYMBOL",
        peg$c445 = { type: "literal", value: "DEC_SYMBOL", description: "\"DEC_SYMBOL\"" },
        peg$c446 = "DECLARE_SYMBOL",
        peg$c447 = { type: "literal", value: "DECLARE_SYMBOL", description: "\"DECLARE_SYMBOL\"" },
        peg$c448 = "DEFAULT_SYMBOL",
        peg$c449 = { type: "literal", value: "DEFAULT_SYMBOL", description: "\"DEFAULT_SYMBOL\"" },
        peg$c450 = "DEFAULT_AUTH_SYMBOL",
        peg$c451 = { type: "literal", value: "DEFAULT_AUTH_SYMBOL", description: "\"DEFAULT_AUTH_SYMBOL\"" },
        peg$c452 = "DEFINER_SYMBOL",
        peg$c453 = { type: "literal", value: "DEFINER_SYMBOL", description: "\"DEFINER_SYMBOL\"" },
        peg$c454 = "DELAYED_SYMBOL",
        peg$c455 = { type: "literal", value: "DELAYED_SYMBOL", description: "\"DELAYED_SYMBOL\"" },
        peg$c456 = "DELAY_KEY_WRITE_SYMBOL",
        peg$c457 = { type: "literal", value: "DELAY_KEY_WRITE_SYMBOL", description: "\"DELAY_KEY_WRITE_SYMBOL\"" },
        peg$c458 = "DELETE_SYMBOL",
        peg$c459 = { type: "literal", value: "DELETE_SYMBOL", description: "\"DELETE_SYMBOL\"" },
        peg$c460 = "DESC_SYMBOL",
        peg$c461 = { type: "literal", value: "DESC_SYMBOL", description: "\"DESC_SYMBOL\"" },
        peg$c462 = "DESCRIBE_SYMBOL",
        peg$c463 = { type: "literal", value: "DESCRIBE_SYMBOL", description: "\"DESCRIBE_SYMBOL\"" },
        peg$c464 = "DES_KEY_FILE_SYMBOL",
        peg$c465 = { type: "literal", value: "DES_KEY_FILE_SYMBOL", description: "\"DES_KEY_FILE_SYMBOL\"" },
        peg$c466 = "DETERMINISTIC_SYMBOL",
        peg$c467 = { type: "literal", value: "DETERMINISTIC_SYMBOL", description: "\"DETERMINISTIC_SYMBOL\"" },
        peg$c468 = "DIAGNOSTICS_SYMBOL",
        peg$c469 = { type: "literal", value: "DIAGNOSTICS_SYMBOL", description: "\"DIAGNOSTICS_SYMBOL\"" },
        peg$c470 = "DIRECTORY_SYMBOL",
        peg$c471 = { type: "literal", value: "DIRECTORY_SYMBOL", description: "\"DIRECTORY_SYMBOL\"" },
        peg$c472 = "DISABLE_SYMBOL",
        peg$c473 = { type: "literal", value: "DISABLE_SYMBOL", description: "\"DISABLE_SYMBOL\"" },
        peg$c474 = "DISCARD_SYMBOL",
        peg$c475 = { type: "literal", value: "DISCARD_SYMBOL", description: "\"DISCARD_SYMBOL\"" },
        peg$c476 = "DISK_SYMBOL",
        peg$c477 = { type: "literal", value: "DISK_SYMBOL", description: "\"DISK_SYMBOL\"" },
        peg$c478 = "DISTINCT_SYMBOL",
        peg$c479 = { type: "literal", value: "DISTINCT_SYMBOL", description: "\"DISTINCT_SYMBOL\"" },
        peg$c480 = "DISTINCTROW_SYMBOL",
        peg$c481 = { type: "literal", value: "DISTINCTROW_SYMBOL", description: "\"DISTINCTROW_SYMBOL\"" },
        peg$c482 = "DIV_SYMBOL",
        peg$c483 = { type: "literal", value: "DIV_SYMBOL", description: "\"DIV_SYMBOL\"" },
        peg$c484 = "DO_SYMBOL",
        peg$c485 = { type: "literal", value: "DO_SYMBOL", description: "\"DO_SYMBOL\"" },
        peg$c486 = "DROP_SYMBOL",
        peg$c487 = { type: "literal", value: "DROP_SYMBOL", description: "\"DROP_SYMBOL\"" },
        peg$c488 = "DUAL_SYMBOL",
        peg$c489 = { type: "literal", value: "DUAL_SYMBOL", description: "\"DUAL_SYMBOL\"" },
        peg$c490 = "DUMPFILE_SYMBOL",
        peg$c491 = { type: "literal", value: "DUMPFILE_SYMBOL", description: "\"DUMPFILE_SYMBOL\"" },
        peg$c492 = "DUPLICATE_SYMBOL",
        peg$c493 = { type: "literal", value: "DUPLICATE_SYMBOL", description: "\"DUPLICATE_SYMBOL\"" },
        peg$c494 = "DYNAMIC_SYMBOL",
        peg$c495 = { type: "literal", value: "DYNAMIC_SYMBOL", description: "\"DYNAMIC_SYMBOL\"" },
        peg$c496 = "EACH_SYMBOL",
        peg$c497 = { type: "literal", value: "EACH_SYMBOL", description: "\"EACH_SYMBOL\"" },
        peg$c498 = "ELSE_SYMBOL",
        peg$c499 = { type: "literal", value: "ELSE_SYMBOL", description: "\"ELSE_SYMBOL\"" },
        peg$c500 = "ELSEIF_SYMBOL",
        peg$c501 = { type: "literal", value: "ELSEIF_SYMBOL", description: "\"ELSEIF_SYMBOL\"" },
        peg$c502 = "EMPTY_SYMBOL",
        peg$c503 = { type: "literal", value: "EMPTY_SYMBOL", description: "\"EMPTY_SYMBOL\"" },
        peg$c504 = "ENABLE_SYMBOL",
        peg$c505 = { type: "literal", value: "ENABLE_SYMBOL", description: "\"ENABLE_SYMBOL\"" },
        peg$c506 = "ENCLOSED_SYMBOL",
        peg$c507 = { type: "literal", value: "ENCLOSED_SYMBOL", description: "\"ENCLOSED_SYMBOL\"" },
        peg$c508 = "ENCRYPTION_SYMBOL",
        peg$c509 = { type: "literal", value: "ENCRYPTION_SYMBOL", description: "\"ENCRYPTION_SYMBOL\"" },
        peg$c510 = "END_SYMBOL",
        peg$c511 = { type: "literal", value: "END_SYMBOL", description: "\"END_SYMBOL\"" },
        peg$c512 = "ENDS_SYMBOL",
        peg$c513 = { type: "literal", value: "ENDS_SYMBOL", description: "\"ENDS_SYMBOL\"" },
        peg$c514 = "ENFORCED_SYMBOL",
        peg$c515 = { type: "literal", value: "ENFORCED_SYMBOL", description: "\"ENFORCED_SYMBOL\"" },
        peg$c516 = "ENGINES_SYMBOL",
        peg$c517 = { type: "literal", value: "ENGINES_SYMBOL", description: "\"ENGINES_SYMBOL\"" },
        peg$c518 = "ENGINE_SYMBOL",
        peg$c519 = { type: "literal", value: "ENGINE_SYMBOL", description: "\"ENGINE_SYMBOL\"" },
        peg$c520 = "ERROR_SYMBOL",
        peg$c521 = { type: "literal", value: "ERROR_SYMBOL", description: "\"ERROR_SYMBOL\"" },
        peg$c522 = "ERRORS_SYMBOL",
        peg$c523 = { type: "literal", value: "ERRORS_SYMBOL", description: "\"ERRORS_SYMBOL\"" },
        peg$c524 = "ESCAPED_SYMBOL",
        peg$c525 = { type: "literal", value: "ESCAPED_SYMBOL", description: "\"ESCAPED_SYMBOL\"" },
        peg$c526 = "ESCAPE_SYMBOL",
        peg$c527 = { type: "literal", value: "ESCAPE_SYMBOL", description: "\"ESCAPE_SYMBOL\"" },
        peg$c528 = "EVENT_SYMBOL",
        peg$c529 = { type: "literal", value: "EVENT_SYMBOL", description: "\"EVENT_SYMBOL\"" },
        peg$c530 = "EVENTS_SYMBOL",
        peg$c531 = { type: "literal", value: "EVENTS_SYMBOL", description: "\"EVENTS_SYMBOL\"" },
        peg$c532 = "EVERY_SYMBOL",
        peg$c533 = { type: "literal", value: "EVERY_SYMBOL", description: "\"EVERY_SYMBOL\"" },
        peg$c534 = "EXCHANGE_SYMBOL",
        peg$c535 = { type: "literal", value: "EXCHANGE_SYMBOL", description: "\"EXCHANGE_SYMBOL\"" },
        peg$c536 = "EXCEPT_SYMBOL",
        peg$c537 = { type: "literal", value: "EXCEPT_SYMBOL", description: "\"EXCEPT_SYMBOL\"" },
        peg$c538 = "EXECUTE_SYMBOL",
        peg$c539 = { type: "literal", value: "EXECUTE_SYMBOL", description: "\"EXECUTE_SYMBOL\"" },
        peg$c540 = "EXISTS_SYMBOL",
        peg$c541 = { type: "literal", value: "EXISTS_SYMBOL", description: "\"EXISTS_SYMBOL\"" },
        peg$c542 = "EXIT_SYMBOL",
        peg$c543 = { type: "literal", value: "EXIT_SYMBOL", description: "\"EXIT_SYMBOL\"" },
        peg$c544 = "EXPANSION_SYMBOL",
        peg$c545 = { type: "literal", value: "EXPANSION_SYMBOL", description: "\"EXPANSION_SYMBOL\"" },
        peg$c546 = "EXPIRE_SYMBOL",
        peg$c547 = { type: "literal", value: "EXPIRE_SYMBOL", description: "\"EXPIRE_SYMBOL\"" },
        peg$c548 = "EXPLAIN_SYMBOL",
        peg$c549 = { type: "literal", value: "EXPLAIN_SYMBOL", description: "\"EXPLAIN_SYMBOL\"" },
        peg$c550 = "EXPORT_SYMBOL",
        peg$c551 = { type: "literal", value: "EXPORT_SYMBOL", description: "\"EXPORT_SYMBOL\"" },
        peg$c552 = "EXTENDED_SYMBOL",
        peg$c553 = { type: "literal", value: "EXTENDED_SYMBOL", description: "\"EXTENDED_SYMBOL\"" },
        peg$c554 = "EXTENT_SIZE_SYMBOL",
        peg$c555 = { type: "literal", value: "EXTENT_SIZE_SYMBOL", description: "\"EXTENT_SIZE_SYMBOL\"" },
        peg$c556 = "EXTRACT_SYMBOL",
        peg$c557 = { type: "literal", value: "EXTRACT_SYMBOL", description: "\"EXTRACT_SYMBOL\"" },
        peg$c558 = "FALSE_SYMBOL",
        peg$c559 = { type: "literal", value: "FALSE_SYMBOL", description: "\"FALSE_SYMBOL\"" },
        peg$c560 = "FAST_SYMBOL",
        peg$c561 = { type: "literal", value: "FAST_SYMBOL", description: "\"FAST_SYMBOL\"" },
        peg$c562 = "FAULTS_SYMBOL",
        peg$c563 = { type: "literal", value: "FAULTS_SYMBOL", description: "\"FAULTS_SYMBOL\"" },
        peg$c564 = "FETCH_SYMBOL",
        peg$c565 = { type: "literal", value: "FETCH_SYMBOL", description: "\"FETCH_SYMBOL\"" },
        peg$c566 = "FIELDS_SYMBOL",
        peg$c567 = { type: "literal", value: "FIELDS_SYMBOL", description: "\"FIELDS_SYMBOL\"" },
        peg$c568 = "FILE_BLOCK_SIZE_SYMBOL",
        peg$c569 = { type: "literal", value: "FILE_BLOCK_SIZE_SYMBOL", description: "\"FILE_BLOCK_SIZE_SYMBOL\"" },
        peg$c570 = "FILE_SYMBOL",
        peg$c571 = { type: "literal", value: "FILE_SYMBOL", description: "\"FILE_SYMBOL\"" },
        peg$c572 = "FILTER_SYMBOL",
        peg$c573 = { type: "literal", value: "FILTER_SYMBOL", description: "\"FILTER_SYMBOL\"" },
        peg$c574 = "FIRST_SYMBOL",
        peg$c575 = { type: "literal", value: "FIRST_SYMBOL", description: "\"FIRST_SYMBOL\"" },
        peg$c576 = "FIRST_VALUE_SYMBOL",
        peg$c577 = { type: "literal", value: "FIRST_VALUE_SYMBOL", description: "\"FIRST_VALUE_SYMBOL\"" },
        peg$c578 = "FIXED_SYMBOL",
        peg$c579 = { type: "literal", value: "FIXED_SYMBOL", description: "\"FIXED_SYMBOL\"" },
        peg$c580 = "FLOAT4_SYMBOL",
        peg$c581 = { type: "literal", value: "FLOAT4_SYMBOL", description: "\"FLOAT4_SYMBOL\"" },
        peg$c582 = "FLOAT8_SYMBOL",
        peg$c583 = { type: "literal", value: "FLOAT8_SYMBOL", description: "\"FLOAT8_SYMBOL\"" },
        peg$c584 = "FLUSH_SYMBOL",
        peg$c585 = { type: "literal", value: "FLUSH_SYMBOL", description: "\"FLUSH_SYMBOL\"" },
        peg$c586 = "FOLLOWS_SYMBOL",
        peg$c587 = { type: "literal", value: "FOLLOWS_SYMBOL", description: "\"FOLLOWS_SYMBOL\"" },
        peg$c588 = "FORCE_SYMBOL",
        peg$c589 = { type: "literal", value: "FORCE_SYMBOL", description: "\"FORCE_SYMBOL\"" },
        peg$c590 = "FOREIGN_SYMBOL",
        peg$c591 = { type: "literal", value: "FOREIGN_SYMBOL", description: "\"FOREIGN_SYMBOL\"" },
        peg$c592 = "FOR_SYMBOL",
        peg$c593 = { type: "literal", value: "FOR_SYMBOL", description: "\"FOR_SYMBOL\"" },
        peg$c594 = "FORMAT_SYMBOL",
        peg$c595 = { type: "literal", value: "FORMAT_SYMBOL", description: "\"FORMAT_SYMBOL\"" },
        peg$c596 = "FOUND_SYMBOL",
        peg$c597 = { type: "literal", value: "FOUND_SYMBOL", description: "\"FOUND_SYMBOL\"" },
        peg$c598 = "FROM_SYMBOL",
        peg$c599 = { type: "literal", value: "FROM_SYMBOL", description: "\"FROM_SYMBOL\"" },
        peg$c600 = "FULLTEXT_SYMBOL",
        peg$c601 = { type: "literal", value: "FULLTEXT_SYMBOL", description: "\"FULLTEXT_SYMBOL\"" },
        peg$c602 = "FULL_SYMBOL",
        peg$c603 = { type: "literal", value: "FULL_SYMBOL", description: "\"FULL_SYMBOL\"" },
        peg$c604 = "FUNCTION_SYMBOL",
        peg$c605 = { type: "literal", value: "FUNCTION_SYMBOL", description: "\"FUNCTION_SYMBOL\"" },
        peg$c606 = "GENERATED_SYMBOL",
        peg$c607 = { type: "literal", value: "GENERATED_SYMBOL", description: "\"GENERATED_SYMBOL\"" },
        peg$c608 = "GENERAL_SYMBOL",
        peg$c609 = { type: "literal", value: "GENERAL_SYMBOL", description: "\"GENERAL_SYMBOL\"" },
        peg$c610 = "GET_FORMAT_SYMBOL",
        peg$c611 = { type: "literal", value: "GET_FORMAT_SYMBOL", description: "\"GET_FORMAT_SYMBOL\"" },
        peg$c612 = "GET_MASTER_PUBLIC_KEY_SYMBOL",
        peg$c613 = { type: "literal", value: "GET_MASTER_PUBLIC_KEY_SYMBOL", description: "\"GET_MASTER_PUBLIC_KEY_SYMBOL\"" },
        peg$c614 = "GLOBAL_SYMBOL",
        peg$c615 = { type: "literal", value: "GLOBAL_SYMBOL", description: "\"GLOBAL_SYMBOL\"" },
        peg$c616 = "GRANT_SYMBOL",
        peg$c617 = { type: "literal", value: "GRANT_SYMBOL", description: "\"GRANT_SYMBOL\"" },
        peg$c618 = "GRANTS_SYMBOL",
        peg$c619 = { type: "literal", value: "GRANTS_SYMBOL", description: "\"GRANTS_SYMBOL\"" },
        peg$c620 = "GROUP_CONCAT_SYMBOL",
        peg$c621 = { type: "literal", value: "GROUP_CONCAT_SYMBOL", description: "\"GROUP_CONCAT_SYMBOL\"" },
        peg$c622 = "GROUP_REPLICATION_SYMBOL",
        peg$c623 = { type: "literal", value: "GROUP_REPLICATION_SYMBOL", description: "\"GROUP_REPLICATION_SYMBOL\"" },
        peg$c624 = "GROUP_SYMBOL",
        peg$c625 = { type: "literal", value: "GROUP_SYMBOL", description: "\"GROUP_SYMBOL\"" },
        peg$c626 = "HANDLER_SYMBOL",
        peg$c627 = { type: "literal", value: "HANDLER_SYMBOL", description: "\"HANDLER_SYMBOL\"" },
        peg$c628 = "HASH_SYMBOL",
        peg$c629 = { type: "literal", value: "HASH_SYMBOL", description: "\"HASH_SYMBOL\"" },
        peg$c630 = "HAVING_SYMBOL",
        peg$c631 = { type: "literal", value: "HAVING_SYMBOL", description: "\"HAVING_SYMBOL\"" },
        peg$c632 = "HELP_SYMBOL",
        peg$c633 = { type: "literal", value: "HELP_SYMBOL", description: "\"HELP_SYMBOL\"" },
        peg$c634 = "HIGH_PRIORITY_SYMBOL",
        peg$c635 = { type: "literal", value: "HIGH_PRIORITY_SYMBOL", description: "\"HIGH_PRIORITY_SYMBOL\"" },
        peg$c636 = "HISTOGRAM_SYMBOL",
        peg$c637 = { type: "literal", value: "HISTOGRAM_SYMBOL", description: "\"HISTOGRAM_SYMBOL\"" },
        peg$c638 = "HISTORY_SYMBOL",
        peg$c639 = { type: "literal", value: "HISTORY_SYMBOL", description: "\"HISTORY_SYMBOL\"" },
        peg$c640 = "HOST_SYMBOL",
        peg$c641 = { type: "literal", value: "HOST_SYMBOL", description: "\"HOST_SYMBOL\"" },
        peg$c642 = "HOSTS_SYMBOL",
        peg$c643 = { type: "literal", value: "HOSTS_SYMBOL", description: "\"HOSTS_SYMBOL\"" },
        peg$c644 = "HOUR_MICROSECOND_SYMBOL",
        peg$c645 = { type: "literal", value: "HOUR_MICROSECOND_SYMBOL", description: "\"HOUR_MICROSECOND_SYMBOL\"" },
        peg$c646 = "HOUR_MINUTE_SYMBOL",
        peg$c647 = { type: "literal", value: "HOUR_MINUTE_SYMBOL", description: "\"HOUR_MINUTE_SYMBOL\"" },
        peg$c648 = "HOUR_SECOND_SYMBOL",
        peg$c649 = { type: "literal", value: "HOUR_SECOND_SYMBOL", description: "\"HOUR_SECOND_SYMBOL\"" },
        peg$c650 = "HOUR_SYMBOL",
        peg$c651 = { type: "literal", value: "HOUR_SYMBOL", description: "\"HOUR_SYMBOL\"" },
        peg$c652 = "IDENTIFIED_SYMBOL",
        peg$c653 = { type: "literal", value: "IDENTIFIED_SYMBOL", description: "\"IDENTIFIED_SYMBOL\"" },
        peg$c654 = "IF_SYMBOL",
        peg$c655 = { type: "literal", value: "IF_SYMBOL", description: "\"IF_SYMBOL\"" },
        peg$c656 = "IGNORE_SYMBOL",
        peg$c657 = { type: "literal", value: "IGNORE_SYMBOL", description: "\"IGNORE_SYMBOL\"" },
        peg$c658 = "IGNORE_SERVER_IDS_SYMBOL",
        peg$c659 = { type: "literal", value: "IGNORE_SERVER_IDS_SYMBOL", description: "\"IGNORE_SERVER_IDS_SYMBOL\"" },
        peg$c660 = "IMPORT_SYMBOL",
        peg$c661 = { type: "literal", value: "IMPORT_SYMBOL", description: "\"IMPORT_SYMBOL\"" },
        peg$c662 = "IN_SYMBOL",
        peg$c663 = { type: "literal", value: "IN_SYMBOL", description: "\"IN_SYMBOL\"" },
        peg$c664 = "INDEXES_SYMBOL",
        peg$c665 = { type: "literal", value: "INDEXES_SYMBOL", description: "\"INDEXES_SYMBOL\"" },
        peg$c666 = "INDEX_SYMBOL",
        peg$c667 = { type: "literal", value: "INDEX_SYMBOL", description: "\"INDEX_SYMBOL\"" },
        peg$c668 = "INFILE_SYMBOL",
        peg$c669 = { type: "literal", value: "INFILE_SYMBOL", description: "\"INFILE_SYMBOL\"" },
        peg$c670 = "INITIAL_SIZE_SYMBOL",
        peg$c671 = { type: "literal", value: "INITIAL_SIZE_SYMBOL", description: "\"INITIAL_SIZE_SYMBOL\"" },
        peg$c672 = "INNER_SYMBOL",
        peg$c673 = { type: "literal", value: "INNER_SYMBOL", description: "\"INNER_SYMBOL\"" },
        peg$c674 = "INOUT_SYMBOL",
        peg$c675 = { type: "literal", value: "INOUT_SYMBOL", description: "\"INOUT_SYMBOL\"" },
        peg$c676 = "INSENSITIVE_SYMBOL",
        peg$c677 = { type: "literal", value: "INSENSITIVE_SYMBOL", description: "\"INSENSITIVE_SYMBOL\"" },
        peg$c678 = "INSERT_SYMBOL",
        peg$c679 = { type: "literal", value: "INSERT_SYMBOL", description: "\"INSERT_SYMBOL\"" },
        peg$c680 = "INSERT_METHOD_SYMBOL",
        peg$c681 = { type: "literal", value: "INSERT_METHOD_SYMBOL", description: "\"INSERT_METHOD_SYMBOL\"" },
        peg$c682 = "INSTANCE_SYMBOL",
        peg$c683 = { type: "literal", value: "INSTANCE_SYMBOL", description: "\"INSTANCE_SYMBOL\"" },
        peg$c684 = "INSTALL_SYMBOL",
        peg$c685 = { type: "literal", value: "INSTALL_SYMBOL", description: "\"INSTALL_SYMBOL\"" },
        peg$c686 = "INTEGER_SYMBOL",
        peg$c687 = { type: "literal", value: "INTEGER_SYMBOL", description: "\"INTEGER_SYMBOL\"" },
        peg$c688 = "INTERVAL_SYMBOL",
        peg$c689 = { type: "literal", value: "INTERVAL_SYMBOL", description: "\"INTERVAL_SYMBOL\"" },
        peg$c690 = "INTO_SYMBOL",
        peg$c691 = { type: "literal", value: "INTO_SYMBOL", description: "\"INTO_SYMBOL\"" },
        peg$c692 = "INVISIBLE_SYMBOL",
        peg$c693 = { type: "literal", value: "INVISIBLE_SYMBOL", description: "\"INVISIBLE_SYMBOL\"" },
        peg$c694 = "INVOKER_SYMBOL",
        peg$c695 = { type: "literal", value: "INVOKER_SYMBOL", description: "\"INVOKER_SYMBOL\"" },
        peg$c696 = "IO_SYMBOL",
        peg$c697 = { type: "literal", value: "IO_SYMBOL", description: "\"IO_SYMBOL\"" },
        peg$c698 = "IPC_SYMBOL",
        peg$c699 = { type: "literal", value: "IPC_SYMBOL", description: "\"IPC_SYMBOL\"" },
        peg$c700 = "IS_SYMBOL",
        peg$c701 = { type: "literal", value: "IS_SYMBOL", description: "\"IS_SYMBOL\"" },
        peg$c702 = "ISOLATION_SYMBOL",
        peg$c703 = { type: "literal", value: "ISOLATION_SYMBOL", description: "\"ISOLATION_SYMBOL\"" },
        peg$c704 = "ISSUER_SYMBOL",
        peg$c705 = { type: "literal", value: "ISSUER_SYMBOL", description: "\"ISSUER_SYMBOL\"" },
        peg$c706 = "ITERATE_SYMBOL",
        peg$c707 = { type: "literal", value: "ITERATE_SYMBOL", description: "\"ITERATE_SYMBOL\"" },
        peg$c708 = "JOIN_SYMBOL",
        peg$c709 = { type: "literal", value: "JOIN_SYMBOL", description: "\"JOIN_SYMBOL\"" },
        peg$c710 = "JSON_TABLE_SYMBOL",
        peg$c711 = { type: "literal", value: "JSON_TABLE_SYMBOL", description: "\"JSON_TABLE_SYMBOL\"" },
        peg$c712 = "JSON_ARRAYAGG_SYMBOL",
        peg$c713 = { type: "literal", value: "JSON_ARRAYAGG_SYMBOL", description: "\"JSON_ARRAYAGG_SYMBOL\"" },
        peg$c714 = "JSON_OBJECTAGG_SYMBOL",
        peg$c715 = { type: "literal", value: "JSON_OBJECTAGG_SYMBOL", description: "\"JSON_OBJECTAGG_SYMBOL\"" },
        peg$c716 = "KEYS_SYMBOL",
        peg$c717 = { type: "literal", value: "KEYS_SYMBOL", description: "\"KEYS_SYMBOL\"" },
        peg$c718 = "KEY_BLOCK_SIZE_SYMBOL",
        peg$c719 = { type: "literal", value: "KEY_BLOCK_SIZE_SYMBOL", description: "\"KEY_BLOCK_SIZE_SYMBOL\"" },
        peg$c720 = "KEY_SYMBOL",
        peg$c721 = { type: "literal", value: "KEY_SYMBOL", description: "\"KEY_SYMBOL\"" },
        peg$c722 = "KILL_SYMBOL",
        peg$c723 = { type: "literal", value: "KILL_SYMBOL", description: "\"KILL_SYMBOL\"" },
        peg$c724 = "LANGUAGE_SYMBOL",
        peg$c725 = { type: "literal", value: "LANGUAGE_SYMBOL", description: "\"LANGUAGE_SYMBOL\"" },
        peg$c726 = "LAST_SYMBOL",
        peg$c727 = { type: "literal", value: "LAST_SYMBOL", description: "\"LAST_SYMBOL\"" },
        peg$c728 = "LAST_VALUE_SYMBOL",
        peg$c729 = { type: "literal", value: "LAST_VALUE_SYMBOL", description: "\"LAST_VALUE_SYMBOL\"" },
        peg$c730 = "LATERAL_SYMBOL",
        peg$c731 = { type: "literal", value: "LATERAL_SYMBOL", description: "\"LATERAL_SYMBOL\"" },
        peg$c732 = "LEAD_SYMBOL",
        peg$c733 = { type: "literal", value: "LEAD_SYMBOL", description: "\"LEAD_SYMBOL\"" },
        peg$c734 = "LEADING_SYMBOL",
        peg$c735 = { type: "literal", value: "LEADING_SYMBOL", description: "\"LEADING_SYMBOL\"" },
        peg$c736 = "LEAVE_SYMBOL",
        peg$c737 = { type: "literal", value: "LEAVE_SYMBOL", description: "\"LEAVE_SYMBOL\"" },
        peg$c738 = "LEAVES_SYMBOL",
        peg$c739 = { type: "literal", value: "LEAVES_SYMBOL", description: "\"LEAVES_SYMBOL\"" },
        peg$c740 = "LEFT_SYMBOL",
        peg$c741 = { type: "literal", value: "LEFT_SYMBOL", description: "\"LEFT_SYMBOL\"" },
        peg$c742 = "LESS_SYMBOL",
        peg$c743 = { type: "literal", value: "LESS_SYMBOL", description: "\"LESS_SYMBOL\"" },
        peg$c744 = "LEVEL_SYMBOL",
        peg$c745 = { type: "literal", value: "LEVEL_SYMBOL", description: "\"LEVEL_SYMBOL\"" },
        peg$c746 = "LIKE_SYMBOL",
        peg$c747 = { type: "literal", value: "LIKE_SYMBOL", description: "\"LIKE_SYMBOL\"" },
        peg$c748 = "LIMIT_SYMBOL",
        peg$c749 = { type: "literal", value: "LIMIT_SYMBOL", description: "\"LIMIT_SYMBOL\"" },
        peg$c750 = "LINEAR_SYMBOL",
        peg$c751 = { type: "literal", value: "LINEAR_SYMBOL", description: "\"LINEAR_SYMBOL\"" },
        peg$c752 = "LINES_SYMBOL",
        peg$c753 = { type: "literal", value: "LINES_SYMBOL", description: "\"LINES_SYMBOL\"" },
        peg$c754 = "LIST_SYMBOL",
        peg$c755 = { type: "literal", value: "LIST_SYMBOL", description: "\"LIST_SYMBOL\"" },
        peg$c756 = "LOAD_SYMBOL",
        peg$c757 = { type: "literal", value: "LOAD_SYMBOL", description: "\"LOAD_SYMBOL\"" },
        peg$c758 = "LOCALTIME_SYMBOL",
        peg$c759 = { type: "literal", value: "LOCALTIME_SYMBOL", description: "\"LOCALTIME_SYMBOL\"" },
        peg$c760 = "LOCALTIMESTAMP_SYMBOL",
        peg$c761 = { type: "literal", value: "LOCALTIMESTAMP_SYMBOL", description: "\"LOCALTIMESTAMP_SYMBOL\"" },
        peg$c762 = "LOCAL_SYMBOL",
        peg$c763 = { type: "literal", value: "LOCAL_SYMBOL", description: "\"LOCAL_SYMBOL\"" },
        peg$c764 = "LOCATOR_SYMBOL",
        peg$c765 = { type: "literal", value: "LOCATOR_SYMBOL", description: "\"LOCATOR_SYMBOL\"" },
        peg$c766 = "LOCK_SYMBOL",
        peg$c767 = { type: "literal", value: "LOCK_SYMBOL", description: "\"LOCK_SYMBOL\"" },
        peg$c768 = "LOCKS_SYMBOL",
        peg$c769 = { type: "literal", value: "LOCKS_SYMBOL", description: "\"LOCKS_SYMBOL\"" },
        peg$c770 = "LOGFILE_SYMBOL",
        peg$c771 = { type: "literal", value: "LOGFILE_SYMBOL", description: "\"LOGFILE_SYMBOL\"" },
        peg$c772 = "LOGS_SYMBOL",
        peg$c773 = { type: "literal", value: "LOGS_SYMBOL", description: "\"LOGS_SYMBOL\"" },
        peg$c774 = "LOOP_SYMBOL",
        peg$c775 = { type: "literal", value: "LOOP_SYMBOL", description: "\"LOOP_SYMBOL\"" },
        peg$c776 = "LOW_PRIORITY_SYMBOL",
        peg$c777 = { type: "literal", value: "LOW_PRIORITY_SYMBOL", description: "\"LOW_PRIORITY_SYMBOL\"" },
        peg$c778 = "MASTER_SYMBOL",
        peg$c779 = { type: "literal", value: "MASTER_SYMBOL", description: "\"MASTER_SYMBOL\"" },
        peg$c780 = "MASTER_AUTO_POSITION_SYMBOL",
        peg$c781 = { type: "literal", value: "MASTER_AUTO_POSITION_SYMBOL", description: "\"MASTER_AUTO_POSITION_SYMBOL\"" },
        peg$c782 = "MASTER_BIND_SYMBOL",
        peg$c783 = { type: "literal", value: "MASTER_BIND_SYMBOL", description: "\"MASTER_BIND_SYMBOL\"" },
        peg$c784 = "MASTER_CONNECT_RETRY_SYMBOL",
        peg$c785 = { type: "literal", value: "MASTER_CONNECT_RETRY_SYMBOL", description: "\"MASTER_CONNECT_RETRY_SYMBOL\"" },
        peg$c786 = "MASTER_DELAY_SYMBOL",
        peg$c787 = { type: "literal", value: "MASTER_DELAY_SYMBOL", description: "\"MASTER_DELAY_SYMBOL\"" },
        peg$c788 = "MASTER_HEARTBEAT_PERIOD_SYMBOL",
        peg$c789 = { type: "literal", value: "MASTER_HEARTBEAT_PERIOD_SYMBOL", description: "\"MASTER_HEARTBEAT_PERIOD_SYMBOL\"" },
        peg$c790 = "MASTER_HOST_SYMBOL",
        peg$c791 = { type: "literal", value: "MASTER_HOST_SYMBOL", description: "\"MASTER_HOST_SYMBOL\"" },
        peg$c792 = "NETWORK_NAMESPACE_SYMBOL",
        peg$c793 = { type: "literal", value: "NETWORK_NAMESPACE_SYMBOL", description: "\"NETWORK_NAMESPACE_SYMBOL\"" },
        peg$c794 = "MASTER_LOG_FILE_SYMBOL",
        peg$c795 = { type: "literal", value: "MASTER_LOG_FILE_SYMBOL", description: "\"MASTER_LOG_FILE_SYMBOL\"" },
        peg$c796 = "MASTER_LOG_POS_SYMBOL",
        peg$c797 = { type: "literal", value: "MASTER_LOG_POS_SYMBOL", description: "\"MASTER_LOG_POS_SYMBOL\"" },
        peg$c798 = "MASTER_PASSWORD_SYMBOL",
        peg$c799 = { type: "literal", value: "MASTER_PASSWORD_SYMBOL", description: "\"MASTER_PASSWORD_SYMBOL\"" },
        peg$c800 = "MASTER_PORT_SYMBOL",
        peg$c801 = { type: "literal", value: "MASTER_PORT_SYMBOL", description: "\"MASTER_PORT_SYMBOL\"" },
        peg$c802 = "MASTER_PUBLIC_KEY_PATH_SYMBOL",
        peg$c803 = { type: "literal", value: "MASTER_PUBLIC_KEY_PATH_SYMBOL", description: "\"MASTER_PUBLIC_KEY_PATH_SYMBOL\"" },
        peg$c804 = "MASTER_RETRY_COUNT_SYMBOL",
        peg$c805 = { type: "literal", value: "MASTER_RETRY_COUNT_SYMBOL", description: "\"MASTER_RETRY_COUNT_SYMBOL\"" },
        peg$c806 = "MASTER_SERVER_ID_SYMBOL",
        peg$c807 = { type: "literal", value: "MASTER_SERVER_ID_SYMBOL", description: "\"MASTER_SERVER_ID_SYMBOL\"" },
        peg$c808 = "MASTER_SSL_CAPATH_SYMBOL",
        peg$c809 = { type: "literal", value: "MASTER_SSL_CAPATH_SYMBOL", description: "\"MASTER_SSL_CAPATH_SYMBOL\"" },
        peg$c810 = "MASTER_SSL_CA_SYMBOL",
        peg$c811 = { type: "literal", value: "MASTER_SSL_CA_SYMBOL", description: "\"MASTER_SSL_CA_SYMBOL\"" },
        peg$c812 = "MASTER_SSL_CERT_SYMBOL",
        peg$c813 = { type: "literal", value: "MASTER_SSL_CERT_SYMBOL", description: "\"MASTER_SSL_CERT_SYMBOL\"" },
        peg$c814 = "MASTER_SSL_CIPHER_SYMBOL",
        peg$c815 = { type: "literal", value: "MASTER_SSL_CIPHER_SYMBOL", description: "\"MASTER_SSL_CIPHER_SYMBOL\"" },
        peg$c816 = "MASTER_SSL_CRL_SYMBOL",
        peg$c817 = { type: "literal", value: "MASTER_SSL_CRL_SYMBOL", description: "\"MASTER_SSL_CRL_SYMBOL\"" },
        peg$c818 = "MASTER_SSL_CRLPATH_SYMBOL",
        peg$c819 = { type: "literal", value: "MASTER_SSL_CRLPATH_SYMBOL", description: "\"MASTER_SSL_CRLPATH_SYMBOL\"" },
        peg$c820 = "MASTER_SSL_KEY_SYMBOL",
        peg$c821 = { type: "literal", value: "MASTER_SSL_KEY_SYMBOL", description: "\"MASTER_SSL_KEY_SYMBOL\"" },
        peg$c822 = "MASTER_SSL_SYMBOL",
        peg$c823 = { type: "literal", value: "MASTER_SSL_SYMBOL", description: "\"MASTER_SSL_SYMBOL\"" },
        peg$c824 = "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL",
        peg$c825 = { type: "literal", value: "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", description: "\"MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL\"" },
        peg$c826 = "MASTER_TLS_VERSION_SYMBOL",
        peg$c827 = { type: "literal", value: "MASTER_TLS_VERSION_SYMBOL", description: "\"MASTER_TLS_VERSION_SYMBOL\"" },
        peg$c828 = "MASTER_TLS_CIPHERSUITES_SYMBOL",
        peg$c829 = { type: "literal", value: "MASTER_TLS_CIPHERSUITES_SYMBOL", description: "\"MASTER_TLS_CIPHERSUITES_SYMBOL\"" },
        peg$c830 = "MASTER_USER_SYMBOL",
        peg$c831 = { type: "literal", value: "MASTER_USER_SYMBOL", description: "\"MASTER_USER_SYMBOL\"" },
        peg$c832 = "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL",
        peg$c833 = { type: "literal", value: "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", description: "\"MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL\"" },
        peg$c834 = "MATCH_SYMBOL",
        peg$c835 = { type: "literal", value: "MATCH_SYMBOL", description: "\"MATCH_SYMBOL\"" },
        peg$c836 = "MAX_CONNECTIONS_PER_HOUR_SYMBOL",
        peg$c837 = { type: "literal", value: "MAX_CONNECTIONS_PER_HOUR_SYMBOL", description: "\"MAX_CONNECTIONS_PER_HOUR_SYMBOL\"" },
        peg$c838 = "MAX_QUERIES_PER_HOUR_SYMBOL",
        peg$c839 = { type: "literal", value: "MAX_QUERIES_PER_HOUR_SYMBOL", description: "\"MAX_QUERIES_PER_HOUR_SYMBOL\"" },
        peg$c840 = "MAX_ROWS_SYMBOL",
        peg$c841 = { type: "literal", value: "MAX_ROWS_SYMBOL", description: "\"MAX_ROWS_SYMBOL\"" },
        peg$c842 = "MAX_SIZE_SYMBOL",
        peg$c843 = { type: "literal", value: "MAX_SIZE_SYMBOL", description: "\"MAX_SIZE_SYMBOL\"" },
        peg$c844 = "MAX_STATEMENT_TIME_SYMBOL",
        peg$c845 = { type: "literal", value: "MAX_STATEMENT_TIME_SYMBOL", description: "\"MAX_STATEMENT_TIME_SYMBOL\"" },
        peg$c846 = "MAX_UPDATES_PER_HOUR_SYMBOL",
        peg$c847 = { type: "literal", value: "MAX_UPDATES_PER_HOUR_SYMBOL", description: "\"MAX_UPDATES_PER_HOUR_SYMBOL\"" },
        peg$c848 = "MAX_USER_CONNECTIONS_SYMBOL",
        peg$c849 = { type: "literal", value: "MAX_USER_CONNECTIONS_SYMBOL", description: "\"MAX_USER_CONNECTIONS_SYMBOL\"" },
        peg$c850 = "MAXVALUE_SYMBOL",
        peg$c851 = { type: "literal", value: "MAXVALUE_SYMBOL", description: "\"MAXVALUE_SYMBOL\"" },
        peg$c852 = "MAX_SYMBOL",
        peg$c853 = { type: "literal", value: "MAX_SYMBOL", description: "\"MAX_SYMBOL\"" },
        peg$c854 = "MEDIUM_SYMBOL",
        peg$c855 = { type: "literal", value: "MEDIUM_SYMBOL", description: "\"MEDIUM_SYMBOL\"" },
        peg$c856 = "MEMBER_SYMBOL",
        peg$c857 = { type: "literal", value: "MEMBER_SYMBOL", description: "\"MEMBER_SYMBOL\"" },
        peg$c858 = "MEMORY_SYMBOL",
        peg$c859 = { type: "literal", value: "MEMORY_SYMBOL", description: "\"MEMORY_SYMBOL\"" },
        peg$c860 = "MERGE_SYMBOL",
        peg$c861 = { type: "literal", value: "MERGE_SYMBOL", description: "\"MERGE_SYMBOL\"" },
        peg$c862 = "MESSAGE_TEXT_SYMBOL",
        peg$c863 = { type: "literal", value: "MESSAGE_TEXT_SYMBOL", description: "\"MESSAGE_TEXT_SYMBOL\"" },
        peg$c864 = "MICROSECOND_SYMBOL",
        peg$c865 = { type: "literal", value: "MICROSECOND_SYMBOL", description: "\"MICROSECOND_SYMBOL\"" },
        peg$c866 = "MIDDLEINT_SYMBOL",
        peg$c867 = { type: "literal", value: "MIDDLEINT_SYMBOL", description: "\"MIDDLEINT_SYMBOL\"" },
        peg$c868 = "MIGRATE_SYMBOL",
        peg$c869 = { type: "literal", value: "MIGRATE_SYMBOL", description: "\"MIGRATE_SYMBOL\"" },
        peg$c870 = "MINUTE_MICROSECOND_SYMBOL",
        peg$c871 = { type: "literal", value: "MINUTE_MICROSECOND_SYMBOL", description: "\"MINUTE_MICROSECOND_SYMBOL\"" },
        peg$c872 = "MINUTE_SECOND_SYMBOL",
        peg$c873 = { type: "literal", value: "MINUTE_SECOND_SYMBOL", description: "\"MINUTE_SECOND_SYMBOL\"" },
        peg$c874 = "MINUTE_SYMBOL",
        peg$c875 = { type: "literal", value: "MINUTE_SYMBOL", description: "\"MINUTE_SYMBOL\"" },
        peg$c876 = "MIN_ROWS_SYMBOL",
        peg$c877 = { type: "literal", value: "MIN_ROWS_SYMBOL", description: "\"MIN_ROWS_SYMBOL\"" },
        peg$c878 = "MIN_SYMBOL",
        peg$c879 = { type: "literal", value: "MIN_SYMBOL", description: "\"MIN_SYMBOL\"" },
        peg$c880 = "MODE_SYMBOL",
        peg$c881 = { type: "literal", value: "MODE_SYMBOL", description: "\"MODE_SYMBOL\"" },
        peg$c882 = "MODIFIES_SYMBOL",
        peg$c883 = { type: "literal", value: "MODIFIES_SYMBOL", description: "\"MODIFIES_SYMBOL\"" },
        peg$c884 = "MODIFY_SYMBOL",
        peg$c885 = { type: "literal", value: "MODIFY_SYMBOL", description: "\"MODIFY_SYMBOL\"" },
        peg$c886 = "MOD_SYMBOL",
        peg$c887 = { type: "literal", value: "MOD_SYMBOL", description: "\"MOD_SYMBOL\"" },
        peg$c888 = "MONTH_SYMBOL",
        peg$c889 = { type: "literal", value: "MONTH_SYMBOL", description: "\"MONTH_SYMBOL\"" },
        peg$c890 = "MUTEX_SYMBOL",
        peg$c891 = { type: "literal", value: "MUTEX_SYMBOL", description: "\"MUTEX_SYMBOL\"" },
        peg$c892 = "MYSQL_ERRNO_SYMBOL",
        peg$c893 = { type: "literal", value: "MYSQL_ERRNO_SYMBOL", description: "\"MYSQL_ERRNO_SYMBOL\"" },
        peg$c894 = "NAME_SYMBOL",
        peg$c895 = { type: "literal", value: "NAME_SYMBOL", description: "\"NAME_SYMBOL\"" },
        peg$c896 = "NAMES_SYMBOL",
        peg$c897 = { type: "literal", value: "NAMES_SYMBOL", description: "\"NAMES_SYMBOL\"" },
        peg$c898 = "NATIONAL_SYMBOL",
        peg$c899 = { type: "literal", value: "NATIONAL_SYMBOL", description: "\"NATIONAL_SYMBOL\"" },
        peg$c900 = "NATURAL_SYMBOL",
        peg$c901 = { type: "literal", value: "NATURAL_SYMBOL", description: "\"NATURAL_SYMBOL\"" },
        peg$c902 = "NCHAR_SYMBOL",
        peg$c903 = { type: "literal", value: "NCHAR_SYMBOL", description: "\"NCHAR_SYMBOL\"" },
        peg$c904 = "NDBCLUSTER_SYMBOL",
        peg$c905 = { type: "literal", value: "NDBCLUSTER_SYMBOL", description: "\"NDBCLUSTER_SYMBOL\"" },
        peg$c906 = "NDB_SYMBOL",
        peg$c907 = { type: "literal", value: "NDB_SYMBOL", description: "\"NDB_SYMBOL\"" },
        peg$c908 = "NEG_SYMBOL",
        peg$c909 = { type: "literal", value: "NEG_SYMBOL", description: "\"NEG_SYMBOL\"" },
        peg$c910 = "NESTED_SYMBOL",
        peg$c911 = { type: "literal", value: "NESTED_SYMBOL", description: "\"NESTED_SYMBOL\"" },
        peg$c912 = "NEVER_SYMBOL",
        peg$c913 = { type: "literal", value: "NEVER_SYMBOL", description: "\"NEVER_SYMBOL\"" },
        peg$c914 = "NEW_SYMBOL",
        peg$c915 = { type: "literal", value: "NEW_SYMBOL", description: "\"NEW_SYMBOL\"" },
        peg$c916 = "NEXT_SYMBOL",
        peg$c917 = { type: "literal", value: "NEXT_SYMBOL", description: "\"NEXT_SYMBOL\"" },
        peg$c918 = "NODEGROUP_SYMBOL",
        peg$c919 = { type: "literal", value: "NODEGROUP_SYMBOL", description: "\"NODEGROUP_SYMBOL\"" },
        peg$c920 = "NONE_SYMBOL",
        peg$c921 = { type: "literal", value: "NONE_SYMBOL", description: "\"NONE_SYMBOL\"" },
        peg$c922 = "NONBLOCKING_SYMBOL",
        peg$c923 = { type: "literal", value: "NONBLOCKING_SYMBOL", description: "\"NONBLOCKING_SYMBOL\"" },
        peg$c924 = "NOT_SYMBOL",
        peg$c925 = { type: "literal", value: "NOT_SYMBOL", description: "\"NOT_SYMBOL\"" },
        peg$c926 = "NOWAIT_SYMBOL",
        peg$c927 = { type: "literal", value: "NOWAIT_SYMBOL", description: "\"NOWAIT_SYMBOL\"" },
        peg$c928 = "NO_WAIT_SYMBOL",
        peg$c929 = { type: "literal", value: "NO_WAIT_SYMBOL", description: "\"NO_WAIT_SYMBOL\"" },
        peg$c930 = "NO_WRITE_TO_BINLOG_SYMBOL",
        peg$c931 = { type: "literal", value: "NO_WRITE_TO_BINLOG_SYMBOL", description: "\"NO_WRITE_TO_BINLOG_SYMBOL\"" },
        peg$c932 = "NULL_SYMBOL",
        peg$c933 = { type: "literal", value: "NULL_SYMBOL", description: "\"NULL_SYMBOL\"" },
        peg$c934 = "NULLS_SYMBOL",
        peg$c935 = { type: "literal", value: "NULLS_SYMBOL", description: "\"NULLS_SYMBOL\"" },
        peg$c936 = "NUMBER_SYMBOL",
        peg$c937 = { type: "literal", value: "NUMBER_SYMBOL", description: "\"NUMBER_SYMBOL\"" },
        peg$c938 = "NVARCHAR_SYMBOL",
        peg$c939 = { type: "literal", value: "NVARCHAR_SYMBOL", description: "\"NVARCHAR_SYMBOL\"" },
        peg$c940 = "NTH_VALUE_SYMBOL",
        peg$c941 = { type: "literal", value: "NTH_VALUE_SYMBOL", description: "\"NTH_VALUE_SYMBOL\"" },
        peg$c942 = "NTILE_SYMBOL",
        peg$c943 = { type: "literal", value: "NTILE_SYMBOL", description: "\"NTILE_SYMBOL\"" },
        peg$c944 = "OF_SYMBOL",
        peg$c945 = { type: "literal", value: "OF_SYMBOL", description: "\"OF_SYMBOL\"" },
        peg$c946 = "OFF_SYMBOL",
        peg$c947 = { type: "literal", value: "OFF_SYMBOL", description: "\"OFF_SYMBOL\"" },
        peg$c948 = "OFFLINE_SYMBOL",
        peg$c949 = { type: "literal", value: "OFFLINE_SYMBOL", description: "\"OFFLINE_SYMBOL\"" },
        peg$c950 = "OFFSET_SYMBOL",
        peg$c951 = { type: "literal", value: "OFFSET_SYMBOL", description: "\"OFFSET_SYMBOL\"" },
        peg$c952 = "OJ_SYMBOL",
        peg$c953 = { type: "literal", value: "OJ_SYMBOL", description: "\"OJ_SYMBOL\"" },
        peg$c954 = "OLD_PASSWORD_SYMBOL",
        peg$c955 = { type: "literal", value: "OLD_PASSWORD_SYMBOL", description: "\"OLD_PASSWORD_SYMBOL\"" },
        peg$c956 = "OLD_SYMBOL",
        peg$c957 = { type: "literal", value: "OLD_SYMBOL", description: "\"OLD_SYMBOL\"" },
        peg$c958 = "ON_SYMBOL",
        peg$c959 = { type: "literal", value: "ON_SYMBOL", description: "\"ON_SYMBOL\"" },
        peg$c960 = "ONLINE_SYMBOL",
        peg$c961 = { type: "literal", value: "ONLINE_SYMBOL", description: "\"ONLINE_SYMBOL\"" },
        peg$c962 = "ONE_SYMBOL",
        peg$c963 = { type: "literal", value: "ONE_SYMBOL", description: "\"ONE_SYMBOL\"" },
        peg$c964 = "ONLY_SYMBOL",
        peg$c965 = { type: "literal", value: "ONLY_SYMBOL", description: "\"ONLY_SYMBOL\"" },
        peg$c966 = "OPEN_SYMBOL",
        peg$c967 = { type: "literal", value: "OPEN_SYMBOL", description: "\"OPEN_SYMBOL\"" },
        peg$c968 = "OPTIONAL_SYMBOL",
        peg$c969 = { type: "literal", value: "OPTIONAL_SYMBOL", description: "\"OPTIONAL_SYMBOL\"" },
        peg$c970 = "OPTIONALLY_SYMBOL",
        peg$c971 = { type: "literal", value: "OPTIONALLY_SYMBOL", description: "\"OPTIONALLY_SYMBOL\"" },
        peg$c972 = "OPTIONS_SYMBOL",
        peg$c973 = { type: "literal", value: "OPTIONS_SYMBOL", description: "\"OPTIONS_SYMBOL\"" },
        peg$c974 = "OPTION_SYMBOL",
        peg$c975 = { type: "literal", value: "OPTION_SYMBOL", description: "\"OPTION_SYMBOL\"" },
        peg$c976 = "OPTIMIZE_SYMBOL",
        peg$c977 = { type: "literal", value: "OPTIMIZE_SYMBOL", description: "\"OPTIMIZE_SYMBOL\"" },
        peg$c978 = "OPTIMIZER_COSTS_SYMBOL",
        peg$c979 = { type: "literal", value: "OPTIMIZER_COSTS_SYMBOL", description: "\"OPTIMIZER_COSTS_SYMBOL\"" },
        peg$c980 = "ORDER_SYMBOL",
        peg$c981 = { type: "literal", value: "ORDER_SYMBOL", description: "\"ORDER_SYMBOL\"" },
        peg$c982 = "ORDINALITY_SYMBOL",
        peg$c983 = { type: "literal", value: "ORDINALITY_SYMBOL", description: "\"ORDINALITY_SYMBOL\"" },
        peg$c984 = "ORGANIZATION_SYMBOL",
        peg$c985 = { type: "literal", value: "ORGANIZATION_SYMBOL", description: "\"ORGANIZATION_SYMBOL\"" },
        peg$c986 = "OR_SYMBOL",
        peg$c987 = { type: "literal", value: "OR_SYMBOL", description: "\"OR_SYMBOL\"" },
        peg$c988 = "OTHERS_SYMBOL",
        peg$c989 = { type: "literal", value: "OTHERS_SYMBOL", description: "\"OTHERS_SYMBOL\"" },
        peg$c990 = "OUTER_SYMBOL",
        peg$c991 = { type: "literal", value: "OUTER_SYMBOL", description: "\"OUTER_SYMBOL\"" },
        peg$c992 = "OUTFILE_SYMBOL",
        peg$c993 = { type: "literal", value: "OUTFILE_SYMBOL", description: "\"OUTFILE_SYMBOL\"" },
        peg$c994 = "OUT_SYMBOL",
        peg$c995 = { type: "literal", value: "OUT_SYMBOL", description: "\"OUT_SYMBOL\"" },
        peg$c996 = "OWNER_SYMBOL",
        peg$c997 = { type: "literal", value: "OWNER_SYMBOL", description: "\"OWNER_SYMBOL\"" },
        peg$c998 = "PACK_KEYS_SYMBOL",
        peg$c999 = { type: "literal", value: "PACK_KEYS_SYMBOL", description: "\"PACK_KEYS_SYMBOL\"" },
        peg$c1000 = "PAGE_SYMBOL",
        peg$c1001 = { type: "literal", value: "PAGE_SYMBOL", description: "\"PAGE_SYMBOL\"" },
        peg$c1002 = "PARSER_SYMBOL",
        peg$c1003 = { type: "literal", value: "PARSER_SYMBOL", description: "\"PARSER_SYMBOL\"" },
        peg$c1004 = "PARTIAL_SYMBOL",
        peg$c1005 = { type: "literal", value: "PARTIAL_SYMBOL", description: "\"PARTIAL_SYMBOL\"" },
        peg$c1006 = "PARTITIONING_SYMBOL",
        peg$c1007 = { type: "literal", value: "PARTITIONING_SYMBOL", description: "\"PARTITIONING_SYMBOL\"" },
        peg$c1008 = "PARTITIONS_SYMBOL",
        peg$c1009 = { type: "literal", value: "PARTITIONS_SYMBOL", description: "\"PARTITIONS_SYMBOL\"" },
        peg$c1010 = "PARTITION_SYMBOL",
        peg$c1011 = { type: "literal", value: "PARTITION_SYMBOL", description: "\"PARTITION_SYMBOL\"" },
        peg$c1012 = "PASSWORD_SYMBOL",
        peg$c1013 = { type: "literal", value: "PASSWORD_SYMBOL", description: "\"PASSWORD_SYMBOL\"" },
        peg$c1014 = "PATH_SYMBOL",
        peg$c1015 = { type: "literal", value: "PATH_SYMBOL", description: "\"PATH_SYMBOL\"" },
        peg$c1016 = "PERCENT_RANK_SYMBOL",
        peg$c1017 = { type: "literal", value: "PERCENT_RANK_SYMBOL", description: "\"PERCENT_RANK_SYMBOL\"" },
        peg$c1018 = "PERSIST_SYMBOL",
        peg$c1019 = { type: "literal", value: "PERSIST_SYMBOL", description: "\"PERSIST_SYMBOL\"" },
        peg$c1020 = "PERSIST_ONLY_SYMBOL",
        peg$c1021 = { type: "literal", value: "PERSIST_ONLY_SYMBOL", description: "\"PERSIST_ONLY_SYMBOL\"" },
        peg$c1022 = "PHASE_SYMBOL",
        peg$c1023 = { type: "literal", value: "PHASE_SYMBOL", description: "\"PHASE_SYMBOL\"" },
        peg$c1024 = "PLUGIN_SYMBOL",
        peg$c1025 = { type: "literal", value: "PLUGIN_SYMBOL", description: "\"PLUGIN_SYMBOL\"" },
        peg$c1026 = "PLUGINS_SYMBOL",
        peg$c1027 = { type: "literal", value: "PLUGINS_SYMBOL", description: "\"PLUGINS_SYMBOL\"" },
        peg$c1028 = "PLUGIN_DIR_SYMBOL",
        peg$c1029 = { type: "literal", value: "PLUGIN_DIR_SYMBOL", description: "\"PLUGIN_DIR_SYMBOL\"" },
        peg$c1030 = "PORT_SYMBOL",
        peg$c1031 = { type: "literal", value: "PORT_SYMBOL", description: "\"PORT_SYMBOL\"" },
        peg$c1032 = "POSITION_SYMBOL",
        peg$c1033 = { type: "literal", value: "POSITION_SYMBOL", description: "\"POSITION_SYMBOL\"" },
        peg$c1034 = "PRECEDES_SYMBOL",
        peg$c1035 = { type: "literal", value: "PRECEDES_SYMBOL", description: "\"PRECEDES_SYMBOL\"" },
        peg$c1036 = "PRECEDING_SYMBOL",
        peg$c1037 = { type: "literal", value: "PRECEDING_SYMBOL", description: "\"PRECEDING_SYMBOL\"" },
        peg$c1038 = "PRECISION_SYMBOL",
        peg$c1039 = { type: "literal", value: "PRECISION_SYMBOL", description: "\"PRECISION_SYMBOL\"" },
        peg$c1040 = "PREPARE_SYMBOL",
        peg$c1041 = { type: "literal", value: "PREPARE_SYMBOL", description: "\"PREPARE_SYMBOL\"" },
        peg$c1042 = "PRESERVE_SYMBOL",
        peg$c1043 = { type: "literal", value: "PRESERVE_SYMBOL", description: "\"PRESERVE_SYMBOL\"" },
        peg$c1044 = "PREV_SYMBOL",
        peg$c1045 = { type: "literal", value: "PREV_SYMBOL", description: "\"PREV_SYMBOL\"" },
        peg$c1046 = "PRIMARY_SYMBOL",
        peg$c1047 = { type: "literal", value: "PRIMARY_SYMBOL", description: "\"PRIMARY_SYMBOL\"" },
        peg$c1048 = "PRIVILEGES_SYMBOL",
        peg$c1049 = { type: "literal", value: "PRIVILEGES_SYMBOL", description: "\"PRIVILEGES_SYMBOL\"" },
        peg$c1050 = "PRIVILEGE_CHECKS_USER_SYMBOL",
        peg$c1051 = { type: "literal", value: "PRIVILEGE_CHECKS_USER_SYMBOL", description: "\"PRIVILEGE_CHECKS_USER_SYMBOL\"" },
        peg$c1052 = "PROCEDURE_SYMBOL",
        peg$c1053 = { type: "literal", value: "PROCEDURE_SYMBOL", description: "\"PROCEDURE_SYMBOL\"" },
        peg$c1054 = "PROCESS_SYMBOL",
        peg$c1055 = { type: "literal", value: "PROCESS_SYMBOL", description: "\"PROCESS_SYMBOL\"" },
        peg$c1056 = "PROCESSLIST_SYMBOL",
        peg$c1057 = { type: "literal", value: "PROCESSLIST_SYMBOL", description: "\"PROCESSLIST_SYMBOL\"" },
        peg$c1058 = "PROFILES_SYMBOL",
        peg$c1059 = { type: "literal", value: "PROFILES_SYMBOL", description: "\"PROFILES_SYMBOL\"" },
        peg$c1060 = "PROFILE_SYMBOL",
        peg$c1061 = { type: "literal", value: "PROFILE_SYMBOL", description: "\"PROFILE_SYMBOL\"" },
        peg$c1062 = "PROXY_SYMBOL",
        peg$c1063 = { type: "literal", value: "PROXY_SYMBOL", description: "\"PROXY_SYMBOL\"" },
        peg$c1064 = "PURGE_SYMBOL",
        peg$c1065 = { type: "literal", value: "PURGE_SYMBOL", description: "\"PURGE_SYMBOL\"" },
        peg$c1066 = "QUARTER_SYMBOL",
        peg$c1067 = { type: "literal", value: "QUARTER_SYMBOL", description: "\"QUARTER_SYMBOL\"" },
        peg$c1068 = "QUERY_SYMBOL",
        peg$c1069 = { type: "literal", value: "QUERY_SYMBOL", description: "\"QUERY_SYMBOL\"" },
        peg$c1070 = "QUICK_SYMBOL",
        peg$c1071 = { type: "literal", value: "QUICK_SYMBOL", description: "\"QUICK_SYMBOL\"" },
        peg$c1072 = "RANDOM_SYMBOL",
        peg$c1073 = { type: "literal", value: "RANDOM_SYMBOL", description: "\"RANDOM_SYMBOL\"" },
        peg$c1074 = "RANGE_SYMBOL",
        peg$c1075 = { type: "literal", value: "RANGE_SYMBOL", description: "\"RANGE_SYMBOL\"" },
        peg$c1076 = "RANK_SYMBOL",
        peg$c1077 = { type: "literal", value: "RANK_SYMBOL", description: "\"RANK_SYMBOL\"" },
        peg$c1078 = "READS_SYMBOL",
        peg$c1079 = { type: "literal", value: "READS_SYMBOL", description: "\"READS_SYMBOL\"" },
        peg$c1080 = "READ_ONLY_SYMBOL",
        peg$c1081 = { type: "literal", value: "READ_ONLY_SYMBOL", description: "\"READ_ONLY_SYMBOL\"" },
        peg$c1082 = "READ_SYMBOL",
        peg$c1083 = { type: "literal", value: "READ_SYMBOL", description: "\"READ_SYMBOL\"" },
        peg$c1084 = "READ_WRITE_SYMBOL",
        peg$c1085 = { type: "literal", value: "READ_WRITE_SYMBOL", description: "\"READ_WRITE_SYMBOL\"" },
        peg$c1086 = "REBUILD_SYMBOL",
        peg$c1087 = { type: "literal", value: "REBUILD_SYMBOL", description: "\"REBUILD_SYMBOL\"" },
        peg$c1088 = "RECOVER_SYMBOL",
        peg$c1089 = { type: "literal", value: "RECOVER_SYMBOL", description: "\"RECOVER_SYMBOL\"" },
        peg$c1090 = "REDOFILE_SYMBOL",
        peg$c1091 = { type: "literal", value: "REDOFILE_SYMBOL", description: "\"REDOFILE_SYMBOL\"" },
        peg$c1092 = "REDO_BUFFER_SIZE_SYMBOL",
        peg$c1093 = { type: "literal", value: "REDO_BUFFER_SIZE_SYMBOL", description: "\"REDO_BUFFER_SIZE_SYMBOL\"" },
        peg$c1094 = "REDUNDANT_SYMBOL",
        peg$c1095 = { type: "literal", value: "REDUNDANT_SYMBOL", description: "\"REDUNDANT_SYMBOL\"" },
        peg$c1096 = "REFERENCES_SYMBOL",
        peg$c1097 = { type: "literal", value: "REFERENCES_SYMBOL", description: "\"REFERENCES_SYMBOL\"" },
        peg$c1098 = "RECURSIVE_SYMBOL",
        peg$c1099 = { type: "literal", value: "RECURSIVE_SYMBOL", description: "\"RECURSIVE_SYMBOL\"" },
        peg$c1100 = "REGEXP_SYMBOL",
        peg$c1101 = { type: "literal", value: "REGEXP_SYMBOL", description: "\"REGEXP_SYMBOL\"" },
        peg$c1102 = "RELAYLOG_SYMBOL",
        peg$c1103 = { type: "literal", value: "RELAYLOG_SYMBOL", description: "\"RELAYLOG_SYMBOL\"" },
        peg$c1104 = "RELAY_SYMBOL",
        peg$c1105 = { type: "literal", value: "RELAY_SYMBOL", description: "\"RELAY_SYMBOL\"" },
        peg$c1106 = "RELAY_LOG_FILE_SYMBOL",
        peg$c1107 = { type: "literal", value: "RELAY_LOG_FILE_SYMBOL", description: "\"RELAY_LOG_FILE_SYMBOL\"" },
        peg$c1108 = "RELAY_LOG_POS_SYMBOL",
        peg$c1109 = { type: "literal", value: "RELAY_LOG_POS_SYMBOL", description: "\"RELAY_LOG_POS_SYMBOL\"" },
        peg$c1110 = "RELAY_THREAD_SYMBOL",
        peg$c1111 = { type: "literal", value: "RELAY_THREAD_SYMBOL", description: "\"RELAY_THREAD_SYMBOL\"" },
        peg$c1112 = "RELEASE_SYMBOL",
        peg$c1113 = { type: "literal", value: "RELEASE_SYMBOL", description: "\"RELEASE_SYMBOL\"" },
        peg$c1114 = "RELOAD_SYMBOL",
        peg$c1115 = { type: "literal", value: "RELOAD_SYMBOL", description: "\"RELOAD_SYMBOL\"" },
        peg$c1116 = "REMOTE_SYMBOL",
        peg$c1117 = { type: "literal", value: "REMOTE_SYMBOL", description: "\"REMOTE_SYMBOL\"" },
        peg$c1118 = "REMOVE_SYMBOL",
        peg$c1119 = { type: "literal", value: "REMOVE_SYMBOL", description: "\"REMOVE_SYMBOL\"" },
        peg$c1120 = "RENAME_SYMBOL",
        peg$c1121 = { type: "literal", value: "RENAME_SYMBOL", description: "\"RENAME_SYMBOL\"" },
        peg$c1122 = "REORGANIZE_SYMBOL",
        peg$c1123 = { type: "literal", value: "REORGANIZE_SYMBOL", description: "\"REORGANIZE_SYMBOL\"" },
        peg$c1124 = "REPAIR_SYMBOL",
        peg$c1125 = { type: "literal", value: "REPAIR_SYMBOL", description: "\"REPAIR_SYMBOL\"" },
        peg$c1126 = "REPEAT_SYMBOL",
        peg$c1127 = { type: "literal", value: "REPEAT_SYMBOL", description: "\"REPEAT_SYMBOL\"" },
        peg$c1128 = "REPEATABLE_SYMBOL",
        peg$c1129 = { type: "literal", value: "REPEATABLE_SYMBOL", description: "\"REPEATABLE_SYMBOL\"" },
        peg$c1130 = "REPLACE_SYMBOL",
        peg$c1131 = { type: "literal", value: "REPLACE_SYMBOL", description: "\"REPLACE_SYMBOL\"" },
        peg$c1132 = "REPLICATION_SYMBOL",
        peg$c1133 = { type: "literal", value: "REPLICATION_SYMBOL", description: "\"REPLICATION_SYMBOL\"" },
        peg$c1134 = "REPLICATE_DO_DB_SYMBOL",
        peg$c1135 = { type: "literal", value: "REPLICATE_DO_DB_SYMBOL", description: "\"REPLICATE_DO_DB_SYMBOL\"" },
        peg$c1136 = "REPLICATE_IGNORE_DB_SYMBOL",
        peg$c1137 = { type: "literal", value: "REPLICATE_IGNORE_DB_SYMBOL", description: "\"REPLICATE_IGNORE_DB_SYMBOL\"" },
        peg$c1138 = "REPLICATE_DO_TABLE_SYMBOL",
        peg$c1139 = { type: "literal", value: "REPLICATE_DO_TABLE_SYMBOL", description: "\"REPLICATE_DO_TABLE_SYMBOL\"" },
        peg$c1140 = "REPLICATE_IGNORE_TABLE_SYMBOL",
        peg$c1141 = { type: "literal", value: "REPLICATE_IGNORE_TABLE_SYMBOL", description: "\"REPLICATE_IGNORE_TABLE_SYMBOL\"" },
        peg$c1142 = "REPLICATE_WILD_DO_TABLE_SYMBOL",
        peg$c1143 = { type: "literal", value: "REPLICATE_WILD_DO_TABLE_SYMBOL", description: "\"REPLICATE_WILD_DO_TABLE_SYMBOL\"" },
        peg$c1144 = "REPLICATE_WILD_IGNORE_TABLE_SYMBOL",
        peg$c1145 = { type: "literal", value: "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", description: "\"REPLICATE_WILD_IGNORE_TABLE_SYMBOL\"" },
        peg$c1146 = "REPLICATE_REWRITE_DB_SYMBOL",
        peg$c1147 = { type: "literal", value: "REPLICATE_REWRITE_DB_SYMBOL", description: "\"REPLICATE_REWRITE_DB_SYMBOL\"" },
        peg$c1148 = "REQUIRE_SYMBOL",
        peg$c1149 = { type: "literal", value: "REQUIRE_SYMBOL", description: "\"REQUIRE_SYMBOL\"" },
        peg$c1150 = "REQUIRE_ROW_FORMAT_SYMBOL",
        peg$c1151 = { type: "literal", value: "REQUIRE_ROW_FORMAT_SYMBOL", description: "\"REQUIRE_ROW_FORMAT_SYMBOL\"" },
        peg$c1152 = "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL",
        peg$c1153 = { type: "literal", value: "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", description: "\"REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL\"" },
        peg$c1154 = "RESET_SYMBOL",
        peg$c1155 = { type: "literal", value: "RESET_SYMBOL", description: "\"RESET_SYMBOL\"" },
        peg$c1156 = "RESIGNAL_SYMBOL",
        peg$c1157 = { type: "literal", value: "RESIGNAL_SYMBOL", description: "\"RESIGNAL_SYMBOL\"" },
        peg$c1158 = "RESOURCE_SYMBOL",
        peg$c1159 = { type: "literal", value: "RESOURCE_SYMBOL", description: "\"RESOURCE_SYMBOL\"" },
        peg$c1160 = "RESPECT_SYMBOL",
        peg$c1161 = { type: "literal", value: "RESPECT_SYMBOL", description: "\"RESPECT_SYMBOL\"" },
        peg$c1162 = "RESTART_SYMBOL",
        peg$c1163 = { type: "literal", value: "RESTART_SYMBOL", description: "\"RESTART_SYMBOL\"" },
        peg$c1164 = "RESTORE_SYMBOL",
        peg$c1165 = { type: "literal", value: "RESTORE_SYMBOL", description: "\"RESTORE_SYMBOL\"" },
        peg$c1166 = "RESTRICT_SYMBOL",
        peg$c1167 = { type: "literal", value: "RESTRICT_SYMBOL", description: "\"RESTRICT_SYMBOL\"" },
        peg$c1168 = "RESUME_SYMBOL",
        peg$c1169 = { type: "literal", value: "RESUME_SYMBOL", description: "\"RESUME_SYMBOL\"" },
        peg$c1170 = "RETAIN_SYMBOL",
        peg$c1171 = { type: "literal", value: "RETAIN_SYMBOL", description: "\"RETAIN_SYMBOL\"" },
        peg$c1172 = "RETURNED_SQLSTATE_SYMBOL",
        peg$c1173 = { type: "literal", value: "RETURNED_SQLSTATE_SYMBOL", description: "\"RETURNED_SQLSTATE_SYMBOL\"" },
        peg$c1174 = "RETURNS_SYMBOL",
        peg$c1175 = { type: "literal", value: "RETURNS_SYMBOL", description: "\"RETURNS_SYMBOL\"" },
        peg$c1176 = "REUSE_SYMBOL",
        peg$c1177 = { type: "literal", value: "REUSE_SYMBOL", description: "\"REUSE_SYMBOL\"" },
        peg$c1178 = "REVERSE_SYMBOL",
        peg$c1179 = { type: "literal", value: "REVERSE_SYMBOL", description: "\"REVERSE_SYMBOL\"" },
        peg$c1180 = "REVOKE_SYMBOL",
        peg$c1181 = { type: "literal", value: "REVOKE_SYMBOL", description: "\"REVOKE_SYMBOL\"" },
        peg$c1182 = "RIGHT_SYMBOL",
        peg$c1183 = { type: "literal", value: "RIGHT_SYMBOL", description: "\"RIGHT_SYMBOL\"" },
        peg$c1184 = "RLIKE_SYMBOL",
        peg$c1185 = { type: "literal", value: "RLIKE_SYMBOL", description: "\"RLIKE_SYMBOL\"" },
        peg$c1186 = "ROLE_SYMBOL",
        peg$c1187 = { type: "literal", value: "ROLE_SYMBOL", description: "\"ROLE_SYMBOL\"" },
        peg$c1188 = "ROLLBACK_SYMBOL",
        peg$c1189 = { type: "literal", value: "ROLLBACK_SYMBOL", description: "\"ROLLBACK_SYMBOL\"" },
        peg$c1190 = "ROLLUP_SYMBOL",
        peg$c1191 = { type: "literal", value: "ROLLUP_SYMBOL", description: "\"ROLLUP_SYMBOL\"" },
        peg$c1192 = "ROTATE_SYMBOL",
        peg$c1193 = { type: "literal", value: "ROTATE_SYMBOL", description: "\"ROTATE_SYMBOL\"" },
        peg$c1194 = "ROW_SYMBOL",
        peg$c1195 = { type: "literal", value: "ROW_SYMBOL", description: "\"ROW_SYMBOL\"" },
        peg$c1196 = "ROWS_SYMBOL",
        peg$c1197 = { type: "literal", value: "ROWS_SYMBOL", description: "\"ROWS_SYMBOL\"" },
        peg$c1198 = "ROW_COUNT_SYMBOL",
        peg$c1199 = { type: "literal", value: "ROW_COUNT_SYMBOL", description: "\"ROW_COUNT_SYMBOL\"" },
        peg$c1200 = "ROW_FORMAT_SYMBOL",
        peg$c1201 = { type: "literal", value: "ROW_FORMAT_SYMBOL", description: "\"ROW_FORMAT_SYMBOL\"" },
        peg$c1202 = "ROW_NUMBER_SYMBOL",
        peg$c1203 = { type: "literal", value: "ROW_NUMBER_SYMBOL", description: "\"ROW_NUMBER_SYMBOL\"" },
        peg$c1204 = "RTREE_SYMBOL",
        peg$c1205 = { type: "literal", value: "RTREE_SYMBOL", description: "\"RTREE_SYMBOL\"" },
        peg$c1206 = "SAVEPOINT_SYMBOL",
        peg$c1207 = { type: "literal", value: "SAVEPOINT_SYMBOL", description: "\"SAVEPOINT_SYMBOL\"" },
        peg$c1208 = "SCHEMA_SYMBOL",
        peg$c1209 = { type: "literal", value: "SCHEMA_SYMBOL", description: "\"SCHEMA_SYMBOL\"" },
        peg$c1210 = "SCHEMAS_SYMBOL",
        peg$c1211 = { type: "literal", value: "SCHEMAS_SYMBOL", description: "\"SCHEMAS_SYMBOL\"" },
        peg$c1212 = "SCHEMA_NAME_SYMBOL",
        peg$c1213 = { type: "literal", value: "SCHEMA_NAME_SYMBOL", description: "\"SCHEMA_NAME_SYMBOL\"" },
        peg$c1214 = "SCHEDULE_SYMBOL",
        peg$c1215 = { type: "literal", value: "SCHEDULE_SYMBOL", description: "\"SCHEDULE_SYMBOL\"" },
        peg$c1216 = "SECOND_MICROSECOND_SYMBOL",
        peg$c1217 = { type: "literal", value: "SECOND_MICROSECOND_SYMBOL", description: "\"SECOND_MICROSECOND_SYMBOL\"" },
        peg$c1218 = "SECOND_SYMBOL",
        peg$c1219 = { type: "literal", value: "SECOND_SYMBOL", description: "\"SECOND_SYMBOL\"" },
        peg$c1220 = "SECONDARY_SYMBOL",
        peg$c1221 = { type: "literal", value: "SECONDARY_SYMBOL", description: "\"SECONDARY_SYMBOL\"" },
        peg$c1222 = "SECONDARY_ENGINE_SYMBOL",
        peg$c1223 = { type: "literal", value: "SECONDARY_ENGINE_SYMBOL", description: "\"SECONDARY_ENGINE_SYMBOL\"" },
        peg$c1224 = "SECONDARY_LOAD_SYMBOL",
        peg$c1225 = { type: "literal", value: "SECONDARY_LOAD_SYMBOL", description: "\"SECONDARY_LOAD_SYMBOL\"" },
        peg$c1226 = "SECONDARY_UNLOAD_SYMBOL",
        peg$c1227 = { type: "literal", value: "SECONDARY_UNLOAD_SYMBOL", description: "\"SECONDARY_UNLOAD_SYMBOL\"" },
        peg$c1228 = "SECURITY_SYMBOL",
        peg$c1229 = { type: "literal", value: "SECURITY_SYMBOL", description: "\"SECURITY_SYMBOL\"" },
        peg$c1230 = "SELECT_SYMBOL",
        peg$c1231 = { type: "literal", value: "SELECT_SYMBOL", description: "\"SELECT_SYMBOL\"" },
        peg$c1232 = "SENSITIVE_SYMBOL",
        peg$c1233 = { type: "literal", value: "SENSITIVE_SYMBOL", description: "\"SENSITIVE_SYMBOL\"" },
        peg$c1234 = "SEPARATOR_SYMBOL",
        peg$c1235 = { type: "literal", value: "SEPARATOR_SYMBOL", description: "\"SEPARATOR_SYMBOL\"" },
        peg$c1236 = "SERIALIZABLE_SYMBOL",
        peg$c1237 = { type: "literal", value: "SERIALIZABLE_SYMBOL", description: "\"SERIALIZABLE_SYMBOL\"" },
        peg$c1238 = "SERIAL_SYMBOL",
        peg$c1239 = { type: "literal", value: "SERIAL_SYMBOL", description: "\"SERIAL_SYMBOL\"" },
        peg$c1240 = "SERVER_SYMBOL",
        peg$c1241 = { type: "literal", value: "SERVER_SYMBOL", description: "\"SERVER_SYMBOL\"" },
        peg$c1242 = "SERVER_OPTIONS_SYMBOL",
        peg$c1243 = { type: "literal", value: "SERVER_OPTIONS_SYMBOL", description: "\"SERVER_OPTIONS_SYMBOL\"" },
        peg$c1244 = "SESSION_SYMBOL",
        peg$c1245 = { type: "literal", value: "SESSION_SYMBOL", description: "\"SESSION_SYMBOL\"" },
        peg$c1246 = "SESSION_USER_SYMBOL",
        peg$c1247 = { type: "literal", value: "SESSION_USER_SYMBOL", description: "\"SESSION_USER_SYMBOL\"" },
        peg$c1248 = "SET_VAR_SYMBOL",
        peg$c1249 = { type: "literal", value: "SET_VAR_SYMBOL", description: "\"SET_VAR_SYMBOL\"" },
        peg$c1250 = "SHARE_SYMBOL",
        peg$c1251 = { type: "literal", value: "SHARE_SYMBOL", description: "\"SHARE_SYMBOL\"" },
        peg$c1252 = "SHOW_SYMBOL",
        peg$c1253 = { type: "literal", value: "SHOW_SYMBOL", description: "\"SHOW_SYMBOL\"" },
        peg$c1254 = "SHUTDOWN_SYMBOL",
        peg$c1255 = { type: "literal", value: "SHUTDOWN_SYMBOL", description: "\"SHUTDOWN_SYMBOL\"" },
        peg$c1256 = "SIGNAL_SYMBOL",
        peg$c1257 = { type: "literal", value: "SIGNAL_SYMBOL", description: "\"SIGNAL_SYMBOL\"" },
        peg$c1258 = "SIGNED_SYMBOL",
        peg$c1259 = { type: "literal", value: "SIGNED_SYMBOL", description: "\"SIGNED_SYMBOL\"" },
        peg$c1260 = "SIMPLE_SYMBOL",
        peg$c1261 = { type: "literal", value: "SIMPLE_SYMBOL", description: "\"SIMPLE_SYMBOL\"" },
        peg$c1262 = "SKIP_SYMBOL",
        peg$c1263 = { type: "literal", value: "SKIP_SYMBOL", description: "\"SKIP_SYMBOL\"" },
        peg$c1264 = "SLAVE_SYMBOL",
        peg$c1265 = { type: "literal", value: "SLAVE_SYMBOL", description: "\"SLAVE_SYMBOL\"" },
        peg$c1266 = "SLOW_SYMBOL",
        peg$c1267 = { type: "literal", value: "SLOW_SYMBOL", description: "\"SLOW_SYMBOL\"" },
        peg$c1268 = "SNAPSHOT_SYMBOL",
        peg$c1269 = { type: "literal", value: "SNAPSHOT_SYMBOL", description: "\"SNAPSHOT_SYMBOL\"" },
        peg$c1270 = "SOME_SYMBOL",
        peg$c1271 = { type: "literal", value: "SOME_SYMBOL", description: "\"SOME_SYMBOL\"" },
        peg$c1272 = "SOCKET_SYMBOL",
        peg$c1273 = { type: "literal", value: "SOCKET_SYMBOL", description: "\"SOCKET_SYMBOL\"" },
        peg$c1274 = "SONAME_SYMBOL",
        peg$c1275 = { type: "literal", value: "SONAME_SYMBOL", description: "\"SONAME_SYMBOL\"" },
        peg$c1276 = "SOUNDS_SYMBOL",
        peg$c1277 = { type: "literal", value: "SOUNDS_SYMBOL", description: "\"SOUNDS_SYMBOL\"" },
        peg$c1278 = "SOURCE_SYMBOL",
        peg$c1279 = { type: "literal", value: "SOURCE_SYMBOL", description: "\"SOURCE_SYMBOL\"" },
        peg$c1280 = "SPATIAL_SYMBOL",
        peg$c1281 = { type: "literal", value: "SPATIAL_SYMBOL", description: "\"SPATIAL_SYMBOL\"" },
        peg$c1282 = "SQL_SYMBOL",
        peg$c1283 = { type: "literal", value: "SQL_SYMBOL", description: "\"SQL_SYMBOL\"" },
        peg$c1284 = "SQLEXCEPTION_SYMBOL",
        peg$c1285 = { type: "literal", value: "SQLEXCEPTION_SYMBOL", description: "\"SQLEXCEPTION_SYMBOL\"" },
        peg$c1286 = "SQLSTATE_SYMBOL",
        peg$c1287 = { type: "literal", value: "SQLSTATE_SYMBOL", description: "\"SQLSTATE_SYMBOL\"" },
        peg$c1288 = "SQLWARNING_SYMBOL",
        peg$c1289 = { type: "literal", value: "SQLWARNING_SYMBOL", description: "\"SQLWARNING_SYMBOL\"" },
        peg$c1290 = "SQL_AFTER_GTIDS_SYMBOL",
        peg$c1291 = { type: "literal", value: "SQL_AFTER_GTIDS_SYMBOL", description: "\"SQL_AFTER_GTIDS_SYMBOL\"" },
        peg$c1292 = "SQL_AFTER_MTS_GAPS_SYMBOL",
        peg$c1293 = { type: "literal", value: "SQL_AFTER_MTS_GAPS_SYMBOL", description: "\"SQL_AFTER_MTS_GAPS_SYMBOL\"" },
        peg$c1294 = "SQL_BEFORE_GTIDS_SYMBOL",
        peg$c1295 = { type: "literal", value: "SQL_BEFORE_GTIDS_SYMBOL", description: "\"SQL_BEFORE_GTIDS_SYMBOL\"" },
        peg$c1296 = "SQL_BIG_RESULT_SYMBOL",
        peg$c1297 = { type: "literal", value: "SQL_BIG_RESULT_SYMBOL", description: "\"SQL_BIG_RESULT_SYMBOL\"" },
        peg$c1298 = "SQL_BUFFER_RESULT_SYMBOL",
        peg$c1299 = { type: "literal", value: "SQL_BUFFER_RESULT_SYMBOL", description: "\"SQL_BUFFER_RESULT_SYMBOL\"" },
        peg$c1300 = "SQL_CALC_FOUND_ROWS_SYMBOL",
        peg$c1301 = { type: "literal", value: "SQL_CALC_FOUND_ROWS_SYMBOL", description: "\"SQL_CALC_FOUND_ROWS_SYMBOL\"" },
        peg$c1302 = "SQL_CACHE_SYMBOL",
        peg$c1303 = { type: "literal", value: "SQL_CACHE_SYMBOL", description: "\"SQL_CACHE_SYMBOL\"" },
        peg$c1304 = "SQL_NO_CACHE_SYMBOL",
        peg$c1305 = { type: "literal", value: "SQL_NO_CACHE_SYMBOL", description: "\"SQL_NO_CACHE_SYMBOL\"" },
        peg$c1306 = "SQL_SMALL_RESULT_SYMBOL",
        peg$c1307 = { type: "literal", value: "SQL_SMALL_RESULT_SYMBOL", description: "\"SQL_SMALL_RESULT_SYMBOL\"" },
        peg$c1308 = "SQL_THREAD_SYMBOL",
        peg$c1309 = { type: "literal", value: "SQL_THREAD_SYMBOL", description: "\"SQL_THREAD_SYMBOL\"" },
        peg$c1310 = "SQL_TSI_DAY_SYMBOL",
        peg$c1311 = { type: "literal", value: "SQL_TSI_DAY_SYMBOL", description: "\"SQL_TSI_DAY_SYMBOL\"" },
        peg$c1312 = "SQL_TSI_HOUR_SYMBOL",
        peg$c1313 = { type: "literal", value: "SQL_TSI_HOUR_SYMBOL", description: "\"SQL_TSI_HOUR_SYMBOL\"" },
        peg$c1314 = "SQL_TSI_MICROSECOND_SYMBOL",
        peg$c1315 = { type: "literal", value: "SQL_TSI_MICROSECOND_SYMBOL", description: "\"SQL_TSI_MICROSECOND_SYMBOL\"" },
        peg$c1316 = "SQL_TSI_MINUTE_SYMBOL",
        peg$c1317 = { type: "literal", value: "SQL_TSI_MINUTE_SYMBOL", description: "\"SQL_TSI_MINUTE_SYMBOL\"" },
        peg$c1318 = "SQL_TSI_MONTH_SYMBOL",
        peg$c1319 = { type: "literal", value: "SQL_TSI_MONTH_SYMBOL", description: "\"SQL_TSI_MONTH_SYMBOL\"" },
        peg$c1320 = "SQL_TSI_QUARTER_SYMBOL",
        peg$c1321 = { type: "literal", value: "SQL_TSI_QUARTER_SYMBOL", description: "\"SQL_TSI_QUARTER_SYMBOL\"" },
        peg$c1322 = "SQL_TSI_SECOND_SYMBOL",
        peg$c1323 = { type: "literal", value: "SQL_TSI_SECOND_SYMBOL", description: "\"SQL_TSI_SECOND_SYMBOL\"" },
        peg$c1324 = "SQL_TSI_WEEK_SYMBOL",
        peg$c1325 = { type: "literal", value: "SQL_TSI_WEEK_SYMBOL", description: "\"SQL_TSI_WEEK_SYMBOL\"" },
        peg$c1326 = "SQL_TSI_YEAR_SYMBOL",
        peg$c1327 = { type: "literal", value: "SQL_TSI_YEAR_SYMBOL", description: "\"SQL_TSI_YEAR_SYMBOL\"" },
        peg$c1328 = "SRID_SYMBOL",
        peg$c1329 = { type: "literal", value: "SRID_SYMBOL", description: "\"SRID_SYMBOL\"" },
        peg$c1330 = "SSL_SYMBOL",
        peg$c1331 = { type: "literal", value: "SSL_SYMBOL", description: "\"SSL_SYMBOL\"" },
        peg$c1332 = "STACKED_SYMBOL",
        peg$c1333 = { type: "literal", value: "STACKED_SYMBOL", description: "\"STACKED_SYMBOL\"" },
        peg$c1334 = "STARTING_SYMBOL",
        peg$c1335 = { type: "literal", value: "STARTING_SYMBOL", description: "\"STARTING_SYMBOL\"" },
        peg$c1336 = "STARTS_SYMBOL",
        peg$c1337 = { type: "literal", value: "STARTS_SYMBOL", description: "\"STARTS_SYMBOL\"" },
        peg$c1338 = "STATS_AUTO_RECALC_SYMBOL",
        peg$c1339 = { type: "literal", value: "STATS_AUTO_RECALC_SYMBOL", description: "\"STATS_AUTO_RECALC_SYMBOL\"" },
        peg$c1340 = "STATS_PERSISTENT_SYMBOL",
        peg$c1341 = { type: "literal", value: "STATS_PERSISTENT_SYMBOL", description: "\"STATS_PERSISTENT_SYMBOL\"" },
        peg$c1342 = "STATS_SAMPLE_PAGES_SYMBOL",
        peg$c1343 = { type: "literal", value: "STATS_SAMPLE_PAGES_SYMBOL", description: "\"STATS_SAMPLE_PAGES_SYMBOL\"" },
        peg$c1344 = "STATUS_SYMBOL",
        peg$c1345 = { type: "literal", value: "STATUS_SYMBOL", description: "\"STATUS_SYMBOL\"" },
        peg$c1346 = "STD_SYMBOL",
        peg$c1347 = { type: "literal", value: "STD_SYMBOL", description: "\"STD_SYMBOL\"" },
        peg$c1348 = "STDDEV_POP_SYMBOL",
        peg$c1349 = { type: "literal", value: "STDDEV_POP_SYMBOL", description: "\"STDDEV_POP_SYMBOL\"" },
        peg$c1350 = "STDDEV_SAMP_SYMBOL",
        peg$c1351 = { type: "literal", value: "STDDEV_SAMP_SYMBOL", description: "\"STDDEV_SAMP_SYMBOL\"" },
        peg$c1352 = "STDDEV_SYMBOL",
        peg$c1353 = { type: "literal", value: "STDDEV_SYMBOL", description: "\"STDDEV_SYMBOL\"" },
        peg$c1354 = "STOP_SYMBOL",
        peg$c1355 = { type: "literal", value: "STOP_SYMBOL", description: "\"STOP_SYMBOL\"" },
        peg$c1356 = "STORAGE_SYMBOL",
        peg$c1357 = { type: "literal", value: "STORAGE_SYMBOL", description: "\"STORAGE_SYMBOL\"" },
        peg$c1358 = "STORED_SYMBOL",
        peg$c1359 = { type: "literal", value: "STORED_SYMBOL", description: "\"STORED_SYMBOL\"" },
        peg$c1360 = "STRAIGHT_JOIN_SYMBOL",
        peg$c1361 = { type: "literal", value: "STRAIGHT_JOIN_SYMBOL", description: "\"STRAIGHT_JOIN_SYMBOL\"" },
        peg$c1362 = "STREAM_SYMBOL",
        peg$c1363 = { type: "literal", value: "STREAM_SYMBOL", description: "\"STREAM_SYMBOL\"" },
        peg$c1364 = "STRING_SYMBOL",
        peg$c1365 = { type: "literal", value: "STRING_SYMBOL", description: "\"STRING_SYMBOL\"" },
        peg$c1366 = "SUBCLASS_ORIGIN_SYMBOL",
        peg$c1367 = { type: "literal", value: "SUBCLASS_ORIGIN_SYMBOL", description: "\"SUBCLASS_ORIGIN_SYMBOL\"" },
        peg$c1368 = "SUBDATE_SYMBOL",
        peg$c1369 = { type: "literal", value: "SUBDATE_SYMBOL", description: "\"SUBDATE_SYMBOL\"" },
        peg$c1370 = "SUBJECT_SYMBOL",
        peg$c1371 = { type: "literal", value: "SUBJECT_SYMBOL", description: "\"SUBJECT_SYMBOL\"" },
        peg$c1372 = "SUBPARTITIONS_SYMBOL",
        peg$c1373 = { type: "literal", value: "SUBPARTITIONS_SYMBOL", description: "\"SUBPARTITIONS_SYMBOL\"" },
        peg$c1374 = "SUBPARTITION_SYMBOL",
        peg$c1375 = { type: "literal", value: "SUBPARTITION_SYMBOL", description: "\"SUBPARTITION_SYMBOL\"" },
        peg$c1376 = "SUBSTR_SYMBOL",
        peg$c1377 = { type: "literal", value: "SUBSTR_SYMBOL", description: "\"SUBSTR_SYMBOL\"" },
        peg$c1378 = "SUBSTRING_SYMBOL",
        peg$c1379 = { type: "literal", value: "SUBSTRING_SYMBOL", description: "\"SUBSTRING_SYMBOL\"" },
        peg$c1380 = "SUM_SYMBOL",
        peg$c1381 = { type: "literal", value: "SUM_SYMBOL", description: "\"SUM_SYMBOL\"" },
        peg$c1382 = "SUPER_SYMBOL",
        peg$c1383 = { type: "literal", value: "SUPER_SYMBOL", description: "\"SUPER_SYMBOL\"" },
        peg$c1384 = "SUSPEND_SYMBOL",
        peg$c1385 = { type: "literal", value: "SUSPEND_SYMBOL", description: "\"SUSPEND_SYMBOL\"" },
        peg$c1386 = "SWAPS_SYMBOL",
        peg$c1387 = { type: "literal", value: "SWAPS_SYMBOL", description: "\"SWAPS_SYMBOL\"" },
        peg$c1388 = "SWITCHES_SYMBOL",
        peg$c1389 = { type: "literal", value: "SWITCHES_SYMBOL", description: "\"SWITCHES_SYMBOL\"" },
        peg$c1390 = "SYSDATE_SYMBOL",
        peg$c1391 = { type: "literal", value: "SYSDATE_SYMBOL", description: "\"SYSDATE_SYMBOL\"" },
        peg$c1392 = "SYSTEM_SYMBOL",
        peg$c1393 = { type: "literal", value: "SYSTEM_SYMBOL", description: "\"SYSTEM_SYMBOL\"" },
        peg$c1394 = "SYSTEM_USER_SYMBOL",
        peg$c1395 = { type: "literal", value: "SYSTEM_USER_SYMBOL", description: "\"SYSTEM_USER_SYMBOL\"" },
        peg$c1396 = "TABLE_SYMBOL",
        peg$c1397 = { type: "literal", value: "TABLE_SYMBOL", description: "\"TABLE_SYMBOL\"" },
        peg$c1398 = "TABLES_SYMBOL",
        peg$c1399 = { type: "literal", value: "TABLES_SYMBOL", description: "\"TABLES_SYMBOL\"" },
        peg$c1400 = "TABLESPACE_SYMBOL",
        peg$c1401 = { type: "literal", value: "TABLESPACE_SYMBOL", description: "\"TABLESPACE_SYMBOL\"" },
        peg$c1402 = "TABLE_CHECKSUM_SYMBOL",
        peg$c1403 = { type: "literal", value: "TABLE_CHECKSUM_SYMBOL", description: "\"TABLE_CHECKSUM_SYMBOL\"" },
        peg$c1404 = "TABLE_NAME_SYMBOL",
        peg$c1405 = { type: "literal", value: "TABLE_NAME_SYMBOL", description: "\"TABLE_NAME_SYMBOL\"" },
        peg$c1406 = "TEMPORARY_SYMBOL",
        peg$c1407 = { type: "literal", value: "TEMPORARY_SYMBOL", description: "\"TEMPORARY_SYMBOL\"" },
        peg$c1408 = "TEMPTABLE_SYMBOL",
        peg$c1409 = { type: "literal", value: "TEMPTABLE_SYMBOL", description: "\"TEMPTABLE_SYMBOL\"" },
        peg$c1410 = "TERMINATED_SYMBOL",
        peg$c1411 = { type: "literal", value: "TERMINATED_SYMBOL", description: "\"TERMINATED_SYMBOL\"" },
        peg$c1412 = "THAN_SYMBOL",
        peg$c1413 = { type: "literal", value: "THAN_SYMBOL", description: "\"THAN_SYMBOL\"" },
        peg$c1414 = "THEN_SYMBOL",
        peg$c1415 = { type: "literal", value: "THEN_SYMBOL", description: "\"THEN_SYMBOL\"" },
        peg$c1416 = "THREAD_PRIORITY_SYMBOL",
        peg$c1417 = { type: "literal", value: "THREAD_PRIORITY_SYMBOL", description: "\"THREAD_PRIORITY_SYMBOL\"" },
        peg$c1418 = "TIES_SYMBOL",
        peg$c1419 = { type: "literal", value: "TIES_SYMBOL", description: "\"TIES_SYMBOL\"" },
        peg$c1420 = "TIMESTAMP_ADD_SYMBOL",
        peg$c1421 = { type: "literal", value: "TIMESTAMP_ADD_SYMBOL", description: "\"TIMESTAMP_ADD_SYMBOL\"" },
        peg$c1422 = "TIMESTAMP_DIFF_SYMBOL",
        peg$c1423 = { type: "literal", value: "TIMESTAMP_DIFF_SYMBOL", description: "\"TIMESTAMP_DIFF_SYMBOL\"" },
        peg$c1424 = "TO_SYMBOL",
        peg$c1425 = { type: "literal", value: "TO_SYMBOL", description: "\"TO_SYMBOL\"" },
        peg$c1426 = "TRAILING_SYMBOL",
        peg$c1427 = { type: "literal", value: "TRAILING_SYMBOL", description: "\"TRAILING_SYMBOL\"" },
        peg$c1428 = "TRANSACTION_SYMBOL",
        peg$c1429 = { type: "literal", value: "TRANSACTION_SYMBOL", description: "\"TRANSACTION_SYMBOL\"" },
        peg$c1430 = "TRIGGER_SYMBOL",
        peg$c1431 = { type: "literal", value: "TRIGGER_SYMBOL", description: "\"TRIGGER_SYMBOL\"" },
        peg$c1432 = "TRIGGERS_SYMBOL",
        peg$c1433 = { type: "literal", value: "TRIGGERS_SYMBOL", description: "\"TRIGGERS_SYMBOL\"" },
        peg$c1434 = "TRIM_SYMBOL",
        peg$c1435 = { type: "literal", value: "TRIM_SYMBOL", description: "\"TRIM_SYMBOL\"" },
        peg$c1436 = "TRUE_SYMBOL",
        peg$c1437 = { type: "literal", value: "TRUE_SYMBOL", description: "\"TRUE_SYMBOL\"" },
        peg$c1438 = "TRUNCATE_SYMBOL",
        peg$c1439 = { type: "literal", value: "TRUNCATE_SYMBOL", description: "\"TRUNCATE_SYMBOL\"" },
        peg$c1440 = "TYPES_SYMBOL",
        peg$c1441 = { type: "literal", value: "TYPES_SYMBOL", description: "\"TYPES_SYMBOL\"" },
        peg$c1442 = "TYPE_SYMBOL",
        peg$c1443 = { type: "literal", value: "TYPE_SYMBOL", description: "\"TYPE_SYMBOL\"" },
        peg$c1444 = "UDF_RETURNS_SYMBOL",
        peg$c1445 = { type: "literal", value: "UDF_RETURNS_SYMBOL", description: "\"UDF_RETURNS_SYMBOL\"" },
        peg$c1446 = "UNBOUNDED_SYMBOL",
        peg$c1447 = { type: "literal", value: "UNBOUNDED_SYMBOL", description: "\"UNBOUNDED_SYMBOL\"" },
        peg$c1448 = "UNCOMMITTED_SYMBOL",
        peg$c1449 = { type: "literal", value: "UNCOMMITTED_SYMBOL", description: "\"UNCOMMITTED_SYMBOL\"" },
        peg$c1450 = "UNDEFINED_SYMBOL",
        peg$c1451 = { type: "literal", value: "UNDEFINED_SYMBOL", description: "\"UNDEFINED_SYMBOL\"" },
        peg$c1452 = "UNDO_BUFFER_SIZE_SYMBOL",
        peg$c1453 = { type: "literal", value: "UNDO_BUFFER_SIZE_SYMBOL", description: "\"UNDO_BUFFER_SIZE_SYMBOL\"" },
        peg$c1454 = "UNDOFILE_SYMBOL",
        peg$c1455 = { type: "literal", value: "UNDOFILE_SYMBOL", description: "\"UNDOFILE_SYMBOL\"" },
        peg$c1456 = "UNDO_SYMBOL",
        peg$c1457 = { type: "literal", value: "UNDO_SYMBOL", description: "\"UNDO_SYMBOL\"" },
        peg$c1458 = "UNICODE_SYMBOL",
        peg$c1459 = { type: "literal", value: "UNICODE_SYMBOL", description: "\"UNICODE_SYMBOL\"" },
        peg$c1460 = "UNION_SYMBOL",
        peg$c1461 = { type: "literal", value: "UNION_SYMBOL", description: "\"UNION_SYMBOL\"" },
        peg$c1462 = "UNIQUE_SYMBOL",
        peg$c1463 = { type: "literal", value: "UNIQUE_SYMBOL", description: "\"UNIQUE_SYMBOL\"" },
        peg$c1464 = "UNKNOWN_SYMBOL",
        peg$c1465 = { type: "literal", value: "UNKNOWN_SYMBOL", description: "\"UNKNOWN_SYMBOL\"" },
        peg$c1466 = "UNINSTALL_SYMBOL",
        peg$c1467 = { type: "literal", value: "UNINSTALL_SYMBOL", description: "\"UNINSTALL_SYMBOL\"" },
        peg$c1468 = "UNSIGNED_SYMBOL",
        peg$c1469 = { type: "literal", value: "UNSIGNED_SYMBOL", description: "\"UNSIGNED_SYMBOL\"" },
        peg$c1470 = "UPDATE_SYMBOL",
        peg$c1471 = { type: "literal", value: "UPDATE_SYMBOL", description: "\"UPDATE_SYMBOL\"" },
        peg$c1472 = "UPGRADE_SYMBOL",
        peg$c1473 = { type: "literal", value: "UPGRADE_SYMBOL", description: "\"UPGRADE_SYMBOL\"" },
        peg$c1474 = "USAGE_SYMBOL",
        peg$c1475 = { type: "literal", value: "USAGE_SYMBOL", description: "\"USAGE_SYMBOL\"" },
        peg$c1476 = "USER_RESOURCES_SYMBOL",
        peg$c1477 = { type: "literal", value: "USER_RESOURCES_SYMBOL", description: "\"USER_RESOURCES_SYMBOL\"" },
        peg$c1478 = "USER_SYMBOL",
        peg$c1479 = { type: "literal", value: "USER_SYMBOL", description: "\"USER_SYMBOL\"" },
        peg$c1480 = "USE_FRM_SYMBOL",
        peg$c1481 = { type: "literal", value: "USE_FRM_SYMBOL", description: "\"USE_FRM_SYMBOL\"" },
        peg$c1482 = "USE_SYMBOL",
        peg$c1483 = { type: "literal", value: "USE_SYMBOL", description: "\"USE_SYMBOL\"" },
        peg$c1484 = "USING_SYMBOL",
        peg$c1485 = { type: "literal", value: "USING_SYMBOL", description: "\"USING_SYMBOL\"" },
        peg$c1486 = "UTC_DATE_SYMBOL",
        peg$c1487 = { type: "literal", value: "UTC_DATE_SYMBOL", description: "\"UTC_DATE_SYMBOL\"" },
        peg$c1488 = "UTC_TIME_SYMBOL",
        peg$c1489 = { type: "literal", value: "UTC_TIME_SYMBOL", description: "\"UTC_TIME_SYMBOL\"" },
        peg$c1490 = "UTC_TIMESTAMP_SYMBOL",
        peg$c1491 = { type: "literal", value: "UTC_TIMESTAMP_SYMBOL", description: "\"UTC_TIMESTAMP_SYMBOL\"" },
        peg$c1492 = "VALIDATION_SYMBOL",
        peg$c1493 = { type: "literal", value: "VALIDATION_SYMBOL", description: "\"VALIDATION_SYMBOL\"" },
        peg$c1494 = "VALUE_SYMBOL",
        peg$c1495 = { type: "literal", value: "VALUE_SYMBOL", description: "\"VALUE_SYMBOL\"" },
        peg$c1496 = "VALUES_SYMBOL",
        peg$c1497 = { type: "literal", value: "VALUES_SYMBOL", description: "\"VALUES_SYMBOL\"" },
        peg$c1498 = "VARCHARACTER_SYMBOL",
        peg$c1499 = { type: "literal", value: "VARCHARACTER_SYMBOL", description: "\"VARCHARACTER_SYMBOL\"" },
        peg$c1500 = "VARIABLES_SYMBOL",
        peg$c1501 = { type: "literal", value: "VARIABLES_SYMBOL", description: "\"VARIABLES_SYMBOL\"" },
        peg$c1502 = "VARIANCE_SYMBOL",
        peg$c1503 = { type: "literal", value: "VARIANCE_SYMBOL", description: "\"VARIANCE_SYMBOL\"" },
        peg$c1504 = "VARYING_SYMBOL",
        peg$c1505 = { type: "literal", value: "VARYING_SYMBOL", description: "\"VARYING_SYMBOL\"" },
        peg$c1506 = "VAR_POP_SYMBOL",
        peg$c1507 = { type: "literal", value: "VAR_POP_SYMBOL", description: "\"VAR_POP_SYMBOL\"" },
        peg$c1508 = "VAR_SAMP_SYMBOL",
        peg$c1509 = { type: "literal", value: "VAR_SAMP_SYMBOL", description: "\"VAR_SAMP_SYMBOL\"" },
        peg$c1510 = "VCPU_SYMBOL",
        peg$c1511 = { type: "literal", value: "VCPU_SYMBOL", description: "\"VCPU_SYMBOL\"" },
        peg$c1512 = "VIEW_SYMBOL",
        peg$c1513 = { type: "literal", value: "VIEW_SYMBOL", description: "\"VIEW_SYMBOL\"" },
        peg$c1514 = "VIRTUAL_SYMBOL",
        peg$c1515 = { type: "literal", value: "VIRTUAL_SYMBOL", description: "\"VIRTUAL_SYMBOL\"" },
        peg$c1516 = "VISIBLE_SYMBOL",
        peg$c1517 = { type: "literal", value: "VISIBLE_SYMBOL", description: "\"VISIBLE_SYMBOL\"" },
        peg$c1518 = "WAIT_SYMBOL",
        peg$c1519 = { type: "literal", value: "WAIT_SYMBOL", description: "\"WAIT_SYMBOL\"" },
        peg$c1520 = "WARNINGS_SYMBOL",
        peg$c1521 = { type: "literal", value: "WARNINGS_SYMBOL", description: "\"WARNINGS_SYMBOL\"" },
        peg$c1522 = "WEEK_SYMBOL",
        peg$c1523 = { type: "literal", value: "WEEK_SYMBOL", description: "\"WEEK_SYMBOL\"" },
        peg$c1524 = "WHEN_SYMBOL",
        peg$c1525 = { type: "literal", value: "WHEN_SYMBOL", description: "\"WHEN_SYMBOL\"" },
        peg$c1526 = "WEIGHT_STRING_SYMBOL",
        peg$c1527 = { type: "literal", value: "WEIGHT_STRING_SYMBOL", description: "\"WEIGHT_STRING_SYMBOL\"" },
        peg$c1528 = "WHERE_SYMBOL",
        peg$c1529 = { type: "literal", value: "WHERE_SYMBOL", description: "\"WHERE_SYMBOL\"" },
        peg$c1530 = "WHILE_SYMBOL",
        peg$c1531 = { type: "literal", value: "WHILE_SYMBOL", description: "\"WHILE_SYMBOL\"" },
        peg$c1532 = "WINDOW_SYMBOL",
        peg$c1533 = { type: "literal", value: "WINDOW_SYMBOL", description: "\"WINDOW_SYMBOL\"" },
        peg$c1534 = "WITH_SYMBOL",
        peg$c1535 = { type: "literal", value: "WITH_SYMBOL", description: "\"WITH_SYMBOL\"" },
        peg$c1536 = "WITHOUT_SYMBOL",
        peg$c1537 = { type: "literal", value: "WITHOUT_SYMBOL", description: "\"WITHOUT_SYMBOL\"" },
        peg$c1538 = "WORK_SYMBOL",
        peg$c1539 = { type: "literal", value: "WORK_SYMBOL", description: "\"WORK_SYMBOL\"" },
        peg$c1540 = "WRAPPER_SYMBOL",
        peg$c1541 = { type: "literal", value: "WRAPPER_SYMBOL", description: "\"WRAPPER_SYMBOL\"" },
        peg$c1542 = "WRITE_SYMBOL",
        peg$c1543 = { type: "literal", value: "WRITE_SYMBOL", description: "\"WRITE_SYMBOL\"" },
        peg$c1544 = "XA_SYMBOL",
        peg$c1545 = { type: "literal", value: "XA_SYMBOL", description: "\"XA_SYMBOL\"" },
        peg$c1546 = "X509_SYMBOL",
        peg$c1547 = { type: "literal", value: "X509_SYMBOL", description: "\"X509_SYMBOL\"" },
        peg$c1548 = "XID_SYMBOL",
        peg$c1549 = { type: "literal", value: "XID_SYMBOL", description: "\"XID_SYMBOL\"" },
        peg$c1550 = "XML_SYMBOL",
        peg$c1551 = { type: "literal", value: "XML_SYMBOL", description: "\"XML_SYMBOL\"" },
        peg$c1552 = "XOR_SYMBOL",
        peg$c1553 = { type: "literal", value: "XOR_SYMBOL", description: "\"XOR_SYMBOL\"" },
        peg$c1554 = "YEAR_MONTH_SYMBOL",
        peg$c1555 = { type: "literal", value: "YEAR_MONTH_SYMBOL", description: "\"YEAR_MONTH_SYMBOL\"" },
        peg$c1556 = "ZEROFILL_SYMBOL",
        peg$c1557 = { type: "literal", value: "ZEROFILL_SYMBOL", description: "\"ZEROFILL_SYMBOL\"" },
        peg$c1558 = "INT1_SYMBOL",
        peg$c1559 = { type: "literal", value: "INT1_SYMBOL", description: "\"INT1_SYMBOL\"" },
        peg$c1560 = "INT2_SYMBOL",
        peg$c1561 = { type: "literal", value: "INT2_SYMBOL", description: "\"INT2_SYMBOL\"" },
        peg$c1562 = "INT3_SYMBOL",
        peg$c1563 = { type: "literal", value: "INT3_SYMBOL", description: "\"INT3_SYMBOL\"" },
        peg$c1564 = "INT4_SYMBOL",
        peg$c1565 = { type: "literal", value: "INT4_SYMBOL", description: "\"INT4_SYMBOL\"" },
        peg$c1566 = "INT8_SYMBOL",
        peg$c1567 = { type: "literal", value: "INT8_SYMBOL", description: "\"INT8_SYMBOL\"" },
        peg$c1568 = "IDENTIFIER",
        peg$c1569 = { type: "literal", value: "IDENTIFIER", description: "\"IDENTIFIER\"" },
        peg$c1570 = "BACK_TICK_QUOTED_ID",
        peg$c1571 = { type: "literal", value: "BACK_TICK_QUOTED_ID", description: "\"BACK_TICK_QUOTED_ID\"" },
        peg$c1572 = "DOUBLE_QUOTED_TEXT",
        peg$c1573 = { type: "literal", value: "DOUBLE_QUOTED_TEXT", description: "\"DOUBLE_QUOTED_TEXT\"" },
        peg$c1574 = "SINGLE_QUOTED_TEXT",
        peg$c1575 = { type: "literal", value: "SINGLE_QUOTED_TEXT", description: "\"SINGLE_QUOTED_TEXT\"" },
        peg$c1576 = "HEX_NUMBER",
        peg$c1577 = { type: "literal", value: "HEX_NUMBER", description: "\"HEX_NUMBER\"" },
        peg$c1578 = "0b",
        peg$c1579 = { type: "literal", value: "0b", description: "\"0b\"" },
        peg$c1580 = /^[01]/,
        peg$c1581 = { type: "class", value: "[01]", description: "[01]" },
        peg$c1582 = "b'",
        peg$c1583 = { type: "literal", value: "b'", description: "\"b'\"" },
        peg$c1584 = "'",
        peg$c1585 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c1586 = "DECIMAL_NUMBER",
        peg$c1587 = { type: "literal", value: "DECIMAL_NUMBER", description: "\"DECIMAL_NUMBER\"" },
        peg$c1588 = "INT_NUMBER",
        peg$c1589 = { type: "literal", value: "INT_NUMBER", description: "\"INT_NUMBER\"" },
        peg$c1590 = "FLOAT_NUMBER",
        peg$c1591 = { type: "literal", value: "FLOAT_NUMBER", description: "\"FLOAT_NUMBER\"" },
        peg$c1592 = "UNDERSCORE_CHARSET",
        peg$c1593 = { type: "literal", value: "UNDERSCORE_CHARSET", description: "\"UNDERSCORE_CHARSET\"" },
        peg$c1594 = "DOT_IDENTIFIER",
        peg$c1595 = { type: "literal", value: "DOT_IDENTIFIER", description: "\"DOT_IDENTIFIER\"" },
        peg$c1596 = "INVALID_INPUT",
        peg$c1597 = { type: "literal", value: "INVALID_INPUT", description: "\"INVALID_INPUT\"" },
        peg$c1598 = "LINEBREAK",
        peg$c1599 = { type: "literal", value: "LINEBREAK", description: "\"LINEBREAK\"" },
        peg$c1600 = "START_SYMBOL",
        peg$c1601 = { type: "literal", value: "START_SYMBOL", description: "\"START_SYMBOL\"" },
        peg$c1602 = "UNLOCK_SYMBOL",
        peg$c1603 = { type: "literal", value: "UNLOCK_SYMBOL", description: "\"UNLOCK_SYMBOL\"" },
        peg$c1604 = "CLONE_SYMBOL",
        peg$c1605 = { type: "literal", value: "CLONE_SYMBOL", description: "\"CLONE_SYMBOL\"" },
        peg$c1606 = "GET_SYMBOL",
        peg$c1607 = { type: "literal", value: "GET_SYMBOL", description: "\"GET_SYMBOL\"" },
        peg$c1608 = "ASCII_SYMBOL",
        peg$c1609 = { type: "literal", value: "ASCII_SYMBOL", description: "\"ASCII_SYMBOL\"" },
        peg$c1610 = "BIT_SYMBOL",
        peg$c1611 = { type: "literal", value: "BIT_SYMBOL", description: "\"BIT_SYMBOL\"" },
        peg$c1612 = "BUCKETS_SYMBOL",
        peg$c1613 = { type: "literal", value: "BUCKETS_SYMBOL", description: "\"BUCKETS_SYMBOL\"" },
        peg$c1614 = "COMPONENT_SYMBOL",
        peg$c1615 = { type: "literal", value: "COMPONENT_SYMBOL", description: "\"COMPONENT_SYMBOL\"" },
        peg$c1616 = "NOW_SYMBOL",
        peg$c1617 = { type: "literal", value: "NOW_SYMBOL", description: "\"NOW_SYMBOL\"" },
        peg$c1618 = "DEFINITION_SYMBOL",
        peg$c1619 = { type: "literal", value: "DEFINITION_SYMBOL", description: "\"DEFINITION_SYMBOL\"" },
        peg$c1620 = "DENSE_RANK_SYMBOL",
        peg$c1621 = { type: "literal", value: "DENSE_RANK_SYMBOL", description: "\"DENSE_RANK_SYMBOL\"" },
        peg$c1622 = "DESCRIPTION_SYMBOL",
        peg$c1623 = { type: "literal", value: "DESCRIPTION_SYMBOL", description: "\"DESCRIPTION_SYMBOL\"" },
        peg$c1624 = "FAILED_LOGIN_ATTEMPTS_SYMBOL",
        peg$c1625 = { type: "literal", value: "FAILED_LOGIN_ATTEMPTS_SYMBOL", description: "\"FAILED_LOGIN_ATTEMPTS_SYMBOL\"" },
        peg$c1626 = "FOLLOWING_SYMBOL",
        peg$c1627 = { type: "literal", value: "FOLLOWING_SYMBOL", description: "\"FOLLOWING_SYMBOL\"" },
        peg$c1628 = "GROUPING_SYMBOL",
        peg$c1629 = { type: "literal", value: "GROUPING_SYMBOL", description: "\"GROUPING_SYMBOL\"" },
        peg$c1630 = "GROUPS_SYMBOL",
        peg$c1631 = { type: "literal", value: "GROUPS_SYMBOL", description: "\"GROUPS_SYMBOL\"" },
        peg$c1632 = "LAG_SYMBOL",
        peg$c1633 = { type: "literal", value: "LAG_SYMBOL", description: "\"LAG_SYMBOL\"" },
        peg$c1634 = "LONG_SYMBOL",
        peg$c1635 = { type: "literal", value: "LONG_SYMBOL", description: "\"LONG_SYMBOL\"" },
        peg$c1636 = "MASTER_COMPRESSION_ALGORITHM_SYMBOL",
        peg$c1637 = { type: "literal", value: "MASTER_COMPRESSION_ALGORITHM_SYMBOL", description: "\"MASTER_COMPRESSION_ALGORITHM_SYMBOL\"" },
        peg$c1638 = "NOT2_SYMBOL",
        peg$c1639 = { type: "literal", value: "NOT2_SYMBOL", description: "\"NOT2_SYMBOL\"" },
        peg$c1640 = "NO_SYMBOL",
        peg$c1641 = { type: "literal", value: "NO_SYMBOL", description: "\"NO_SYMBOL\"" },
        peg$c1642 = "REFERENCE_SYMBOL",
        peg$c1643 = { type: "literal", value: "REFERENCE_SYMBOL", description: "\"REFERENCE_SYMBOL\"" },
        peg$c1644 = "RETURN_SYMBOL",
        peg$c1645 = { type: "literal", value: "RETURN_SYMBOL", description: "\"RETURN_SYMBOL\"" },
        peg$c1646 = "SPECIFIC_SYMBOL",
        peg$c1647 = { type: "literal", value: "SPECIFIC_SYMBOL", description: "\"SPECIFIC_SYMBOL\"" },
        peg$c1648 = "AUTHORS_SYMBOL",
        peg$c1649 = { type: "literal", value: "AUTHORS_SYMBOL", description: "\"AUTHORS_SYMBOL\"" },
        peg$c1650 = "ADDDATE_SYMBOL",
        peg$c1651 = { type: "literal", value: "ADDDATE_SYMBOL", description: "\"ADDDATE_SYMBOL\"" },
        peg$c1652 = "CONCAT_PIPES_SYMBOL",
        peg$c1653 = { type: "literal", value: "CONCAT_PIPES_SYMBOL", description: "\"CONCAT_PIPES_SYMBOL\"" },
        peg$c1654 = "ACTIVE_SYMBOL",
        peg$c1655 = { type: "literal", value: "ACTIVE_SYMBOL", description: "\"ACTIVE_SYMBOL\"" },
        peg$c1656 = "ADMIN_SYMBOL",
        peg$c1657 = { type: "literal", value: "ADMIN_SYMBOL", description: "\"ADMIN_SYMBOL\"" },
        peg$c1658 = "EXCLUDE_SYMBOL",
        peg$c1659 = { type: "literal", value: "EXCLUDE_SYMBOL", description: "\"EXCLUDE_SYMBOL\"" },
        peg$c1660 = "INACTIVE_SYMBOL",
        peg$c1661 = { type: "literal", value: "INACTIVE_SYMBOL", description: "\"INACTIVE_SYMBOL\"" },
        peg$c1662 = "LOCKED_SYMBOL",
        peg$c1663 = { type: "literal", value: "LOCKED_SYMBOL", description: "\"LOCKED_SYMBOL\"" },
        peg$c1664 = "ROUTINE_SYMBOL",
        peg$c1665 = { type: "literal", value: "ROUTINE_SYMBOL", description: "\"ROUTINE_SYMBOL\"" },
        peg$c1666 = "UNTIL_SYMBOL",
        peg$c1667 = { type: "literal", value: "UNTIL_SYMBOL", description: "\"UNTIL_SYMBOL\"" },
        peg$c1668 = "ARRAY_SYMBOL",
        peg$c1669 = { type: "literal", value: "ARRAY_SYMBOL", description: "\"ARRAY_SYMBOL\"" },
        peg$c1670 = "PASSWORD_LOCK_TIME_SYMBOL",
        peg$c1671 = { type: "literal", value: "PASSWORD_LOCK_TIME_SYMBOL", description: "\"PASSWORD_LOCK_TIME_SYMBOL\"" },
        peg$c1672 = "NCHAR_TEXT",
        peg$c1673 = { type: "literal", value: "NCHAR_TEXT", description: "\"NCHAR_TEXT\"" },
        peg$c1674 = "LONG_NUMBER",
        peg$c1675 = { type: "literal", value: "LONG_NUMBER", description: "\"LONG_NUMBER\"" },
        peg$c1676 = "ULONGLONG_NUMBER",
        peg$c1677 = { type: "literal", value: "ULONGLONG_NUMBER", description: "\"ULONGLONG_NUMBER\"" },
        peg$c1678 = "CUME_DIST_SYMBO",
        peg$c1679 = { type: "literal", value: "CUME_DIST_SYMBO", description: "\"CUME_DIST_SYMBO\"" },
        peg$c1680 = "CUME_DIST_SYMBOL",
        peg$c1681 = { type: "literal", value: "CUME_DIST_SYMBOL", description: "\"CUME_DIST_SYMBOL\"" },
        peg$c1682 = "FOUND_ROWS_SYMBOL",
        peg$c1683 = { type: "literal", value: "FOUND_ROWS_SYMBOL", description: "\"FOUND_ROWS_SYMBOL\"" },
        peg$c1684 = "CONCAT_SYMBOL",
        peg$c1685 = { type: "literal", value: "CONCAT_SYMBOL", description: "\"CONCAT_SYMBOL\"" },
        peg$c1686 = "EOF",
        peg$c1687 = { type: "literal", value: "EOF", description: "\"EOF\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseStart() {
      var s0;

      s0 = peg$parsequery();

      return s0;
    }

    function peg$parsequery() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseEOF();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesimpleStatement();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebeginWork();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseSEMICOLON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOF();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$parseEOF();
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesimpleStatement() {
      var s0, s1, s2;

      s0 = peg$parsealterStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecreateStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedropStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parserenameTableStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetruncateTableStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s1 = peg$c2();
                if (s1) {
                  s1 = peg$c3;
                } else {
                  s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseimportStatement();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecallStatement();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsedeleteStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsedoStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsehandlerStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseinsertStatement();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseloadStatement();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsereplaceStatement();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseselectStatement();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseupdateStatement();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsetransactionOrLockingStatement();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsereplicationStatement();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsepreparedStatement();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          peg$reportedPos = peg$currPos;
                                          s1 = peg$c2();
                                          if (s1) {
                                            s1 = peg$c3;
                                          } else {
                                            s1 = peg$c0;
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parsecloneStatement();
                                            if (s2 !== peg$FAILED) {
                                              s1 = [s1, s2];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseaccountManagementStatement();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsetableAdministrationStatement();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseinstallUninstallStatment();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsesetStatement();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseshowStatement();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      peg$reportedPos = peg$currPos;
                                                      s1 = peg$c2();
                                                      if (s1) {
                                                        s1 = peg$c3;
                                                      } else {
                                                        s1 = peg$c0;
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parseresourceGroupManagement();
                                                        if (s2 !== peg$FAILED) {
                                                          s1 = [s1, s2];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseotherAdministrativeStatement();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseutilityStatement();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            peg$reportedPos = peg$currPos;
                                                            s1 = peg$c4();
                                                            if (s1) {
                                                              s1 = peg$c3;
                                                            } else {
                                                              s1 = peg$c0;
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parsegetDiagnostics();
                                                              if (s2 !== peg$FAILED) {
                                                                s1 = [s1, s2];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsesignalStatement();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseresignalStatement();
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseALTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealterTable();
        if (s2 === peg$FAILED) {
          s2 = peg$parsealterDatabase();
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsePROCEDURE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsequalifiedIdentifier();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseroutineAlterOptions();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseFUNCTION_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsequalifiedIdentifier();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseroutineAlterOptions();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsealterView();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsealterEvent();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsealterTablespace();
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s3 = peg$c5();
                      if (s3) {
                        s3 = peg$c3;
                      } else {
                        s3 = peg$c0;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsealterUndoTablespace();
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsealterLogfileGroup();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsealterServer();
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s3 = peg$c6();
                            if (s3) {
                              s3 = peg$c3;
                            } else {
                              s3 = peg$c0;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseINSTANCE_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseROTATE_SYMBOL();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parsetextOrIdentifier();
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parseMASTER_SYMBOL();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parseKEY_SYMBOL();
                                      if (s8 !== peg$FAILED) {
                                        s3 = [s3, s4, s5, s6, s7, s8];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterDatabase() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseDATABASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsecreateDatabaseOption();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsecreateDatabaseOption();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s4 = peg$c8();
            if (s4) {
              s4 = peg$c3;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseUPGRADE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseDATA_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseDIRECTORY_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseNAME_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7, s8];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterEvent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEVENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseON_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseSCHEDULE_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseschedule();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseON_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCOMPLETION_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseNOT_SYMBOL();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsePRESERVE_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseRENAME_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseTO_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseidentifier();
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseENABLE_SYMBOL();
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parseDISABLE_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseON_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseSLAVE_SYMBOL();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseCOMMENT_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsetextLiteral();
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseDO_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsecompoundStatement();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterLogfileGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLOGFILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGROUP_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseADD_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseUNDOFILE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextLiteral();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsealterLogfileGroupOptions();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterLogfileGroupOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterLogfileGroupOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterLogfileGroupOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterLogfileGroupOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterLogfileGroupOption() {
      var s0;

      s0 = peg$parsetsOptionInitialSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionEngine();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionWait();
        }
      }

      return s0;
    }

    function peg$parsealterServer() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSERVER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseserverOptions();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterTable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseonlineOption();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c9();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIGNORE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTABLE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRef();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsealterTableActions();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterTableActions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsealterCommandList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepartitionClause();
        if (s2 === peg$FAILED) {
          s2 = peg$parseremovePartitioning();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepartitionClause();
        if (s0 === peg$FAILED) {
          s0 = peg$parseremovePartitioning();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parsealterCommandsModifierList();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseCOMMA_SYMBOL();
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsestandaloneAlterCommands();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterCommandList() {
      var s0, s1, s2, s3;

      s0 = peg$parsealterCommandsModifierList();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsealterCommandsModifierList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOMMA_SYMBOL();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsealterList();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsealterCommandsModifierList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterCommandsModifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterCommandsModifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterCommandsModifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestandaloneAlterCommands() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDISCARD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIMPORT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTABLESPACE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsealterPartition();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c5();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseSECONDARY_LOAD_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseSECONDARY_UNLOAD_SYMBOL();
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterPartition() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseADD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenoWriteToBinLog();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepartitionDefinitions();
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsePARTITIONS_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsereal_ulong_number();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDROP_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePARTITION_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifierList();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseREBUILD_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePARTITION_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenoWriteToBinLog();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseallOrPartitionNameList();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseOPTIMIZE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsePARTITION_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenoWriteToBinLog();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseallOrPartitionNameList();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsenoWriteToBinLog();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseANALYZE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsePARTITION_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsenoWriteToBinLog();
                  if (s3 === peg$FAILED) {
                    s3 = peg$c1;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseallOrPartitionNameList();
                    if (s4 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCHECK_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsePARTITION_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseallOrPartitionNameList();
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parsecheckOption();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsecheckOption();
                      }
                      if (s4 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseREPAIR_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsePARTITION_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsenoWriteToBinLog();
                      if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseallOrPartitionNameList();
                        if (s4 !== peg$FAILED) {
                          s5 = [];
                          s6 = peg$parserepairType();
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parserepairType();
                          }
                          if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseCOALESCE_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsePARTITION_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsenoWriteToBinLog();
                        if (s3 === peg$FAILED) {
                          s3 = peg$c1;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsereal_ulong_number();
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseTRUNCATE_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsePARTITION_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseallOrPartitionNameList();
                          if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseREORGANIZE_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsePARTITION_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsenoWriteToBinLog();
                            if (s3 === peg$FAILED) {
                              s3 = peg$c1;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$currPos;
                              s5 = peg$parseidentifierList();
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parseINTO_SYMBOL();
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parsepartitionDefinitions();
                                  if (s7 !== peg$FAILED) {
                                    s5 = [s5, s6, s7];
                                    s4 = s5;
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$c0;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                              if (s4 === peg$FAILED) {
                                s4 = peg$c1;
                              }
                              if (s4 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseEXCHANGE_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsePARTITION_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseidentifier();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseWITH_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseTABLE_SYMBOL();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parsetableRef();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parsewithValidation();
                                      if (s7 === peg$FAILED) {
                                        s7 = peg$c1;
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s1 = peg$c10();
                            if (s1) {
                              s1 = peg$c3;
                            } else {
                              s1 = peg$c0;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseDISCARD_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsePARTITION_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseallOrPartitionNameList();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseTABLESPACE_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s1 = peg$c10();
                              if (s1) {
                                s1 = peg$c3;
                              } else {
                                s1 = peg$c0;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseIMPORT_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsePARTITION_SYMBOL();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseallOrPartitionNameList();
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parseTABLESPACE_SYMBOL();
                                      if (s5 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterListItem();
      if (s1 === peg$FAILED) {
        s1 = peg$parsecreateTableOptionsSpaceSeparated();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterListItem();
          if (s5 === peg$FAILED) {
            s5 = peg$parsealterCommandsModifier();
            if (s5 === peg$FAILED) {
              s5 = peg$parsecreateTableOptionsSpaceSeparated();
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterListItem();
            if (s5 === peg$FAILED) {
              s5 = peg$parsealterCommandsModifier();
              if (s5 === peg$FAILED) {
                s5 = peg$parsecreateTableOptionsSpaceSeparated();
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterCommandsModifier() {
      var s0;

      s0 = peg$parsealterAlgorithmOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parsealterLockOption();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewithValidation();
        }
      }

      return s0;
    }

    function peg$parsealterListItem() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseADD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLUMN_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefieldDefinition();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecheckOrReferences();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseplace();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetableElementList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseADD_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetableConstraintDef();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCHANGE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCOLUMN_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseidentifier();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsefieldDefinition();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseplace();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMODIFY_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseCOLUMN_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseidentifier();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsefieldDefinition();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseplace();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDROP_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseCOLUMN_SYMBOL();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseidentifier();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parserestrict();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s3 = [s3, s4, s5];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseFOREIGN_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseKEY_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s6 = peg$c11();
                      if (s6) {
                        s6 = peg$c3;
                      } else {
                        s6 = peg$c0;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseidentifier();
                        if (s7 !== peg$FAILED) {
                          s6 = [s6, s7];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                      if (s5 === peg$FAILED) {
                        s5 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s6 = peg$c9();
                        if (s6) {
                          s6 = peg$c3;
                        } else {
                          s6 = peg$c0;
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseidentifier();
                          if (s7 === peg$FAILED) {
                            s7 = peg$c1;
                          }
                          if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      }
                      if (s5 !== peg$FAILED) {
                        s3 = [s3, s4, s5];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsePRIMARY_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseKEY_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parsekeyOrIndex();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsefieldIdentifier();
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s3 = peg$c12();
                        if (s3) {
                          s3 = peg$c3;
                        } else {
                          s3 = peg$c0;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCHECK_SYMBOL();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseidentifier();
                            if (s5 !== peg$FAILED) {
                              s3 = [s3, s4, s5];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s3 = peg$c13();
                          if (s3) {
                            s3 = peg$c3;
                          } else {
                            s3 = peg$c0;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseCONSTRAINT_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseidentifier();
                              if (s5 !== peg$FAILED) {
                                s3 = [s3, s4, s5];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        }
                      }
                    }
                  }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDISABLE_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseKEYS_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseENABLE_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseKEYS_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseALTER_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseCOLUMN_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseidentifier();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = peg$parseSET_SYMBOL();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseDEFAULT_SYMBOL();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s8 = peg$c5();
                              if (s8) {
                                s8 = peg$c3;
                              } else {
                                s8 = peg$c0;
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseexprWithParentheses();
                                if (s9 !== peg$FAILED) {
                                  s8 = [s8, s9];
                                  s7 = s8;
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$c0;
                                }
                              } else {
                                peg$currPos = s7;
                                s7 = peg$c0;
                              }
                              if (s7 === peg$FAILED) {
                                s7 = peg$parsesignedLiteral();
                              }
                              if (s7 !== peg$FAILED) {
                                s5 = [s5, s6, s7];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c0;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                          }
                          if (s4 === peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$parseDROP_SYMBOL();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parseDEFAULT_SYMBOL();
                              if (s6 !== peg$FAILED) {
                                s5 = [s5, s6];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c0;
                            }
                          }
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s1 = peg$c2();
                      if (s1) {
                        s1 = peg$c3;
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseALTER_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseINDEX_SYMBOL();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsefieldIdentifier();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parsevisibility();
                              if (s5 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s1 = peg$c12();
                        if (s1) {
                          s1 = peg$c3;
                        } else {
                          s1 = peg$c0;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseALTER_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseCHECK_SYMBOL();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseidentifier();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseconstraintEnforcement();
                                if (s5 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4, s5];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s1 = peg$c13();
                          if (s1) {
                            s1 = peg$c3;
                          } else {
                            s1 = peg$c0;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseALTER_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseCONSTRAINT_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseidentifier();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseconstraintEnforcement();
                                  if (s5 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s1 = peg$c2();
                            if (s1) {
                              s1 = peg$c3;
                            } else {
                              s1 = peg$c0;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseRENAME_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseCOLUMN_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseidentifier();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseTO_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parseidentifier();
                                      if (s6 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseRENAME_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseTO_SYMBOL();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseAS_SYMBOL();
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$c1;
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsetableName();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s1 = peg$c11();
                                if (s1) {
                                  s1 = peg$c3;
                                } else {
                                  s1 = peg$c0;
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseRENAME_SYMBOL();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsekeyOrIndex();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parsefieldIdentifier();
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parseTO_SYMBOL();
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parseidentifier();
                                          if (s6 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5, s6];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseCONVERT_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseTO_SYMBOL();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parsecharset();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$currPos;
                                        peg$reportedPos = peg$currPos;
                                        s5 = peg$c5();
                                        if (s5) {
                                          s5 = peg$c3;
                                        } else {
                                          s5 = peg$c0;
                                        }
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parseDEFAULT_SYMBOL();
                                          if (s6 !== peg$FAILED) {
                                            s5 = [s5, s6];
                                            s4 = s5;
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$c0;
                                        }
                                        if (s4 === peg$FAILED) {
                                          s4 = peg$parsecharsetName();
                                        }
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parsecollate();
                                          if (s5 === peg$FAILED) {
                                            s5 = peg$c1;
                                          }
                                          if (s5 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseFORCE_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseORDER_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseBY_SYMBOL();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parsealterOrderList();
                                          if (s3 !== peg$FAILED) {
                                            s1 = [s1, s2, s3];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        peg$reportedPos = peg$currPos;
                                        s1 = peg$c14();
                                        if (s1) {
                                          s1 = peg$c3;
                                        } else {
                                          s1 = peg$c0;
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseUPGRADE_SYMBOL();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parsePARTITIONING_SYMBOL();
                                            if (s3 !== peg$FAILED) {
                                              s1 = [s1, s2, s3];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseplace() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAFTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseFIRST_SYMBOL();
      }

      return s0;
    }

    function peg$parserestrict() {
      var s0;

      s0 = peg$parseRESTRICT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCASCADE_SYMBOL();
      }

      return s0;
    }

    function peg$parsealterOrderList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedirection();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifier();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsedirection();
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseidentifier();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsedirection();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterAlgorithmOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseALGORITHM_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEFAULT_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseidentifier();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterLockOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLOCK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEFAULT_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseidentifier();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexLockAndAlgorithm() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsealterAlgorithmOption();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealterLockOption();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsealterLockOption();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsealterAlgorithmOption();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsewithValidation() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c15();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWITH_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseWITHOUT_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVALIDATION_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseremovePartitioning() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREMOVE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITIONING_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseallOrPartitionNameList() {
      var s0;

      s0 = peg$parseALL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierList();
      }

      return s0;
    }

    function peg$parsealterTablespace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parseTABLESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseADD_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDROP_SYMBOL();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDATAFILE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextLiteral();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsealterTablespaceOptions();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s4 = peg$c8();
            if (s4) {
              s4 = peg$c3;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseCHANGE_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDATAFILE_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetextLiteral();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parsechangeTablespaceOption();
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$currPos;
                      s13 = peg$parseCOMMA_SYMBOL();
                      if (s13 === peg$FAILED) {
                        s13 = peg$c1;
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parsechangeTablespaceOption();
                        if (s14 !== peg$FAILED) {
                          s13 = [s13, s14];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$c0;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$c0;
                      }
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$currPos;
                        s13 = peg$parseCOMMA_SYMBOL();
                        if (s13 === peg$FAILED) {
                          s13 = peg$c1;
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsechangeTablespaceOption();
                          if (s14 !== peg$FAILED) {
                            s13 = [s13, s14];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$c0;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$c0;
                        }
                      }
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$parseREAD_ONLY_SYMBOL();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseREAD_WRITE_SYMBOL();
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseNOT_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseACCESSIBLE_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseRENAME_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseTO_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseidentifier();
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s4 = peg$c5();
                if (s4) {
                  s4 = peg$c3;
                } else {
                  s4 = peg$c0;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsealterTablespaceOptions();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterUndoTablespace() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseUNDO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSET_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseACTIVE_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseINACTIVE_SYMBOL();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseundoTableSpaceOptions();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseundoTableSpaceOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetsOptionEngine();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetsOptionEngine();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetsOptionEngine();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterTablespaceOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterTablespaceOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterTablespaceOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterTablespaceOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterTablespaceOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseINITIAL_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionAutoextendSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionMaxSize();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionEngine();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionWait();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetsOptionEncryption();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsechangeTablespaceOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseINITIAL_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionAutoextendSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionMaxSize();
        }
      }

      return s0;
    }

    function peg$parsealterView() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseviewAlgorithm();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedefinerClause();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewSuid();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseVIEW_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseviewRef();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseviewTail();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewTail() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsecolumnInternalRefList();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewSelect();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewSelect() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsequeryExpressionOrParens();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseviewCheckOption();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewCheckOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCASCADED_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLOCAL_SYMBOL();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCHECK_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPTION_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCREATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateDatabase();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecreateTable();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecreateFunction();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecreateProcedure();
              if (s2 === peg$FAILED) {
                s2 = peg$parsecreateUdf();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsecreateLogfileGroup();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsecreateView();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsecreateTrigger();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsecreateIndex();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsecreateServer();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsecreateTablespace();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parsecreateEvent();
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s3 = peg$c2();
                                if (s3) {
                                  s3 = peg$c3;
                                } else {
                                  s3 = peg$c0;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsecreateRole();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s3 = peg$c16();
                                  if (s3) {
                                    s3 = peg$c3;
                                  } else {
                                    s3 = peg$c0;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsecreateSpatialReference();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$currPos;
                                    peg$reportedPos = peg$currPos;
                                    s3 = peg$c5();
                                    if (s3) {
                                      s3 = peg$c3;
                                    } else {
                                      s3 = peg$c0;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parsecreateUndoTablespace();
                                      if (s4 !== peg$FAILED) {
                                        s3 = [s3, s4];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateDatabase() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDATABASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifNotExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsecreateDatabaseOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsecreateDatabaseOption();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateDatabaseOption() {
      var s0, s1, s2;

      s0 = peg$parsedefaultCharset();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedefaultCollation();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c17();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedefaultEncryption();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsecreateTable() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseTEMPORARY_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseifNotExists();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableName();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parseOPEN_PAR_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetableElementList();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecreateTableOptions();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsepartitionClause();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseduplicateAsQueryExpression();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseLIKE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetableRef();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseOPEN_PAR_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseLIKE_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsetableRef();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s9 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableElementList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableElement() {
      var s0;

      s0 = peg$parsecolumnDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetableConstraintDef();
      }

      return s0;
    }

    function peg$parseduplicateAsQueryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseREPLACE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIGNORE_SYMBOL();
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAS_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequeryExpressionOrParens();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequeryExpressionOrParens() {
      var s0;

      s0 = peg$parsequeryExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsequeryExpressionParens();
      }

      return s0;
    }

    function peg$parsecreateRoutine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCREATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateProcedure();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecreateFunction();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecreateUdf();
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOF();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateProcedure() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePROCEDURE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseprocedureParameter();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parseCOMMA_SYMBOL();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseprocedureParameter();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$c0;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parseCOMMA_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseprocedureParameter();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseroutineCreateOption();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseroutineCreateOption();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecompoundStatement();
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFUNCTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsefunctionParameter();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parseCOMMA_SYMBOL();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsefunctionParameter();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$c0;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parseCOMMA_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsefunctionParameter();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRETURNS_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsetypeWithOptCollate();
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseroutineCreateOption();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseroutineCreateOption();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsecompoundStatement();
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUdf() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseAGGREGATE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFUNCTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRETURNS_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSTRING_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseINT_SYMBOL();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseREAL_SYMBOL();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseDECIMAL_SYMBOL();
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSONAME_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetextLiteral();
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseroutineCreateOption() {
      var s0, s1, s2;

      s0 = peg$parseroutineOption();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNOT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDETERMINISTIC_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseroutineAlterOptions() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseroutineCreateOption();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseroutineCreateOption();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseroutineOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCOMMENT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLANGUAGE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSQL_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNO_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSQL_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCONTAINS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseSQL_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseREADS_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseSQL_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseDATA_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMODIFIES_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseSQL_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseDATA_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseSQL_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseSECURITY_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseDEFINER_SYMBOL();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseINVOKER_SYMBOL();
                      }
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecreateIndex() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseonlineOption();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseUNIQUE_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseINDEX_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s6 = peg$c5();
            if (s6) {
              s6 = peg$c3;
            } else {
              s6 = peg$c0;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseidentifier();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseindexTypeClause();
                if (s8 === peg$FAILED) {
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseindexNameAndType();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecreateIndexTarget();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseindexOption();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseindexOption();
                }
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseFULLTEXT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINDEX_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifier();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecreateIndexTarget();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsefulltextIndexOption();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsefulltextIndexOption();
                  }
                  if (s7 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6, s7];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseSPATIAL_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseINDEX_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifier();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsecreateIndexTarget();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parsecommonIndexOption();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parsecommonIndexOption();
                    }
                    if (s7 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6, s7];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseindexLockAndAlgorithm();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexNameAndType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseUSING_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseindexType();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTYPE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseindexType();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecreateIndexTarget() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseON_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableRef();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekeyListVariants();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateLogfileGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLOGFILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGROUP_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseADD_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseUNDOFILE_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseREDOFILE_SYMBOL();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextLiteral();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parselogfileGroupOptions();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselogfileGroupOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parselogfileGroupOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parselogfileGroupOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parselogfileGroupOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselogfileGroupOption() {
      var s0;

      s0 = peg$parsetsOptionInitialSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionUndoRedoBufferSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionNodegroup();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionEngine();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionWait();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetsOptionComment();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecreateServer() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSERVER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFOREIGN_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDATA_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseWRAPPER_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextOrIdentifier();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseserverOptions();
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseserverOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseOPTIONS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseserverOption();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseserverOption();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseserverOption();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseserverOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHOST_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDATABASE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextLiteral();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUSER_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetextLiteral();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePASSWORD_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsetextLiteral();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSOCKET_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsetextLiteral();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseOWNER_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsetextLiteral();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePORT_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseulong_number();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecreateTablespace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseTABLESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetsDataFileName();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseUSE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseLOGFILE_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseGROUP_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseidentifier();
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetablespaceOptions();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUndoTablespace() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseUNDO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseADD_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetsDataFile();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseundoTableSpaceOptions();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsDataFileName() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c5();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseADD_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetsDataFile();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseADD_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetsDataFile();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetsDataFile() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDATAFILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetablespaceOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetablespaceOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetablespaceOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetablespaceOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetablespaceOption() {
      var s0, s1, s2;

      s0 = peg$parsetsOptionInitialSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionAutoextendSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionMaxSize();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionExtentSize();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionNodegroup();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetsOptionEngine();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetsOptionWait();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsetsOptionComment();
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s1 = peg$c18();
                      if (s1) {
                        s1 = peg$c3;
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsetsOptionFileblockSize();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s1 = peg$c5();
                        if (s1) {
                          s1 = peg$c3;
                        } else {
                          s1 = peg$c0;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsetsOptionEncryption();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetsOptionInitialSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseINITIAL_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionUndoRedoBufferSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionAutoextendSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionMaxSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMAX_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionExtentSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseEXTENT_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionNodegroup() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseNODEGROUP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsereal_ulong_number();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionEngine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSTORAGE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseENGINE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetextOrIdentifier();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionWait() {
      var s0;

      s0 = peg$parseWAIT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNO_WAIT_SYMBOL();
      }

      return s0;
    }

    function peg$parsetsOptionComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCOMMENT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextLiteral();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionFileblockSize() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesizeNumber();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetsOptionEncryption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseENCRYPTION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateView() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseviewReplaceOrAlgorithm();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedefinerClause();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewSuid();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseVIEW_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseviewName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseviewTail();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewReplaceOrAlgorithm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREPLACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewAlgorithm();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseviewAlgorithm();
      }

      return s0;
    }

    function peg$parseviewAlgorithm() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseALGORITHM_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealgorithm() {
      var s0;

      s0 = peg$parseUNDEFINED_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMERGE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTEMPTABLE_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseviewSuid() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSQL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSECURITY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEFINER_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseINVOKER_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateTrigger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTRIGGER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetiming() {
      var s0;

      s0 = peg$parseBEFORE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAFTER_SYMBOL();
      }

      return s0;
    }

    function peg$parseevent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseINSERT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUPDATE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDELETE_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableRef();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFOR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEACH_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseROW_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetriggerFollowsPrecedesClause();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecompoundStatement();
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetriggerFollowsPrecedesClause() {
      var s0;

      peg$reportedPos = peg$currPos;
      s0 = peg$c11();
      if (s0) {
        s0 = peg$c3;
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseordering() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFOLLOWS_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePRECEDES_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateEvent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parsedefinerClause();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEVENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseifNotExists();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsequalifiedIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseON_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSCHEDULE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseschedule();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseON_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseCOMPLETION_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseNOT_SYMBOL();
                        if (s11 === peg$FAILED) {
                          s11 = peg$c1;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsePRESERVE_SYMBOL();
                          if (s12 !== peg$FAILED) {
                            s9 = [s9, s10, s11, s12];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c0;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c0;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseENABLE_SYMBOL();
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parseDISABLE_SYMBOL();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$currPos;
                          s12 = peg$parseON_SYMBOL();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parseSLAVE_SYMBOL();
                            if (s13 !== peg$FAILED) {
                              s12 = [s12, s13];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c0;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c0;
                          }
                          if (s11 === peg$FAILED) {
                            s11 = peg$c1;
                          }
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$c0;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        s11 = peg$parseCOMMENT_SYMBOL();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsetextLiteral();
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$c0;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$c0;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseDO_SYMBOL();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsecompoundStatement();
                            if (s12 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateRole() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseROLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifNotExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseroleList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateSpatialReference() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREPLACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSPATIAL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseREFERENCE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSYSTEM_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsereal_ulonglong_number();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsesrsAttribute();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsesrsAttribute();
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSPATIAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseREFERENCE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSYSTEM_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseifNotExists();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsereal_ulonglong_number();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsesrsAttribute();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsesrsAttribute();
                  }
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesrsAttribute() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNAME_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTEXT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDEFINITION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTEXT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseORGANIZATION_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSINGLE_QUOTED_TEXT();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseIDENTIFIED_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseBY_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsereal_ulonglong_number();
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDESCRIPTION_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseTEXT_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSINGLE_QUOTED_TEXT();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedropStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDROP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedropDatabase();
        if (s2 === peg$FAILED) {
          s2 = peg$parsedropEvent();
          if (s2 === peg$FAILED) {
            s2 = peg$parsedropFunction();
            if (s2 === peg$FAILED) {
              s2 = peg$parsedropProcedure();
              if (s2 === peg$FAILED) {
                s2 = peg$parsedropIndex();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsedropLogfileGroup();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsedropServer();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsedropTable();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsedropTableSpace();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsedropTrigger();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsedropView();
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s3 = peg$c2();
                              if (s3) {
                                s3 = peg$c3;
                              } else {
                                s3 = peg$c0;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsedropRole();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s3 = peg$c16();
                                if (s3) {
                                  s3 = peg$c3;
                                } else {
                                  s3 = peg$c0;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsedropSpatialReference();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s3 = peg$c5();
                                  if (s3) {
                                    s3 = peg$c3;
                                  } else {
                                    s3 = peg$c0;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsedropUndoTablespace();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropDatabase() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDATABASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropEvent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseEVENT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropFunction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFUNCTION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropProcedure() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsePROCEDURE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropIndex() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseonlineOption();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINDEX_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefieldIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseON_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetableRef();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseindexLockAndAlgorithm();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropLogfileGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseLOGFILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGROUP_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsedropLogfileGroupOption();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 === peg$FAILED) {
                s8 = peg$c1;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsedropLogfileGroupOption();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 === peg$FAILED) {
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsedropLogfileGroupOption();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropLogfileGroupOption() {
      var s0;

      s0 = peg$parsetsOptionWait();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionEngine();
      }

      return s0;
    }

    function peg$parsedropServer() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSERVER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextOrIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropTable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseTEMPORARY_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTABLES_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseifExists();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRefList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRESTRICT_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseCASCADE_SYMBOL();
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropTableSpace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseTABLESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsedropLogfileGroupOption();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parseCOMMA_SYMBOL();
            if (s7 === peg$FAILED) {
              s7 = peg$c1;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsedropLogfileGroupOption();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsedropLogfileGroupOption();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropTrigger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseTRIGGER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequalifiedIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropView() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseVIEW_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseviewRefList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRESTRICT_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$parseCASCADE_SYMBOL();
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropRole() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseROLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifExists();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseroleList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropSpatialReference() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSPATIAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREFERENCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSYSTEM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseifExists();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsereal_ulonglong_number();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropUndoTablespace() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseUNDO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseundoTableSpaceOptions();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserenameTableStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseRENAME_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTABLES_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parserenamePair();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parserenamePair();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parserenamePair();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserenamePair() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTO_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableName();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetruncateTableStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseTRUNCATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableRef();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseimportStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIMPORT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFROM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetextStringLiteralList();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecallStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCALL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsequalifiedIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseOPEN_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexprList();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCLOSE_PAR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedeleteStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s2 = peg$c2();
      if (s2) {
        s2 = peg$c3;
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewithClause();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDELETE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedeleteStatementOption();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsedeleteStatementOption();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseFROM_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsetableAliasRefList();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseUSING_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetableReferenceList();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsewhereClause();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c1;
                    }
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parsetableRef();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  peg$reportedPos = peg$currPos;
                  s9 = peg$c12();
                  if (s9) {
                    s9 = peg$c3;
                  } else {
                    s9 = peg$c0;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsetableAlias();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsepartitionDelete();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsewhereClause();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c1;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseorderClause();
                        if (s11 === peg$FAILED) {
                          s11 = peg$c1;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsesimpleLimitClause();
                          if (s12 === peg$FAILED) {
                            s12 = peg$c1;
                          }
                          if (s12 !== peg$FAILED) {
                            s7 = [s7, s8, s9, s10, s11, s12];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c0;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsetableAliasRefList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseFROM_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetableReferenceList();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsewhereClause();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionDelete() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c19();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifierList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedeleteStatementOption() {
      var s0;

      s0 = peg$parseQUICK_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLOW_PRIORITY_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseQUICK_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIGNORE_SYMBOL();
          }
        }
      }

      return s0;
    }

    function peg$parsedoStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c20();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexprList();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c21();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseselectItemList();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehandlerStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseHANDLER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsetableRef();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseOPEN_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableAlias();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseREAD_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsehandlerReadOrScan();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsewhereClause();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parselimitClause();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehandlerReadOrScan() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$parseFIRST_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNEXT_SYMBOL();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFIRST_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseNEXT_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parsePREV_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseLAST_SYMBOL();
              }
            }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseEQUAL_OPERATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$parseLESS_THAN_OPERATOR();
              if (s3 === peg$FAILED) {
                s3 = peg$parseGREATER_THAN_OPERATOR();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseLESS_OR_EQUAL_OPERATOR();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseGREATER_OR_EQUAL_OPERATOR();
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseOPEN_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsevalues();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseinsertStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parseINSERT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinsertLockOption();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIGNORE_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINTO_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetableRef();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseusePartition();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseinsertFromConstructor();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s10 = peg$c22();
                    if (s10) {
                      s10 = peg$c3;
                    } else {
                      s10 = peg$c0;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsevaluesReference();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parseSET_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseupdateList();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s11 = peg$c22();
                        if (s11) {
                          s11 = peg$c3;
                        } else {
                          s11 = peg$c0;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsevaluesReference();
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$c0;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$c0;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$parseinsertQueryExpression();
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseinsertUpdateList();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertLockOption() {
      var s0;

      s0 = peg$parseLOW_PRIORITY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDELAYED_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseHIGH_PRIORITY_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseinsertFromConstructor() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefields();
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinsertValues();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefields() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseinsertIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseinsertIdentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseinsertIdentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertValues() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseVALUES_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseVALUE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalueList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertQueryExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsequeryExpressionOrParens();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPEN_PAR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefields();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCLOSE_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsequeryExpressionOrParens();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsevalueList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalues();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseOPEN_PAR_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsevalues();
                if (s8 === peg$FAILED) {
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseOPEN_PAR_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsevalues();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevalues() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDEFAULT_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDEFAULT_SYMBOL();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 === peg$FAILED) {
              s5 = peg$parseDEFAULT_SYMBOL();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevaluesReference() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumnInternalRefList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertUpdateList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseON_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDUPLICATE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseKEY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseUPDATE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseupdateList();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseloadStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

      s0 = peg$currPos;
      s1 = peg$parseLOAD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedataOrXml();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLOW_PRIORITY_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseCONCURRENT_SYMBOL();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLOCAL_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseINFILE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextLiteral();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseREPLACE_SYMBOL();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseIGNORE_SYMBOL();
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseINTO_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseTABLE_SYMBOL();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsetableRef();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseusePartition();
                          if (s11 === peg$FAILED) {
                            s11 = peg$c1;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsecharsetClause();
                            if (s12 === peg$FAILED) {
                              s12 = peg$c1;
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsexmlRowsIdentifiedBy();
                              if (s13 === peg$FAILED) {
                                s13 = peg$c1;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsefieldsClause();
                                if (s14 === peg$FAILED) {
                                  s14 = peg$c1;
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parselinesClause();
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$c1;
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parseloadDataFileTail();
                                    if (s16 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedataOrXml() {
      var s0;

      s0 = peg$parseDATA_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseXML_SYMBOL();
      }

      return s0;
    }

    function peg$parsexmlRowsIdentifiedBy() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseROWS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIDENTIFIED_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetextString();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseloadDataFileTail() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseIGNORE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINT_NUMBER();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLINES_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$parseROWS_SYMBOL();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseloadDataFileTargetList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSET_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseupdateList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseloadDataFileTargetList() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldOrVariableList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldOrVariableList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsefieldIdentifier();
      if (s1 === peg$FAILED) {
        s1 = peg$parseuserVariable();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefieldIdentifier();
          if (s5 === peg$FAILED) {
            s5 = peg$parseuserVariable();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefieldIdentifier();
            if (s5 === peg$FAILED) {
              s5 = peg$parseuserVariable();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsereplaceStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseREPLACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOW_PRIORITY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDELAYED_SYMBOL();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseINTO_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRef();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseusePartition();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseinsertFromConstructor();
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseSET_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseupdateList();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$parseinsertQueryExpression();
                  }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseselectStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsequeryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselockingClauseList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsequeryExpressionParens();
        if (s0 === peg$FAILED) {
          s0 = peg$parseselectStatementWithInto();
        }
      }

      return s0;
    }

    function peg$parseselectStatementWithInto() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselectStatementWithInto();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequeryExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseintoClause();
          if (s2 !== peg$FAILED) {
            s3 = peg$parselockingClauseList();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselockingClauseList();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseintoClause();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsequeryExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s2 = peg$c2();
      if (s2) {
        s2 = peg$c3;
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewithClause();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsequeryExpressionBody();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseorderClause();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parselimitClause();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsequeryExpressionParens();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseorderClause();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parselimitClause();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c8();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseprocedureAnalyseClause();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequeryExpressionBody() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsequeryPrimary();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsequeryExpressionParens();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseUNION_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseunionOption();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequeryPrimary();
              if (s5 === peg$FAILED) {
                s5 = peg$parsequeryExpressionParens();
              }
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseUNION_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseunionOption();
          if (s5 === peg$FAILED) {
            s5 = peg$c1;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsequeryPrimary();
            if (s6 === peg$FAILED) {
              s6 = peg$parsequeryExpressionParens();
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseUNION_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseunionOption();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsequeryPrimary();
              if (s6 === peg$FAILED) {
                s6 = peg$parsequeryExpressionParens();
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequeryExpressionParens() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsequeryExpressionParens();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsequeryExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parselockingClauseList();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequeryPrimary() {
      var s0, s1, s2;

      s0 = peg$parsequerySpecification();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c13();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetableValueConstructor();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c13();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexplicitTable();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsequerySpecification() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseSELECT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseselectOption();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseselectOption();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselectItemList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseintoClause();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefromClause();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsewhereClause();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsegroupByClause();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsehavingClause();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s10 = peg$c2();
                      if (s10) {
                        s10 = peg$c3;
                      } else {
                        s10 = peg$c0;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsewindowClause();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequerySpecOption() {
      var s0;

      s0 = peg$parseALL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDISTINCT_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseHIGH_PRIORITY_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSQL_SMALL_RESULT_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSQL_BIG_RESULT_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSQL_CALC_FOUND_ROWS_SYMBOL();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselimitClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLIMIT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselimitOptions();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleLimitClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLIMIT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselimitOption();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselimitOptions() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parselimitOption();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCOMMA_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseOFFSET_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parselimitOption();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselimitOption() {
      var s0;

      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePARAM_MARKER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseULONGLONG_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLONG_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseINT_NUMBER();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseintoClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseINTO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseOUTFILE_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSINGLE_QUOTED_TEXT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecharsetClause();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsefieldsClause();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parselinesClause();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseDUMPFILE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSINGLE_QUOTED_TEXT();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsetextOrIdentifier();
            if (s3 === peg$FAILED) {
              s3 = peg$parseuserVariable();
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetextOrIdentifier();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseuserVariable();
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parseCOMMA_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetextOrIdentifier();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseuserVariable();
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseprocedureAnalyseClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsePROCEDURE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseANALYSE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseINT_NUMBER();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseINT_NUMBER();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehavingClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHAVING_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowClause() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseWINDOW_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewindowDefinition();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewindowDefinition();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewindowDefinition();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowDefinition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewindowSpec();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowSpec() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewindowSpecDetails();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowSpecDetails() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsePARTITION_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseBY_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseorderList();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseorderClause();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewindowFrameClause();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowFrameClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsewindowFrameUnits();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewindowFrameExtent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewindowFrameExclusion();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowFrameUnits() {
      var s0;

      s0 = peg$parseROWS_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRANGE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGROUPS_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parsewindowFrameExtent() {
      var s0;

      s0 = peg$parsewindowFrameStart();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewindowFrameBetween();
      }

      return s0;
    }

    function peg$parsewindowFrameStart() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseUNBOUNDED_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePRECEDING_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseulonglong_number();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePRECEDING_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePARAM_MARKER();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePRECEDING_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseINTERVAL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexpr();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseinterval();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsePRECEDING_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCURRENT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseROW_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewindowFrameBetween() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBETWEEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewindowFrameBound();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewindowFrameBound();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowFrameBound() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsewindowFrameStart();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUNBOUNDED_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFOLLOWING_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseulonglong_number();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFOLLOWING_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePARAM_MARKER();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseFOLLOWING_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseINTERVAL_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseexpr();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseinterval();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseFOLLOWING_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewindowFrameExclusion() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseEXCLUDE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCURRENT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseROW_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseGROUP_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseTIES_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseNO_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseOTHERS_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewithClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRECURSIVE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecommonTableExpression();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecommonTableExpression();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecommonTableExpression();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecommonTableExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolumnInternalRefList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsequeryExpressionParens();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegroupByClause() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseGROUP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseorderList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseolapOption();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseolapOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseROLLUP_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c8();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWITH_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCUBE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseorderClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseORDER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseorderList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedirection() {
      var s0;

      s0 = peg$parseASC_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDESC_SYMBOL();
      }

      return s0;
    }

    function peg$parsefromClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFROM_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDUAL_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetableReferenceList();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableReferenceList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableReference();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableReference();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableReference();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableValueConstructor() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseVALUES_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserowValueExplicit();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parserowValueExplicit();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parserowValueExplicit();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexplicitTable() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTABLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableRef();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserowValueExplicit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseROW_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalues();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseselectOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsequerySpecOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSQL_NO_CACHE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c8();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSQL_CACHE_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c23();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseMAX_STATEMENT_TIME_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseEQUAL_OPERATOR();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsereal_ulong_number();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parselockingClauseList() {
      var s0, s1;

      s0 = [];
      s1 = peg$parselockingClause();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parselockingClause();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselockingClause() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseFOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselockStrengh();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c2();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOF_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetableAliasRefList();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s5 = peg$c2();
            if (s5) {
              s5 = peg$c3;
            } else {
              s5 = peg$c0;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parselockedRowAction();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLOCK_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIN_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSHARE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseMODE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parselockStrengh() {
      var s0, s1, s2;

      s0 = peg$parseUPDATE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c2();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSHARE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parselockedRowAction() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSKIP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOCKED_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseNOWAIT_SYMBOL();
      }

      return s0;
    }

    function peg$parseselectItemList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseselectItem();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMULT_OPERATOR();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseselectItem();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseselectItem();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseselectItem() {
      var s0, s1, s2;

      s0 = peg$parsetableWild();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexpr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseselectAlias();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseselectAlias() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAS_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSINGLE_QUOTED_TEXT();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewhereClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseWHERE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableReference() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableFactor();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseOPEN_CURLY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c24();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseOJ_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseescapedTableReference();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_CURLY_SYMBOL();
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsejoinedTable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsejoinedTable();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseescapedTableReference() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetableFactor();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsejoinedTable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsejoinedTable();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejoinedTable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseinnerJoinType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableReference();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseON_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseUSING_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierListWithParentheses();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseouterJoinType();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetableReference();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseON_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpr();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseUSING_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifierListWithParentheses();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenaturalJoinType();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetableFactor();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsenaturalJoinType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseNATURAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINNER_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseJOIN_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNATURAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLEFT_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseRIGHT_SYMBOL();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOUTER_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseJOIN_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseinnerJoinType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseINNER_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCROSS_SYMBOL();
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJOIN_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
      }

      return s0;
    }

    function peg$parseouterJoinType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseRIGHT_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOUTER_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseJOIN_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableFactor() {
      var s0, s1, s2;

      s0 = peg$parsesingleTable();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesingleTableParens();
        if (s0 === peg$FAILED) {
          s0 = peg$parsederivedTable();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetableReferenceListParens();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c25();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsetableFunction();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesingleTable() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseusePartition();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableAlias();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseindexHintList();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesingleTableParens() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesingleTable();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesingleTableParens();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsederivedTable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsequeryExpressionParens();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c2();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecolumnInternalRefList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c5();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLATERAL_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsequeryExpressionParens();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetableAlias();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecolumnInternalRefList();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetableReferenceListParens() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableReferenceList();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetableReferenceListParens();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseJSON_TABLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCOMMA_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSINGLE_QUOTED_TEXT();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecolumnsClause();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsetableAlias();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnsClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseCOLUMNS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsejtColumn();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsejtColumn();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsejtColumn();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejtColumn() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseORDINALITY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedataType();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s4 = peg$c5();
            if (s4) {
              s4 = peg$c3;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecollate();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEXISTS_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsePATH_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseSINGLE_QUOTED_TEXT();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseonEmptyOrError();
                    if (s7 === peg$FAILED) {
                      s7 = peg$c1;
                    }
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNESTED_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePATH_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecolumnsClause();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseonEmptyOrError() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseonEmpty();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseonError();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseonError();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseonEmpty();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseonEmpty() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsejtOnResponse();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEMPTY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseonError() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsejtOnResponse();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseERROR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejtOnResponse() {
      var s0, s1, s2;

      s0 = peg$parseERROR_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDEFAULT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSINGLE_QUOTED_TEXT();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseunionOption() {
      var s0;

      s0 = peg$parseDISTINCT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseALL_SYMBOL();
      }

      return s0;
    }

    function peg$parsetableAlias() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAS_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s2 = peg$c24();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexHintList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseindexHint();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseindexHint();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseindexHint();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexHint() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseindexHintType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyOrIndex();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseindexHintClause();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseindexList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUSE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyOrIndex();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseindexHintClause();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseOPEN_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseindexList();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseindexHintType() {
      var s0;

      s0 = peg$parseFORCE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIGNORE_SYMBOL();
      }

      return s0;
    }

    function peg$parsekeyOrIndex() {
      var s0;

      s0 = peg$parseKEY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINDEX_SYMBOL();
      }

      return s0;
    }

    function peg$parseconstraintKeyType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePRIMARY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKEY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUNIQUE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyOrIndex();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseindexHintClause() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseFOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJOIN_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseORDER_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBY_SYMBOL();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseGROUP_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseBY_SYMBOL();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseindexListElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseindexListElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseindexListElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexListElement() {
      var s0;

      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePRIMARY_SYMBOL();
      }

      return s0;
    }

    function peg$parseupdateStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s2 = peg$c2();
      if (s2) {
        s2 = peg$c3;
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewithClause();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUPDATE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLOW_PRIORITY_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIGNORE_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetableReferenceList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSET_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseupdateList();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsewhereClause();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseorderClause();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsesimpleLimitClause();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetransactionOrLockingStatement() {
      var s0;

      s0 = peg$parsetransactionStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesavepointStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parselockStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsexaStatement();
          }
        }
      }

      return s0;
    }

    function peg$parsetransactionStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSTART_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTRANSACTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsetransactionCharacteristic();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsetransactionCharacteristic();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCOMMIT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWORK_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseAND_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseNO_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCHAIN_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseNO_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRELEASE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsebeginWork() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWORK_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetransactionCharacteristic() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCONSISTENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSNAPSHOT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c26();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseREAD_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseWRITE_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$parseONLY_SYMBOL();
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesavepointStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSAVEPOINT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseROLLBACK_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWORK_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseTO_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSAVEPOINT_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseidentifier();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              s5 = peg$parseAND_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNO_SYMBOL();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCHAIN_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseNO_SYMBOL();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRELEASE_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRELEASE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSAVEPOINT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parselockStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLOCK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLES_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTABLE_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselockItem();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselockItem();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselockItem();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c2();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLOCK_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseINSTANCE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseFOR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseBACKUP_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUNLOCK_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTABLES_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseTABLE_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c2();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseINSTANCE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parselockItem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselockOption();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselockOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREAD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOCAL_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLOW_PRIORITY_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWRITE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsexaStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseXA_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseSTART_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBEGIN_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsexid();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseJOIN_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseRESUME_SYMBOL();
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseEND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsexid();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseSUSPEND_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseFOR_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseMIGRATE_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsePREPARE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsexid();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseCOMMIT_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsexid();
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseONE_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsePHASE_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseROLLBACK_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsexid();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseRECOVER_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsexaConvert();
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsexaConvert() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c10();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCONVERT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseXID_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsexid() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsetextString();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCOMMA_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextString();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseulong_number();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresetOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMASTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemasterResetOptions();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseQUERY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCACHE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSLAVE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseALL_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsechannel();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsemasterResetOptions() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTO_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsereal_ulong_number();
        if (s2 === peg$FAILED) {
          s2 = peg$parsereal_ulonglong_number();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsereplicationStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsePURGE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBINARY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMASTER_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLOGS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseTO_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextLiteral();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseBEFORE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsechangeMaster();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRESET_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseresetOption();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$currPos;
              s5 = peg$parseCOMMA_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseresetOption();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = peg$parseCOMMA_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseresetOption();
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c27();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseRESET_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsePERSIST_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parseifExists();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseidentifier();
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseslave();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s1 = peg$c11();
                if (s1) {
                  s1 = peg$c3;
                } else {
                  s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsechangeReplication();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parsereplicationLoad();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s1 = peg$c28();
                    if (s1) {
                      s1 = peg$c3;
                    } else {
                      s1 = peg$c0;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsegroupReplication();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereplicationLoad() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseLOAD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDATA_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseTABLE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRef();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFROM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMASTER_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechangeMaster() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCHANGE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMASTER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTO_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsechangeMasterOptions();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsechannel();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechangeMasterOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsemasterOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemasterOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemasterOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemasterOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMASTER_HOST_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNETWORK_NAMESPACE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMASTER_BIND_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMASTER_USER_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSINGLE_QUOTED_TEXT();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMASTER_PASSWORD_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseSINGLE_QUOTED_TEXT();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMASTER_PORT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseulong_number();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseulong_number();
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseEQUAL_OPERATOR();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseulong_number();
                        if (s3 !== peg$FAILED) {
                          s1 = [s1, s2, s3];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseMASTER_DELAY_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseEQUAL_OPERATOR();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseulong_number();
                          if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseMASTER_SSL_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseEQUAL_OPERATOR();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseulong_number();
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseMASTER_SSL_CA_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseEQUAL_OPERATOR();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseSINGLE_QUOTED_TEXT();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseEQUAL_OPERATOR();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseSINGLE_QUOTED_TEXT();
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseEQUAL_OPERATOR();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseSINGLE_QUOTED_TEXT();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseMASTER_SSL_CERT_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseEQUAL_OPERATOR();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseSINGLE_QUOTED_TEXT();
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseEQUAL_OPERATOR();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parsemasterTlsCiphersuitesDef();
                                      if (s3 !== peg$FAILED) {
                                        s1 = [s1, s2, s3];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseEQUAL_OPERATOR();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseSINGLE_QUOTED_TEXT();
                                        if (s3 !== peg$FAILED) {
                                          s1 = [s1, s2, s3];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseEQUAL_OPERATOR();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseSINGLE_QUOTED_TEXT();
                                          if (s3 !== peg$FAILED) {
                                            s1 = [s1, s2, s3];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseMASTER_SSL_VERIFY_SERVER_CERT_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseEQUAL_OPERATOR();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parseulong_number();
                                            if (s3 !== peg$FAILED) {
                                              s1 = [s1, s2, s3];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseEQUAL_OPERATOR();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parsetextLiteral();
                                              if (s3 !== peg$FAILED) {
                                                s1 = [s1, s2, s3];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseEQUAL_OPERATOR();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseSINGLE_QUOTED_TEXT();
                                                if (s3 !== peg$FAILED) {
                                                  s1 = [s1, s2, s3];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parseEQUAL_OPERATOR();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parseSINGLE_QUOTED_TEXT();
                                                  if (s3 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseEQUAL_OPERATOR();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseulong_number();
                                                    if (s3 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseEQUAL_OPERATOR();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseulong_number();
                                                      if (s3 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseEQUAL_OPERATOR();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parseserverIdList();
                                                        if (s3 !== peg$FAILED) {
                                                          s1 = [s1, s2, s3];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parseEQUAL_OPERATOR();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parseSINGLE_QUOTED_TEXT();
                                                          if (s3 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parseEQUAL_OPERATOR();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parseulong_number();
                                                            if (s3 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parseEQUAL_OPERATOR();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parseulong_number();
                                                              if (s3 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parseEQUAL_OPERATOR();
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parseprivilegeCheckDef();
                                                                if (s3 !== peg$FAILED) {
                                                                  s1 = [s1, s2, s3];
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseREQUIRE_ROW_FORMAT_SYMBOL();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseEQUAL_OPERATOR();
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parseulong_number();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s1 = [s1, s2, s3];
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = peg$parseEQUAL_OPERATOR();
                                                                  if (s2 !== peg$FAILED) {
                                                                    s3 = peg$parsetablePrimaryKeyCheckDef();
                                                                    if (s3 !== peg$FAILED) {
                                                                      s1 = [s1, s2, s3];
                                                                      s0 = s1;
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsemasterFileDef();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseprivilegeCheckDef() {
      var s0;

      s0 = peg$parseuserIdentifierOrText();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL_SYMBOL();
      }

      return s0;
    }

    function peg$parsetablePrimaryKeyCheckDef() {
      var s0;

      s0 = peg$parseSTREAM_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseON_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOFF_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parsemasterTlsCiphersuitesDef() {
      var s0;

      s0 = peg$parseSINGLE_QUOTED_TEXT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL_SYMBOL();
      }

      return s0;
    }

    function peg$parsemasterFileDef() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMASTER_LOG_FILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMASTER_LOG_POS_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseulonglong_number();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRELAY_LOG_FILE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseRELAY_LOG_POS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseulong_number();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseserverIdList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseulong_number();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseulong_number();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseulong_number();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechangeReplication() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseCHANGE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREPLICATION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFILTER_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefilterDefinition();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsefilterDefinition();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parseCOMMA_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsefilterDefinition();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s7 = peg$c2();
                if (s7) {
                  s7 = peg$c3;
                } else {
                  s7 = peg$c0;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsechannel();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefilterDefinition() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseREPLICATE_DO_DB_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefilterDbList();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsefilterDbList();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseOPEN_PAR_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsefilterTableList();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseOPEN_PAR_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsefilterTableList();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseOPEN_PAR_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsefilterStringList();
                    if (s4 === peg$FAILED) {
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseCLOSE_PAR_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseOPEN_PAR_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsefilterStringList();
                      if (s4 === peg$FAILED) {
                        s4 = peg$c1;
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s5 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseOPEN_PAR_SYMBOL();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsefilterDbPairList();
                        if (s4 === peg$FAILED) {
                          s4 = peg$c1;
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefilterDbList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefilterTableList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsefilterTableRef();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefilterTableRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefilterTableRef();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefilterStringList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSINGLE_QUOTED_TEXT();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSINGLE_QUOTED_TEXT();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSINGLE_QUOTED_TEXT();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefilterDbPairList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseschemaIdentifierPair();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseschemaIdentifierPair();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseschemaIdentifierPair();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslave() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSTART_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSLAVE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseslaveThreadOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseUNTIL_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseslaveUntilOptions();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseslaveConnectionOptions();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsechannel();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSTOP_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSLAVE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseslaveThreadOptions();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsechannel();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseslaveUntilOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsemasterFileDef();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s2 = peg$c29();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEQUAL_OPERATOR();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetextString();
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s2 = peg$c29();
          if (s2) {
            s2 = peg$c3;
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemasterFileDef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemasterFileDef();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslaveConnectionOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c4();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseUSER_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEQUAL_OPERATOR();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetextString();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsePASSWORD_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEQUAL_OPERATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextString();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseDEFAULT_AUTH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseEQUAL_OPERATOR();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetextString();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsePLUGIN_DIR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseEQUAL_OPERATOR();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetextString();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslaveThreadOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseslaveThreadOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseslaveThreadOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseslaveThreadOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslaveThreadOption() {
      var s0;

      s0 = peg$parseRELAY_THREAD_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSQL_THREAD_SYMBOL();
      }

      return s0;
    }

    function peg$parsegroupReplication() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSTART_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSTOP_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGROUP_REPLICATION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepreparedStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsePREPARE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFROM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetextLiteral();
            if (s4 === peg$FAILED) {
              s4 = peg$parseuserVariable();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseexecuteStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDEALLOCATE_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDROP_SYMBOL();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePREPARE_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseexecuteStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseEXECUTE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseUSING_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexecuteVarList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexecuteVarList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseuserVariable();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseuserVariable();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseuserVariable();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecloneStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parseCLONE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseLOCAL_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDATA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDIRECTORY_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseequal();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseSINGLE_QUOTED_TEXT();
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseREMOTE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseFOR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseREPLICATION_SYMBOL();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s3 = peg$c5();
            if (s3) {
              s3 = peg$c3;
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseINSTANCE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseFROM_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseuser();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseCOLON_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseulong_number();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseIDENTIFIED_SYMBOL();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseBY_SYMBOL();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseSINGLE_QUOTED_TEXT();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parsedataDirSSL();
                              if (s12 === peg$FAILED) {
                                s12 = peg$c1;
                              }
                              if (s12 !== peg$FAILED) {
                                s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedataDirSSL() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parsessl();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDATA_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDIRECTORY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseequal();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseSINGLE_QUOTED_TEXT();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsessl();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsessl() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseREQUIRE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNO_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSSL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaccountManagementStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c29();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealterUser();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecreateUser();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedropUser();
          if (s0 === peg$FAILED) {
            s0 = peg$parsegrant();
            if (s0 === peg$FAILED) {
              s0 = peg$parserenameUser();
              if (s0 === peg$FAILED) {
                s0 = peg$parserevoke();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  peg$reportedPos = peg$currPos;
                  s1 = peg$c2();
                  if (s1) {
                    s1 = peg$c3;
                  } else {
                    s1 = peg$c0;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsesetRole();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealterUser() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseALTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c15();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseifExists();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsealterUserTail();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterUserTail() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s2 = peg$c30();
      if (s2) {
        s2 = peg$c3;
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecreateUserList();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s2 = peg$c5();
        if (s2) {
          s2 = peg$c3;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealterUserList();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateUserTail();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c15();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseuser();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIDENTIFIED_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseBY_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsetextString();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  peg$reportedPos = peg$currPos;
                  s7 = peg$c5();
                  if (s7) {
                    s7 = peg$c3;
                  } else {
                    s7 = peg$c0;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsereplacePassword();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s8 = peg$c5();
                    if (s8) {
                      s8 = peg$c3;
                    } else {
                      s8 = peg$c0;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseretainCurrentPassword();
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$c1;
                    }
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c5();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseuser();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsediscardOldPassword();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c2();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseuser();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseDEFAULT_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseROLE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseALL_SYMBOL();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseNONE_SYMBOL();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseroleList();
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c31();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseuser();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseIDENTIFIED_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$parseWITH_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsetextOrIdentifier();
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseBY_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseRANDOM_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parsePASSWORD_SYMBOL();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parseretainCurrentPassword();
                            if (s8 === peg$FAILED) {
                              s8 = peg$c1;
                            }
                            if (s8 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsereal_ulong_number();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePASSWORD_LOCK_TIME_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsereal_ulong_number();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseUNBOUNDED_SYMBOL();
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseuserFunction() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUSER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparentheses();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUser() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCREATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c15();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseifNotExists();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecreateUserList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedefaultRoleClause();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecreateUserTail();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUserTail() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c15();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parserequireClause();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseconnectOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseaccountLockPasswordExpireOptions();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseaccountLockPasswordExpireOptions();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedefaultRoleClause() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c2();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDEFAULT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseROLE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseroleList();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserequireClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREQUIRE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserequireList();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSSL_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseX509_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseNONE_SYMBOL();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconnectOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseulong_number();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseulong_number();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseulong_number();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseulong_number();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseulong_number();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseulong_number();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseulong_number();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseulong_number();
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                }
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaccountLockPasswordExpireOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseACCOUNT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOCK_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseUNLOCK_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePASSWORD_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseEXPIRE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseINTERVAL_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsereal_ulong_number();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDAY_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$parseNEVER_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$parseDEFAULT_SYMBOL();
              }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseHISTORY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsereal_ulong_number();
              if (s4 === peg$FAILED) {
                s4 = peg$parseDEFAULT_SYMBOL();
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseREUSE_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseINTERVAL_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parsereal_ulong_number();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseDAY_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseDEFAULT_SYMBOL();
                  }
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c5();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseREQUIRE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCURRENT_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseDEFAULT_SYMBOL();
                      if (s6 === peg$FAILED) {
                        s6 = peg$parseOPTIONAL_SYMBOL();
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsedropUser() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDROP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s4 = peg$c15();
          if (s4) {
            s4 = peg$c3;
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseifExists();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseuserList();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegrant() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseGRANT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c2();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseroleOrPrivilegesList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTO_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseuserList();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseWITH_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseADMIN_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseOPTION_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseroleOrPrivilegesList();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseALL_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsePRIVILEGES_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseON_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseaclType();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsegrantIdentifier();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseTO_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsegrantTargetList();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseversionedRequireClause();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsegrantOptions();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsegrantAs();
                          if (s11 === peg$FAILED) {
                            s11 = peg$c1;
                          }
                          if (s11 !== peg$FAILED) {
                            s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsePROXY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseON_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseuser();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseTO_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsegrantTargetList();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$currPos;
                      s9 = peg$parseWITH_SYMBOL();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseGRANT_SYMBOL();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseOPTION_SYMBOL();
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c0;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c0;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$c1;
                      }
                      if (s8 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegrantTargetList() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c32();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateUserList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c16();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseuserList();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsegrantOptions() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c32();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWITH_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsegrantOption();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsegrantOption();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c16();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWITH_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseGRANT_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseOPTION_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseexceptRoleList() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseEXCEPT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseroleList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewithRoles() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseROLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseroleList();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseALL_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexceptRoleList();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseNONE_SYMBOL();
              if (s3 === peg$FAILED) {
                s3 = peg$parseDEFAULT_SYMBOL();
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegrantAs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewithRoles();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseversionedRequireClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c32();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parserequireClause();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserenameUser() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseRENAME_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseuser();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTO_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseuser();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseuser();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseTO_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseuser();
                      if (s11 !== peg$FAILED) {
                        s8 = [s8, s9, s10, s11];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parseCOMMA_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseuser();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseTO_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseuser();
                        if (s11 !== peg$FAILED) {
                          s8 = [s8, s9, s10, s11];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserevoke() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseREVOKE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c2();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseroleOrPrivilegesList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseFROM_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseuserList();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseroleOrPrivilegesList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseonTypeTo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFROM_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseuserList();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseALL_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsePRIVILEGES_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s6 = peg$c2();
                if (s6) {
                  s6 = peg$c3;
                } else {
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseON_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseaclType();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsegrantIdentifier();
                      if (s9 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseCOMMA_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseGRANT_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseOPTION_SYMBOL();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseFROM_SYMBOL();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseuserList();
                          if (s10 !== peg$FAILED) {
                            s6 = [s6, s7, s8, s9, s10];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                }
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parsePROXY_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseON_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseuser();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseFROM_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseuserList();
                      if (s7 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseonTypeTo() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c8();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaclType();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsegrantIdentifier();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c2();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseaclType();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsegrantIdentifier();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseaclType() {
      var s0;

      s0 = peg$parseTABLE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFUNCTION_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePROCEDURE_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseroleOrPrivilegesList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseroleOrPrivilege();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseroleOrPrivilege();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseroleOrPrivilege();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseroleOrPrivilege() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c27();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseroleIdentifierOrText();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecolumnInternalRefList();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseroleIdentifierOrText();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAT_TEXT_SUFFIX();
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseAT_SIGN_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextOrIdentifier();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSELECT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseINSERT_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseUPDATE_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseREFERENCES_SYMBOL();
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecolumnInternalRefList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseDELETE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUSAGE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseINDEX_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseDROP_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseEXECUTE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseRELOAD_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSHUTDOWN_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsePROCESS_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseFILE_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsePROXY_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseSUPER_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseEVENT_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseTRIGGER_SYMBOL();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseGRANT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPTION_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSHOW_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDATABASES_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCREATE_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseTEMPORARY_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseTABLES_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseROUTINE_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseTABLESPACE_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseUSER_SYMBOL();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseVIEW_SYMBOL();
                        }
                      }
                    }
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseLOCK_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseTABLES_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseREPLICATION_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseCLIENT_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseSLAVE_SYMBOL();
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseSHOW_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseVIEW_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseALTER_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseROUTINE_SYMBOL();
                          if (s2 === peg$FAILED) {
                            s2 = peg$c1;
                          }
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s1 = peg$c27();
                          if (s1) {
                            s1 = peg$c3;
                          } else {
                            s1 = peg$c0;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseCREATE_SYMBOL();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseDROP_SYMBOL();
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseROLE_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegrantIdentifier() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseMULT_OPERATOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDOT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMULT_OPERATOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseDOT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMULT_OPERATOR();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsetableRef();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c12();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseidentifier();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseDOT_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetableRef();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parserequireList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserequireListElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseAND_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parserequireListElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseAND_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserequireListElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserequireListElement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCIPHER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextString();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseISSUER_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextString();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSUBJECT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetextString();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsegrantOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseGRANT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseulong_number();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseulong_number();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseulong_number();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseulong_number();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesetRole() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseROLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseroleList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSET_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseROLE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseNONE_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$parseDEFAULT_SYMBOL();
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSET_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDEFAULT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseROLE_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseroleList();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseNONE_SYMBOL();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseALL_SYMBOL();
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseTO_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseroleList();
                    if (s6 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSET_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseROLE_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseALL_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parseEXCEPT_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseroleList();
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseroleList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserole();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserole();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parserole();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserole() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseroleIdentifierOrText();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseAT_SIGN_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextOrIdentifier();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseAT_TEXT_SUFFIX();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableAdministrationStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseANALYZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenoWriteToBinLog();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTABLE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableRefList();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s6 = peg$c2();
              if (s6) {
                s6 = peg$c3;
              } else {
                s6 = peg$c0;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsehistogram();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHECK_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTABLE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetableRefList();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsecheckOption();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsecheckOption();
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCHECKSUM_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTABLE_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetableRefList();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseQUICK_SYMBOL();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseEXTENDED_SYMBOL();
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseOPTIMIZE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenoWriteToBinLog();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseTABLE_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetableRefList();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseREPAIR_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenoWriteToBinLog();
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseTABLE_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetableRefList();
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parserepairType();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parserepairType();
                      }
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsehistogram() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseUPDATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHISTOGRAM_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifierList();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseWITH_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseINT_NUMBER();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseBUCKETS_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDROP_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHISTOGRAM_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseON_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseidentifierList();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecheckOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUPGRADE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseQUICK_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFAST_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMEDIUM_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseEXTENDED_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCHANGED_SYMBOL();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserepairType() {
      var s0;

      s0 = peg$parseQUICK_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEXTENDED_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUSE_FRM_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseinstallUninstallStatment() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseINSTALL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePLUGIN_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSONAME_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSINGLE_QUOTED_TEXT();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseINSTALL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCOMPONENT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetextStringLiteralList();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUNINSTALL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePLUGIN_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseUNINSTALL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseCOMPONENT_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSINGLE_QUOTED_TEXT();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$currPos;
                  s6 = peg$parseCOMMA_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseSINGLE_QUOTED_TEXT();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$currPos;
                    s6 = peg$parseCOMMA_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseSINGLE_QUOTED_TEXT();
                      if (s7 !== peg$FAILED) {
                        s6 = [s6, s7];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesetStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestartOptionValueList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestartOptionValueList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseoptionValueNoOptionType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoptionValueListContinued();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTRANSACTION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetransactionCharacteristics();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseoptionType();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsestartOptionValueListFollowingOptionType();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePASSWORD_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseFOR_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseuser();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseequal();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parsetextString();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsereplacePassword();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseretainCurrentPassword();
                      if (s7 === peg$FAILED) {
                        s7 = peg$c1;
                      }
                      if (s7 !== peg$FAILED) {
                        s5 = [s5, s6, s7];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$parsetextString();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsereplacePassword();
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseretainCurrentPassword();
                        if (s7 === peg$FAILED) {
                          s7 = peg$c1;
                        }
                        if (s7 !== peg$FAILED) {
                          s5 = [s5, s6, s7];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c0;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s5 = peg$c33();
                      if (s5) {
                        s5 = peg$c3;
                      } else {
                        s5 = peg$c0;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseOLD_PASSWORD_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseOPEN_PAR_SYMBOL();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsetextString();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseCLOSE_PAR_SYMBOL();
                              if (s9 !== peg$FAILED) {
                                s5 = [s5, s6, s7, s8, s9];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c0;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c0;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                      if (s4 === peg$FAILED) {
                        s4 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s5 = peg$c30();
                        if (s5) {
                          s5 = peg$c3;
                        } else {
                          s5 = peg$c0;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parsePASSWORD_SYMBOL();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseOPEN_PAR_SYMBOL();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parsetextString();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseCLOSE_PAR_SYMBOL();
                                if (s9 !== peg$FAILED) {
                                  s5 = [s5, s6, s7, s8, s9];
                                  s4 = s5;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$c0;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c0;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c0;
                        }
                      }
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c31();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsePASSWORD_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseFOR_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseuser();
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$c1;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseTO_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseRANDOM_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parsereplacePassword();
                        if (s6 === peg$FAILED) {
                          s6 = peg$c1;
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseretainCurrentPassword();
                          if (s7 === peg$FAILED) {
                            s7 = peg$c1;
                          }
                          if (s7 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetransactionCharacteristics() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsetransactionAccessMode();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseisolationLevel();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseisolationLevel();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseCOMMA_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetransactionAccessMode();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetransactionAccessMode() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREAD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWRITE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseONLY_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseisolationLevel() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseISOLATION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLEVEL_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseREPEATABLE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseREAD_SYMBOL();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseREAD_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCOMMITTED_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseUNCOMMITTED_SYMBOL();
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseSERIALIZABLE_SYMBOL();
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseoptionValueListContinued() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parseCOMMA_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoptionValue();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseCOMMA_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoptionValue();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseoptionValueNoOptionType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseinternalVariableName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequal();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesetExprOrDefault();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecharsetClause();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseuserVariable();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseequal();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseexpr();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsesetSystemVariable();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseequal();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesetExprOrDefault();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseNAMES_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseequal();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseexpr();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parsecharsetName();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsecollate();
                    if (s4 === peg$FAILED) {
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s3 = peg$c16();
                    if (s3) {
                      s3 = peg$c3;
                    } else {
                      s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseDEFAULT_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseoptionValue() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseoptionType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinternalVariableName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseequal();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesetExprOrDefault();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseoptionValueNoOptionType();
      }

      return s0;
    }

    function peg$parsesetSystemVariable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAT_AT_SIGN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesetVarIdentType();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinternalVariableName();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestartOptionValueListFollowingOptionType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseoptionValueFollowingOptionType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoptionValueListContinued();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTRANSACTION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetransactionCharacteristics();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseoptionValueFollowingOptionType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseinternalVariableName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequal();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesetExprOrDefault();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesetExprOrDefault() {
      var s0, s1, s2;

      s0 = peg$parseexpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDEFAULT_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseON_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseALL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBINARY_SYMBOL();
            }
          }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c2();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseROW_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseSYSTEM_SYMBOL();
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseshowStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSHOW_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c9();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAUTHORS_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseDATABASES_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parselikeOrWhere();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseshowCommandType();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseTABLES_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseinDb();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parselikeOrWhere();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseFULL_SYMBOL();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseTRIGGERS_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseinDb();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parselikeOrWhere();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseEVENTS_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseinDb();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parselikeOrWhere();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s3 = [s3, s4, s5];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseTABLE_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseSTATUS_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseinDb();
                      if (s5 === peg$FAILED) {
                        s5 = peg$c1;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parselikeOrWhere();
                        if (s6 === peg$FAILED) {
                          s6 = peg$c1;
                        }
                        if (s6 !== peg$FAILED) {
                          s3 = [s3, s4, s5, s6];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseOPEN_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseTABLES_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseinDb();
                        if (s5 === peg$FAILED) {
                          s5 = peg$c1;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parselikeOrWhere();
                          if (s6 === peg$FAILED) {
                            s6 = peg$c1;
                          }
                          if (s6 !== peg$FAILED) {
                            s3 = [s3, s4, s5, s6];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsePLUGINS_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parseENGINE_SYMBOL();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsetextOrIdentifier();
                          if (s4 === peg$FAILED) {
                            s4 = peg$parseALL_SYMBOL();
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseSTATUS_SYMBOL();
                            if (s5 === peg$FAILED) {
                              s5 = peg$parseMUTEX_SYMBOL();
                              if (s5 === peg$FAILED) {
                                s5 = peg$parseLOGS_SYMBOL();
                              }
                            }
                            if (s5 !== peg$FAILED) {
                              s3 = [s3, s4, s5];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseshowCommandType();
                          if (s3 === peg$FAILED) {
                            s3 = peg$c1;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseCOLUMNS_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseFROM_SYMBOL();
                              if (s5 === peg$FAILED) {
                                s5 = peg$parseIN_SYMBOL();
                              }
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parsetableRef();
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parseinDb();
                                  if (s7 === peg$FAILED) {
                                    s7 = peg$c1;
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parselikeOrWhere();
                                    if (s8 === peg$FAILED) {
                                      s8 = peg$c1;
                                    }
                                    if (s8 !== peg$FAILED) {
                                      s3 = [s3, s4, s5, s6, s7, s8];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            s3 = peg$parseBINARY_SYMBOL();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parseMASTER_SYMBOL();
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseLOGS_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c0;
                            }
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              s3 = peg$parseSLAVE_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseHOSTS_SYMBOL();
                                if (s4 === peg$FAILED) {
                                  s4 = peg$currPos;
                                  s5 = peg$parseSTATUS_SYMBOL();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parsenonBlocking();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parsechannel();
                                      if (s7 === peg$FAILED) {
                                        s7 = peg$c1;
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s5 = [s5, s6, s7];
                                        s4 = s5;
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$c0;
                                  }
                                }
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parseBINLOG_SYMBOL();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$parseRELAYLOG_SYMBOL();
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseEVENTS_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$currPos;
                                    s6 = peg$parseIN_SYMBOL();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parsetextString();
                                      if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                      } else {
                                        peg$currPos = s5;
                                        s5 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$c0;
                                    }
                                    if (s5 === peg$FAILED) {
                                      s5 = peg$c1;
                                    }
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$currPos;
                                      s7 = peg$parseFROM_SYMBOL();
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parseulonglong_number();
                                        if (s8 !== peg$FAILED) {
                                          s7 = [s7, s8];
                                          s6 = s7;
                                        } else {
                                          peg$currPos = s6;
                                          s6 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s6;
                                        s6 = peg$c0;
                                      }
                                      if (s6 === peg$FAILED) {
                                        s6 = peg$c1;
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s7 = peg$parselimitClause();
                                        if (s7 === peg$FAILED) {
                                          s7 = peg$c1;
                                        }
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parsechannel();
                                          if (s8 === peg$FAILED) {
                                            s8 = peg$c1;
                                          }
                                          if (s8 !== peg$FAILED) {
                                            s3 = [s3, s4, s5, s6, s7, s8];
                                            s2 = s3;
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  s3 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s4 = peg$c2();
                                  if (s4) {
                                    s4 = peg$c3;
                                  } else {
                                    s4 = peg$c0;
                                  }
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseEXTENDED_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s4 = [s4, s5];
                                      s3 = s4;
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                  }
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$c1;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseINDEX_SYMBOL();
                                    if (s4 === peg$FAILED) {
                                      s4 = peg$parseINDEXES_SYMBOL();
                                      if (s4 === peg$FAILED) {
                                        s4 = peg$parseKEYS_SYMBOL();
                                      }
                                    }
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parsefromOrIn();
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parsetableRef();
                                        if (s6 !== peg$FAILED) {
                                          s7 = peg$parseinDb();
                                          if (s7 === peg$FAILED) {
                                            s7 = peg$c1;
                                          }
                                          if (s7 !== peg$FAILED) {
                                            s8 = peg$parsewhereClause();
                                            if (s8 === peg$FAILED) {
                                              s8 = peg$c1;
                                            }
                                            if (s8 !== peg$FAILED) {
                                              s3 = [s3, s4, s5, s6, s7, s8];
                                              s2 = s3;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$currPos;
                                    s3 = peg$parseSTORAGE_SYMBOL();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$c1;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseENGINES_SYMBOL();
                                      if (s4 !== peg$FAILED) {
                                        s3 = [s3, s4];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$currPos;
                                      s3 = peg$parseCOUNT_SYMBOL();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseOPEN_PAR_SYMBOL();
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parseMULT_OPERATOR();
                                          if (s5 !== peg$FAILED) {
                                            s6 = peg$parseCLOSE_PAR_SYMBOL();
                                            if (s6 !== peg$FAILED) {
                                              s7 = peg$parseWARNINGS_SYMBOL();
                                              if (s7 === peg$FAILED) {
                                                s7 = peg$parseERRORS_SYMBOL();
                                              }
                                              if (s7 !== peg$FAILED) {
                                                s3 = [s3, s4, s5, s6, s7];
                                                s2 = s3;
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                      }
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$currPos;
                                        s3 = peg$parseWARNINGS_SYMBOL();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parselimitClause();
                                          if (s4 === peg$FAILED) {
                                            s4 = peg$c1;
                                          }
                                          if (s4 !== peg$FAILED) {
                                            s3 = [s3, s4];
                                            s2 = s3;
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$c0;
                                        }
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$currPos;
                                          s3 = peg$parseERRORS_SYMBOL();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parselimitClause();
                                            if (s4 === peg$FAILED) {
                                              s4 = peg$c1;
                                            }
                                            if (s4 !== peg$FAILED) {
                                              s3 = [s3, s4];
                                              s2 = s3;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                          }
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$parsePROFILES_SYMBOL();
                                            if (s2 === peg$FAILED) {
                                              s2 = peg$currPos;
                                              s3 = peg$parsePROFILE_SYMBOL();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$currPos;
                                                s5 = peg$parseprofileType();
                                                if (s5 !== peg$FAILED) {
                                                  s6 = [];
                                                  s7 = peg$currPos;
                                                  s8 = peg$parseCOMMA_SYMBOL();
                                                  if (s8 !== peg$FAILED) {
                                                    s9 = peg$parseprofileType();
                                                    if (s9 !== peg$FAILED) {
                                                      s8 = [s8, s9];
                                                      s7 = s8;
                                                    } else {
                                                      peg$currPos = s7;
                                                      s7 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s7;
                                                    s7 = peg$c0;
                                                  }
                                                  while (s7 !== peg$FAILED) {
                                                    s6.push(s7);
                                                    s7 = peg$currPos;
                                                    s8 = peg$parseCOMMA_SYMBOL();
                                                    if (s8 !== peg$FAILED) {
                                                      s9 = peg$parseprofileType();
                                                      if (s9 !== peg$FAILED) {
                                                        s8 = [s8, s9];
                                                        s7 = s8;
                                                      } else {
                                                        peg$currPos = s7;
                                                        s7 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s7;
                                                      s7 = peg$c0;
                                                    }
                                                  }
                                                  if (s6 !== peg$FAILED) {
                                                    s5 = [s5, s6];
                                                    s4 = s5;
                                                  } else {
                                                    peg$currPos = s4;
                                                    s4 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s4;
                                                  s4 = peg$c0;
                                                }
                                                if (s4 === peg$FAILED) {
                                                  s4 = peg$c1;
                                                }
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$currPos;
                                                  s6 = peg$parseFOR_SYMBOL();
                                                  if (s6 !== peg$FAILED) {
                                                    s7 = peg$parseQUERY_SYMBOL();
                                                    if (s7 !== peg$FAILED) {
                                                      s8 = peg$parseINT_NUMBER();
                                                      if (s8 !== peg$FAILED) {
                                                        s6 = [s6, s7, s8];
                                                        s5 = s6;
                                                      } else {
                                                        peg$currPos = s5;
                                                        s5 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s5;
                                                      s5 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s5;
                                                    s5 = peg$c0;
                                                  }
                                                  if (s5 === peg$FAILED) {
                                                    s5 = peg$c1;
                                                  }
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = peg$parselimitClause();
                                                    if (s6 === peg$FAILED) {
                                                      s6 = peg$c1;
                                                    }
                                                    if (s6 !== peg$FAILED) {
                                                      s3 = [s3, s4, s5, s6];
                                                      s2 = s3;
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$c0;
                                              }
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$currPos;
                                                s3 = peg$parseoptionType();
                                                if (s3 === peg$FAILED) {
                                                  s3 = peg$c1;
                                                }
                                                if (s3 !== peg$FAILED) {
                                                  s4 = peg$parseSTATUS_SYMBOL();
                                                  if (s4 === peg$FAILED) {
                                                    s4 = peg$parseVARIABLES_SYMBOL();
                                                  }
                                                  if (s4 !== peg$FAILED) {
                                                    s5 = peg$parselikeOrWhere();
                                                    if (s5 === peg$FAILED) {
                                                      s5 = peg$c1;
                                                    }
                                                    if (s5 !== peg$FAILED) {
                                                      s3 = [s3, s4, s5];
                                                      s2 = s3;
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$c0;
                                                }
                                                if (s2 === peg$FAILED) {
                                                  s2 = peg$currPos;
                                                  s3 = peg$parseFULL_SYMBOL();
                                                  if (s3 === peg$FAILED) {
                                                    s3 = peg$c1;
                                                  }
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parsePROCESSLIST_SYMBOL();
                                                    if (s4 !== peg$FAILED) {
                                                      s3 = [s3, s4];
                                                      s2 = s3;
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$c0;
                                                  }
                                                  if (s2 === peg$FAILED) {
                                                    s2 = peg$currPos;
                                                    s3 = peg$parsecharset();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parselikeOrWhere();
                                                      if (s4 === peg$FAILED) {
                                                        s4 = peg$c1;
                                                      }
                                                      if (s4 !== peg$FAILED) {
                                                        s3 = [s3, s4];
                                                        s2 = s3;
                                                      } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$c0;
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                      s2 = peg$currPos;
                                                      s3 = peg$parseCOLLATION_SYMBOL();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parselikeOrWhere();
                                                        if (s4 === peg$FAILED) {
                                                          s4 = peg$c1;
                                                        }
                                                        if (s4 !== peg$FAILED) {
                                                          s3 = [s3, s4];
                                                          s2 = s3;
                                                        } else {
                                                          peg$currPos = s2;
                                                          s2 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$c0;
                                                      }
                                                      if (s2 === peg$FAILED) {
                                                        s2 = peg$currPos;
                                                        peg$reportedPos = peg$currPos;
                                                        s3 = peg$c9();
                                                        if (s3) {
                                                          s3 = peg$c3;
                                                        } else {
                                                          s3 = peg$c0;
                                                        }
                                                        if (s3 !== peg$FAILED) {
                                                          s4 = peg$parseCONTRIBUTORS_SYMBOL();
                                                          if (s4 !== peg$FAILED) {
                                                            s3 = [s3, s4];
                                                            s2 = s3;
                                                          } else {
                                                            peg$currPos = s2;
                                                            s2 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s2;
                                                          s2 = peg$c0;
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                          s2 = peg$parsePRIVILEGES_SYMBOL();
                                                          if (s2 === peg$FAILED) {
                                                            s2 = peg$currPos;
                                                            s3 = peg$parseGRANTS_SYMBOL();
                                                            if (s3 !== peg$FAILED) {
                                                              s4 = peg$currPos;
                                                              s5 = peg$parseFOR_SYMBOL();
                                                              if (s5 !== peg$FAILED) {
                                                                s6 = peg$parseuser();
                                                                if (s6 !== peg$FAILED) {
                                                                  s5 = [s5, s6];
                                                                  s4 = s5;
                                                                } else {
                                                                  peg$currPos = s4;
                                                                  s4 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s4;
                                                                s4 = peg$c0;
                                                              }
                                                              if (s4 === peg$FAILED) {
                                                                s4 = peg$c1;
                                                              }
                                                              if (s4 !== peg$FAILED) {
                                                                s3 = [s3, s4];
                                                                s2 = s3;
                                                              } else {
                                                                peg$currPos = s2;
                                                                s2 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s2;
                                                              s2 = peg$c0;
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                              s2 = peg$currPos;
                                                              s3 = peg$parseGRANTS_SYMBOL();
                                                              if (s3 !== peg$FAILED) {
                                                                s4 = peg$parseFOR_SYMBOL();
                                                                if (s4 !== peg$FAILED) {
                                                                  s5 = peg$parseuser();
                                                                  if (s5 !== peg$FAILED) {
                                                                    s6 = peg$parseUSING_SYMBOL();
                                                                    if (s6 !== peg$FAILED) {
                                                                      s7 = peg$parseuserList();
                                                                      if (s7 !== peg$FAILED) {
                                                                        s3 = [s3, s4, s5, s6, s7];
                                                                        s2 = s3;
                                                                      } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s2;
                                                                  s2 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s2;
                                                                s2 = peg$c0;
                                                              }
                                                              if (s2 === peg$FAILED) {
                                                                s2 = peg$currPos;
                                                                s3 = peg$parseMASTER_SYMBOL();
                                                                if (s3 !== peg$FAILED) {
                                                                  s4 = peg$parseSTATUS_SYMBOL();
                                                                  if (s4 !== peg$FAILED) {
                                                                    s3 = [s3, s4];
                                                                    s2 = s3;
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s2;
                                                                  s2 = peg$c0;
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                  s2 = peg$currPos;
                                                                  s3 = peg$parseCREATE_SYMBOL();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s4 = peg$currPos;
                                                                    s5 = peg$parseDATABASE_SYMBOL();
                                                                    if (s5 !== peg$FAILED) {
                                                                      s6 = peg$parseifNotExists();
                                                                      if (s6 === peg$FAILED) {
                                                                        s6 = peg$c1;
                                                                      }
                                                                      if (s6 !== peg$FAILED) {
                                                                        s7 = peg$parseidentifier();
                                                                        if (s7 !== peg$FAILED) {
                                                                          s5 = [s5, s6, s7];
                                                                          s4 = s5;
                                                                        } else {
                                                                          peg$currPos = s4;
                                                                          s4 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s4;
                                                                        s4 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s4;
                                                                      s4 = peg$c0;
                                                                    }
                                                                    if (s4 === peg$FAILED) {
                                                                      s4 = peg$currPos;
                                                                      s5 = peg$parseEVENT_SYMBOL();
                                                                      if (s5 !== peg$FAILED) {
                                                                        s6 = peg$parsequalifiedIdentifier();
                                                                        if (s6 !== peg$FAILED) {
                                                                          s5 = [s5, s6];
                                                                          s4 = s5;
                                                                        } else {
                                                                          peg$currPos = s4;
                                                                          s4 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s4;
                                                                        s4 = peg$c0;
                                                                      }
                                                                      if (s4 === peg$FAILED) {
                                                                        s4 = peg$currPos;
                                                                        s5 = peg$parseFUNCTION_SYMBOL();
                                                                        if (s5 !== peg$FAILED) {
                                                                          s6 = peg$parsequalifiedIdentifier();
                                                                          if (s6 !== peg$FAILED) {
                                                                            s5 = [s5, s6];
                                                                            s4 = s5;
                                                                          } else {
                                                                            peg$currPos = s4;
                                                                            s4 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s4;
                                                                          s4 = peg$c0;
                                                                        }
                                                                        if (s4 === peg$FAILED) {
                                                                          s4 = peg$currPos;
                                                                          s5 = peg$parsePROCEDURE_SYMBOL();
                                                                          if (s5 !== peg$FAILED) {
                                                                            s6 = peg$parsequalifiedIdentifier();
                                                                            if (s6 !== peg$FAILED) {
                                                                              s5 = [s5, s6];
                                                                              s4 = s5;
                                                                            } else {
                                                                              peg$currPos = s4;
                                                                              s4 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s4;
                                                                            s4 = peg$c0;
                                                                          }
                                                                          if (s4 === peg$FAILED) {
                                                                            s4 = peg$currPos;
                                                                            s5 = peg$parseTABLE_SYMBOL();
                                                                            if (s5 !== peg$FAILED) {
                                                                              s6 = peg$parsetableRef();
                                                                              if (s6 !== peg$FAILED) {
                                                                                s5 = [s5, s6];
                                                                                s4 = s5;
                                                                              } else {
                                                                                peg$currPos = s4;
                                                                                s4 = peg$c0;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s4;
                                                                              s4 = peg$c0;
                                                                            }
                                                                            if (s4 === peg$FAILED) {
                                                                              s4 = peg$currPos;
                                                                              s5 = peg$parseTRIGGER_SYMBOL();
                                                                              if (s5 !== peg$FAILED) {
                                                                                s6 = peg$parsequalifiedIdentifier();
                                                                                if (s6 !== peg$FAILED) {
                                                                                  s5 = [s5, s6];
                                                                                  s4 = s5;
                                                                                } else {
                                                                                  peg$currPos = s4;
                                                                                  s4 = peg$c0;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s4;
                                                                                s4 = peg$c0;
                                                                              }
                                                                              if (s4 === peg$FAILED) {
                                                                                s4 = peg$currPos;
                                                                                s5 = peg$parseVIEW_SYMBOL();
                                                                                if (s5 !== peg$FAILED) {
                                                                                  s6 = peg$parseviewRef();
                                                                                  if (s6 !== peg$FAILED) {
                                                                                    s5 = [s5, s6];
                                                                                    s4 = s5;
                                                                                  } else {
                                                                                    peg$currPos = s4;
                                                                                    s4 = peg$c0;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s4;
                                                                                  s4 = peg$c0;
                                                                                }
                                                                                if (s4 === peg$FAILED) {
                                                                                  s4 = peg$currPos;
                                                                                  peg$reportedPos = peg$currPos;
                                                                                  s5 = peg$c10();
                                                                                  if (s5) {
                                                                                    s5 = peg$c3;
                                                                                  } else {
                                                                                    s5 = peg$c0;
                                                                                  }
                                                                                  if (s5 !== peg$FAILED) {
                                                                                    s6 = peg$parseUSER_SYMBOL();
                                                                                    if (s6 !== peg$FAILED) {
                                                                                      s7 = peg$parseuser();
                                                                                      if (s7 !== peg$FAILED) {
                                                                                        s5 = [s5, s6, s7];
                                                                                        s4 = s5;
                                                                                      } else {
                                                                                        peg$currPos = s4;
                                                                                        s4 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s4;
                                                                                      s4 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s4;
                                                                                    s4 = peg$c0;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    if (s4 !== peg$FAILED) {
                                                                      s3 = [s3, s4];
                                                                      s2 = s3;
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$c0;
                                                                  }
                                                                  if (s2 === peg$FAILED) {
                                                                    s2 = peg$currPos;
                                                                    s3 = peg$parsePROCEDURE_SYMBOL();
                                                                    if (s3 !== peg$FAILED) {
                                                                      s4 = peg$parseSTATUS_SYMBOL();
                                                                      if (s4 !== peg$FAILED) {
                                                                        s5 = peg$parselikeOrWhere();
                                                                        if (s5 === peg$FAILED) {
                                                                          s5 = peg$c1;
                                                                        }
                                                                        if (s5 !== peg$FAILED) {
                                                                          s3 = [s3, s4, s5];
                                                                          s2 = s3;
                                                                        } else {
                                                                          peg$currPos = s2;
                                                                          s2 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$c0;
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                      s2 = peg$currPos;
                                                                      s3 = peg$parseFUNCTION_SYMBOL();
                                                                      if (s3 !== peg$FAILED) {
                                                                        s4 = peg$parseSTATUS_SYMBOL();
                                                                        if (s4 !== peg$FAILED) {
                                                                          s5 = peg$parselikeOrWhere();
                                                                          if (s5 === peg$FAILED) {
                                                                            s5 = peg$c1;
                                                                          }
                                                                          if (s5 !== peg$FAILED) {
                                                                            s3 = [s3, s4, s5];
                                                                            s2 = s3;
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s2;
                                                                          s2 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$c0;
                                                                      }
                                                                      if (s2 === peg$FAILED) {
                                                                        s2 = peg$currPos;
                                                                        s3 = peg$parsePROCEDURE_SYMBOL();
                                                                        if (s3 !== peg$FAILED) {
                                                                          s4 = peg$parseCODE_SYMBOL();
                                                                          if (s4 !== peg$FAILED) {
                                                                            s5 = peg$parsequalifiedIdentifier();
                                                                            if (s5 !== peg$FAILED) {
                                                                              s3 = [s3, s4, s5];
                                                                              s2 = s3;
                                                                            } else {
                                                                              peg$currPos = s2;
                                                                              s2 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s2;
                                                                          s2 = peg$c0;
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                          s2 = peg$currPos;
                                                                          s3 = peg$parseFUNCTION_SYMBOL();
                                                                          if (s3 !== peg$FAILED) {
                                                                            s4 = peg$parseCODE_SYMBOL();
                                                                            if (s4 !== peg$FAILED) {
                                                                              s5 = peg$parsequalifiedIdentifier();
                                                                              if (s5 !== peg$FAILED) {
                                                                                s3 = [s3, s4, s5];
                                                                                s2 = s3;
                                                                              } else {
                                                                                peg$currPos = s2;
                                                                                s2 = peg$c0;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s2;
                                                                              s2 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$c0;
                                                                          }
                                                                          if (s2 === peg$FAILED) {
                                                                            s2 = peg$currPos;
                                                                            peg$reportedPos = peg$currPos;
                                                                            s3 = peg$c2();
                                                                            if (s3) {
                                                                              s3 = peg$c3;
                                                                            } else {
                                                                              s3 = peg$c0;
                                                                            }
                                                                            if (s3 !== peg$FAILED) {
                                                                              s4 = peg$parseCREATE_SYMBOL();
                                                                              if (s4 !== peg$FAILED) {
                                                                                s5 = peg$parseUSER_SYMBOL();
                                                                                if (s5 !== peg$FAILED) {
                                                                                  s6 = peg$parseuser();
                                                                                  if (s6 !== peg$FAILED) {
                                                                                    s3 = [s3, s4, s5, s6];
                                                                                    s2 = s3;
                                                                                  } else {
                                                                                    peg$currPos = s2;
                                                                                    s2 = peg$c0;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s2;
                                                                                  s2 = peg$c0;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s2;
                                                                                s2 = peg$c0;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s2;
                                                                              s2 = peg$c0;
                                                                            }
                                                                            if (s2 === peg$FAILED) {
                                                                              s2 = peg$currPos;
                                                                              peg$reportedPos = peg$currPos;
                                                                              s3 = peg$c2();
                                                                              if (s3) {
                                                                                s3 = peg$c3;
                                                                              } else {
                                                                                s3 = peg$c0;
                                                                              }
                                                                              if (s3 !== peg$FAILED) {
                                                                                s4 = peg$parseCREATE_SYMBOL();
                                                                                if (s4 !== peg$FAILED) {
                                                                                  s5 = peg$currPos;
                                                                                  s6 = peg$parseROLE_SYMBOL();
                                                                                  if (s6 !== peg$FAILED) {
                                                                                    s7 = peg$parseroleIdentifier();
                                                                                    if (s7 !== peg$FAILED) {
                                                                                      s6 = [s6, s7];
                                                                                      s5 = s6;
                                                                                    } else {
                                                                                      peg$currPos = s5;
                                                                                      s5 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s5;
                                                                                    s5 = peg$c0;
                                                                                  }
                                                                                  if (s5 === peg$FAILED) {
                                                                                    s5 = peg$currPos;
                                                                                    s6 = peg$parseSPATIAL_SYMBOL();
                                                                                    if (s6 !== peg$FAILED) {
                                                                                      s7 = peg$parseREFERENCE_SYMBOL();
                                                                                      if (s7 !== peg$FAILED) {
                                                                                        s8 = peg$parseSYSTEM_SYMBOL();
                                                                                        if (s8 !== peg$FAILED) {
                                                                                          s9 = peg$parsereal_ulonglong_number();
                                                                                          if (s9 !== peg$FAILED) {
                                                                                            s6 = [s6, s7, s8, s9];
                                                                                            s5 = s6;
                                                                                          } else {
                                                                                            peg$currPos = s5;
                                                                                            s5 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s5;
                                                                                          s5 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s5;
                                                                                        s5 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s5;
                                                                                      s5 = peg$c0;
                                                                                    }
                                                                                  }
                                                                                  if (s5 !== peg$FAILED) {
                                                                                    s3 = [s3, s4, s5];
                                                                                    s2 = s3;
                                                                                  } else {
                                                                                    peg$currPos = s2;
                                                                                    s2 = peg$c0;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s2;
                                                                                  s2 = peg$c0;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s2;
                                                                                s2 = peg$c0;
                                                                              }
                                                                              if (s2 === peg$FAILED) {
                                                                                s2 = peg$currPos;
                                                                                peg$reportedPos = peg$currPos;
                                                                                s3 = peg$c5();
                                                                                if (s3) {
                                                                                  s3 = peg$c3;
                                                                                } else {
                                                                                  s3 = peg$c0;
                                                                                }
                                                                                if (s3 !== peg$FAILED) {
                                                                                  s4 = peg$parseCREATE_SYMBOL();
                                                                                  if (s4 !== peg$FAILED) {
                                                                                    s5 = peg$parseTABLESPACE_SYMBOL();
                                                                                    if (s5 !== peg$FAILED) {
                                                                                      s6 = peg$parseidentifier();
                                                                                      if (s6 !== peg$FAILED) {
                                                                                        s3 = [s3, s4, s5, s6];
                                                                                        s2 = s3;
                                                                                      } else {
                                                                                        peg$currPos = s2;
                                                                                        s2 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s2;
                                                                                      s2 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s2;
                                                                                    s2 = peg$c0;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s2;
                                                                                  s2 = peg$c0;
                                                                                }
                                                                                if (s2 === peg$FAILED) {
                                                                                  s2 = peg$currPos;
                                                                                  s3 = peg$parseCONSTRAINTS_SYMBOL();
                                                                                  if (s3 === peg$FAILED) {
                                                                                    s3 = peg$parseINDEXES_SYMBOL();
                                                                                    if (s3 === peg$FAILED) {
                                                                                      s3 = peg$parseKEYS_SYMBOL();
                                                                                    }
                                                                                  }
                                                                                  if (s3 !== peg$FAILED) {
                                                                                    s4 = peg$parseFROM_SYMBOL();
                                                                                    if (s4 !== peg$FAILED) {
                                                                                      s5 = peg$parsetableRef();
                                                                                      if (s5 !== peg$FAILED) {
                                                                                        s3 = [s3, s4, s5];
                                                                                        s2 = s3;
                                                                                      } else {
                                                                                        peg$currPos = s2;
                                                                                        s2 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s2;
                                                                                      s2 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s2;
                                                                                    s2 = peg$c0;
                                                                                  }
                                                                                  if (s2 === peg$FAILED) {
                                                                                    s2 = peg$currPos;
                                                                                    s3 = peg$parseCOMPONENT_SYMBOL();
                                                                                    if (s3 !== peg$FAILED) {
                                                                                      s4 = peg$parseSINGLE_QUOTED_TEXT();
                                                                                      if (s4 !== peg$FAILED) {
                                                                                        s5 = peg$parseSTATUS_SYMBOL();
                                                                                        if (s5 !== peg$FAILED) {
                                                                                          s3 = [s3, s4, s5];
                                                                                          s2 = s3;
                                                                                        } else {
                                                                                          peg$currPos = s2;
                                                                                          s2 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s2;
                                                                                        s2 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s2;
                                                                                      s2 = peg$c0;
                                                                                    }
                                                                                    if (s2 === peg$FAILED) {
                                                                                      s2 = peg$currPos;
                                                                                      s3 = peg$parseREPLICA_SYMBOL();
                                                                                      if (s3 === peg$FAILED) {
                                                                                        s3 = peg$parseSOURCE_SYMBOL();
                                                                                      }
                                                                                      if (s3 !== peg$FAILED) {
                                                                                        s4 = peg$parseSTATUS_SYMBOL();
                                                                                        if (s4 === peg$FAILED) {
                                                                                          s4 = peg$parseHOSTS_SYMBOL();
                                                                                        }
                                                                                        if (s4 !== peg$FAILED) {
                                                                                          s5 = peg$parsechannel();
                                                                                          if (s5 === peg$FAILED) {
                                                                                            s5 = peg$c1;
                                                                                          }
                                                                                          if (s5 !== peg$FAILED) {
                                                                                            s3 = [s3, s4, s5];
                                                                                            s2 = s3;
                                                                                          } else {
                                                                                            peg$currPos = s2;
                                                                                            s2 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s2;
                                                                                          s2 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s2;
                                                                                        s2 = peg$c0;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseshowCommandType() {
      var s0, s1, s2, s3;

      s0 = peg$parseFULL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c2();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEXTENDED_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFULL_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsenonBlocking() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c34();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNONBLOCKING_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefromOrIn() {
      var s0;

      s0 = peg$parseFROM_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIN_SYMBOL();
      }

      return s0;
    }

    function peg$parseinDb() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsefromOrIn();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseprofileType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBLOCK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIO_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCONTEXT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSWITCHES_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePAGE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFAULTS_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseALL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCPU_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIPC_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseMEMORY_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSOURCE_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSWAPS_SYMBOL();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseotherAdministrativeStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseBINLOG_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCACHE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseINDEX_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsekeyCacheListOrParts();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseIN_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifier();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseDEFAULT_SYMBOL();
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFLUSH_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenoWriteToBinLog();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseflushTables();
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseflushOption();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$currPos;
                  s7 = peg$parseCOMMA_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseflushOption();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$currPos;
                    s7 = peg$parseCOMMA_SYMBOL();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseflushOption();
                      if (s8 !== peg$FAILED) {
                        s7 = [s7, s8];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseKILL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseCONNECTION_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseQUERY_SYMBOL();
              }
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpr();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseLOAD_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseINDEX_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseINTO_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCACHE_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsepreloadTail();
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s1 = peg$c21();
                if (s1) {
                  s1 = peg$c3;
                } else {
                  s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseSHUTDOWN_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekeyCacheListOrParts() {
      var s0;

      s0 = peg$parsekeyCacheList();
      if (s0 === peg$FAILED) {
        s0 = peg$parseassignToKeycachePartition();
      }

      return s0;
    }

    function peg$parsekeyCacheList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseassignToKeycache();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseassignToKeycache();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseassignToKeycache();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassignToKeycache() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecacheKeyList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassignToKeycachePartition() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseallOrPartitionNameList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecacheKeyList();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecacheKeyList() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekeyOrIndex();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekeyUsageList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeyUsageElement() {
      var s0;

      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePRIMARY_SYMBOL();
      }

      return s0;
    }

    function peg$parsekeyUsageList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsekeyUsageElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsekeyUsageElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsekeyUsageElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseflushOption() {
      var s0, s1, s2, s3;

      s0 = peg$parseDES_KEY_FILE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHOSTS_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePRIVILEGES_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSTATUS_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseUSER_RESOURCES_SYMBOL();
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselogType();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLOGS_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRELAY_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseLOGS_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsechannel();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c8();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseQUERY_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseCACHE_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c15();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPTIMIZER_COSTS_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselogType() {
      var s0;

      s0 = peg$parseBINARY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseENGINE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseERROR_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGENERAL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSLOW_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseflushTables() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseTABLES_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTABLE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseWITH_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseREAD_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLOCK_SYMBOL();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseidentifierList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseflushTablesOptions();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseflushTablesOptions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c29();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEXPORT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWITH_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseREAD_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLOCK_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsepreloadTail() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseadminPartition();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecacheKeyList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseIGNORE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseLEAVES_SYMBOL();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepreloadList();
      }

      return s0;
    }

    function peg$parsepreloadList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepreloadKeys();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsepreloadKeys();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepreloadKeys();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepreloadKeys() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecacheKeyList();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseIGNORE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLEAVES_SYMBOL();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseadminPartition() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsePARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseallOrPartitionNameList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresourceGroupManagement() {
      var s0;

      s0 = peg$parsecreateResourceGroup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsealterResourceGroup();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesetResourceGroup();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedropResourceGroup();
          }
        }
      }

      return s0;
    }

    function peg$parsecreateResourceGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseCREATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRESOURCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseTYPE_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseequal();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseUSER_SYMBOL();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseSYSTEM_SYMBOL();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseresourceGroupVcpuList();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseresourceGroupPriority();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseresourceGroupEnableDisable();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c1;
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresourceGroupVcpuList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseVCPU_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequal();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevcpuNumOrRange();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevcpuNumOrRange();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsevcpuNumOrRange();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevcpuNumOrRange() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseINT_NUMBER();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMINUS_OPERATOR();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseINT_NUMBER();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresourceGroupPriority() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseTHREAD_PRIORITY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequal();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseINT_NUMBER();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresourceGroupEnableDisable() {
      var s0;

      s0 = peg$parseENABLE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDISABLE_SYMBOL();
      }

      return s0;
    }

    function peg$parsealterResourceGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseALTER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRESOURCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseresourceGroupVcpuList();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseresourceGroupPriority();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseresourceGroupEnableDisable();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseFORCE_SYMBOL();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesetResourceGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRESOURCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseFOR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsethreadIdList();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsethreadIdList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsereal_ulong_number();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsereal_ulong_number();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsereal_ulong_number();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedropResourceGroup() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDROP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRESOURCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFORCE_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseutilityStatement() {
      var s0, s1, s2;

      s0 = peg$parsedescribeStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexplainStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehelpCommand();
          if (s0 === peg$FAILED) {
            s0 = peg$parseuseCommand();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s1 = peg$c16();
              if (s1) {
                s1 = peg$c3;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseRESTART_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedescribeStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseEXPLAIN_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDESCRIBE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDESC_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableRef();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextString();
          if (s3 === peg$FAILED) {
            s3 = peg$parsefieldIdentifier();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexplainStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseEXPLAIN_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDESCRIBE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDESC_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s3 = peg$c8();
        if (s3) {
          s3 = peg$c3;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEXTENDED_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c8();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsePARTITIONS_SYMBOL();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s3 = peg$c26();
            if (s3) {
              s3 = peg$c3;
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseFORMAT_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseEQUAL_OPERATOR();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsetextOrIdentifier();
                  if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s3 = peg$c31();
              if (s3) {
                s3 = peg$c3;
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseANALYZE_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c13();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseANALYZE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseFORMAT_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseEQUAL_OPERATOR();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsetextOrIdentifier();
                        if (s7 !== peg$FAILED) {
                          s3 = [s3, s4, s5, s6, s7];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexplainableStatement();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexplainableStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseselectStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c35();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedeleteStatement();
          if (s2 === peg$FAILED) {
            s2 = peg$parseinsertStatement();
            if (s2 === peg$FAILED) {
              s2 = peg$parsereplaceStatement();
              if (s2 === peg$FAILED) {
                s2 = peg$parseupdateStatement();
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c11();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFOR_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseCONNECTION_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsereal_ulong_number();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsehelpCommand() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHELP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuseCommand() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseexprPrimary();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseexprTail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseexprTail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexprPrimary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseboolPri();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseIS_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenotRule();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTRUE_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseFALSE_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseUNKNOWN_SYMBOL();
              }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNOT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexprPrimary();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseexprTail() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAND_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLOGICAL_AND_OPERATOR();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c37(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseXOR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c38(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseOR_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLOGICAL_OR_OPERATOR();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpr();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c39(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseboolPri() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepredicate();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseboolPriTail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseboolPriTail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseboolPriTail() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenotRule();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNULL_SYMBOL();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c40(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecompOp();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepredicate();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c41(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecompOp();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseALL_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseANY_SYMBOL();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsequeryExpressionParens();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c42();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c12();
            if (s1) {
              s1 = peg$c3;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseMEMBER_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseOF_SYMBOL();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsesimpleExprWithParentheses();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c43(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSOUNDS_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseLIKE_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsebitExpr();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c44(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecompOp() {
      var s0;

      s0 = peg$parseEQUAL_OPERATOR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL_SAFE_EQUAL_OPERATOR();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGREATER_OR_EQUAL_OPERATOR();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGREATER_THAN_OPERATOR();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLESS_OR_EQUAL_OPERATOR();
              if (s0 === peg$FAILED) {
                s0 = peg$parseLESS_THAN_OPERATOR();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseNOT_EQUAL_OPERATOR();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepredicate() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebitExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsenotRule();
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepredicateOperations();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c12();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMEMBER_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseOF_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesimpleExprWithParentheses();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseSOUNDS_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseLIKE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsebitExpr();
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepredicateOperations() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsequeryExpressionParens();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexprList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBETWEEN_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsebitExpr();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseAND_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsepredicate();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLIKE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesimpleExpr();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseESCAPE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsesimpleExpr();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseREGEXP_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebitExpr();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsebitExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesimpleExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsebitExprTail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsebitExprTail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebitExprTail() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBITWISE_XOR_OPERATOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesimpleExpr();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c45(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMULT_OPERATOR();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDIV_OPERATOR();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMOD_OPERATOR();
            if (s1 === peg$FAILED) {
              s1 = peg$parseDIV_SYMBOL();
              if (s1 === peg$FAILED) {
                s1 = peg$parseMOD_SYMBOL();
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesimpleExpr();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c46(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePLUS_OPERATOR();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMINUS_OPERATOR();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesimpleExpr();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c47(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePLUS_OPERATOR();
            if (s1 === peg$FAILED) {
              s1 = peg$parseMINUS_OPERATOR();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseINTERVAL_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpr();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseinterval();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c48(s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSHIFT_LEFT_OPERATOR();
              if (s1 === peg$FAILED) {
                s1 = peg$parseSHIFT_RIGHT_OPERATOR();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsesimpleExpr();
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c49(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseBITWISE_AND_OPERATOR();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsesimpleExpr();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c50(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseBITWISE_OR_OPERATOR();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsesimpleExpr();
                    if (s2 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c51(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesimpleExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesimpleExprPrimary();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsesimpleExprTail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesimpleExprTail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleExprPrimary() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseequal();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexpr();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefieldIdentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsejsonOperator();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseruntimeFunctionCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefunctionCall();
            if (s0 === peg$FAILED) {
              s0 = peg$parseliteral();
              if (s0 === peg$FAILED) {
                s0 = peg$parsePARAM_MARKER();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesumExpr();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s1 = peg$c2();
                    if (s1) {
                      s1 = peg$c3;
                    } else {
                      s1 = peg$c0;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsegroupingOperation();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s1 = peg$c2();
                      if (s1) {
                        s1 = peg$c3;
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsewindowFunctionCall();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsePLUS_OPERATOR();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseMINUS_OPERATOR();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseBITWISE_NOT_OPERATOR();
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsesimpleExprPrimary();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsenot2Rule();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsesimpleExprPrimary();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseROW_SYMBOL();
                            if (s1 === peg$FAILED) {
                              s1 = peg$c1;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseOPEN_PAR_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseexprList();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseCLOSE_PAR_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseEXISTS_SYMBOL();
                              if (s1 === peg$FAILED) {
                                s1 = peg$c1;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parsequeryExpressionParens();
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseOPEN_CURLY_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseidentifier();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseexpr();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseCLOSE_CURLY_SYMBOL();
                                      if (s4 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseMATCH_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseidentListArg();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseAGAINST_SYMBOL();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseOPEN_PAR_SYMBOL();
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parsebitExpr();
                                          if (s5 !== peg$FAILED) {
                                            s6 = peg$parsefulltextOptions();
                                            if (s6 === peg$FAILED) {
                                              s6 = peg$c1;
                                            }
                                            if (s6 !== peg$FAILED) {
                                              s7 = peg$parseCLOSE_PAR_SYMBOL();
                                              if (s7 !== peg$FAILED) {
                                                s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseBINARY_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsesimpleExprPrimary();
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseCAST_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseOPEN_PAR_SYMBOL();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseexpr();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parseAS_SYMBOL();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parsecastType();
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parsearrayCast();
                                                if (s6 === peg$FAILED) {
                                                  s6 = peg$c1;
                                                }
                                                if (s6 !== peg$FAILED) {
                                                  s7 = peg$parseCLOSE_PAR_SYMBOL();
                                                  if (s7 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseCASE_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseexpr();
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$c1;
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s3 = [];
                                            s4 = peg$currPos;
                                            s5 = peg$parsewhenExpression();
                                            if (s5 !== peg$FAILED) {
                                              s6 = peg$parsethenExpression();
                                              if (s6 !== peg$FAILED) {
                                                s5 = [s5, s6];
                                                s4 = s5;
                                              } else {
                                                peg$currPos = s4;
                                                s4 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s4;
                                              s4 = peg$c0;
                                            }
                                            if (s4 !== peg$FAILED) {
                                              while (s4 !== peg$FAILED) {
                                                s3.push(s4);
                                                s4 = peg$currPos;
                                                s5 = peg$parsewhenExpression();
                                                if (s5 !== peg$FAILED) {
                                                  s6 = peg$parsethenExpression();
                                                  if (s6 !== peg$FAILED) {
                                                    s5 = [s5, s6];
                                                    s4 = s5;
                                                  } else {
                                                    peg$currPos = s4;
                                                    s4 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s4;
                                                  s4 = peg$c0;
                                                }
                                              }
                                            } else {
                                              s3 = peg$c0;
                                            }
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parseelseExpression();
                                              if (s4 === peg$FAILED) {
                                                s4 = peg$c1;
                                              }
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parseEND_SYMBOL();
                                                if (s5 !== peg$FAILED) {
                                                  s1 = [s1, s2, s3, s4, s5];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseCONVERT_SYMBOL();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseOPEN_PAR_SYMBOL();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseexpr();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseCOMMA_SYMBOL();
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$parsecastType();
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                    if (s6 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3, s4, s5, s6];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseCONVERT_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseOPEN_PAR_SYMBOL();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseexpr();
                                                if (s3 !== peg$FAILED) {
                                                  s4 = peg$parseUSING_SYMBOL();
                                                  if (s4 !== peg$FAILED) {
                                                    s5 = peg$parsecharsetName();
                                                    if (s5 !== peg$FAILED) {
                                                      s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                      if (s6 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3, s4, s5, s6];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseDEFAULT_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parsesimpleIdentifier();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parseCLOSE_PAR_SYMBOL();
                                                    if (s4 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3, s4];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseVALUES_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parsesimpleIdentifier();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parseCLOSE_PAR_SYMBOL();
                                                      if (s4 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3, s4];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseINTERVAL_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseexpr();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseinterval();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parsePLUS_OPERATOR();
                                                        if (s4 !== peg$FAILED) {
                                                          s5 = peg$parseexpr();
                                                          if (s5 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3, s4, s5];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesimpleExprTail() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCOLLATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c52(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCONCAT_PIPES_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesimpleExpr();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c53(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseINTERVAL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpr();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseinterval();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsePLUS_OPERATOR();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseexpr();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c54(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsearrayCast() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c12();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseARRAY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejsonOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c55();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJSON_SEPARATOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c6();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseJSON_UNQUOTED_SEPARATOR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesumExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseAVG_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDISTINCT_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseinSumExpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s7 = peg$c2();
                if (s7) {
                  s7 = peg$c3;
                } else {
                  s7 = peg$c0;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsewindowingClause();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBIT_AND_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBIT_OR_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseBIT_XOR_SYMBOL();
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinSumExpr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s6 = peg$c2();
                if (s6) {
                  s6 = peg$c3;
                } else {
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsewindowingClause();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c2();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsejsonFunction();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCOUNT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPEN_PAR_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseALL_SYMBOL();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseMULT_OPERATOR();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s7 = peg$c2();
                      if (s7) {
                        s7 = peg$c3;
                      } else {
                        s7 = peg$c0;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsewindowingClause();
                        if (s8 !== peg$FAILED) {
                          s7 = [s7, s8];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCOUNT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPEN_PAR_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseALL_SYMBOL();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseMULT_OPERATOR();
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseinSumExpr();
                    if (s3 === peg$FAILED) {
                      s3 = peg$currPos;
                      s4 = peg$parseDISTINCT_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseexprList();
                        if (s5 !== peg$FAILED) {
                          s4 = [s4, s5];
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c0;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s6 = peg$c2();
                      if (s6) {
                        s6 = peg$c3;
                      } else {
                        s6 = peg$c0;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsewindowingClause();
                        if (s7 !== peg$FAILED) {
                          s6 = [s6, s7];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                      if (s5 === peg$FAILED) {
                        s5 = peg$c1;
                      }
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMIN_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseOPEN_PAR_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseDISTINCT_SYMBOL();
                    if (s3 === peg$FAILED) {
                      s3 = peg$c1;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseinSumExpr();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s7 = peg$c2();
                          if (s7) {
                            s7 = peg$c3;
                          } else {
                            s7 = peg$c0;
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsewindowingClause();
                            if (s8 !== peg$FAILED) {
                              s7 = [s7, s8];
                              s6 = s7;
                            } else {
                              peg$currPos = s6;
                              s6 = peg$c0;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c0;
                          }
                          if (s6 === peg$FAILED) {
                            s6 = peg$c1;
                          }
                          if (s6 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseMAX_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseDISTINCT_SYMBOL();
                      if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseinSumExpr();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s7 = peg$c2();
                            if (s7) {
                              s7 = peg$c3;
                            } else {
                              s7 = peg$c0;
                            }
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parsewindowingClause();
                              if (s8 !== peg$FAILED) {
                                s7 = [s7, s8];
                                s6 = s7;
                              } else {
                                peg$currPos = s6;
                                s6 = peg$c0;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$c0;
                            }
                            if (s6 === peg$FAILED) {
                              s6 = peg$c1;
                            }
                            if (s6 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseSTD_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseOPEN_PAR_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseinSumExpr();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s6 = peg$c2();
                            if (s6) {
                              s6 = peg$c3;
                            } else {
                              s6 = peg$c0;
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parsewindowingClause();
                              if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                              } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$c0;
                            }
                            if (s5 === peg$FAILED) {
                              s5 = peg$c1;
                            }
                            if (s5 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseVARIANCE_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseOPEN_PAR_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseinSumExpr();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseCLOSE_PAR_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s6 = peg$c2();
                              if (s6) {
                                s6 = peg$c3;
                              } else {
                                s6 = peg$c0;
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parsewindowingClause();
                                if (s7 !== peg$FAILED) {
                                  s6 = [s6, s7];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$c0;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                              }
                              if (s5 === peg$FAILED) {
                                s5 = peg$c1;
                              }
                              if (s5 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseSTDDEV_SAMP_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseOPEN_PAR_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseinSumExpr();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseCLOSE_PAR_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s6 = peg$c2();
                                if (s6) {
                                  s6 = peg$c3;
                                } else {
                                  s6 = peg$c0;
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parsewindowingClause();
                                  if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$c0;
                                }
                                if (s5 === peg$FAILED) {
                                  s5 = peg$c1;
                                }
                                if (s5 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4, s5];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseVAR_SAMP_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseOPEN_PAR_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseinSumExpr();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseCLOSE_PAR_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s6 = peg$c2();
                                  if (s6) {
                                    s6 = peg$c3;
                                  } else {
                                    s6 = peg$c0;
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parsewindowingClause();
                                    if (s7 !== peg$FAILED) {
                                      s6 = [s6, s7];
                                      s5 = s6;
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                  }
                                  if (s5 === peg$FAILED) {
                                    s5 = peg$c1;
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSUM_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseOPEN_PAR_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseDISTINCT_SYMBOL();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$c1;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseinSumExpr();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$currPos;
                                      peg$reportedPos = peg$currPos;
                                      s7 = peg$c2();
                                      if (s7) {
                                        s7 = peg$c3;
                                      } else {
                                        s7 = peg$c0;
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parsewindowingClause();
                                        if (s8 !== peg$FAILED) {
                                          s7 = [s7, s8];
                                          s6 = s7;
                                        } else {
                                          peg$currPos = s6;
                                          s6 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s6;
                                        s6 = peg$c0;
                                      }
                                      if (s6 === peg$FAILED) {
                                        s6 = peg$c1;
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseGROUP_CONCAT_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseDISTINCT_SYMBOL();
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$c1;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseexprList();
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parseorderClause();
                                      if (s5 === peg$FAILED) {
                                        s5 = peg$c1;
                                      }
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$currPos;
                                        s7 = peg$parseSEPARATOR_SYMBOL();
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parsetextString();
                                          if (s8 !== peg$FAILED) {
                                            s7 = [s7, s8];
                                            s6 = s7;
                                          } else {
                                            peg$currPos = s6;
                                            s6 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s6;
                                          s6 = peg$c0;
                                        }
                                        if (s6 === peg$FAILED) {
                                          s6 = peg$c1;
                                        }
                                        if (s6 !== peg$FAILED) {
                                          s7 = peg$parseCLOSE_PAR_SYMBOL();
                                          if (s7 !== peg$FAILED) {
                                            s8 = peg$currPos;
                                            peg$reportedPos = peg$currPos;
                                            s9 = peg$c2();
                                            if (s9) {
                                              s9 = peg$c3;
                                            } else {
                                              s9 = peg$c0;
                                            }
                                            if (s9 !== peg$FAILED) {
                                              s10 = peg$parsewindowingClause();
                                              if (s10 !== peg$FAILED) {
                                                s9 = [s9, s10];
                                                s8 = s9;
                                              } else {
                                                peg$currPos = s8;
                                                s8 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s8;
                                              s8 = peg$c0;
                                            }
                                            if (s8 === peg$FAILED) {
                                              s8 = peg$c1;
                                            }
                                            if (s8 !== peg$FAILED) {
                                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegroupingOperation() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseGROUPING_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexprList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewindowFunctionCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseROW_NUMBER_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseRANK_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDENSE_RANK_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseCUME_DIST_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parsePERCENT_RANK_SYMBOL();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparentheses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewindowingClause();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNTILE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesimpleExprWithParentheses();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsewindowingClause();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLEAD_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLAG_SYMBOL();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOPEN_PAR_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseexpr();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseleadLagInfo();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsenullTreatment();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsewindowingClause();
                      if (s7 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFIRST_VALUE_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseLAST_VALUE_SYMBOL();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexprWithParentheses();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenullTreatment();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsewindowingClause();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseNTH_VALUE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPEN_PAR_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpr();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCOMMA_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsesimpleExpr();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$currPos;
                          s8 = peg$parseFROM_SYMBOL();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseFIRST_SYMBOL();
                            if (s9 === peg$FAILED) {
                              s9 = peg$parseLAST_SYMBOL();
                            }
                            if (s9 !== peg$FAILED) {
                              s8 = [s8, s9];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$c0;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$c0;
                          }
                          if (s7 === peg$FAILED) {
                            s7 = peg$c1;
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsenullTreatment();
                            if (s8 === peg$FAILED) {
                              s8 = peg$c1;
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parsewindowingClause();
                              if (s9 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewindowingClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOVER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parsewindowSpec();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseleadLagInfo() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCOMMA_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseulonglong_number();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePARAM_MARKER();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenullTreatment() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseRESPECT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIGNORE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNULLS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejsonFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseJSON_ARRAYAGG_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinSumExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsewindowingClause();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseJSON_OBJECTAGG_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinSumExpr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCOMMA_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseinSumExpr();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsewindowingClause();
                    if (s7 === peg$FAILED) {
                      s7 = peg$c1;
                    }
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseinSumExpr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseALL_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidentListArg() {
      var s0, s1, s2, s3;

      s0 = peg$parseidentList();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPEN_PAR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentList();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCLOSE_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseidentList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesimpleIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesimpleIdentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesimpleIdentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefulltextOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBOOLEAN_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMODE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIN_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNATURAL_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLANGUAGE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseMODE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseWITH_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQUERY_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseEXPANSION_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseWITH_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseQUERY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseEXPANSION_SYMBOL();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseruntimeFunctionCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseCHAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexprList();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseUSING_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecharsetName();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCURRENT_USER_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseparentheses();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDATE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexprWithParentheses();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDAY_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexprWithParentheses();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseHOUR_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseexprWithParentheses();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseINSERT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseOPEN_PAR_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpr();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseCOMMA_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseexpr();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseCOMMA_SYMBOL();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseexpr();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseCOMMA_SYMBOL();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseexpr();
                                if (s9 !== peg$FAILED) {
                                  s10 = peg$parseCLOSE_PAR_SYMBOL();
                                  if (s10 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseINTERVAL_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseexpr();
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$currPos;
                        s6 = peg$parseCOMMA_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseexpr();
                          if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                        if (s5 !== peg$FAILED) {
                          while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$currPos;
                            s6 = peg$parseCOMMA_SYMBOL();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseexpr();
                              if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                              } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$c0;
                            }
                          }
                        } else {
                          s4 = peg$c0;
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseLEFT_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseOPEN_PAR_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseexpr();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCOMMA_SYMBOL();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseexpr();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parseCLOSE_PAR_SYMBOL();
                              if (s6 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseMINUTE_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseexprWithParentheses();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseMONTH_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseexprWithParentheses();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseRIGHT_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseOPEN_PAR_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseexpr();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseCOMMA_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseexpr();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                                    if (s6 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5, s6];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSECOND_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseexprWithParentheses();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseTIME_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseexprWithParentheses();
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseTIMESTAMP_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseexpr();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$currPos;
                                      s5 = peg$parseCOMMA_SYMBOL();
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parseexpr();
                                        if (s6 !== peg$FAILED) {
                                          s5 = [s5, s6];
                                          s4 = s5;
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$c0;
                                      }
                                      if (s4 === peg$FAILED) {
                                        s4 = peg$c1;
                                      }
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                                        if (s5 !== peg$FAILED) {
                                          s1 = [s1, s2, s3, s4, s5];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsetrimFunction();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseUSER_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseparentheses();
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseVALUES_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseexprWithParentheses();
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseYEAR_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseexprWithParentheses();
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseADDDATE_SYMBOL();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parseSUBDATE_SYMBOL();
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseOPEN_PAR_SYMBOL();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseexpr();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseCOMMA_SYMBOL();
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$parseexpr();
                                                  if (s5 === peg$FAILED) {
                                                    s5 = peg$currPos;
                                                    s6 = peg$parseINTERVAL_SYMBOL();
                                                    if (s6 !== peg$FAILED) {
                                                      s7 = peg$parseexpr();
                                                      if (s7 !== peg$FAILED) {
                                                        s8 = peg$parseinterval();
                                                        if (s8 !== peg$FAILED) {
                                                          s6 = [s6, s7, s8];
                                                          s5 = s6;
                                                        } else {
                                                          peg$currPos = s5;
                                                          s5 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s5;
                                                        s5 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s5;
                                                      s5 = peg$c0;
                                                    }
                                                  }
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                    if (s6 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3, s4, s5, s6];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseCURDATE_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseparentheses();
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$c1;
                                              }
                                              if (s2 !== peg$FAILED) {
                                                s1 = [s1, s2];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseCURTIME_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parsetimeFunctionParameters();
                                                if (s2 === peg$FAILED) {
                                                  s2 = peg$c1;
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  s1 = [s1, s2];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseDATE_ADD_SYMBOL();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parseDATE_SUB_SYMBOL();
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseexpr();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parseCOMMA_SYMBOL();
                                                      if (s4 !== peg$FAILED) {
                                                        s5 = peg$parseINTERVAL_SYMBOL();
                                                        if (s5 !== peg$FAILED) {
                                                          s6 = peg$parseexpr();
                                                          if (s6 !== peg$FAILED) {
                                                            s7 = peg$parseinterval();
                                                            if (s7 !== peg$FAILED) {
                                                              s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                              if (s8 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseEXTRACT_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseOPEN_PAR_SYMBOL();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseinterval();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parseFROM_SYMBOL();
                                                        if (s4 !== peg$FAILED) {
                                                          s5 = peg$parseexpr();
                                                          if (s5 !== peg$FAILED) {
                                                            s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                            if (s6 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3, s4, s5, s6];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseGET_FORMAT_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseOPEN_PAR_SYMBOL();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parsedateTimeTtype();
                                                        if (s3 !== peg$FAILED) {
                                                          s4 = peg$parseCOMMA_SYMBOL();
                                                          if (s4 !== peg$FAILED) {
                                                            s5 = peg$parseexpr();
                                                            if (s5 !== peg$FAILED) {
                                                              s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                              if (s6 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3, s4, s5, s6];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseNOW_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsetimeFunctionParameters();
                                                        if (s2 === peg$FAILED) {
                                                          s2 = peg$c1;
                                                        }
                                                        if (s2 !== peg$FAILED) {
                                                          s1 = [s1, s2];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parsePOSITION_SYMBOL();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parseOPEN_PAR_SYMBOL();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parsebitExpr();
                                                            if (s3 !== peg$FAILED) {
                                                              s4 = peg$parseIN_SYMBOL();
                                                              if (s4 !== peg$FAILED) {
                                                                s5 = peg$parseexpr();
                                                                if (s5 !== peg$FAILED) {
                                                                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                  if (s6 !== peg$FAILED) {
                                                                    s1 = [s1, s2, s3, s4, s5, s6];
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsesubstringFunction();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseSYSDATE_SYMBOL();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parsetimeFunctionParameters();
                                                              if (s2 === peg$FAILED) {
                                                                s2 = peg$c1;
                                                              }
                                                              if (s2 !== peg$FAILED) {
                                                                s1 = [s1, s2];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseTIMESTAMP_ADD_SYMBOL();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parseTIMESTAMP_DIFF_SYMBOL();
                                                              }
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parseintervalTimeStamp();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s4 = peg$parseCOMMA_SYMBOL();
                                                                    if (s4 !== peg$FAILED) {
                                                                      s5 = peg$parseexpr();
                                                                      if (s5 !== peg$FAILED) {
                                                                        s6 = peg$parseCOMMA_SYMBOL();
                                                                        if (s6 !== peg$FAILED) {
                                                                          s7 = peg$parseexpr();
                                                                          if (s7 !== peg$FAILED) {
                                                                            s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                            if (s8 !== peg$FAILED) {
                                                                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                              s0 = s1;
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parseUTC_DATE_SYMBOL();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = peg$parseparentheses();
                                                                  if (s2 === peg$FAILED) {
                                                                    s2 = peg$c1;
                                                                  }
                                                                  if (s2 !== peg$FAILED) {
                                                                    s1 = [s1, s2];
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  s1 = peg$parseUTC_TIME_SYMBOL();
                                                                  if (s1 !== peg$FAILED) {
                                                                    s2 = peg$parsetimeFunctionParameters();
                                                                    if (s2 === peg$FAILED) {
                                                                      s2 = peg$c1;
                                                                    }
                                                                    if (s2 !== peg$FAILED) {
                                                                      s1 = [s1, s2];
                                                                      s0 = s1;
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    s1 = peg$parseUTC_TIMESTAMP_SYMBOL();
                                                                    if (s1 !== peg$FAILED) {
                                                                      s2 = peg$parsetimeFunctionParameters();
                                                                      if (s2 === peg$FAILED) {
                                                                        s2 = peg$c1;
                                                                      }
                                                                      if (s2 !== peg$FAILED) {
                                                                        s1 = [s1, s2];
                                                                        s0 = s1;
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$currPos;
                                                                      s1 = peg$parseASCII_SYMBOL();
                                                                      if (s1 !== peg$FAILED) {
                                                                        s2 = peg$parseexprWithParentheses();
                                                                        if (s2 !== peg$FAILED) {
                                                                          s1 = [s1, s2];
                                                                          s0 = s1;
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        s1 = peg$parseCHARSET_SYMBOL();
                                                                        if (s1 !== peg$FAILED) {
                                                                          s2 = peg$parseexprWithParentheses();
                                                                          if (s2 !== peg$FAILED) {
                                                                            s1 = [s1, s2];
                                                                            s0 = s1;
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$currPos;
                                                                          s1 = peg$parseCOALESCE_SYMBOL();
                                                                          if (s1 !== peg$FAILED) {
                                                                            s2 = peg$parseexprListWithParentheses();
                                                                            if (s2 !== peg$FAILED) {
                                                                              s1 = [s1, s2];
                                                                              s0 = s1;
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$currPos;
                                                                            s1 = peg$parseCOLLATION_SYMBOL();
                                                                            if (s1 !== peg$FAILED) {
                                                                              s2 = peg$parseexprWithParentheses();
                                                                              if (s2 !== peg$FAILED) {
                                                                                s1 = [s1, s2];
                                                                                s0 = s1;
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c0;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c0;
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$currPos;
                                                                              s1 = peg$parseDATABASE_SYMBOL();
                                                                              if (s1 !== peg$FAILED) {
                                                                                s2 = peg$parseparentheses();
                                                                                if (s2 !== peg$FAILED) {
                                                                                  s1 = [s1, s2];
                                                                                  s0 = s1;
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$c0;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c0;
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$currPos;
                                                                                s1 = peg$parseIF_SYMBOL();
                                                                                if (s1 !== peg$FAILED) {
                                                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                  if (s2 !== peg$FAILED) {
                                                                                    s3 = peg$parseexpr();
                                                                                    if (s3 !== peg$FAILED) {
                                                                                      s4 = peg$parseCOMMA_SYMBOL();
                                                                                      if (s4 !== peg$FAILED) {
                                                                                        s5 = peg$parseexpr();
                                                                                        if (s5 !== peg$FAILED) {
                                                                                          s6 = peg$parseCOMMA_SYMBOL();
                                                                                          if (s6 !== peg$FAILED) {
                                                                                            s7 = peg$parseexpr();
                                                                                            if (s7 !== peg$FAILED) {
                                                                                              s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                              if (s8 !== peg$FAILED) {
                                                                                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$c0;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$c0;
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$currPos;
                                                                                  s1 = peg$parseFORMAT_SYMBOL();
                                                                                  if (s1 !== peg$FAILED) {
                                                                                    s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                    if (s2 !== peg$FAILED) {
                                                                                      s3 = peg$parseexpr();
                                                                                      if (s3 !== peg$FAILED) {
                                                                                        s4 = peg$parseCOMMA_SYMBOL();
                                                                                        if (s4 !== peg$FAILED) {
                                                                                          s5 = peg$parseexpr();
                                                                                          if (s5 !== peg$FAILED) {
                                                                                            s6 = peg$currPos;
                                                                                            s7 = peg$parseCOMMA_SYMBOL();
                                                                                            if (s7 !== peg$FAILED) {
                                                                                              s8 = peg$parseexpr();
                                                                                              if (s8 !== peg$FAILED) {
                                                                                                s7 = [s7, s8];
                                                                                                s6 = s7;
                                                                                              } else {
                                                                                                peg$currPos = s6;
                                                                                                s6 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s6;
                                                                                              s6 = peg$c0;
                                                                                            }
                                                                                            if (s6 === peg$FAILED) {
                                                                                              s6 = peg$c1;
                                                                                            }
                                                                                            if (s6 !== peg$FAILED) {
                                                                                              s7 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                              if (s7 !== peg$FAILED) {
                                                                                                s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$c0;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$c0;
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$currPos;
                                                                                    s1 = peg$parseMICROSECOND_SYMBOL();
                                                                                    if (s1 !== peg$FAILED) {
                                                                                      s2 = peg$parseexprWithParentheses();
                                                                                      if (s2 !== peg$FAILED) {
                                                                                        s1 = [s1, s2];
                                                                                        s0 = s1;
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c0;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$c0;
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$currPos;
                                                                                      s1 = peg$parseMOD_SYMBOL();
                                                                                      if (s1 !== peg$FAILED) {
                                                                                        s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                        if (s2 !== peg$FAILED) {
                                                                                          s3 = peg$parseexpr();
                                                                                          if (s3 !== peg$FAILED) {
                                                                                            s4 = peg$parseCOMMA_SYMBOL();
                                                                                            if (s4 !== peg$FAILED) {
                                                                                              s5 = peg$parseexpr();
                                                                                              if (s5 !== peg$FAILED) {
                                                                                                s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                if (s6 !== peg$FAILED) {
                                                                                                  s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                  s0 = s1;
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$c0;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c0;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c0;
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$currPos;
                                                                                        peg$reportedPos = peg$currPos;
                                                                                        s1 = peg$c56();
                                                                                        if (s1) {
                                                                                          s1 = peg$c3;
                                                                                        } else {
                                                                                          s1 = peg$c0;
                                                                                        }
                                                                                        if (s1 !== peg$FAILED) {
                                                                                          s2 = peg$parseOLD_PASSWORD_SYMBOL();
                                                                                          if (s2 !== peg$FAILED) {
                                                                                            s3 = peg$parseOPEN_PAR_SYMBOL();
                                                                                            if (s3 !== peg$FAILED) {
                                                                                              s4 = peg$parsetextLiteral();
                                                                                              if (s4 !== peg$FAILED) {
                                                                                                s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                if (s5 !== peg$FAILED) {
                                                                                                  s1 = [s1, s2, s3, s4, s5];
                                                                                                  s0 = s1;
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$c0;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c0;
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$currPos;
                                                                                          peg$reportedPos = peg$currPos;
                                                                                          s1 = peg$c32();
                                                                                          if (s1) {
                                                                                            s1 = peg$c3;
                                                                                          } else {
                                                                                            s1 = peg$c0;
                                                                                          }
                                                                                          if (s1 !== peg$FAILED) {
                                                                                            s2 = peg$parsePASSWORD_SYMBOL();
                                                                                            if (s2 !== peg$FAILED) {
                                                                                              s3 = peg$parseexprWithParentheses();
                                                                                              if (s3 !== peg$FAILED) {
                                                                                                s1 = [s1, s2, s3];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$c0;
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$currPos;
                                                                                            s1 = peg$parseQUARTER_SYMBOL();
                                                                                            if (s1 !== peg$FAILED) {
                                                                                              s2 = peg$parseexprWithParentheses();
                                                                                              if (s2 !== peg$FAILED) {
                                                                                                s1 = [s1, s2];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$c0;
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$currPos;
                                                                                              s1 = peg$parseREPEAT_SYMBOL();
                                                                                              if (s1 !== peg$FAILED) {
                                                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                if (s2 !== peg$FAILED) {
                                                                                                  s3 = peg$parseexpr();
                                                                                                  if (s3 !== peg$FAILED) {
                                                                                                    s4 = peg$parseCOMMA_SYMBOL();
                                                                                                    if (s4 !== peg$FAILED) {
                                                                                                      s5 = peg$parseexpr();
                                                                                                      if (s5 !== peg$FAILED) {
                                                                                                        s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                        if (s6 !== peg$FAILED) {
                                                                                                          s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                          s0 = s1;
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$c0;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$c0;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$c0;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$c0;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$c0;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$c0;
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$currPos;
                                                                                                s1 = peg$parseREPLACE_SYMBOL();
                                                                                                if (s1 !== peg$FAILED) {
                                                                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                  if (s2 !== peg$FAILED) {
                                                                                                    s3 = peg$parseexpr();
                                                                                                    if (s3 !== peg$FAILED) {
                                                                                                      s4 = peg$parseCOMMA_SYMBOL();
                                                                                                      if (s4 !== peg$FAILED) {
                                                                                                        s5 = peg$parseexpr();
                                                                                                        if (s5 !== peg$FAILED) {
                                                                                                          s6 = peg$parseCOMMA_SYMBOL();
                                                                                                          if (s6 !== peg$FAILED) {
                                                                                                            s7 = peg$parseexpr();
                                                                                                            if (s7 !== peg$FAILED) {
                                                                                                              s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                              if (s8 !== peg$FAILED) {
                                                                                                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                                                                s0 = s1;
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$c0;
                                                                                                              }
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$c0;
                                                                                                            }
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$c0;
                                                                                                          }
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$c0;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$c0;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$c0;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$c0;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$c0;
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$currPos;
                                                                                                  s1 = peg$parseREVERSE_SYMBOL();
                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                    s2 = peg$parseexprWithParentheses();
                                                                                                    if (s2 !== peg$FAILED) {
                                                                                                      s1 = [s1, s2];
                                                                                                      s0 = s1;
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$c0;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$c0;
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$currPos;
                                                                                                    s1 = peg$parseROW_COUNT_SYMBOL();
                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                      s2 = peg$parseparentheses();
                                                                                                      if (s2 !== peg$FAILED) {
                                                                                                        s1 = [s1, s2];
                                                                                                        s0 = s1;
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$c0;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$c0;
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$currPos;
                                                                                                      s1 = peg$parseSCHEMA_SYMBOL();
                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                        s2 = peg$parseparentheses();
                                                                                                        if (s2 !== peg$FAILED) {
                                                                                                          s1 = [s1, s2];
                                                                                                          s0 = s1;
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$c0;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$c0;
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$currPos;
                                                                                                        s1 = peg$parseSESSION_USER_SYMBOL();
                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                          s2 = peg$parseparentheses();
                                                                                                          if (s2 !== peg$FAILED) {
                                                                                                            s1 = [s1, s2];
                                                                                                            s0 = s1;
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$c0;
                                                                                                          }
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$c0;
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$currPos;
                                                                                                          s1 = peg$parseSYSTEM_USER_SYMBOL();
                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                            s2 = peg$parseparentheses();
                                                                                                            if (s2 !== peg$FAILED) {
                                                                                                              s1 = [s1, s2];
                                                                                                              s0 = s1;
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$c0;
                                                                                                            }
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$c0;
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$currPos;
                                                                                                            s1 = peg$parseTRUNCATE_SYMBOL();
                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                              s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                              if (s2 !== peg$FAILED) {
                                                                                                                s3 = peg$parseexpr();
                                                                                                                if (s3 !== peg$FAILED) {
                                                                                                                  s4 = peg$parseCOMMA_SYMBOL();
                                                                                                                  if (s4 !== peg$FAILED) {
                                                                                                                    s5 = peg$parseexpr();
                                                                                                                    if (s5 !== peg$FAILED) {
                                                                                                                      s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                      if (s6 !== peg$FAILED) {
                                                                                                                        s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                                        s0 = s1;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$c0;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$c0;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$c0;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$c0;
                                                                                                              }
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$c0;
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$currPos;
                                                                                                              s1 = peg$parseWEEK_SYMBOL();
                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                                if (s2 !== peg$FAILED) {
                                                                                                                  s3 = peg$parseexpr();
                                                                                                                  if (s3 !== peg$FAILED) {
                                                                                                                    s4 = peg$currPos;
                                                                                                                    s5 = peg$parseCOMMA_SYMBOL();
                                                                                                                    if (s5 !== peg$FAILED) {
                                                                                                                      s6 = peg$parseexpr();
                                                                                                                      if (s6 !== peg$FAILED) {
                                                                                                                        s5 = [s5, s6];
                                                                                                                        s4 = s5;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s4;
                                                                                                                        s4 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s4;
                                                                                                                      s4 = peg$c0;
                                                                                                                    }
                                                                                                                    if (s4 === peg$FAILED) {
                                                                                                                      s4 = peg$c1;
                                                                                                                    }
                                                                                                                    if (s4 !== peg$FAILED) {
                                                                                                                      s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                      if (s5 !== peg$FAILED) {
                                                                                                                        s1 = [s1, s2, s3, s4, s5];
                                                                                                                        s0 = s1;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$c0;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$c0;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$c0;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$c0;
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$currPos;
                                                                                                                s1 = peg$parseWEIGHT_STRING_SYMBOL();
                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                                  if (s2 !== peg$FAILED) {
                                                                                                                    s3 = peg$parseexpr();
                                                                                                                    if (s3 !== peg$FAILED) {
                                                                                                                      s4 = peg$currPos;
                                                                                                                      s5 = peg$currPos;
                                                                                                                      s6 = peg$parseAS_SYMBOL();
                                                                                                                      if (s6 !== peg$FAILED) {
                                                                                                                        s7 = peg$parseCHAR_SYMBOL();
                                                                                                                        if (s7 !== peg$FAILED) {
                                                                                                                          s8 = peg$parsewsNumCodepoints();
                                                                                                                          if (s8 !== peg$FAILED) {
                                                                                                                            s6 = [s6, s7, s8];
                                                                                                                            s5 = s6;
                                                                                                                          } else {
                                                                                                                            peg$currPos = s5;
                                                                                                                            s5 = peg$c0;
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          peg$currPos = s5;
                                                                                                                          s5 = peg$c0;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s5;
                                                                                                                        s5 = peg$c0;
                                                                                                                      }
                                                                                                                      if (s5 === peg$FAILED) {
                                                                                                                        s5 = peg$c1;
                                                                                                                      }
                                                                                                                      if (s5 !== peg$FAILED) {
                                                                                                                        s6 = peg$currPos;
                                                                                                                        peg$reportedPos = peg$currPos;
                                                                                                                        s7 = peg$c8();
                                                                                                                        if (s7) {
                                                                                                                          s7 = peg$c3;
                                                                                                                        } else {
                                                                                                                          s7 = peg$c0;
                                                                                                                        }
                                                                                                                        if (s7 !== peg$FAILED) {
                                                                                                                          s8 = peg$parseweightStringLevels();
                                                                                                                          if (s8 !== peg$FAILED) {
                                                                                                                            s7 = [s7, s8];
                                                                                                                            s6 = s7;
                                                                                                                          } else {
                                                                                                                            peg$currPos = s6;
                                                                                                                            s6 = peg$c0;
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          peg$currPos = s6;
                                                                                                                          s6 = peg$c0;
                                                                                                                        }
                                                                                                                        if (s6 === peg$FAILED) {
                                                                                                                          s6 = peg$c1;
                                                                                                                        }
                                                                                                                        if (s6 !== peg$FAILED) {
                                                                                                                          s5 = [s5, s6];
                                                                                                                          s4 = s5;
                                                                                                                        } else {
                                                                                                                          peg$currPos = s4;
                                                                                                                          s4 = peg$c0;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s4;
                                                                                                                        s4 = peg$c0;
                                                                                                                      }
                                                                                                                      if (s4 === peg$FAILED) {
                                                                                                                        s4 = peg$currPos;
                                                                                                                        s5 = peg$parseAS_SYMBOL();
                                                                                                                        if (s5 !== peg$FAILED) {
                                                                                                                          s6 = peg$parseBINARY_SYMBOL();
                                                                                                                          if (s6 !== peg$FAILED) {
                                                                                                                            s7 = peg$parsewsNumCodepoints();
                                                                                                                            if (s7 !== peg$FAILED) {
                                                                                                                              s5 = [s5, s6, s7];
                                                                                                                              s4 = s5;
                                                                                                                            } else {
                                                                                                                              peg$currPos = s4;
                                                                                                                              s4 = peg$c0;
                                                                                                                            }
                                                                                                                          } else {
                                                                                                                            peg$currPos = s4;
                                                                                                                            s4 = peg$c0;
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          peg$currPos = s4;
                                                                                                                          s4 = peg$c0;
                                                                                                                        }
                                                                                                                        if (s4 === peg$FAILED) {
                                                                                                                          s4 = peg$currPos;
                                                                                                                          s5 = peg$parseCOMMA_SYMBOL();
                                                                                                                          if (s5 !== peg$FAILED) {
                                                                                                                            s6 = peg$parseulong_number();
                                                                                                                            if (s6 !== peg$FAILED) {
                                                                                                                              s7 = peg$parseCOMMA_SYMBOL();
                                                                                                                              if (s7 !== peg$FAILED) {
                                                                                                                                s8 = peg$parseulong_number();
                                                                                                                                if (s8 !== peg$FAILED) {
                                                                                                                                  s9 = peg$parseCOMMA_SYMBOL();
                                                                                                                                  if (s9 !== peg$FAILED) {
                                                                                                                                    s10 = peg$parseulong_number();
                                                                                                                                    if (s10 !== peg$FAILED) {
                                                                                                                                      s5 = [s5, s6, s7, s8, s9, s10];
                                                                                                                                      s4 = s5;
                                                                                                                                    } else {
                                                                                                                                      peg$currPos = s4;
                                                                                                                                      s4 = peg$c0;
                                                                                                                                    }
                                                                                                                                  } else {
                                                                                                                                    peg$currPos = s4;
                                                                                                                                    s4 = peg$c0;
                                                                                                                                  }
                                                                                                                                } else {
                                                                                                                                  peg$currPos = s4;
                                                                                                                                  s4 = peg$c0;
                                                                                                                                }
                                                                                                                              } else {
                                                                                                                                peg$currPos = s4;
                                                                                                                                s4 = peg$c0;
                                                                                                                              }
                                                                                                                            } else {
                                                                                                                              peg$currPos = s4;
                                                                                                                              s4 = peg$c0;
                                                                                                                            }
                                                                                                                          } else {
                                                                                                                            peg$currPos = s4;
                                                                                                                            s4 = peg$c0;
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                      if (s4 !== peg$FAILED) {
                                                                                                                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                        if (s5 !== peg$FAILED) {
                                                                                                                          s1 = [s1, s2, s3, s4, s5];
                                                                                                                          s0 = s1;
                                                                                                                        } else {
                                                                                                                          peg$currPos = s0;
                                                                                                                          s0 = peg$c0;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$c0;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$c0;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$c0;
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parsegeometryFunction();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$currPos;
                                                                                                                    s1 = peg$parseFOUND_ROWS_SYMBOL();
                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                      s2 = peg$parseparentheses();
                                                                                                                      if (s2 !== peg$FAILED) {
                                                                                                                        s1 = [s1, s2];
                                                                                                                        s0 = s1;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$c0;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$c0;
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegeometryFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c33();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCONTAINS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCOMMA_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexprList();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLINESTRING_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexprListWithParentheses();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMULTILINESTRING_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexprListWithParentheses();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMULTIPOINT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseexprListWithParentheses();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMULTIPOLYGON_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseexprListWithParentheses();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePOINT_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseexpr();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseCOMMA_SYMBOL();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseexpr();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseCLOSE_PAR_SYMBOL();
                            if (s6 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsePOLYGON_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseexprListWithParentheses();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetimeFunctionParameters() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefractionalPrecision();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefractionalPrecision() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c4();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINT_NUMBER();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseweightStringLevels() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLEVEL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsereal_ulong_number();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMINUS_OPERATOR();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsereal_ulong_number();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseweightStringLevelListItem();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseweightStringLevelListItem();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseweightStringLevelListItem();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseweightStringLevelListItem() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsereal_ulong_number();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseASC_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDESC_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseREVERSE_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseREVERSE_SYMBOL();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedateTimeTtype() {
      var s0;

      s0 = peg$parseDATE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTIME_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDATETIME_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTIMESTAMP_SYMBOL();
          }
        }
      }

      return s0;
    }

    function peg$parsetrimFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseTRIM_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseexpr();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseFROM_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpr();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseLEADING_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpr();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseFROM_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexpr();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseTRAILING_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexpr();
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseFROM_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseexpr();
                    if (s7 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseBOTH_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseexpr();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseFROM_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseexpr();
                      if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesubstringFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSUBSTRING_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSUBSTR_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpr();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseexpr();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseFROM_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseFOR_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseexpr();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefunctionCall() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepureIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseudfExprList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequalifiedIdentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexprList();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseudfExprList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseudfExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseudfExpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseudfExpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseudfExpr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselectAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevariable() {
      var s0;

      s0 = peg$parseuserVariable();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesystemVariable();
      }

      return s0;
    }

    function peg$parseuserVariable() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAT_SIGN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseAT_TEXT_SUFFIX();
      }

      return s0;
    }

    function peg$parsesystemVariable() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseAT_AT_SIGN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevarIdentType();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextOrIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsedotIdentifier();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinternalVariableName() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c24();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedotIdentifier();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c12();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parselValueIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedotIdentifier();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDEFAULT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedotIdentifier();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsewhenExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseWHEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsethenExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTHEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseelseExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseELSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecastType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseBINARY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldLength();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHAR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefieldLength();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecharsetWithOptBinary();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenchar();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefieldLength();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSIGNED_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseINT_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseUNSIGNED_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseINT_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parseDATE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseTIME_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsetypeDatetimePrecision();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseDATETIME_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsetypeDatetimePrecision();
                      if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseDECIMAL_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsefloatOptions();
                        if (s2 === peg$FAILED) {
                          s2 = peg$c1;
                        }
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s1 = peg$c55();
                        if (s1) {
                          s1 = peg$c3;
                        } else {
                          s1 = peg$c0;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseJSON_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$reportedPos = peg$currPos;
                          s1 = peg$c12();
                          if (s1) {
                            s1 = peg$c3;
                          } else {
                            s1 = peg$c0;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parserealType();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseprecision();
                              if (s3 === peg$FAILED) {
                                s3 = peg$c1;
                              }
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            peg$reportedPos = peg$currPos;
                            s1 = peg$c12();
                            if (s1) {
                              s1 = peg$c3;
                            } else {
                              s1 = peg$c0;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseFLOAT_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseprecision();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$c1;
                                }
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseexprList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexprListWithParentheses() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexprList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexprWithParentheses() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleExprWithParentheses() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesimpleExpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseorderList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseorderExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseorderExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseorderExpression();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseorderExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedirection();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegroupList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechannel() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c15();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCHANNEL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSINGLE_QUOTED_TEXT();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecompoundStatement() {
      var s0;

      s0 = peg$parsesimpleStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturnStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseifStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecaseStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parselabeledBlock();
              if (s0 === peg$FAILED) {
                s0 = peg$parsebeginEndBlock();
                if (s0 === peg$FAILED) {
                  s0 = peg$parselabeledControl();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunlabeledControl();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseleaveStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseiterateStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsecursorOpen();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsecursorFetch();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsecursorClose();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsespDeclarations();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereturnStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseRETURN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseifStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIF_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseifBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIF_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseifBody() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsethenStatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseELSEIF_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseifBody();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseELSE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecompoundStatementList();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsethenStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTHEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecompoundStatementList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecompoundStatementList() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsecompoundStatement();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSEMICOLON_SYMBOL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parsecompoundStatement();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSEMICOLON_SYMBOL();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecaseStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsewhenExpression();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsethenStatement();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsewhenExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsethenStatement();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseelseStatement();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCASE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseelseStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseELSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecompoundStatementList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselabeledBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselabel();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebeginEndBlock();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselabelIdentifier();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parselabelIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLON_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebeginEndBlock() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespDeclarations();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecompoundStatementList();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEND_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselabeledControl() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselabel();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseunlabeledControl();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselabelIdentifier();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunlabeledControl() {
      var s0;

      s0 = peg$parseloopBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewhileDoBlock();
        if (s0 === peg$FAILED) {
          s0 = peg$parserepeatUntilBlock();
        }
      }

      return s0;
    }

    function peg$parseloopBlock() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseLOOP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecompoundStatementList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLOOP_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewhileDoBlock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseWHILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDO_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecompoundStatementList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseWHILE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserepeatUntilBlock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseREPEAT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecompoundStatementList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseUNTIL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseREPEAT_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespDeclarations() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsespDeclaration();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSEMICOLON_SYMBOL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parsespDeclaration();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSEMICOLON_SYMBOL();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespDeclaration() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDECLARE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevariableDeclaration();
        if (s2 === peg$FAILED) {
          s2 = peg$parseconditionDeclaration();
          if (s2 === peg$FAILED) {
            s2 = peg$parsehandlerDeclaration();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecursorDeclaration();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevariableDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseidentifierList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedataType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecollate();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseDEFAULT_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpr();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconditionDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCONDITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFOR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsespCondition();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespCondition() {
      var s0;

      s0 = peg$parseulong_number();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesqlstate();
      }

      return s0;
    }

    function peg$parsesqlstate() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSQLSTATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVALUE_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextLiteral();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehandlerDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseCONTINUE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEXIT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseUNDO_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHANDLER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFOR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsehandlerCondition();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsehandlerCondition();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parseCOMMA_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsehandlerCondition();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecompoundStatement();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehandlerCondition() {
      var s0, s1, s2;

      s0 = peg$parsespCondition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifier();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSQLWARNING_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsenotRule();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseFOUND_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseSQLEXCEPTION_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecursorDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCURSOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFOR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseselectStatement();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseiterateStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseITERATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselabelIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseleaveStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLEAVE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselabelIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegetDiagnostics() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseGET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCURRENT_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c11();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSTACKED_SYMBOL();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDIAGNOSTICS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsestatementInformationItem();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsestatementInformationItem();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsestatementInformationItem();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseCONDITION_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesignalAllowedExpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseconditionInformationItem();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$currPos;
                    s10 = peg$parseCOMMA_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseconditionInformationItem();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$currPos;
                      s10 = peg$parseCOMMA_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseconditionInformationItem();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesignalAllowedExpr() {
      var s0;

      s0 = peg$parseliteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsevariable();
        if (s0 === peg$FAILED) {
          s0 = peg$parsequalifiedIdentifier();
        }
      }

      return s0;
    }

    function peg$parsestatementInformationItem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 === peg$FAILED) {
        s1 = peg$parseidentifier();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNUMBER_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseROW_COUNT_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconditionInformationItem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 === peg$FAILED) {
        s1 = peg$parseidentifier();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesignalInformationItemName();
          if (s3 === peg$FAILED) {
            s3 = peg$parseRETURNED_SQLSTATE_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesignalInformationItemName() {
      var s0;

      s0 = peg$parseCLASS_ORIGIN_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCATALOG_NAME_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSCHEMA_NAME_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseTABLE_NAME_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCOLUMN_NAME_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseCURSOR_NAME_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesignalStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSIGNAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesqlstate();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSET_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesignalInformationItem();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsesignalInformationItem();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsesignalInformationItem();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseresignalStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseRESIGNAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesqlstate();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSET_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesignalInformationItem();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsesignalInformationItem();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsesignalInformationItem();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesignalInformationItem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesignalInformationItemName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesignalAllowedExpr();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecursorOpen() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecursorClose() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCLOSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecursorFetch() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseFETCH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseNEXT_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFROM_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINTO_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierList();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseschedule() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseAT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseEVERY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinterval();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseSTARTS_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpr();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseENDS_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexpr();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecolumnDefinition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsecolumnName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldDefinition();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecheckOrReferences();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecheckOrReferences() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c57();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecheckConstraint();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsereferences();
      }

      return s0;
    }

    function peg$parsecheckConstraint() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCHECK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexprWithParentheses();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconstraintEnforcement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseNOT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseENFORCED_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableConstraintDef() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseKEY_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINDEX_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseindexNameAndType();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekeyListVariants();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseindexOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseindexOption();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFULLTEXT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyOrIndex();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsekeyListVariants();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parsefulltextIndexOption();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsefulltextIndexOption();
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSPATIAL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsekeyOrIndex();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifier();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsekeyListVariants();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parsecommonIndexOption();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsecommonIndexOption();
                  }
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseconstraintName();
            if (s1 === peg$FAILED) {
              s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$currPos;
              s4 = peg$parsePRIMARY_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseKEY_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseUNIQUE_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsekeyOrIndex();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseindexNameAndType();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsekeyListVariants();
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseindexOption();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseindexOption();
                    }
                    if (s6 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseFOREIGN_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseKEY_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseidentifier();
                    if (s5 === peg$FAILED) {
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsekeyList();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsereferences();
                        if (s7 !== peg$FAILED) {
                          s3 = [s3, s4, s5, s6, s7];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parsecheckConstraint();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s5 = peg$c12();
                    if (s5) {
                      s5 = peg$c3;
                    } else {
                      s5 = peg$c0;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseconstraintEnforcement();
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseconstraintName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCONSTRAINT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldDefinition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parsedataType();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecolumnAttribute();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecolumnAttribute();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c18();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecollate();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseGENERATED_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseALWAYS_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseAS_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexprWithParentheses();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseVIRTUAL_SYMBOL();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseSTORED_SYMBOL();
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s10 = peg$c8();
                      if (s10) {
                        s10 = peg$c3;
                      } else {
                        s10 = peg$c0;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parsegcolAttribute();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parsegcolAttribute();
                        }
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        peg$reportedPos = peg$currPos;
                        s10 = peg$c2();
                        if (s10) {
                          s10 = peg$c3;
                        } else {
                          s10 = peg$c0;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parsecolumnAttribute();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parsecolumnAttribute();
                          }
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$c0;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnAttribute() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseNOT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenullLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c5();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNOT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSECONDARY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDEFAULT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesignedLiteral();
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseNOW_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetimeFunctionParameters();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c58();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseexprWithParentheses();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseON_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseUPDATE_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseNOW_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetimeFunctionParameters();
                  if (s4 === peg$FAILED) {
                    s4 = peg$c1;
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseAUTO_INCREMENT_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseSERIAL_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseDEFAULT_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseVALUE_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePRIMARY_SYMBOL();
                  if (s1 === peg$FAILED) {
                    s1 = peg$c1;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseKEY_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseUNIQUE_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseKEY_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseCOMMENT_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsetextLiteral();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsecollate();
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseCOLUMN_FORMAT_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsecolumnFormat();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSTORAGE_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsestorageMedia();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              peg$reportedPos = peg$currPos;
                              s1 = peg$c2();
                              if (s1) {
                                s1 = peg$c3;
                              } else {
                                s1 = peg$c0;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseSRID_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsereal_ulonglong_number();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                peg$reportedPos = peg$currPos;
                                s1 = peg$c12();
                                if (s1) {
                                  s1 = peg$c3;
                                } else {
                                  s1 = peg$c0;
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseconstraintName();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$c1;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsecheckConstraint();
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  peg$reportedPos = peg$currPos;
                                  s1 = peg$c12();
                                  if (s1) {
                                    s1 = peg$c3;
                                  } else {
                                    s1 = peg$c0;
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseconstraintEnforcement();
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecolumnFormat() {
      var s0;

      s0 = peg$parseFIXED_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDYNAMIC_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDEFAULT_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parsestorageMedia() {
      var s0;

      s0 = peg$parseDISK_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMEMORY_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDEFAULT_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parsegcolAttribute() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUNIQUE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKEY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCOMMENT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextString();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenotRule();
          if (s1 === peg$FAILED) {
            s1 = peg$c1;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNULL_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePRIMARY_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseKEY_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereferences() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseREFERENCES_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableRef();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifierListWithParentheses();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseMATCH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseFULL_SYMBOL();
              if (s6 === peg$FAILED) {
                s6 = peg$parsePARTIAL_SYMBOL();
                if (s6 === peg$FAILED) {
                  s6 = peg$parseSIMPLE_SYMBOL();
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parseON_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseUPDATE_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsedeleteOption();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseON_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseDELETE_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsedeleteOption();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$currPos;
                s7 = peg$parseON_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDELETE_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsedeleteOption();
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseON_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseUPDATE_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsedeleteOption();
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedeleteOption() {
      var s0, s1, s2;

      s0 = peg$parseRESTRICT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCASCADE_SYMBOL();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSET_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenullLiteral();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNO_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseACTION_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsekeyList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyPart();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsekeyPart();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsekeyPart();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeyPart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldLength();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedirection();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeyListWithExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyPartOrExpression();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsekeyPartOrExpression();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsekeyPartOrExpression();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeyPartOrExpression() {
      var s0, s1, s2;

      s0 = peg$parsekeyPart();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexprWithParentheses();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedirection();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsekeyListVariants() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c58();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyListWithExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c59();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyList();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseindexType() {
      var s0;

      s0 = peg$parseBTREE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRTREE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseHASH_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseindexOption() {
      var s0;

      s0 = peg$parsecommonIndexOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parseindexTypeClause();
      }

      return s0;
    }

    function peg$parsecommonIndexOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseulong_number();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCOMMENT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextLiteral();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c2();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsevisibility();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsevisibility() {
      var s0;

      s0 = peg$parseVISIBLE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINVISIBLE_SYMBOL();
      }

      return s0;
    }

    function peg$parseindexTypeClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUSING_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTYPE_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseindexType();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefulltextIndexOption() {
      var s0, s1, s2, s3;

      s0 = peg$parsecommonIndexOption();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWITH_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePARSER_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsedataTypeDefinition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsedataType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOF();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedataType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseINT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTINYINT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSMALLINT_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMEDIUMINT_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseBIGINT_SYMBOL();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldLength();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefieldOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseREAL_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseDOUBLE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsePRECISION_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprecision();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefieldOptions();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFLOAT_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDECIMAL_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseNUMERIC_SYMBOL();
              if (s1 === peg$FAILED) {
                s1 = peg$parseFIXED_SYMBOL();
              }
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefloatOptions();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsefieldOptions();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseBIT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsefieldLength();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseBOOL_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBOOLEAN_SYMBOL();
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCHAR_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsefieldLength();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsecharsetWithOptBinary();
                    if (s3 === peg$FAILED) {
                      s3 = peg$c1;
                    }
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsenchar();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsefieldLength();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseBINARY_SYMBOL();
                      if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                      }
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseBINARY_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsefieldLength();
                      if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$currPos;
                      s2 = peg$parseCHAR_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseVARYING_SYMBOL();
                        if (s3 !== peg$FAILED) {
                          s2 = [s2, s3];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c0;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                      }
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseVARCHAR_SYMBOL();
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsefieldLength();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsecharsetWithOptBinary();
                          if (s3 === peg$FAILED) {
                            s3 = peg$c1;
                          }
                          if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$currPos;
                        s2 = peg$parseNATIONAL_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseVARCHAR_SYMBOL();
                          if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c0;
                        }
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseNVARCHAR_SYMBOL();
                          if (s1 === peg$FAILED) {
                            s1 = peg$currPos;
                            s2 = peg$parseNCHAR_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseVARCHAR_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s2 = [s2, s3];
                                s1 = s2;
                              } else {
                                peg$currPos = s1;
                                s1 = peg$c0;
                              }
                            } else {
                              peg$currPos = s1;
                              s1 = peg$c0;
                            }
                            if (s1 === peg$FAILED) {
                              s1 = peg$currPos;
                              s2 = peg$parseNATIONAL_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseCHAR_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseVARYING_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s2 = [s2, s3, s4];
                                    s1 = s2;
                                  } else {
                                    peg$currPos = s1;
                                    s1 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$c0;
                                }
                              } else {
                                peg$currPos = s1;
                                s1 = peg$c0;
                              }
                              if (s1 === peg$FAILED) {
                                s1 = peg$currPos;
                                s2 = peg$parseNCHAR_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseVARYING_SYMBOL();
                                  if (s3 !== peg$FAILED) {
                                    s2 = [s2, s3];
                                    s1 = s2;
                                  } else {
                                    peg$currPos = s1;
                                    s1 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$c0;
                                }
                              }
                            }
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsefieldLength();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseBINARY_SYMBOL();
                            if (s3 === peg$FAILED) {
                              s3 = peg$c1;
                            }
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseVARBINARY_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsefieldLength();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseLONG_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseVARBINARY_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseLONG_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parseCHAR_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseVARYING_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseVARCHAR_SYMBOL();
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$c1;
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsecharsetWithOptBinary();
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$c1;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseYEAR_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parsefieldLength();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$c1;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsefieldOptions();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$c1;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseDATE_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseTIME_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsetypeDatetimePrecision();
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$c1;
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseTIMESTAMP_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsetypeDatetimePrecision();
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$c1;
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseDATETIME_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parsetypeDatetimePrecision();
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$c1;
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseTINYBLOB_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseBLOB_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parsefieldLength();
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$c1;
                                              }
                                              if (s2 !== peg$FAILED) {
                                                s1 = [s1, s2];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseMEDIUMBLOB_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseLONGBLOB_SYMBOL();
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseTINYTEXT_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parsecharsetWithOptBinary();
                                                  if (s2 === peg$FAILED) {
                                                    s2 = peg$c1;
                                                  }
                                                  if (s2 !== peg$FAILED) {
                                                    s1 = [s1, s2];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseTEXT_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parsefieldLength();
                                                    if (s2 === peg$FAILED) {
                                                      s2 = peg$c1;
                                                    }
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parsecharsetWithOptBinary();
                                                      if (s3 === peg$FAILED) {
                                                        s3 = peg$c1;
                                                      }
                                                      if (s3 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseMEDIUMTEXT_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parsecharsetWithOptBinary();
                                                      if (s2 === peg$FAILED) {
                                                        s2 = peg$c1;
                                                      }
                                                      if (s2 !== peg$FAILED) {
                                                        s1 = [s1, s2];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseLONGTEXT_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsecharsetWithOptBinary();
                                                        if (s2 === peg$FAILED) {
                                                          s2 = peg$c1;
                                                        }
                                                        if (s2 !== peg$FAILED) {
                                                          s1 = [s1, s2];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseENUM_SYMBOL();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parsestringList();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parsecharsetWithOptBinary();
                                                            if (s3 === peg$FAILED) {
                                                              s3 = peg$c1;
                                                            }
                                                            if (s3 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseSET_SYMBOL();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parsestringList();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parsecharsetWithOptBinary();
                                                              if (s3 === peg$FAILED) {
                                                                s3 = peg$c1;
                                                              }
                                                              if (s3 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseSERIAL_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              peg$reportedPos = peg$currPos;
                                                              s1 = peg$c55();
                                                              if (s1) {
                                                                s1 = peg$c3;
                                                              } else {
                                                                s1 = peg$c0;
                                                              }
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseJSON_SYMBOL();
                                                                if (s2 !== peg$FAILED) {
                                                                  s1 = [s1, s2];
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseGEOMETRY_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsePOINT_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseLINESTRING_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsePOLYGON_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenchar() {
      var s0, s1, s2;

      s0 = peg$parseNCHAR_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNATIONAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCHAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parserealType() {
      var s0, s1, s2;

      s0 = peg$parseREAL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDOUBLE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePRECISION_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsefieldLength() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsereal_ulonglong_number();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDECIMAL_NUMBER();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldOptions() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseSIGNED_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNSIGNED_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseZEROFILL_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseSIGNED_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseUNSIGNED_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseZEROFILL_SYMBOL();
            }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecharsetWithOptBinary() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseascii();
      if (s0 === peg$FAILED) {
        s0 = peg$parseunicode();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBYTE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecharset();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsecharsetName();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseBINARY_SYMBOL();
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseBINARY_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parsecharset();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsecharsetName();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseascii() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseASCII_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBINARY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBINARY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseASCII_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseunicode() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUNICODE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBINARY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBINARY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseUNICODE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsewsNumCodepoints() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsereal_ulong_number();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetypeDatetimePrecision() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINT_NUMBER();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecharsetName() {
      var s0, s1, s2;

      s0 = peg$parsetextOrIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBINARY_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c32();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDEFAULT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsecollationName() {
      var s0, s1, s2;

      s0 = peg$parsetextOrIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c32();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDEFAULT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s1 = peg$c31();
          if (s1) {
            s1 = peg$c3;
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseBINARY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsecreateTableOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecreateTableOption();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecreateTableOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecreateTableOption();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateTableOptionsSpaceSeparated() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsecreateTableOption();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsecreateTableOption();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateTableOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseENGINE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextOrIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c5();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSECONDARY_ENGINE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseequal();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseNULL_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$parsetextOrIdentifier();
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMAX_ROWS_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseulonglong_number();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMIN_ROWS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseulonglong_number();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseAVG_ROW_LENGTH_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseulong_number();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePASSWORD_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSINGLE_QUOTED_TEXT();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseCOMMENT_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseSINGLE_QUOTED_TEXT();
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$reportedPos = peg$currPos;
                    s1 = peg$c55();
                    if (s1) {
                      s1 = peg$c3;
                    } else {
                      s1 = peg$c0;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseCOMPRESSION_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseEQUAL_OPERATOR();
                        if (s3 === peg$FAILED) {
                          s3 = peg$c1;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsetextString();
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$reportedPos = peg$currPos;
                      s1 = peg$c60();
                      if (s1) {
                        s1 = peg$c3;
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseENCRYPTION_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseEQUAL_OPERATOR();
                          if (s3 === peg$FAILED) {
                            s3 = peg$c1;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsetextString();
                            if (s4 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseAUTO_INCREMENT_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseEQUAL_OPERATOR();
                          if (s2 === peg$FAILED) {
                            s2 = peg$c1;
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseulonglong_number();
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsePACK_KEYS_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseEQUAL_OPERATOR();
                            if (s2 === peg$FAILED) {
                              s2 = peg$c1;
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseternaryOption();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseSTATS_PERSISTENT_SYMBOL();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
                              }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseEQUAL_OPERATOR();
                              if (s2 === peg$FAILED) {
                                s2 = peg$c1;
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseternaryOption();
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseCHECKSUM_SYMBOL();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseTABLE_CHECKSUM_SYMBOL();
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseEQUAL_OPERATOR();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$c1;
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseulong_number();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseEQUAL_OPERATOR();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$c1;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseulong_number();
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseROW_FORMAT_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseEQUAL_OPERATOR();
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$c1;
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseformat() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parseDEFAULT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDYNAMIC_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFIXED_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCOMPRESSED_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseREDUNDANT_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCOMPACT_SYMBOL();
              }
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUNION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetableRefList();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsedefaultCharset();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedefaultCollation();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseINSERT_METHOD_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemethod() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseNO_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFIRST_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLAST_SYMBOL();
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDATA_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDIRECTORY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEQUAL_OPERATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetextString();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseINDEX_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDIRECTORY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseEQUAL_OPERATOR();
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetextString();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTABLESPACE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s3 = peg$c18();
              if (s3) {
                s3 = peg$c3;
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseEQUAL_OPERATOR();
                if (s4 === peg$FAILED) {
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseidentifier();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSTORAGE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDISK_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseMEMORY_SYMBOL();
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCONNECTION_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsetextString();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseulong_number();
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseternaryOption() {
      var s0;

      s0 = peg$parseulong_number();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDEFAULT_SYMBOL();
      }

      return s0;
    }

    function peg$parsedefaultCollation() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDEFAULT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLLATE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecollationName();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedefaultEncryption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDEFAULT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseENCRYPTION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSINGLE_QUOTED_TEXT();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedefaultCharset() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDEFAULT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecharset();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecharsetName();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionClause() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsePARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepartitionTypeDef();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsePARTITIONS_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsereal_ulong_number();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesubPartitions();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepartitionDefinitions();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionTypeDef() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseLINEAR_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKEY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepartitionKeyAlgorithm();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierList();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLINEAR_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHASH_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsebitExpr();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRANGE_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLIST_SYMBOL();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsebitExpr();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseCOLUMNS_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseOPEN_PAR_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseidentifierList();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsesubPartitions() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseSUBPARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLINEAR_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseHASH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseOPEN_PAR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebitExpr();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseKEY_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepartitionKeyAlgorithm();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseidentifierListWithParentheses();
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseSUBPARTITIONS_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsereal_ulong_number();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionKeyAlgorithm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c11();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseALGORITHM_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsereal_ulong_number();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionDefinitions() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepartitionDefinition();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepartitionDefinition();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepartitionDefinition();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionDefinition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parsePARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseVALUES_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLESS_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseTHAN_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsepartitionValueItemListParen();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseMAXVALUE_SYMBOL();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseVALUES_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIN_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepartitionValuesIn();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsepartitionOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsepartitionOption();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseOPEN_PAR_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesubpartitionDefinition();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$currPos;
                  s10 = peg$parseCOMMA_SYMBOL();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsesubpartitionDefinition();
                    if (s11 !== peg$FAILED) {
                      s10 = [s10, s11];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$c0;
                  }
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$currPos;
                    s10 = peg$parseCOMMA_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsesubpartitionDefinition();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionValuesIn() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$parsepartitionValueItemListParen();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPEN_PAR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepartitionValueItemListParen();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepartitionValueItemListParen();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parseCOMMA_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepartitionValueItemListParen();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsepartitionOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseTABLESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSTORAGE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseENGINE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEQUAL_OPERATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetextOrIdentifier();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNODEGROUP_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsereal_ulong_number();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMAX_ROWS_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseMIN_ROWS_SYMBOL();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 === peg$FAILED) {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsereal_ulong_number();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDATA_SYMBOL();
              if (s1 === peg$FAILED) {
                s1 = peg$parseINDEX_SYMBOL();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDIRECTORY_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseEQUAL_OPERATOR();
                  if (s3 === peg$FAILED) {
                    s3 = peg$c1;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetextLiteral();
                    if (s4 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCOMMENT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsetextLiteral();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesubpartitionDefinition() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSUBPARTITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextOrIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsepartitionOption();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsepartitionOption();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionValueItemListParen() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepartitionValueItem();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepartitionValueItem();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepartitionValueItem();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepartitionValueItem() {
      var s0;

      s0 = peg$parsebitExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMAXVALUE_SYMBOL();
      }

      return s0;
    }

    function peg$parsedefinerClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDEFINER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseuser();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseifExists() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIF_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEXISTS_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseifNotExists() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIF_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenotRule();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEXISTS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseprocedureParameter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIN_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseOUT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseINOUT_SYMBOL();
        }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefunctionParameter();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefunctionParameter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetypeWithOptCollate();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecollate() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCOLLATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecollationName();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetypeWithOptCollate() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsedataType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecollate();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseschemaIdentifierPair() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOMMA_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewRefList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseviewRef();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseviewRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseviewRef();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseupdateList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseupdateElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseupdateElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseupdateElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseupdateElement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefieldIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 === peg$FAILED) {
            s3 = peg$parseDEFAULT_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecharsetClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsecharset();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecharsetName();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecharset() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCHAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSET_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseCHARSET_SYMBOL();
      }

      return s0;
    }

    function peg$parsefieldsClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCOLUMNS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsefieldTerm();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsefieldTerm();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldTerm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseTERMINATED_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextString();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPTIONALLY_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseENCLOSED_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseBY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetextString();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseESCAPED_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseBY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetextString();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parselinesClause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLINES_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parselineTerm();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parselineTerm();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselineTerm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseTERMINATED_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSTARTING_SYMBOL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextString();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuserList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseuser();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseuser();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseuser();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUserList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecreateUserEntry();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecreateUserEntry();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecreateUserEntry();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterUserList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsealterUserEntry();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterUserEntry();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsealterUserEntry();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreateUserEntry() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseuser();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseIDENTIFIED_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseBY_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s7 = peg$c32();
            if (s7) {
              s7 = peg$c3;
            } else {
              s7 = peg$c0;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsePASSWORD_SYMBOL();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetextString();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseWITH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextOrIdentifier();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseAS_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetextStringHash();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$currPos;
                  peg$reportedPos = peg$currPos;
                  s8 = peg$c15();
                  if (s8) {
                    s8 = peg$c3;
                  } else {
                    s8 = peg$c0;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseBY_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsetextString();
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s5 = peg$c31();
              if (s5) {
                s5 = peg$c3;
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseWITH_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetextOrIdentifier();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseBY_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseRANDOM_SYMBOL();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsePASSWORD_SYMBOL();
                      if (s9 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealterUserEntry() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseuser();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseIDENTIFIED_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = peg$parseWITH_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetextOrIdentifier();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$c1;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseBY_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetextString();
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parseREPLACE_SYMBOL();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsetextString();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$c0;
                }
                if (s8 === peg$FAILED) {
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseretainCurrentPassword();
                  if (s9 === peg$FAILED) {
                    s9 = peg$c1;
                  }
                  if (s9 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8, s9];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseWITH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextOrIdentifier();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseAS_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetextStringHash();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseretainCurrentPassword();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c1;
                    }
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$reportedPos = peg$currPos;
          s3 = peg$c5();
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsediscardOldPassword();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseretainCurrentPassword() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseRETAIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCURRENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePASSWORD_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsediscardOldPassword() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDISCARD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOLD_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePASSWORD_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsereplacePassword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREPLACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextString();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuserIdentifierOrText() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsetextOrIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseAT_SIGN_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextOrIdentifier();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseAT_TEXT_SUFFIX();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuser() {
      var s0, s1, s2;

      s0 = peg$parseuserIdentifierOrText();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCURRENT_USER_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseparentheses();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parselikeClause() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseLIKE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSINGLE_QUOTED_TEXT();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselikeOrWhere() {
      var s0;

      s0 = peg$parselikeClause();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewhereClause();
      }

      return s0;
    }

    function peg$parseonlineOption() {
      var s0;

      s0 = peg$parseONLINE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOFFLINE_SYMBOL();
      }

      return s0;
    }

    function peg$parsenoWriteToBinLog() {
      var s0;

      s0 = peg$parseLOCAL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNO_WRITE_TO_BINLOG_SYMBOL();
      }

      return s0;
    }

    function peg$parseusePartition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c19();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifierListWithParentheses();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefieldIdentifier() {
      var s0, s1, s2;

      s0 = peg$parsedotIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequalifiedIdentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedotIdentifier();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecolumnName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c2();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c8();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefieldIdentifier();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecolumnInternalRefList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifier();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseidentifier();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsertIdentifier() {
      var s0;

      s0 = peg$parsefieldIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetableWild();
      }

      return s0;
    }

    function peg$parsetableWild() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDOT_SYMBOL();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMULT_OPERATOR();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseviewName() {
      var s0;

      s0 = peg$parsequalifiedIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedotIdentifier();
      }

      return s0;
    }

    function peg$parseviewRef() {
      var s0;

      s0 = peg$parsequalifiedIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedotIdentifier();
      }

      return s0;
    }

    function peg$parsetableName() {
      var s0;

      s0 = peg$parsequalifiedIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedotIdentifier();
      }

      return s0;
    }

    function peg$parsefilterTableRef() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedotIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableRefWithWildcard() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDOT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMULT_OPERATOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsedotIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseDOT_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseMULT_OPERATOR();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableRef() {
      var s0;

      s0 = peg$parsequalifiedIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedotIdentifier();
      }

      return s0;
    }

    function peg$parsetableRefList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableRef();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableRef();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetableAliasRefList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetableRefWithWildcard();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableRefWithWildcard();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetableRefWithWildcard();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselabelIdentifier() {
      var s0;

      s0 = peg$parsepureIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parselabelKeyword();
      }

      return s0;
    }

    function peg$parseroleIdentifier() {
      var s0;

      s0 = peg$parsepureIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseroleKeyword();
      }

      return s0;
    }

    function peg$parsepureIdentifier() {
      var s0, s1, s2;

      s0 = peg$parseIDENTIFIER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBACK_TICK_QUOTED_ID();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c61();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDOUBLE_QUOTED_TEXT();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0;

      s0 = peg$parsepureIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeyword();
      }

      return s0;
    }

    function peg$parseidentifierList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidentifierListWithParentheses() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequalifiedIdentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedotIdentifier();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleIdentifier() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsedotIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedotIdentifier();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c8();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedotIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedotIdentifier();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsedotIdentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDOT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseulong_number() {
      var s0;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEX_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLONG_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseULONGLONG_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDECIMAL_NUMBER();
              if (s0 === peg$FAILED) {
                s0 = peg$parseFLOAT_NUMBER();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereal_ulong_number() {
      var s0;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEX_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLONG_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseULONGLONG_NUMBER();
          }
        }
      }

      return s0;
    }

    function peg$parseulonglong_number() {
      var s0;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLONG_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseULONGLONG_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDECIMAL_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFLOAT_NUMBER();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsereal_ulonglong_number() {
      var s0, s1, s2;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c12();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHEX_NUMBER();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseULONGLONG_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLONG_NUMBER();
          }
        }
      }

      return s0;
    }

    function peg$parseliteral() {
      var s0, s1, s2;

      s0 = peg$parsetextLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetemporalLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenullLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseboolLiteral();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseUNDERSCORE_CHARSET();
                if (s1 === peg$FAILED) {
                  s1 = peg$c1;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseHEX_NUMBER();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseBIN_NUMBER();
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesignedLiteral() {
      var s0, s1, s2;

      s0 = peg$parseliteral();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePLUS_OPERATOR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseulong_number();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMINUS_OPERATOR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseulong_number();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsestringList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextString();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetextString();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextString();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextString() {
      var s0;

      s0 = peg$parseSINGLE_QUOTED_TEXT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEX_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBIN_NUMBER();
        }
      }

      return s0;
    }

    function peg$parsetextStringHash() {
      var s0, s1, s2;

      s0 = peg$parseSINGLE_QUOTED_TEXT();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c12();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHEX_NUMBER();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetextLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseUNDERSCORE_CHARSET();
      if (s2 === peg$FAILED) {
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSINGLE_QUOTED_TEXT();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseNCHAR_TEXT();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSINGLE_QUOTED_TEXT();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSINGLE_QUOTED_TEXT();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextStringLiteralList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSINGLE_QUOTED_TEXT();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSINGLE_QUOTED_TEXT();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSINGLE_QUOTED_TEXT();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenumLiteral() {
      var s0;

      s0 = peg$parseINT_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLONG_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseULONGLONG_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDECIMAL_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFLOAT_NUMBER();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseboolLiteral() {
      var s0;

      s0 = peg$parseTRUE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFALSE_SYMBOL();
      }

      return s0;
    }

    function peg$parsenullLiteral() {
      var s0;

      s0 = peg$parseNULL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNULL2_SYMBOL();
      }

      return s0;
    }

    function peg$parsetemporalLiteral() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDATE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSINGLE_QUOTED_TEXT();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTIME_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSINGLE_QUOTED_TEXT();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTIMESTAMP_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSINGLE_QUOTED_TEXT();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsefloatOptions() {
      var s0;

      s0 = peg$parsefieldLength();
      if (s0 === peg$FAILED) {
        s0 = peg$parseprecision();
      }

      return s0;
    }

    function peg$parseprecision() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINT_NUMBER();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOMMA_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINT_NUMBER();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextOrIdentifier() {
      var s0;

      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSINGLE_QUOTED_TEXT();
      }

      return s0;
    }

    function peg$parselValueIdentifier() {
      var s0;

      s0 = peg$parsepureIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parselValueKeyword();
      }

      return s0;
    }

    function peg$parseroleIdentifierOrText() {
      var s0;

      s0 = peg$parseroleIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSINGLE_QUOTED_TEXT();
      }

      return s0;
    }

    function peg$parsesizeNumber() {
      var s0;

      s0 = peg$parsereal_ulonglong_number();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepureIdentifier();
      }

      return s0;
    }

    function peg$parseparentheses() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCLOSE_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseequal() {
      var s0;

      s0 = peg$parseEQUAL_OPERATOR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseASSIGN_OPERATOR();
      }

      return s0;
    }

    function peg$parseoptionType() {
      var s0;

      s0 = peg$parsePERSIST_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePERSIST_ONLY_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGLOBAL_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLOCAL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSESSION_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsevarIdentType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseGLOBAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLOCAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDOT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSESSION_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDOT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsesetVarIdentType() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePERSIST_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePERSIST_ONLY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDOT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseGLOBAL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDOT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseLOCAL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseDOT_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSESSION_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDOT_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenotRule() {
      var s0;

      s0 = peg$parseNOT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNOT2_SYMBOL();
      }

      return s0;
    }

    function peg$parsenot2Rule() {
      var s0;

      s0 = peg$parseLOGICAL_NOT_OPERATOR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNOT2_SYMBOL();
      }

      return s0;
    }

    function peg$parseinterval() {
      var s0;

      s0 = peg$parseintervalTimeStamp();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSECOND_MICROSECOND_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMINUTE_MICROSECOND_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMINUTE_SECOND_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseHOUR_MICROSECOND_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseHOUR_SECOND_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseHOUR_MINUTE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDAY_MICROSECOND_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseDAY_SECOND_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseDAY_MINUTE_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDAY_HOUR_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseYEAR_MONTH_SYMBOL();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseintervalTimeStamp() {
      var s0;

      s0 = peg$parseMICROSECOND_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSECOND_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMINUTE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseHOUR_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDAY_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseWEEK_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseMONTH_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseQUARTER_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseYEAR_SYMBOL();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeyword() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c24();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselabelKeyword();
        if (s2 === peg$FAILED) {
          s2 = peg$parseroleOrIdentifierKeyword();
          if (s2 === peg$FAILED) {
            s2 = peg$parseEXECUTE_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$reportedPos = peg$currPos;
              s3 = peg$c21();
              if (s3) {
                s3 = peg$c3;
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseSHUTDOWN_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c16();
                if (s3) {
                  s3 = peg$c3;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseRESTART_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsUnambiguous();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous1RolesAndLabels();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
            if (s0 === peg$FAILED) {
              s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
              if (s0 === peg$FAILED) {
                s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsAmbiguous1RolesAndLabels() {
      var s0;

      s0 = peg$parseEXECUTE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRESTART_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSHUTDOWN_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsAmbiguous2Labels() {
      var s0;

      s0 = peg$parseASCII_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBEGIN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBYTE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCACHE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCHARSET_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCHECKSUM_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseCLONE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCOMMENT_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCOMMIT_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseCONTAINS_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDEALLOCATE_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseDO_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseEND_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseFLUSH_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseFOLLOWS_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseHANDLER_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseHELP_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseIMPORT_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseINSTALL_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseLANGUAGE_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseNO_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsePRECEDES_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsePREPARE_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseREPAIR_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseRESET_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseROLLBACK_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseSAVEPOINT_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseSIGNED_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseSLAVE_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseSTART_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseSTOP_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseTRUNCATE_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseUNICODE_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseUNINSTALL_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseXA_SYMBOL();
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselabelKeyword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c24();
      if (s1) {
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseroleOrLabelKeyword();
        if (s2 === peg$FAILED) {
          s2 = peg$parseEVENT_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseFILE_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseNONE_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parsePROCESS_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsePROXY_SYMBOL();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseRELOAD_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseREPLICATION_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseRESOURCE_SYMBOL();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseSUPER_SYMBOL();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsUnambiguous();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsAmbiguous3Roles() {
      var s0;

      s0 = peg$parseEVENT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFILE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNONE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePROCESS_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePROXY_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseRELOAD_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseREPLICATION_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseRESOURCE_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSUPER_SYMBOL();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsUnambiguous() {
      var s0, s1, s2;

      s0 = peg$parseACTION_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseACCOUNT_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseACTIVE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseADDDATE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseADMIN_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAFTER_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAGAINST_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseAGGREGATE_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseALGORITHM_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseALWAYS_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseANY_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseAT_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseAUTO_INCREMENT_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseAVG_ROW_LENGTH_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseAVG_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseBACKUP_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseBINLOG_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseBIT_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseBLOCK_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseBOOLEAN_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseBOOL_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseBTREE_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseBUCKETS_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseCASCADED_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseCATALOG_NAME_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseCHAIN_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseCHANGED_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseCHANNEL_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseCIPHER_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseCLASS_ORIGIN_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseCLIENT_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseCLOSE_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseCOALESCE_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseCODE_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseCOLLATION_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseCOLUMNS_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseCOLUMN_FORMAT_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseCOLUMN_NAME_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseCOMMITTED_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseCOMPACT_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseCOMPLETION_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseCOMPONENT_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseCOMPRESSED_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseCOMPRESSION_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseCONCURRENT_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseCONNECTION_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseCONSISTENT_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseCONTEXT_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseCPU_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseCURRENT_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseCURSOR_NAME_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseDATAFILE_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseDATA_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseDATETIME_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseDATE_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseDAY_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseDEFAULT_AUTH_SYMBOL();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parseDEFINER_SYMBOL();
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$parseDEFINITION_SYMBOL();
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parseDESCRIPTION_SYMBOL();
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$parseDIAGNOSTICS_SYMBOL();
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$parseDIRECTORY_SYMBOL();
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$parseDISABLE_SYMBOL();
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$parseDISCARD_SYMBOL();
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$parseDISK_SYMBOL();
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$parseDUMPFILE_SYMBOL();
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$parseDUPLICATE_SYMBOL();
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$parseDYNAMIC_SYMBOL();
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        s0 = peg$parseENABLE_SYMBOL();
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          s0 = peg$parseENCRYPTION_SYMBOL();
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            s0 = peg$parseENDS_SYMBOL();
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              s0 = peg$parseENFORCED_SYMBOL();
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                s0 = peg$parseENGINES_SYMBOL();
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  s0 = peg$parseENGINE_SYMBOL();
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    s0 = peg$parseENUM_SYMBOL();
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      s0 = peg$parseERRORS_SYMBOL();
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        s0 = peg$parseERROR_SYMBOL();
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          s0 = peg$parseESCAPE_SYMBOL();
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            s0 = peg$parseEVENTS_SYMBOL();
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              s0 = peg$parseEVERY_SYMBOL();
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                s0 = peg$parseEXCHANGE_SYMBOL();
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                  s0 = peg$parseEXCLUDE_SYMBOL();
                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                    s0 = peg$parseEXPANSION_SYMBOL();
                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                      s0 = peg$parseEXPIRE_SYMBOL();
                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                        s0 = peg$parseEXPORT_SYMBOL();
                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                          s0 = peg$parseEXTENDED_SYMBOL();
                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                            s0 = peg$parseEXTENT_SIZE_SYMBOL();
                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                              s0 = peg$parseFAST_SYMBOL();
                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                s0 = peg$parseFAULTS_SYMBOL();
                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                  s0 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                    s0 = peg$parseFILTER_SYMBOL();
                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                      s0 = peg$parseFIRST_SYMBOL();
                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                        s0 = peg$parseFIXED_SYMBOL();
                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                          s0 = peg$parseFOLLOWING_SYMBOL();
                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                            s0 = peg$parseFORMAT_SYMBOL();
                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                              s0 = peg$parseFOUND_SYMBOL();
                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                s0 = peg$parseFULL_SYMBOL();
                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                  s0 = peg$parseGENERAL_SYMBOL();
                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                    s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                      s0 = peg$parseGEOMETRY_SYMBOL();
                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                        s0 = peg$parseGET_FORMAT_SYMBOL();
                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                          s0 = peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL();
                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                            s0 = peg$parseGRANTS_SYMBOL();
                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                              s0 = peg$parseGROUP_REPLICATION_SYMBOL();
                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                s0 = peg$parseHASH_SYMBOL();
                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                  s0 = peg$parseHISTOGRAM_SYMBOL();
                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                    s0 = peg$parseHISTORY_SYMBOL();
                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                      s0 = peg$parseHOSTS_SYMBOL();
                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                        s0 = peg$parseHOST_SYMBOL();
                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                          s0 = peg$parseHOUR_SYMBOL();
                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                            s0 = peg$parseIDENTIFIED_SYMBOL();
                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                              s0 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                s0 = peg$parseINACTIVE_SYMBOL();
                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                  s0 = peg$parseINDEXES_SYMBOL();
                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                    s0 = peg$parseINITIAL_SIZE_SYMBOL();
                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                      s0 = peg$parseINSERT_METHOD_SYMBOL();
                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                        s0 = peg$parseINSTANCE_SYMBOL();
                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                          s0 = peg$parseINVISIBLE_SYMBOL();
                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                            s0 = peg$parseINVOKER_SYMBOL();
                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                              s0 = peg$parseIO_SYMBOL();
                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                s0 = peg$parseIPC_SYMBOL();
                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s0 = peg$parseISOLATION_SYMBOL();
                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s0 = peg$parseISSUER_SYMBOL();
                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s0 = peg$parseJSON_SYMBOL();
                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s0 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s0 = peg$parseLAST_SYMBOL();
                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s0 = peg$parseLEAVES_SYMBOL();
                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s0 = peg$parseLESS_SYMBOL();
                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s0 = peg$parseLEVEL_SYMBOL();
                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s0 = peg$parseLINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s0 = peg$parseLIST_SYMBOL();
                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s0 = peg$parseLOCKED_SYMBOL();
                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s0 = peg$parseLOCKS_SYMBOL();
                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s0 = peg$parseLOGFILE_SYMBOL();
                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                            s0 = peg$parseLOGS_SYMBOL();
                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_DELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_HOST_SYMBOL();
                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                          s0 = peg$parseNETWORK_NAMESPACE_SYMBOL();
                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_PORT_SYMBOL();
                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SERVER_ID_SYMBOL();
                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_SSL_CA_SYMBOL();
                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_SSL_CERT_SYMBOL();
                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SSL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_USER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMAX_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMAX_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMEDIUM_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMEMORY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMERGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMICROSECOND_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMIGRATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMINUTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMIN_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMODE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMODIFY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMONTH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMUTEX_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNAMES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNAME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNATIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNDBCLUSTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNESTED_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNEVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNEW_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNODEGROUP_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNOWAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNO_WAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNULLS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNUMBER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNVARCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseOFFSET_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseOJ_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseOLD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseONE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseOPEN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseOPTIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseOPTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseORDINALITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseORGANIZATION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseOTHERS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseOWNER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePACK_KEYS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePAGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePARSER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePARTIAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePARTITIONING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePARTITIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePHASE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePLUGINS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePLUGIN_DIR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePLUGIN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePORT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePRECEDING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePRESERVE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePREV_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePRIVILEGES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePROCESSLIST_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePROFILES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePROFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseQUARTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseQUERY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseQUICK_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseREAD_ONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREBUILD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseRECOVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREDUNDANT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseREFERENCE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseRELAYLOG_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_LOG_FILE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_LOG_POS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_THREAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREMOVE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREORGANIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPEATABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_DO_DB_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSER_RESOURCES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESPECT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESTORE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESUME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETAIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNED_SQLSTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREUSE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREVERSE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROLLUP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROUTINE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
s0 = peg$parseROW_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
s0 = peg$parseROW_FORMAT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRTREE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseSCHEDULE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseSCHEMA_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_ENGINE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseSECONDARY_LOAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_UNLOAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECOND_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseSECURITY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIALIZABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIAL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERVER_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseSHARE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseSIMPLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSKIP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSLOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSNAPSHOT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOUNDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOURCE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BIG_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CALC_FOUND_ROWS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_NO_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_SMALL_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_THREAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSRID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTACKED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTARTS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_PERSISTENT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATUS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORAGE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORED_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTREAM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTRING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBDATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBJECT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITIONS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUSPEND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWITCHES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLESPACE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_CHECKSUM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPORARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPTABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTERMINATED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEXT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTHAN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTHREAD_PRIORITY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_ADD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_DIFF_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
s0 = peg$parseTIME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRANSACTION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRIGGERS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseTYPE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNBOUNDED_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseUNCOMMITTED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDEFINED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDOFILE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNKNOWN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNTIL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUPGRADE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSER_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseUSE_FRM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALIDATION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALUE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALUES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARBINARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseVARIABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARIANCE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARYING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVAR_POP_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseVAR_SAMP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVCPU_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIEW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIRTUAL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVISIBLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWAIT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWARNINGS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEEK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEIGHT_STRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWHEN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWHERE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWHILE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWINDOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWITH_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWITHOUT_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseWORK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWRAPPER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWRITE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXA_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseX509_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXID_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
s0 = peg$parseXML_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXOR_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_MONTH_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseZEROFILL_SYMBOL();
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c13();
        if (s1) {
          s1 = peg$c3;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseARRAY_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseARRAY_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseMEMBER_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseOFF_SYMBOL();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsePASSWORD_LOCK_TIME_SYMBOL();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseRANDOM_SYMBOL();
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseREQUIRE_ROW_FORMAT_SYMBOL();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$parseSTREAM_SYMBOL();
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$parseTIMESTAMP_SYMBOL();
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$parseTIME_SYMBOL();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseroleKeyword() {
      var s0;

      s0 = peg$parseroleOrLabelKeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parseroleOrIdentifierKeyword();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsUnambiguous();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
          }
        }
      }

      return s0;
    }

    function peg$parselValueKeyword() {
      var s0;

      s0 = peg$parseidentifierKeywordsUnambiguous();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsAmbiguous1RolesAndLabels();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
          }
        }
      }

      return s0;
    }

    function peg$parseidentifierKeywordsAmbiguous4SystemVariables() {
      var s0;

      s0 = peg$parseGLOBAL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLOCAL_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePERSIST_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePERSIST_ONLY_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSESSION_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseroleOrIdentifierKeyword() {
      var s0;

      s0 = peg$parseACCOUNT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseASCII_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseALWAYS_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBACKUP_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBEGIN_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBYTE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseCACHE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCHARSET_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCHECKSUM_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseCLONE_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseCLOSE_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseCOMMENT_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseCOMMIT_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseCONTAINS_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseDEALLOCATE_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseDO_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseEND_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseFLUSH_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseFOLLOWS_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseFORMAT_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseGROUP_REPLICATION_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseHANDLER_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseHELP_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseHOST_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseINSTALL_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseINVISIBLE_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseLANGUAGE_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseNO_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseOPEN_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseOPTIONS_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseOWNER_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsePARSER_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsePARTITION_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsePORT_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsePRECEDES_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsePREPARE_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseREMOVE_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseREPAIR_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseRESET_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseRESTORE_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseROLE_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseROLLBACK_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseSAVEPOINT_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseSECONDARY_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseSECONDARY_ENGINE_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseSECONDARY_LOAD_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseSECONDARY_UNLOAD_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseSECURITY_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseSERVER_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseSIGNED_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseSOCKET_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseSLAVE_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseSONAME_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseSTART_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseSTOP_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseTRUNCATE_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseUNICODE_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseUNINSTALL_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseUPGRADE_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseVISIBLE_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseWRAPPER_SYMBOL();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parseXA_SYMBOL();
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseSHUTDOWN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIMPORT_SYMBOL();
        }
      }

      return s0;
    }

    function peg$parseroleOrLabelKeyword() {
      var s0;

      s0 = peg$parseACTION_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseACTIVE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseADDDATE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAFTER_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAGAINST_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAGGREGATE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseALGORITHM_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseANALYSE_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseANY_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseAT_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseAUTHORS_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseAUTO_INCREMENT_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseAVG_ROW_LENGTH_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseAVG_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseBINLOG_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseBIT_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseBLOCK_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseBOOL_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseBOOLEAN_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseBTREE_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseBUCKETS_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseCASCADED_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseCATALOG_NAME_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseCHAIN_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseCHANGED_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseCHANNEL_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseCIPHER_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseCLIENT_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseCLASS_ORIGIN_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseCOALESCE_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseCODE_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseCOLLATION_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseCOLUMN_NAME_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseCOLUMN_FORMAT_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseCOLUMNS_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseCOMMITTED_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseCOMPACT_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseCOMPLETION_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseCOMPONENT_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseCOMPRESSED_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseCOMPRESSION_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseCONCURRENT_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseCONNECTION_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseCONSISTENT_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseCONTEXT_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseCONTRIBUTORS_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseCPU_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseCURRENT_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseCURSOR_NAME_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseDATA_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseDATAFILE_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseDATETIME_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseDATE_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseDAY_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseDEFAULT_AUTH_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseDEFINER_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parseDES_KEY_FILE_SYMBOL();
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$parseDESCRIPTION_SYMBOL();
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$parseDIAGNOSTICS_SYMBOL();
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parseDIRECTORY_SYMBOL();
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$parseDISABLE_SYMBOL();
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$parseDISCARD_SYMBOL();
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$parseDISK_SYMBOL();
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$parseDUMPFILE_SYMBOL();
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$parseDUPLICATE_SYMBOL();
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$parseDYNAMIC_SYMBOL();
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$parseENCRYPTION_SYMBOL();
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$parseENDS_SYMBOL();
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        s0 = peg$parseENUM_SYMBOL();
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          s0 = peg$parseENGINE_SYMBOL();
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            s0 = peg$parseENGINES_SYMBOL();
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              s0 = peg$parseERROR_SYMBOL();
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                s0 = peg$parseERRORS_SYMBOL();
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  s0 = peg$parseESCAPE_SYMBOL();
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    s0 = peg$parseEVENTS_SYMBOL();
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      s0 = peg$parseEVERY_SYMBOL();
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        s0 = peg$parseEXCLUDE_SYMBOL();
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          s0 = peg$parseEXPANSION_SYMBOL();
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            s0 = peg$parseEXPORT_SYMBOL();
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              s0 = peg$parseEXTENDED_SYMBOL();
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                s0 = peg$parseEXTENT_SIZE_SYMBOL();
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                  s0 = peg$parseFAULTS_SYMBOL();
                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                    s0 = peg$parseFAST_SYMBOL();
                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                      s0 = peg$parseFOLLOWING_SYMBOL();
                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                        s0 = peg$parseFOUND_SYMBOL();
                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                          s0 = peg$parseENABLE_SYMBOL();
                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                            s0 = peg$parseFULL_SYMBOL();
                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                              s0 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                s0 = peg$parseFILTER_SYMBOL();
                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                  s0 = peg$parseFIRST_SYMBOL();
                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                    s0 = peg$parseFIXED_SYMBOL();
                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                      s0 = peg$parseGENERAL_SYMBOL();
                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                        s0 = peg$parseGEOMETRY_SYMBOL();
                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                          s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                            s0 = peg$parseGET_FORMAT_SYMBOL();
                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                              s0 = peg$parseGRANTS_SYMBOL();
                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                s0 = peg$parseGLOBAL_SYMBOL();
                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                  s0 = peg$parseHASH_SYMBOL();
                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                    s0 = peg$parseHISTOGRAM_SYMBOL();
                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                      s0 = peg$parseHISTORY_SYMBOL();
                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                        s0 = peg$parseHOSTS_SYMBOL();
                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                          s0 = peg$parseHOUR_SYMBOL();
                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                            s0 = peg$parseIDENTIFIED_SYMBOL();
                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                              s0 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                s0 = peg$parseINVOKER_SYMBOL();
                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                  s0 = peg$parseINDEXES_SYMBOL();
                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                    s0 = peg$parseINITIAL_SIZE_SYMBOL();
                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                      s0 = peg$parseINSTANCE_SYMBOL();
                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                        s0 = peg$parseINACTIVE_SYMBOL();
                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                          s0 = peg$parseIO_SYMBOL();
                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                            s0 = peg$parseIPC_SYMBOL();
                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                              s0 = peg$parseISOLATION_SYMBOL();
                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                s0 = peg$parseISSUER_SYMBOL();
                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                  s0 = peg$parseINSERT_METHOD_SYMBOL();
                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                    s0 = peg$parseJSON_SYMBOL();
                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                      s0 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                        s0 = peg$parseLAST_SYMBOL();
                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                          s0 = peg$parseLEAVES_SYMBOL();
                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                            s0 = peg$parseLESS_SYMBOL();
                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                              s0 = peg$parseLEVEL_SYMBOL();
                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                s0 = peg$parseLINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s0 = peg$parseLIST_SYMBOL();
                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s0 = peg$parseLOCAL_SYMBOL();
                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s0 = peg$parseLOCKED_SYMBOL();
                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s0 = peg$parseLOCKS_SYMBOL();
                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s0 = peg$parseLOGFILE_SYMBOL();
                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s0 = peg$parseLOGS_SYMBOL();
                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s0 = peg$parseMAX_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_SYMBOL();
                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_HOST_SYMBOL();
                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_PORT_SYMBOL();
                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_USER_SYMBOL();
                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_SERVER_ID_SYMBOL();
                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_DELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SSL_SYMBOL();
                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_SSL_CA_SYMBOL();
                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_SSL_CERT_SYMBOL();
                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMAX_STATEMENT_TIME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMAX_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMEDIUM_SYMBOL();
                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMEMORY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMERGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMICROSECOND_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMIGRATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMINUTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMIN_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMODIFY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMODE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMONTH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMUTEX_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNAME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNAMES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNATIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNDBCLUSTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNESTED_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNEVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNEW_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNO_WAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNODEGROUP_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNULLS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNOWAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNUMBER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNVARCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseOFFSET_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseOLD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseOLD_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseONE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseOPTIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseORDINALITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseORGANIZATION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseOTHERS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePACK_KEYS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePAGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePARTIAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePARTITIONING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePARTITIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePHASE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePLUGIN_DIR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePLUGIN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePLUGINS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePRECEDING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePRESERVE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePREV_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseTHREAD_PRIORITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePRIVILEGES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePROCESSLIST_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePROFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePROFILES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseQUARTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseQUERY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseQUICK_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseREAD_ONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseREBUILD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseRECOVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREDOFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREDUNDANT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseRELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseRELAYLOG_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseRELAY_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseRELAY_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseRELAY_THREAD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREMOTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREORGANIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREPEATABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseREPLICATE_DO_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseUSER_RESOURCES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseRESPECT_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseRESUME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETAIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNED_SQLSTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREUSE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREVERSE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROLLUP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROUTINE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROW_COUNT_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseROW_FORMAT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRTREE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSCHEDULE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSCHEMA_NAME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseSECOND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIAL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIALIZABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSESSION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSHARE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSIMPLE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseSKIP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSLOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSNAPSHOT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOUNDS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseSOURCE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_NO_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_THREAD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseSRID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTACKED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTARTS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_PERSISTENT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATUS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORAGE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBDATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
s0 = peg$parseSUBJECT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITIONS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUPER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUSPEND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWITCHES_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseTABLE_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_CHECKSUM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLESPACE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPORARY_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseTEMPTABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEXT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTHAN_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseTIES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRANSACTION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRIGGERS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_ADD_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseTIMESTAMP_DIFF_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseTIME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUDF_RETURNS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
s0 = peg$parseUNBOUNDED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNCOMMITTED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDEFINED_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDOFILE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseUNKNOWN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNTIL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSE_FRM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARIABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVCPU_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIEW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALUE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWARNINGS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWAIT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEEK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWORK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEIGHT_STRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseX509_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXML_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_SYMBOL();
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseSHUTDOWN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCUBE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIMPORT_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFUNCTION_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseROWS_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseROW_SYMBOL();
                }
              }
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseEXCHANGE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseEXPIRE_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseONLY_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSUPER_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseVALIDATION_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseWITHOUT_SYMBOL();
                    }
                  }
                }
              }
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseADMIN_SYMBOL();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c62) {
        s0 = peg$c62;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }

      return s0;
    }

    function peg$parseASSIGN_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c64) {
        s0 = peg$c64;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }

      return s0;
    }

    function peg$parseNULL_SAFE_EQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c66) {
        s0 = peg$c66;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }

      return s0;
    }

    function peg$parseGREATER_OR_EQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c68) {
        s0 = peg$c68;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }

      return s0;
    }

    function peg$parseGREATER_THAN_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c70) {
        s0 = peg$c70;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }

      return s0;
    }

    function peg$parseLESS_OR_EQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c72) {
        s0 = peg$c72;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }

      return s0;
    }

    function peg$parseLESS_THAN_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c74) {
        s0 = peg$c74;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      return s0;
    }

    function peg$parseNOT_EQUAL_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c76) {
        s0 = peg$c76;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }

      return s0;
    }

    function peg$parsePLUS_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c78) {
        s0 = peg$c78;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }

      return s0;
    }

    function peg$parseMINUS_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c80) {
        s0 = peg$c80;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      return s0;
    }

    function peg$parseMULT_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c82) {
        s0 = peg$c82;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }

      return s0;
    }

    function peg$parseDIV_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c84) {
        s0 = peg$c84;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }

      return s0;
    }

    function peg$parseMOD_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c86) {
        s0 = peg$c86;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      return s0;
    }

    function peg$parseLOGICAL_NOT_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c88) {
        s0 = peg$c88;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parseBITWISE_NOT_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c90) {
        s0 = peg$c90;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parseSHIFT_LEFT_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c92) {
        s0 = peg$c92;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }

      return s0;
    }

    function peg$parseSHIFT_RIGHT_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c94) {
        s0 = peg$c94;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      return s0;
    }

    function peg$parseLOGICAL_AND_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c96) {
        s0 = peg$c96;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      return s0;
    }

    function peg$parseBITWISE_AND_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c98) {
        s0 = peg$c98;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }

      return s0;
    }

    function peg$parseBITWISE_XOR_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c100) {
        s0 = peg$c100;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }

      return s0;
    }

    function peg$parseLOGICAL_OR_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c102) {
        s0 = peg$c102;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }

      return s0;
    }

    function peg$parseBITWISE_OR_OPERATOR() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c104) {
        s0 = peg$c104;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }

      return s0;
    }

    function peg$parseDOT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c106) {
        s0 = peg$c106;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }

      return s0;
    }

    function peg$parseCOMMA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c108) {
        s0 = peg$c108;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c109); }
      }

      return s0;
    }

    function peg$parseSEMICOLON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c110) {
        s0 = peg$c110;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }

      return s0;
    }

    function peg$parseCOLON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c112) {
        s0 = peg$c112;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }

      return s0;
    }

    function peg$parseOPEN_PAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c114) {
        s0 = peg$c114;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }

      return s0;
    }

    function peg$parseCLOSE_PAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c116) {
        s0 = peg$c116;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }

      return s0;
    }

    function peg$parseOPEN_CURLY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c118) {
        s0 = peg$c118;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }

      return s0;
    }

    function peg$parseCLOSE_CURLY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c120) {
        s0 = peg$c120;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }

      return s0;
    }

    function peg$parseUNDERLINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c122) {
        s0 = peg$c122;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }

      return s0;
    }

    function peg$parseJSON_SEPARATOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c124) {
        s0 = peg$c124;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }

      return s0;
    }

    function peg$parseJSON_UNQUOTED_SEPARATOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 30) === peg$c126) {
        s0 = peg$c126;
        peg$currPos += 30;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }

      return s0;
    }

    function peg$parseAT_SIGN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c128) {
        s0 = peg$c128;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }

      return s0;
    }

    function peg$parseAT_TEXT_SUFFIX() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c130) {
        s0 = peg$c130;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }

      return s0;
    }

    function peg$parseAT_AT_SIGN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c132) {
        s0 = peg$c132;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }

      return s0;
    }

    function peg$parseNULL2_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c134) {
        s0 = peg$c134;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }

      return s0;
    }

    function peg$parsePARAM_MARKER() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c136) {
        s0 = peg$c136;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }

      return s0;
    }

    function peg$parseINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c138) {
        s0 = peg$c138;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }

      return s0;
    }

    function peg$parseTINYINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c140) {
        s0 = peg$c140;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }

      return s0;
    }

    function peg$parseSMALLINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c142) {
        s0 = peg$c142;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }

      return s0;
    }

    function peg$parseMEDIUMINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c144) {
        s0 = peg$c144;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }

      return s0;
    }

    function peg$parseBIGINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c146) {
        s0 = peg$c146;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }

      return s0;
    }

    function peg$parseREAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c148) {
        s0 = peg$c148;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }

      return s0;
    }

    function peg$parseDOUBLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c150) {
        s0 = peg$c150;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }

      return s0;
    }

    function peg$parseFLOAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c152) {
        s0 = peg$c152;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      return s0;
    }

    function peg$parseDECIMAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c154) {
        s0 = peg$c154;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }

      return s0;
    }

    function peg$parseNUMERIC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c156) {
        s0 = peg$c156;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }

      return s0;
    }

    function peg$parseDATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c158) {
        s0 = peg$c158;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }

      return s0;
    }

    function peg$parseTIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c160) {
        s0 = peg$c160;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }

      return s0;
    }

    function peg$parseTIMESTAMP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c162) {
        s0 = peg$c162;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      return s0;
    }

    function peg$parseDATETIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c164) {
        s0 = peg$c164;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }

      return s0;
    }

    function peg$parseYEAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c166) {
        s0 = peg$c166;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }

      return s0;
    }

    function peg$parseCHAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c168) {
        s0 = peg$c168;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }

      return s0;
    }

    function peg$parseVARCHAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c170) {
        s0 = peg$c170;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }

      return s0;
    }

    function peg$parseBINARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c172) {
        s0 = peg$c172;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }

      return s0;
    }

    function peg$parseVARBINARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c174) {
        s0 = peg$c174;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }

      return s0;
    }

    function peg$parseTINYBLOB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c176) {
        s0 = peg$c176;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }

      return s0;
    }

    function peg$parseBLOB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c178) {
        s0 = peg$c178;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }

      return s0;
    }

    function peg$parseMEDIUMBLOB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c180) {
        s0 = peg$c180;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c181); }
      }

      return s0;
    }

    function peg$parseLONGBLOB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c182) {
        s0 = peg$c182;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }

      return s0;
    }

    function peg$parseTINYTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c184) {
        s0 = peg$c184;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }

      return s0;
    }

    function peg$parseTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c186) {
        s0 = peg$c186;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }

      return s0;
    }

    function peg$parseMEDIUMTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c188) {
        s0 = peg$c188;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }

      return s0;
    }

    function peg$parseLONGTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c190) {
        s0 = peg$c190;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }

      return s0;
    }

    function peg$parseENUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c192) {
        s0 = peg$c192;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }

      return s0;
    }

    function peg$parseSET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c194) {
        s0 = peg$c194;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c195); }
      }

      return s0;
    }

    function peg$parseJSON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c196) {
        s0 = peg$c196;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c197); }
      }

      return s0;
    }

    function peg$parseGEOMETRY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c198) {
        s0 = peg$c198;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c199); }
      }

      return s0;
    }

    function peg$parsePOINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c200) {
        s0 = peg$c200;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c201); }
      }

      return s0;
    }

    function peg$parseLINESTRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c202) {
        s0 = peg$c202;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c203); }
      }

      return s0;
    }

    function peg$parsePOLYGON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c204) {
        s0 = peg$c204;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c205); }
      }

      return s0;
    }

    function peg$parseGEOMETRYCOLLECTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c206) {
        s0 = peg$c206;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }

      return s0;
    }

    function peg$parseMULTIPOINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c208) {
        s0 = peg$c208;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c209); }
      }

      return s0;
    }

    function peg$parseMULTILINESTRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c210) {
        s0 = peg$c210;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }

      return s0;
    }

    function peg$parseMULTIPOLYGON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c212) {
        s0 = peg$c212;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }

      return s0;
    }

    function peg$parseACCESSIBLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c214) {
        s0 = peg$c214;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c215); }
      }

      return s0;
    }

    function peg$parseACCOUNT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c216) {
        s0 = peg$c216;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c217); }
      }

      return s0;
    }

    function peg$parseACTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c218) {
        s0 = peg$c218;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }

      return s0;
    }

    function peg$parseADD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c220) {
        s0 = peg$c220;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }

      return s0;
    }

    function peg$parseAFTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c222) {
        s0 = peg$c222;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c223); }
      }

      return s0;
    }

    function peg$parseAGAINST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c224) {
        s0 = peg$c224;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }

      return s0;
    }

    function peg$parseAGGREGATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c226) {
        s0 = peg$c226;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c227); }
      }

      return s0;
    }

    function peg$parseALGORITHM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c228) {
        s0 = peg$c228;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }

      return s0;
    }

    function peg$parseALL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c230) {
        s0 = peg$c230;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }

      return s0;
    }

    function peg$parseALTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c232) {
        s0 = peg$c232;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }

      return s0;
    }

    function peg$parseALWAYS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c234) {
        s0 = peg$c234;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c235); }
      }

      return s0;
    }

    function peg$parseANALYSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c236) {
        s0 = peg$c236;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }

      return s0;
    }

    function peg$parseANALYZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c238) {
        s0 = peg$c238;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c239); }
      }

      return s0;
    }

    function peg$parseAND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c240) {
        s0 = peg$c240;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c241); }
      }

      return s0;
    }

    function peg$parseANY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c242) {
        s0 = peg$c242;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }

      return s0;
    }

    function peg$parseAS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c244) {
        s0 = peg$c244;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }

      return s0;
    }

    function peg$parseASC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c246) {
        s0 = peg$c246;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }

      return s0;
    }

    function peg$parseASENSITIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c248) {
        s0 = peg$c248;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }

      return s0;
    }

    function peg$parseAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c250) {
        s0 = peg$c250;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c251); }
      }

      return s0;
    }

    function peg$parseAUTOEXTEND_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c252) {
        s0 = peg$c252;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c253); }
      }

      return s0;
    }

    function peg$parseAUTO_INCREMENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c254) {
        s0 = peg$c254;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c255); }
      }

      return s0;
    }

    function peg$parseAVG_ROW_LENGTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c256) {
        s0 = peg$c256;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c257); }
      }

      return s0;
    }

    function peg$parseAVG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c258) {
        s0 = peg$c258;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c259); }
      }

      return s0;
    }

    function peg$parseBACKUP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c260) {
        s0 = peg$c260;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c261); }
      }

      return s0;
    }

    function peg$parseBEFORE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c262) {
        s0 = peg$c262;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c263); }
      }

      return s0;
    }

    function peg$parseBEGIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c264) {
        s0 = peg$c264;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c265); }
      }

      return s0;
    }

    function peg$parseBETWEEN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c266) {
        s0 = peg$c266;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c267); }
      }

      return s0;
    }

    function peg$parseBINLOG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c268) {
        s0 = peg$c268;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c269); }
      }

      return s0;
    }

    function peg$parseBIT_AND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c270) {
        s0 = peg$c270;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c271); }
      }

      return s0;
    }

    function peg$parseBIT_OR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c272) {
        s0 = peg$c272;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }

      return s0;
    }

    function peg$parseBIT_XOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c274) {
        s0 = peg$c274;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c275); }
      }

      return s0;
    }

    function peg$parseBLOCK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c276) {
        s0 = peg$c276;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c277); }
      }

      return s0;
    }

    function peg$parseBOOL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c278) {
        s0 = peg$c278;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c279); }
      }

      return s0;
    }

    function peg$parseBOOLEAN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c280) {
        s0 = peg$c280;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c281); }
      }

      return s0;
    }

    function peg$parseBOTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c282) {
        s0 = peg$c282;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c283); }
      }

      return s0;
    }

    function peg$parseBTREE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c284) {
        s0 = peg$c284;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c285); }
      }

      return s0;
    }

    function peg$parseBY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c286) {
        s0 = peg$c286;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c287); }
      }

      return s0;
    }

    function peg$parseBYTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c288) {
        s0 = peg$c288;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c289); }
      }

      return s0;
    }

    function peg$parseCACHE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c290) {
        s0 = peg$c290;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }

      return s0;
    }

    function peg$parseCALL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c292) {
        s0 = peg$c292;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c293); }
      }

      return s0;
    }

    function peg$parseCASCADE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c294) {
        s0 = peg$c294;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c295); }
      }

      return s0;
    }

    function peg$parseCASCADED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c296) {
        s0 = peg$c296;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c297); }
      }

      return s0;
    }

    function peg$parseCASE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c298) {
        s0 = peg$c298;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c299); }
      }

      return s0;
    }

    function peg$parseCAST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c300) {
        s0 = peg$c300;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c301); }
      }

      return s0;
    }

    function peg$parseCATALOG_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c302) {
        s0 = peg$c302;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c303); }
      }

      return s0;
    }

    function peg$parseCHAIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c304) {
        s0 = peg$c304;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c305); }
      }

      return s0;
    }

    function peg$parseCHANGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c306) {
        s0 = peg$c306;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c307); }
      }

      return s0;
    }

    function peg$parseCHANGED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c308) {
        s0 = peg$c308;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c309); }
      }

      return s0;
    }

    function peg$parseCHANNEL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c310) {
        s0 = peg$c310;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c311); }
      }

      return s0;
    }

    function peg$parseCHARSET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c312) {
        s0 = peg$c312;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c313); }
      }

      return s0;
    }

    function peg$parseCHARACTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c314) {
        s0 = peg$c314;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c315); }
      }

      return s0;
    }

    function peg$parseCHECK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c316) {
        s0 = peg$c316;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c317); }
      }

      return s0;
    }

    function peg$parseCHECKSUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c318) {
        s0 = peg$c318;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c319); }
      }

      return s0;
    }

    function peg$parseCIPHER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c320) {
        s0 = peg$c320;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }

      return s0;
    }

    function peg$parseCLASS_ORIGIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c322) {
        s0 = peg$c322;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }

      return s0;
    }

    function peg$parseCLIENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c324) {
        s0 = peg$c324;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c325); }
      }

      return s0;
    }

    function peg$parseCLOSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c326) {
        s0 = peg$c326;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c327); }
      }

      return s0;
    }

    function peg$parseCOALESCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c328) {
        s0 = peg$c328;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c329); }
      }

      return s0;
    }

    function peg$parseCODE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c330) {
        s0 = peg$c330;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c331); }
      }

      return s0;
    }

    function peg$parseCOLLATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c332) {
        s0 = peg$c332;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c333); }
      }

      return s0;
    }

    function peg$parseCOLLATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c334) {
        s0 = peg$c334;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c335); }
      }

      return s0;
    }

    function peg$parseCOLUMN_FORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c336) {
        s0 = peg$c336;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c337); }
      }

      return s0;
    }

    function peg$parseCOLUMN_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c338) {
        s0 = peg$c338;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c339); }
      }

      return s0;
    }

    function peg$parseCOLUMNS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c340) {
        s0 = peg$c340;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c341); }
      }

      return s0;
    }

    function peg$parseCOLUMN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c342) {
        s0 = peg$c342;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c343); }
      }

      return s0;
    }

    function peg$parseCOMMENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c344) {
        s0 = peg$c344;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c345); }
      }

      return s0;
    }

    function peg$parseCOMMITTED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c346) {
        s0 = peg$c346;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c347); }
      }

      return s0;
    }

    function peg$parseCOMMIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c348) {
        s0 = peg$c348;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c349); }
      }

      return s0;
    }

    function peg$parseCOMPACT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c350) {
        s0 = peg$c350;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c351); }
      }

      return s0;
    }

    function peg$parseCOMPLETION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c352) {
        s0 = peg$c352;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c353); }
      }

      return s0;
    }

    function peg$parseCOMPRESSED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c354) {
        s0 = peg$c354;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c355); }
      }

      return s0;
    }

    function peg$parseCOMPRESSION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c356) {
        s0 = peg$c356;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c357); }
      }

      return s0;
    }

    function peg$parseCONCURRENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c358) {
        s0 = peg$c358;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c359); }
      }

      return s0;
    }

    function peg$parseCONDITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c360) {
        s0 = peg$c360;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c361); }
      }

      return s0;
    }

    function peg$parseCONNECTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c362) {
        s0 = peg$c362;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c363); }
      }

      return s0;
    }

    function peg$parseCONSISTENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c364) {
        s0 = peg$c364;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c365); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c366) {
        s0 = peg$c366;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c367); }
      }

      return s0;
    }

    function peg$parseCONSTRAINTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c368) {
        s0 = peg$c368;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c369); }
      }

      return s0;
    }

    function peg$parseOVER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c370) {
        s0 = peg$c370;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c371); }
      }

      return s0;
    }

    function peg$parseREPLICA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c372) {
        s0 = peg$c372;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c373); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT_CATALOG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c374) {
        s0 = peg$c374;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c375); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c376) {
        s0 = peg$c376;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c377); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT_SCHEMA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c378) {
        s0 = peg$c378;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c379); }
      }

      return s0;
    }

    function peg$parseCONTAINS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c380) {
        s0 = peg$c380;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c381); }
      }

      return s0;
    }

    function peg$parseCONTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c382) {
        s0 = peg$c382;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c383); }
      }

      return s0;
    }

    function peg$parseCONTINUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c384) {
        s0 = peg$c384;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c385); }
      }

      return s0;
    }

    function peg$parseCONTRIBUTORS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c386) {
        s0 = peg$c386;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c387); }
      }

      return s0;
    }

    function peg$parseCONVERT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c388) {
        s0 = peg$c388;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c389); }
      }

      return s0;
    }

    function peg$parseCOUNT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c390) {
        s0 = peg$c390;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c391); }
      }

      return s0;
    }

    function peg$parseCPU_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c392) {
        s0 = peg$c392;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c393); }
      }

      return s0;
    }

    function peg$parseCREATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c394) {
        s0 = peg$c394;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c395); }
      }

      return s0;
    }

    function peg$parseCROSS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c396) {
        s0 = peg$c396;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c397); }
      }

      return s0;
    }

    function peg$parseCUBE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c398) {
        s0 = peg$c398;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c399); }
      }

      return s0;
    }

    function peg$parseCURDATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c400) {
        s0 = peg$c400;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c401); }
      }

      return s0;
    }

    function peg$parseCURRENT_DATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c402) {
        s0 = peg$c402;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c403); }
      }

      return s0;
    }

    function peg$parseCURRENT_TIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c404) {
        s0 = peg$c404;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c405); }
      }

      return s0;
    }

    function peg$parseCURRENT_TIMESTAMP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c406) {
        s0 = peg$c406;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c407); }
      }

      return s0;
    }

    function peg$parseCURRENT_USER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c408) {
        s0 = peg$c408;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c409); }
      }

      return s0;
    }

    function peg$parseCURRENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c410) {
        s0 = peg$c410;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c411); }
      }

      return s0;
    }

    function peg$parseCURSOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c412) {
        s0 = peg$c412;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c413); }
      }

      return s0;
    }

    function peg$parseCURSOR_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c414) {
        s0 = peg$c414;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c415); }
      }

      return s0;
    }

    function peg$parseCURTIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c416) {
        s0 = peg$c416;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c417); }
      }

      return s0;
    }

    function peg$parseDATABASE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c418) {
        s0 = peg$c418;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c419); }
      }

      return s0;
    }

    function peg$parseDATABASES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c420) {
        s0 = peg$c420;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c421); }
      }

      return s0;
    }

    function peg$parseDATAFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c422) {
        s0 = peg$c422;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c423); }
      }

      return s0;
    }

    function peg$parseDATA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c424) {
        s0 = peg$c424;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c425); }
      }

      return s0;
    }

    function peg$parseDATE_ADD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c426) {
        s0 = peg$c426;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c427); }
      }

      return s0;
    }

    function peg$parseDATE_SUB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c428) {
        s0 = peg$c428;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c429); }
      }

      return s0;
    }

    function peg$parseDAY_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c430) {
        s0 = peg$c430;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c431); }
      }

      return s0;
    }

    function peg$parseDAY_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c432) {
        s0 = peg$c432;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c433); }
      }

      return s0;
    }

    function peg$parseDAY_MINUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c434) {
        s0 = peg$c434;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c435); }
      }

      return s0;
    }

    function peg$parseDAY_SECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c436) {
        s0 = peg$c436;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c437); }
      }

      return s0;
    }

    function peg$parseDAY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c438) {
        s0 = peg$c438;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c439); }
      }

      return s0;
    }

    function peg$parseDAYOFMONTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c440) {
        s0 = peg$c440;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c441); }
      }

      return s0;
    }

    function peg$parseDEALLOCATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c442) {
        s0 = peg$c442;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }

      return s0;
    }

    function peg$parseDEC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c444) {
        s0 = peg$c444;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c445); }
      }

      return s0;
    }

    function peg$parseDECLARE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c446) {
        s0 = peg$c446;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c447); }
      }

      return s0;
    }

    function peg$parseDEFAULT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c448) {
        s0 = peg$c448;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c449); }
      }

      return s0;
    }

    function peg$parseDEFAULT_AUTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c450) {
        s0 = peg$c450;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c451); }
      }

      return s0;
    }

    function peg$parseDEFINER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c452) {
        s0 = peg$c452;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c453); }
      }

      return s0;
    }

    function peg$parseDELAYED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c454) {
        s0 = peg$c454;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c455); }
      }

      return s0;
    }

    function peg$parseDELAY_KEY_WRITE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c456) {
        s0 = peg$c456;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c457); }
      }

      return s0;
    }

    function peg$parseDELETE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c458) {
        s0 = peg$c458;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c459); }
      }

      return s0;
    }

    function peg$parseDESC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c460) {
        s0 = peg$c460;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c461); }
      }

      return s0;
    }

    function peg$parseDESCRIBE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c462) {
        s0 = peg$c462;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c463); }
      }

      return s0;
    }

    function peg$parseDES_KEY_FILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c464) {
        s0 = peg$c464;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c465); }
      }

      return s0;
    }

    function peg$parseDETERMINISTIC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c466) {
        s0 = peg$c466;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c467); }
      }

      return s0;
    }

    function peg$parseDIAGNOSTICS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c468) {
        s0 = peg$c468;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c469); }
      }

      return s0;
    }

    function peg$parseDIRECTORY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c470) {
        s0 = peg$c470;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c471); }
      }

      return s0;
    }

    function peg$parseDISABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c472) {
        s0 = peg$c472;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c473); }
      }

      return s0;
    }

    function peg$parseDISCARD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c474) {
        s0 = peg$c474;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c475); }
      }

      return s0;
    }

    function peg$parseDISK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c476) {
        s0 = peg$c476;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c477); }
      }

      return s0;
    }

    function peg$parseDISTINCT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c478) {
        s0 = peg$c478;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c479); }
      }

      return s0;
    }

    function peg$parseDISTINCTROW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c480) {
        s0 = peg$c480;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c481); }
      }

      return s0;
    }

    function peg$parseDIV_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c482) {
        s0 = peg$c482;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c483); }
      }

      return s0;
    }

    function peg$parseDO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c484) {
        s0 = peg$c484;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c485); }
      }

      return s0;
    }

    function peg$parseDROP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c486) {
        s0 = peg$c486;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c487); }
      }

      return s0;
    }

    function peg$parseDUAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c488) {
        s0 = peg$c488;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c489); }
      }

      return s0;
    }

    function peg$parseDUMPFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c490) {
        s0 = peg$c490;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }

      return s0;
    }

    function peg$parseDUPLICATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c492) {
        s0 = peg$c492;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c493); }
      }

      return s0;
    }

    function peg$parseDYNAMIC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c494) {
        s0 = peg$c494;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c495); }
      }

      return s0;
    }

    function peg$parseEACH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c496) {
        s0 = peg$c496;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c497); }
      }

      return s0;
    }

    function peg$parseELSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c498) {
        s0 = peg$c498;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c499); }
      }

      return s0;
    }

    function peg$parseELSEIF_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c500) {
        s0 = peg$c500;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c501); }
      }

      return s0;
    }

    function peg$parseEMPTY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c502) {
        s0 = peg$c502;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c503); }
      }

      return s0;
    }

    function peg$parseENABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c504) {
        s0 = peg$c504;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c505); }
      }

      return s0;
    }

    function peg$parseENCLOSED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c506) {
        s0 = peg$c506;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c507); }
      }

      return s0;
    }

    function peg$parseENCRYPTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c508) {
        s0 = peg$c508;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c509); }
      }

      return s0;
    }

    function peg$parseEND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c510) {
        s0 = peg$c510;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c511); }
      }

      return s0;
    }

    function peg$parseENDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c512) {
        s0 = peg$c512;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c513); }
      }

      return s0;
    }

    function peg$parseENFORCED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c514) {
        s0 = peg$c514;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c515); }
      }

      return s0;
    }

    function peg$parseENGINES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c516) {
        s0 = peg$c516;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c517); }
      }

      return s0;
    }

    function peg$parseENGINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c518) {
        s0 = peg$c518;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c519); }
      }

      return s0;
    }

    function peg$parseERROR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c520) {
        s0 = peg$c520;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c521); }
      }

      return s0;
    }

    function peg$parseERRORS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c522) {
        s0 = peg$c522;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c523); }
      }

      return s0;
    }

    function peg$parseESCAPED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c524) {
        s0 = peg$c524;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c525); }
      }

      return s0;
    }

    function peg$parseESCAPE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c526) {
        s0 = peg$c526;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c527); }
      }

      return s0;
    }

    function peg$parseEVENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c528) {
        s0 = peg$c528;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c529); }
      }

      return s0;
    }

    function peg$parseEVENTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c530) {
        s0 = peg$c530;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c531); }
      }

      return s0;
    }

    function peg$parseEVERY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c532) {
        s0 = peg$c532;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c533); }
      }

      return s0;
    }

    function peg$parseEXCHANGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c534) {
        s0 = peg$c534;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c535); }
      }

      return s0;
    }

    function peg$parseEXCEPT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c536) {
        s0 = peg$c536;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c537); }
      }

      return s0;
    }

    function peg$parseEXECUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c538) {
        s0 = peg$c538;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c539); }
      }

      return s0;
    }

    function peg$parseEXISTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c540) {
        s0 = peg$c540;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c541); }
      }

      return s0;
    }

    function peg$parseEXIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c542) {
        s0 = peg$c542;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c543); }
      }

      return s0;
    }

    function peg$parseEXPANSION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c544) {
        s0 = peg$c544;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c545); }
      }

      return s0;
    }

    function peg$parseEXPIRE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c546) {
        s0 = peg$c546;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c547); }
      }

      return s0;
    }

    function peg$parseEXPLAIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c548) {
        s0 = peg$c548;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c549); }
      }

      return s0;
    }

    function peg$parseEXPORT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c550) {
        s0 = peg$c550;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c551); }
      }

      return s0;
    }

    function peg$parseEXTENDED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c552) {
        s0 = peg$c552;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c553); }
      }

      return s0;
    }

    function peg$parseEXTENT_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c554) {
        s0 = peg$c554;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c555); }
      }

      return s0;
    }

    function peg$parseEXTRACT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c556) {
        s0 = peg$c556;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c557); }
      }

      return s0;
    }

    function peg$parseFALSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c558) {
        s0 = peg$c558;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c559); }
      }

      return s0;
    }

    function peg$parseFAST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c560) {
        s0 = peg$c560;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c561); }
      }

      return s0;
    }

    function peg$parseFAULTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c562) {
        s0 = peg$c562;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c563); }
      }

      return s0;
    }

    function peg$parseFETCH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c564) {
        s0 = peg$c564;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c565); }
      }

      return s0;
    }

    function peg$parseFIELDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c566) {
        s0 = peg$c566;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c567); }
      }

      return s0;
    }

    function peg$parseFILE_BLOCK_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c568) {
        s0 = peg$c568;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c569); }
      }

      return s0;
    }

    function peg$parseFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c570) {
        s0 = peg$c570;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c571); }
      }

      return s0;
    }

    function peg$parseFILTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c572) {
        s0 = peg$c572;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c573); }
      }

      return s0;
    }

    function peg$parseFIRST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c574) {
        s0 = peg$c574;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c575); }
      }

      return s0;
    }

    function peg$parseFIRST_VALUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c576) {
        s0 = peg$c576;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c577); }
      }

      return s0;
    }

    function peg$parseFIXED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c578) {
        s0 = peg$c578;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c579); }
      }

      return s0;
    }

    function peg$parseFLOAT4_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c580) {
        s0 = peg$c580;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c581); }
      }

      return s0;
    }

    function peg$parseFLOAT8_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c582) {
        s0 = peg$c582;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c583); }
      }

      return s0;
    }

    function peg$parseFLUSH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c584) {
        s0 = peg$c584;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c585); }
      }

      return s0;
    }

    function peg$parseFOLLOWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c586) {
        s0 = peg$c586;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c587); }
      }

      return s0;
    }

    function peg$parseFORCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c588) {
        s0 = peg$c588;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c589); }
      }

      return s0;
    }

    function peg$parseFOREIGN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c590) {
        s0 = peg$c590;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c591); }
      }

      return s0;
    }

    function peg$parseFOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c592) {
        s0 = peg$c592;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c593); }
      }

      return s0;
    }

    function peg$parseFORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c594) {
        s0 = peg$c594;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c595); }
      }

      return s0;
    }

    function peg$parseFOUND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c596) {
        s0 = peg$c596;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c597); }
      }

      return s0;
    }

    function peg$parseFROM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c598) {
        s0 = peg$c598;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c599); }
      }

      return s0;
    }

    function peg$parseFULLTEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c600) {
        s0 = peg$c600;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c601); }
      }

      return s0;
    }

    function peg$parseFULL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c602) {
        s0 = peg$c602;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c603); }
      }

      return s0;
    }

    function peg$parseFUNCTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c604) {
        s0 = peg$c604;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c605); }
      }

      return s0;
    }

    function peg$parseGENERATED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c606) {
        s0 = peg$c606;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c607); }
      }

      return s0;
    }

    function peg$parseGENERAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c608) {
        s0 = peg$c608;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c609); }
      }

      return s0;
    }

    function peg$parseGET_FORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c610) {
        s0 = peg$c610;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c611); }
      }

      return s0;
    }

    function peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 28) === peg$c612) {
        s0 = peg$c612;
        peg$currPos += 28;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c613); }
      }

      return s0;
    }

    function peg$parseGLOBAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c614) {
        s0 = peg$c614;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c615); }
      }

      return s0;
    }

    function peg$parseGRANT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c616) {
        s0 = peg$c616;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c617); }
      }

      return s0;
    }

    function peg$parseGRANTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c618) {
        s0 = peg$c618;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c619); }
      }

      return s0;
    }

    function peg$parseGROUP_CONCAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c620) {
        s0 = peg$c620;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c621); }
      }

      return s0;
    }

    function peg$parseGROUP_REPLICATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c622) {
        s0 = peg$c622;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c623); }
      }

      return s0;
    }

    function peg$parseGROUP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c624) {
        s0 = peg$c624;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c625); }
      }

      return s0;
    }

    function peg$parseHANDLER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c626) {
        s0 = peg$c626;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c627); }
      }

      return s0;
    }

    function peg$parseHASH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c628) {
        s0 = peg$c628;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c629); }
      }

      return s0;
    }

    function peg$parseHAVING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c630) {
        s0 = peg$c630;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c631); }
      }

      return s0;
    }

    function peg$parseHELP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c632) {
        s0 = peg$c632;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c633); }
      }

      return s0;
    }

    function peg$parseHIGH_PRIORITY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c634) {
        s0 = peg$c634;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c635); }
      }

      return s0;
    }

    function peg$parseHISTOGRAM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c636) {
        s0 = peg$c636;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c637); }
      }

      return s0;
    }

    function peg$parseHISTORY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c638) {
        s0 = peg$c638;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c639); }
      }

      return s0;
    }

    function peg$parseHOST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c640) {
        s0 = peg$c640;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c641); }
      }

      return s0;
    }

    function peg$parseHOSTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c642) {
        s0 = peg$c642;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c643); }
      }

      return s0;
    }

    function peg$parseHOUR_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c644) {
        s0 = peg$c644;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c645); }
      }

      return s0;
    }

    function peg$parseHOUR_MINUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c646) {
        s0 = peg$c646;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c647); }
      }

      return s0;
    }

    function peg$parseHOUR_SECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c648) {
        s0 = peg$c648;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c649); }
      }

      return s0;
    }

    function peg$parseHOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c650) {
        s0 = peg$c650;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c651); }
      }

      return s0;
    }

    function peg$parseIDENTIFIED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c652) {
        s0 = peg$c652;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c653); }
      }

      return s0;
    }

    function peg$parseIF_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c654) {
        s0 = peg$c654;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c655); }
      }

      return s0;
    }

    function peg$parseIGNORE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c656) {
        s0 = peg$c656;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c657); }
      }

      return s0;
    }

    function peg$parseIGNORE_SERVER_IDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c658) {
        s0 = peg$c658;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c659); }
      }

      return s0;
    }

    function peg$parseIMPORT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c660) {
        s0 = peg$c660;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c661); }
      }

      return s0;
    }

    function peg$parseIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c662) {
        s0 = peg$c662;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c663); }
      }

      return s0;
    }

    function peg$parseINDEXES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c664) {
        s0 = peg$c664;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c665); }
      }

      return s0;
    }

    function peg$parseINDEX_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c666) {
        s0 = peg$c666;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c667); }
      }

      return s0;
    }

    function peg$parseINFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c668) {
        s0 = peg$c668;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c669); }
      }

      return s0;
    }

    function peg$parseINITIAL_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c670) {
        s0 = peg$c670;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c671); }
      }

      return s0;
    }

    function peg$parseINNER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c672) {
        s0 = peg$c672;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c673); }
      }

      return s0;
    }

    function peg$parseINOUT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c674) {
        s0 = peg$c674;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c675); }
      }

      return s0;
    }

    function peg$parseINSENSITIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c676) {
        s0 = peg$c676;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c677); }
      }

      return s0;
    }

    function peg$parseINSERT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c678) {
        s0 = peg$c678;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c679); }
      }

      return s0;
    }

    function peg$parseINSERT_METHOD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c680) {
        s0 = peg$c680;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c681); }
      }

      return s0;
    }

    function peg$parseINSTANCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c682) {
        s0 = peg$c682;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c683); }
      }

      return s0;
    }

    function peg$parseINSTALL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c684) {
        s0 = peg$c684;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c685); }
      }

      return s0;
    }

    function peg$parseINTEGER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c686) {
        s0 = peg$c686;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c687); }
      }

      return s0;
    }

    function peg$parseINTERVAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c688) {
        s0 = peg$c688;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c689); }
      }

      return s0;
    }

    function peg$parseINTO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c690) {
        s0 = peg$c690;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c691); }
      }

      return s0;
    }

    function peg$parseINVISIBLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c692) {
        s0 = peg$c692;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c693); }
      }

      return s0;
    }

    function peg$parseINVOKER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c694) {
        s0 = peg$c694;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c695); }
      }

      return s0;
    }

    function peg$parseIO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c696) {
        s0 = peg$c696;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c697); }
      }

      return s0;
    }

    function peg$parseIPC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c698) {
        s0 = peg$c698;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c699); }
      }

      return s0;
    }

    function peg$parseIS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c700) {
        s0 = peg$c700;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c701); }
      }

      return s0;
    }

    function peg$parseISOLATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c702) {
        s0 = peg$c702;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c703); }
      }

      return s0;
    }

    function peg$parseISSUER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c704) {
        s0 = peg$c704;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c705); }
      }

      return s0;
    }

    function peg$parseITERATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c706) {
        s0 = peg$c706;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c707); }
      }

      return s0;
    }

    function peg$parseJOIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c708) {
        s0 = peg$c708;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c709); }
      }

      return s0;
    }

    function peg$parseJSON_TABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c710) {
        s0 = peg$c710;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c711); }
      }

      return s0;
    }

    function peg$parseJSON_ARRAYAGG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c712) {
        s0 = peg$c712;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c713); }
      }

      return s0;
    }

    function peg$parseJSON_OBJECTAGG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c714) {
        s0 = peg$c714;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c715); }
      }

      return s0;
    }

    function peg$parseKEYS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c716) {
        s0 = peg$c716;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c717); }
      }

      return s0;
    }

    function peg$parseKEY_BLOCK_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c718) {
        s0 = peg$c718;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c719); }
      }

      return s0;
    }

    function peg$parseKEY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c720) {
        s0 = peg$c720;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c721); }
      }

      return s0;
    }

    function peg$parseKILL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c722) {
        s0 = peg$c722;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c723); }
      }

      return s0;
    }

    function peg$parseLANGUAGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c724) {
        s0 = peg$c724;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c725); }
      }

      return s0;
    }

    function peg$parseLAST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c726) {
        s0 = peg$c726;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c727); }
      }

      return s0;
    }

    function peg$parseLAST_VALUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c728) {
        s0 = peg$c728;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c729); }
      }

      return s0;
    }

    function peg$parseLATERAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c730) {
        s0 = peg$c730;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c731); }
      }

      return s0;
    }

    function peg$parseLEAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c732) {
        s0 = peg$c732;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c733); }
      }

      return s0;
    }

    function peg$parseLEADING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c734) {
        s0 = peg$c734;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c735); }
      }

      return s0;
    }

    function peg$parseLEAVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c736) {
        s0 = peg$c736;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c737); }
      }

      return s0;
    }

    function peg$parseLEAVES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c738) {
        s0 = peg$c738;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c739); }
      }

      return s0;
    }

    function peg$parseLEFT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c740) {
        s0 = peg$c740;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c741); }
      }

      return s0;
    }

    function peg$parseLESS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c742) {
        s0 = peg$c742;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c743); }
      }

      return s0;
    }

    function peg$parseLEVEL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c744) {
        s0 = peg$c744;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c745); }
      }

      return s0;
    }

    function peg$parseLIKE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c746) {
        s0 = peg$c746;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c747); }
      }

      return s0;
    }

    function peg$parseLIMIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c748) {
        s0 = peg$c748;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c749); }
      }

      return s0;
    }

    function peg$parseLINEAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c750) {
        s0 = peg$c750;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c751); }
      }

      return s0;
    }

    function peg$parseLINES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c752) {
        s0 = peg$c752;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c753); }
      }

      return s0;
    }

    function peg$parseLIST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c754) {
        s0 = peg$c754;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c755); }
      }

      return s0;
    }

    function peg$parseLOAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c756) {
        s0 = peg$c756;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c757); }
      }

      return s0;
    }

    function peg$parseLOCALTIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c758) {
        s0 = peg$c758;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c759); }
      }

      return s0;
    }

    function peg$parseLOCALTIMESTAMP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c760) {
        s0 = peg$c760;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c761); }
      }

      return s0;
    }

    function peg$parseLOCAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c762) {
        s0 = peg$c762;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c763); }
      }

      return s0;
    }

    function peg$parseLOCATOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c764) {
        s0 = peg$c764;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c765); }
      }

      return s0;
    }

    function peg$parseLOCK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c766) {
        s0 = peg$c766;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c767); }
      }

      return s0;
    }

    function peg$parseLOCKS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c768) {
        s0 = peg$c768;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c769); }
      }

      return s0;
    }

    function peg$parseLOGFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c770) {
        s0 = peg$c770;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c771); }
      }

      return s0;
    }

    function peg$parseLOGS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c772) {
        s0 = peg$c772;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c773); }
      }

      return s0;
    }

    function peg$parseLOOP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c774) {
        s0 = peg$c774;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c775); }
      }

      return s0;
    }

    function peg$parseLOW_PRIORITY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c776) {
        s0 = peg$c776;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c777); }
      }

      return s0;
    }

    function peg$parseMASTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c778) {
        s0 = peg$c778;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c779); }
      }

      return s0;
    }

    function peg$parseMASTER_AUTO_POSITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 27) === peg$c780) {
        s0 = peg$c780;
        peg$currPos += 27;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c781); }
      }

      return s0;
    }

    function peg$parseMASTER_BIND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c782) {
        s0 = peg$c782;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c783); }
      }

      return s0;
    }

    function peg$parseMASTER_CONNECT_RETRY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 27) === peg$c784) {
        s0 = peg$c784;
        peg$currPos += 27;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c785); }
      }

      return s0;
    }

    function peg$parseMASTER_DELAY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c786) {
        s0 = peg$c786;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c787); }
      }

      return s0;
    }

    function peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 30) === peg$c788) {
        s0 = peg$c788;
        peg$currPos += 30;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c789); }
      }

      return s0;
    }

    function peg$parseMASTER_HOST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c790) {
        s0 = peg$c790;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c791); }
      }

      return s0;
    }

    function peg$parseNETWORK_NAMESPACE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c792) {
        s0 = peg$c792;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c793); }
      }

      return s0;
    }

    function peg$parseMASTER_LOG_FILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c794) {
        s0 = peg$c794;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c795); }
      }

      return s0;
    }

    function peg$parseMASTER_LOG_POS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c796) {
        s0 = peg$c796;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c797); }
      }

      return s0;
    }

    function peg$parseMASTER_PASSWORD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c798) {
        s0 = peg$c798;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c799); }
      }

      return s0;
    }

    function peg$parseMASTER_PORT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c800) {
        s0 = peg$c800;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c801); }
      }

      return s0;
    }

    function peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 29) === peg$c802) {
        s0 = peg$c802;
        peg$currPos += 29;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c803); }
      }

      return s0;
    }

    function peg$parseMASTER_RETRY_COUNT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c804) {
        s0 = peg$c804;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c805); }
      }

      return s0;
    }

    function peg$parseMASTER_SERVER_ID_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c806) {
        s0 = peg$c806;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c807); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CAPATH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c808) {
        s0 = peg$c808;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c809); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c810) {
        s0 = peg$c810;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c811); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CERT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c812) {
        s0 = peg$c812;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c813); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CIPHER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c814) {
        s0 = peg$c814;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c815); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CRL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c816) {
        s0 = peg$c816;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c817); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_CRLPATH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c818) {
        s0 = peg$c818;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c819); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_KEY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c820) {
        s0 = peg$c820;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c821); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c822) {
        s0 = peg$c822;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c823); }
      }

      return s0;
    }

    function peg$parseMASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 36) === peg$c824) {
        s0 = peg$c824;
        peg$currPos += 36;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c825); }
      }

      return s0;
    }

    function peg$parseMASTER_TLS_VERSION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c826) {
        s0 = peg$c826;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c827); }
      }

      return s0;
    }

    function peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 30) === peg$c828) {
        s0 = peg$c828;
        peg$currPos += 30;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c829); }
      }

      return s0;
    }

    function peg$parseMASTER_USER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c830) {
        s0 = peg$c830;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c831); }
      }

      return s0;
    }

    function peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 36) === peg$c832) {
        s0 = peg$c832;
        peg$currPos += 36;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c833); }
      }

      return s0;
    }

    function peg$parseMATCH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c834) {
        s0 = peg$c834;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c835); }
      }

      return s0;
    }

    function peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 31) === peg$c836) {
        s0 = peg$c836;
        peg$currPos += 31;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c837); }
      }

      return s0;
    }

    function peg$parseMAX_QUERIES_PER_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 27) === peg$c838) {
        s0 = peg$c838;
        peg$currPos += 27;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c839); }
      }

      return s0;
    }

    function peg$parseMAX_ROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c840) {
        s0 = peg$c840;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c841); }
      }

      return s0;
    }

    function peg$parseMAX_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c842) {
        s0 = peg$c842;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c843); }
      }

      return s0;
    }

    function peg$parseMAX_STATEMENT_TIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c844) {
        s0 = peg$c844;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c845); }
      }

      return s0;
    }

    function peg$parseMAX_UPDATES_PER_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 27) === peg$c846) {
        s0 = peg$c846;
        peg$currPos += 27;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c847); }
      }

      return s0;
    }

    function peg$parseMAX_USER_CONNECTIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 27) === peg$c848) {
        s0 = peg$c848;
        peg$currPos += 27;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c849); }
      }

      return s0;
    }

    function peg$parseMAXVALUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c850) {
        s0 = peg$c850;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c851); }
      }

      return s0;
    }

    function peg$parseMAX_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c852) {
        s0 = peg$c852;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c853); }
      }

      return s0;
    }

    function peg$parseMEDIUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c854) {
        s0 = peg$c854;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c855); }
      }

      return s0;
    }

    function peg$parseMEMBER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c856) {
        s0 = peg$c856;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c857); }
      }

      return s0;
    }

    function peg$parseMEMORY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c858) {
        s0 = peg$c858;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c859); }
      }

      return s0;
    }

    function peg$parseMERGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c860) {
        s0 = peg$c860;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c861); }
      }

      return s0;
    }

    function peg$parseMESSAGE_TEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c862) {
        s0 = peg$c862;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c863); }
      }

      return s0;
    }

    function peg$parseMICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c864) {
        s0 = peg$c864;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c865); }
      }

      return s0;
    }

    function peg$parseMIDDLEINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c866) {
        s0 = peg$c866;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c867); }
      }

      return s0;
    }

    function peg$parseMIGRATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c868) {
        s0 = peg$c868;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c869); }
      }

      return s0;
    }

    function peg$parseMINUTE_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c870) {
        s0 = peg$c870;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c871); }
      }

      return s0;
    }

    function peg$parseMINUTE_SECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c872) {
        s0 = peg$c872;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c873); }
      }

      return s0;
    }

    function peg$parseMINUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c874) {
        s0 = peg$c874;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c875); }
      }

      return s0;
    }

    function peg$parseMIN_ROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c876) {
        s0 = peg$c876;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c877); }
      }

      return s0;
    }

    function peg$parseMIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c878) {
        s0 = peg$c878;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c879); }
      }

      return s0;
    }

    function peg$parseMODE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c880) {
        s0 = peg$c880;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c881); }
      }

      return s0;
    }

    function peg$parseMODIFIES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c882) {
        s0 = peg$c882;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c883); }
      }

      return s0;
    }

    function peg$parseMODIFY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c884) {
        s0 = peg$c884;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c885); }
      }

      return s0;
    }

    function peg$parseMOD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c886) {
        s0 = peg$c886;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c887); }
      }

      return s0;
    }

    function peg$parseMONTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c888) {
        s0 = peg$c888;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c889); }
      }

      return s0;
    }

    function peg$parseMUTEX_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c890) {
        s0 = peg$c890;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c891); }
      }

      return s0;
    }

    function peg$parseMYSQL_ERRNO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c892) {
        s0 = peg$c892;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c893); }
      }

      return s0;
    }

    function peg$parseNAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c894) {
        s0 = peg$c894;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c895); }
      }

      return s0;
    }

    function peg$parseNAMES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c896) {
        s0 = peg$c896;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c897); }
      }

      return s0;
    }

    function peg$parseNATIONAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c898) {
        s0 = peg$c898;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c899); }
      }

      return s0;
    }

    function peg$parseNATURAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c900) {
        s0 = peg$c900;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c901); }
      }

      return s0;
    }

    function peg$parseNCHAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c902) {
        s0 = peg$c902;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c903); }
      }

      return s0;
    }

    function peg$parseNDBCLUSTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c904) {
        s0 = peg$c904;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c905); }
      }

      return s0;
    }

    function peg$parseNDB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c906) {
        s0 = peg$c906;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c907); }
      }

      return s0;
    }

    function peg$parseNEG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c908) {
        s0 = peg$c908;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c909); }
      }

      return s0;
    }

    function peg$parseNESTED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c910) {
        s0 = peg$c910;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c911); }
      }

      return s0;
    }

    function peg$parseNEVER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c912) {
        s0 = peg$c912;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c913); }
      }

      return s0;
    }

    function peg$parseNEW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c914) {
        s0 = peg$c914;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c915); }
      }

      return s0;
    }

    function peg$parseNEXT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c916) {
        s0 = peg$c916;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c917); }
      }

      return s0;
    }

    function peg$parseNODEGROUP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c918) {
        s0 = peg$c918;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c919); }
      }

      return s0;
    }

    function peg$parseNONE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c920) {
        s0 = peg$c920;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c921); }
      }

      return s0;
    }

    function peg$parseNONBLOCKING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c922) {
        s0 = peg$c922;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c923); }
      }

      return s0;
    }

    function peg$parseNOT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c924) {
        s0 = peg$c924;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c925); }
      }

      return s0;
    }

    function peg$parseNOWAIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c926) {
        s0 = peg$c926;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c927); }
      }

      return s0;
    }

    function peg$parseNO_WAIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c928) {
        s0 = peg$c928;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c929); }
      }

      return s0;
    }

    function peg$parseNO_WRITE_TO_BINLOG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c930) {
        s0 = peg$c930;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c931); }
      }

      return s0;
    }

    function peg$parseNULL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c932) {
        s0 = peg$c932;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c933); }
      }

      return s0;
    }

    function peg$parseNULLS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c934) {
        s0 = peg$c934;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c935); }
      }

      return s0;
    }

    function peg$parseNUMBER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c936) {
        s0 = peg$c936;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c937); }
      }

      return s0;
    }

    function peg$parseNVARCHAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c938) {
        s0 = peg$c938;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c939); }
      }

      return s0;
    }

    function peg$parseNTH_VALUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c940) {
        s0 = peg$c940;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c941); }
      }

      return s0;
    }

    function peg$parseNTILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c942) {
        s0 = peg$c942;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c943); }
      }

      return s0;
    }

    function peg$parseOF_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c944) {
        s0 = peg$c944;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c945); }
      }

      return s0;
    }

    function peg$parseOFF_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c946) {
        s0 = peg$c946;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c947); }
      }

      return s0;
    }

    function peg$parseOFFLINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c948) {
        s0 = peg$c948;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c949); }
      }

      return s0;
    }

    function peg$parseOFFSET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c950) {
        s0 = peg$c950;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c951); }
      }

      return s0;
    }

    function peg$parseOJ_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c952) {
        s0 = peg$c952;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c953); }
      }

      return s0;
    }

    function peg$parseOLD_PASSWORD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c954) {
        s0 = peg$c954;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c955); }
      }

      return s0;
    }

    function peg$parseOLD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c956) {
        s0 = peg$c956;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c957); }
      }

      return s0;
    }

    function peg$parseON_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c958) {
        s0 = peg$c958;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c959); }
      }

      return s0;
    }

    function peg$parseONLINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c960) {
        s0 = peg$c960;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c961); }
      }

      return s0;
    }

    function peg$parseONE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c962) {
        s0 = peg$c962;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c963); }
      }

      return s0;
    }

    function peg$parseONLY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c964) {
        s0 = peg$c964;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c965); }
      }

      return s0;
    }

    function peg$parseOPEN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c966) {
        s0 = peg$c966;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c967); }
      }

      return s0;
    }

    function peg$parseOPTIONAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c968) {
        s0 = peg$c968;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c969); }
      }

      return s0;
    }

    function peg$parseOPTIONALLY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c970) {
        s0 = peg$c970;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c971); }
      }

      return s0;
    }

    function peg$parseOPTIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c972) {
        s0 = peg$c972;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c973); }
      }

      return s0;
    }

    function peg$parseOPTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c974) {
        s0 = peg$c974;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c975); }
      }

      return s0;
    }

    function peg$parseOPTIMIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c976) {
        s0 = peg$c976;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c977); }
      }

      return s0;
    }

    function peg$parseOPTIMIZER_COSTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c978) {
        s0 = peg$c978;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c979); }
      }

      return s0;
    }

    function peg$parseORDER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c980) {
        s0 = peg$c980;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c981); }
      }

      return s0;
    }

    function peg$parseORDINALITY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c982) {
        s0 = peg$c982;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c983); }
      }

      return s0;
    }

    function peg$parseORGANIZATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c984) {
        s0 = peg$c984;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c985); }
      }

      return s0;
    }

    function peg$parseOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c986) {
        s0 = peg$c986;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c987); }
      }

      return s0;
    }

    function peg$parseOTHERS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c988) {
        s0 = peg$c988;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c989); }
      }

      return s0;
    }

    function peg$parseOUTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c990) {
        s0 = peg$c990;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c991); }
      }

      return s0;
    }

    function peg$parseOUTFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c992) {
        s0 = peg$c992;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c993); }
      }

      return s0;
    }

    function peg$parseOUT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c994) {
        s0 = peg$c994;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c995); }
      }

      return s0;
    }

    function peg$parseOWNER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c996) {
        s0 = peg$c996;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c997); }
      }

      return s0;
    }

    function peg$parsePACK_KEYS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c998) {
        s0 = peg$c998;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c999); }
      }

      return s0;
    }

    function peg$parsePAGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1000) {
        s0 = peg$c1000;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1001); }
      }

      return s0;
    }

    function peg$parsePARSER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1002) {
        s0 = peg$c1002;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1003); }
      }

      return s0;
    }

    function peg$parsePARTIAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1004) {
        s0 = peg$c1004;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1005); }
      }

      return s0;
    }

    function peg$parsePARTITIONING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1006) {
        s0 = peg$c1006;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1007); }
      }

      return s0;
    }

    function peg$parsePARTITIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1008) {
        s0 = peg$c1008;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1009); }
      }

      return s0;
    }

    function peg$parsePARTITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1010) {
        s0 = peg$c1010;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1011); }
      }

      return s0;
    }

    function peg$parsePASSWORD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1012) {
        s0 = peg$c1012;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1013); }
      }

      return s0;
    }

    function peg$parsePATH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1014) {
        s0 = peg$c1014;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1015); }
      }

      return s0;
    }

    function peg$parsePERCENT_RANK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1016) {
        s0 = peg$c1016;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1017); }
      }

      return s0;
    }

    function peg$parsePERSIST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1018) {
        s0 = peg$c1018;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1019); }
      }

      return s0;
    }

    function peg$parsePERSIST_ONLY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1020) {
        s0 = peg$c1020;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1021); }
      }

      return s0;
    }

    function peg$parsePHASE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1022) {
        s0 = peg$c1022;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1023); }
      }

      return s0;
    }

    function peg$parsePLUGIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1024) {
        s0 = peg$c1024;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1025); }
      }

      return s0;
    }

    function peg$parsePLUGINS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1026) {
        s0 = peg$c1026;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1027); }
      }

      return s0;
    }

    function peg$parsePLUGIN_DIR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1028) {
        s0 = peg$c1028;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1029); }
      }

      return s0;
    }

    function peg$parsePORT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1030) {
        s0 = peg$c1030;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1031); }
      }

      return s0;
    }

    function peg$parsePOSITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1032) {
        s0 = peg$c1032;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1033); }
      }

      return s0;
    }

    function peg$parsePRECEDES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1034) {
        s0 = peg$c1034;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1035); }
      }

      return s0;
    }

    function peg$parsePRECEDING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1036) {
        s0 = peg$c1036;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1037); }
      }

      return s0;
    }

    function peg$parsePRECISION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1038) {
        s0 = peg$c1038;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1039); }
      }

      return s0;
    }

    function peg$parsePREPARE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1040) {
        s0 = peg$c1040;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1041); }
      }

      return s0;
    }

    function peg$parsePRESERVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1042) {
        s0 = peg$c1042;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1043); }
      }

      return s0;
    }

    function peg$parsePREV_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1044) {
        s0 = peg$c1044;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1045); }
      }

      return s0;
    }

    function peg$parsePRIMARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1046) {
        s0 = peg$c1046;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1047); }
      }

      return s0;
    }

    function peg$parsePRIVILEGES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1048) {
        s0 = peg$c1048;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1049); }
      }

      return s0;
    }

    function peg$parsePRIVILEGE_CHECKS_USER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 28) === peg$c1050) {
        s0 = peg$c1050;
        peg$currPos += 28;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1051); }
      }

      return s0;
    }

    function peg$parsePROCEDURE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1052) {
        s0 = peg$c1052;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1053); }
      }

      return s0;
    }

    function peg$parsePROCESS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1054) {
        s0 = peg$c1054;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1055); }
      }

      return s0;
    }

    function peg$parsePROCESSLIST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1056) {
        s0 = peg$c1056;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1057); }
      }

      return s0;
    }

    function peg$parsePROFILES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1058) {
        s0 = peg$c1058;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1059); }
      }

      return s0;
    }

    function peg$parsePROFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1060) {
        s0 = peg$c1060;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1061); }
      }

      return s0;
    }

    function peg$parsePROXY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1062) {
        s0 = peg$c1062;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1063); }
      }

      return s0;
    }

    function peg$parsePURGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1064) {
        s0 = peg$c1064;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1065); }
      }

      return s0;
    }

    function peg$parseQUARTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1066) {
        s0 = peg$c1066;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1067); }
      }

      return s0;
    }

    function peg$parseQUERY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1068) {
        s0 = peg$c1068;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1069); }
      }

      return s0;
    }

    function peg$parseQUICK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1070) {
        s0 = peg$c1070;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1071); }
      }

      return s0;
    }

    function peg$parseRANDOM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1072) {
        s0 = peg$c1072;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1073); }
      }

      return s0;
    }

    function peg$parseRANGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1074) {
        s0 = peg$c1074;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1075); }
      }

      return s0;
    }

    function peg$parseRANK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1076) {
        s0 = peg$c1076;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1077); }
      }

      return s0;
    }

    function peg$parseREADS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1078) {
        s0 = peg$c1078;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1079); }
      }

      return s0;
    }

    function peg$parseREAD_ONLY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1080) {
        s0 = peg$c1080;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1081); }
      }

      return s0;
    }

    function peg$parseREAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1082) {
        s0 = peg$c1082;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1083); }
      }

      return s0;
    }

    function peg$parseREAD_WRITE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1084) {
        s0 = peg$c1084;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1085); }
      }

      return s0;
    }

    function peg$parseREBUILD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1086) {
        s0 = peg$c1086;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1087); }
      }

      return s0;
    }

    function peg$parseRECOVER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1088) {
        s0 = peg$c1088;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1089); }
      }

      return s0;
    }

    function peg$parseREDOFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1090) {
        s0 = peg$c1090;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1091); }
      }

      return s0;
    }

    function peg$parseREDO_BUFFER_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c1092) {
        s0 = peg$c1092;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1093); }
      }

      return s0;
    }

    function peg$parseREDUNDANT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1094) {
        s0 = peg$c1094;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1095); }
      }

      return s0;
    }

    function peg$parseREFERENCES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1096) {
        s0 = peg$c1096;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1097); }
      }

      return s0;
    }

    function peg$parseRECURSIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1098) {
        s0 = peg$c1098;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1099); }
      }

      return s0;
    }

    function peg$parseREGEXP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1100) {
        s0 = peg$c1100;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1101); }
      }

      return s0;
    }

    function peg$parseRELAYLOG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1102) {
        s0 = peg$c1102;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1103); }
      }

      return s0;
    }

    function peg$parseRELAY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1104) {
        s0 = peg$c1104;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1105); }
      }

      return s0;
    }

    function peg$parseRELAY_LOG_FILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1106) {
        s0 = peg$c1106;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1107); }
      }

      return s0;
    }

    function peg$parseRELAY_LOG_POS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1108) {
        s0 = peg$c1108;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1109); }
      }

      return s0;
    }

    function peg$parseRELAY_THREAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1110) {
        s0 = peg$c1110;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1111); }
      }

      return s0;
    }

    function peg$parseRELEASE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1112) {
        s0 = peg$c1112;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1113); }
      }

      return s0;
    }

    function peg$parseRELOAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1114) {
        s0 = peg$c1114;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1115); }
      }

      return s0;
    }

    function peg$parseREMOTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1116) {
        s0 = peg$c1116;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1117); }
      }

      return s0;
    }

    function peg$parseREMOVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1118) {
        s0 = peg$c1118;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1119); }
      }

      return s0;
    }

    function peg$parseRENAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1120) {
        s0 = peg$c1120;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1121); }
      }

      return s0;
    }

    function peg$parseREORGANIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1122) {
        s0 = peg$c1122;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1123); }
      }

      return s0;
    }

    function peg$parseREPAIR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1124) {
        s0 = peg$c1124;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1125); }
      }

      return s0;
    }

    function peg$parseREPEAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1126) {
        s0 = peg$c1126;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1127); }
      }

      return s0;
    }

    function peg$parseREPEATABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1128) {
        s0 = peg$c1128;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1129); }
      }

      return s0;
    }

    function peg$parseREPLACE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1130) {
        s0 = peg$c1130;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1131); }
      }

      return s0;
    }

    function peg$parseREPLICATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1132) {
        s0 = peg$c1132;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1133); }
      }

      return s0;
    }

    function peg$parseREPLICATE_DO_DB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c1134) {
        s0 = peg$c1134;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1135); }
      }

      return s0;
    }

    function peg$parseREPLICATE_IGNORE_DB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 26) === peg$c1136) {
        s0 = peg$c1136;
        peg$currPos += 26;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1137); }
      }

      return s0;
    }

    function peg$parseREPLICATE_DO_TABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c1138) {
        s0 = peg$c1138;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1139); }
      }

      return s0;
    }

    function peg$parseREPLICATE_IGNORE_TABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 29) === peg$c1140) {
        s0 = peg$c1140;
        peg$currPos += 29;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1141); }
      }

      return s0;
    }

    function peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 30) === peg$c1142) {
        s0 = peg$c1142;
        peg$currPos += 30;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1143); }
      }

      return s0;
    }

    function peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 34) === peg$c1144) {
        s0 = peg$c1144;
        peg$currPos += 34;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1145); }
      }

      return s0;
    }

    function peg$parseREPLICATE_REWRITE_DB_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 27) === peg$c1146) {
        s0 = peg$c1146;
        peg$currPos += 27;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1147); }
      }

      return s0;
    }

    function peg$parseREQUIRE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1148) {
        s0 = peg$c1148;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1149); }
      }

      return s0;
    }

    function peg$parseREQUIRE_ROW_FORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c1150) {
        s0 = peg$c1150;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1151); }
      }

      return s0;
    }

    function peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 38) === peg$c1152) {
        s0 = peg$c1152;
        peg$currPos += 38;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1153); }
      }

      return s0;
    }

    function peg$parseRESET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1154) {
        s0 = peg$c1154;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1155); }
      }

      return s0;
    }

    function peg$parseRESIGNAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1156) {
        s0 = peg$c1156;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1157); }
      }

      return s0;
    }

    function peg$parseRESOURCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1158) {
        s0 = peg$c1158;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1159); }
      }

      return s0;
    }

    function peg$parseRESPECT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1160) {
        s0 = peg$c1160;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1161); }
      }

      return s0;
    }

    function peg$parseRESTART_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1162) {
        s0 = peg$c1162;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1163); }
      }

      return s0;
    }

    function peg$parseRESTORE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1164) {
        s0 = peg$c1164;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1165); }
      }

      return s0;
    }

    function peg$parseRESTRICT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1166) {
        s0 = peg$c1166;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1167); }
      }

      return s0;
    }

    function peg$parseRESUME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1168) {
        s0 = peg$c1168;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1169); }
      }

      return s0;
    }

    function peg$parseRETAIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1170) {
        s0 = peg$c1170;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1171); }
      }

      return s0;
    }

    function peg$parseRETURNED_SQLSTATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c1172) {
        s0 = peg$c1172;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1173); }
      }

      return s0;
    }

    function peg$parseRETURNS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1174) {
        s0 = peg$c1174;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1175); }
      }

      return s0;
    }

    function peg$parseREUSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1176) {
        s0 = peg$c1176;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1177); }
      }

      return s0;
    }

    function peg$parseREVERSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1178) {
        s0 = peg$c1178;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1179); }
      }

      return s0;
    }

    function peg$parseREVOKE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1180) {
        s0 = peg$c1180;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1181); }
      }

      return s0;
    }

    function peg$parseRIGHT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1182) {
        s0 = peg$c1182;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1183); }
      }

      return s0;
    }

    function peg$parseRLIKE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1184) {
        s0 = peg$c1184;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1185); }
      }

      return s0;
    }

    function peg$parseROLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1186) {
        s0 = peg$c1186;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1187); }
      }

      return s0;
    }

    function peg$parseROLLBACK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1188) {
        s0 = peg$c1188;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1189); }
      }

      return s0;
    }

    function peg$parseROLLUP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1190) {
        s0 = peg$c1190;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1191); }
      }

      return s0;
    }

    function peg$parseROTATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1192) {
        s0 = peg$c1192;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1193); }
      }

      return s0;
    }

    function peg$parseROW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1194) {
        s0 = peg$c1194;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1195); }
      }

      return s0;
    }

    function peg$parseROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1196) {
        s0 = peg$c1196;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1197); }
      }

      return s0;
    }

    function peg$parseROW_COUNT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1198) {
        s0 = peg$c1198;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1199); }
      }

      return s0;
    }

    function peg$parseROW_FORMAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1200) {
        s0 = peg$c1200;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1201); }
      }

      return s0;
    }

    function peg$parseROW_NUMBER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1202) {
        s0 = peg$c1202;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1203); }
      }

      return s0;
    }

    function peg$parseRTREE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1204) {
        s0 = peg$c1204;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1205); }
      }

      return s0;
    }

    function peg$parseSAVEPOINT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1206) {
        s0 = peg$c1206;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1207); }
      }

      return s0;
    }

    function peg$parseSCHEMA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1208) {
        s0 = peg$c1208;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1209); }
      }

      return s0;
    }

    function peg$parseSCHEMAS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1210) {
        s0 = peg$c1210;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1211); }
      }

      return s0;
    }

    function peg$parseSCHEMA_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1212) {
        s0 = peg$c1212;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1213); }
      }

      return s0;
    }

    function peg$parseSCHEDULE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1214) {
        s0 = peg$c1214;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1215); }
      }

      return s0;
    }

    function peg$parseSECOND_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c1216) {
        s0 = peg$c1216;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1217); }
      }

      return s0;
    }

    function peg$parseSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1218) {
        s0 = peg$c1218;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1219); }
      }

      return s0;
    }

    function peg$parseSECONDARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1220) {
        s0 = peg$c1220;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1221); }
      }

      return s0;
    }

    function peg$parseSECONDARY_ENGINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c1222) {
        s0 = peg$c1222;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1223); }
      }

      return s0;
    }

    function peg$parseSECONDARY_LOAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1224) {
        s0 = peg$c1224;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1225); }
      }

      return s0;
    }

    function peg$parseSECONDARY_UNLOAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c1226) {
        s0 = peg$c1226;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1227); }
      }

      return s0;
    }

    function peg$parseSECURITY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1228) {
        s0 = peg$c1228;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1229); }
      }

      return s0;
    }

    function peg$parseSELECT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1230) {
        s0 = peg$c1230;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1231); }
      }

      return s0;
    }

    function peg$parseSENSITIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1232) {
        s0 = peg$c1232;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1233); }
      }

      return s0;
    }

    function peg$parseSEPARATOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1234) {
        s0 = peg$c1234;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1235); }
      }

      return s0;
    }

    function peg$parseSERIALIZABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1236) {
        s0 = peg$c1236;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1237); }
      }

      return s0;
    }

    function peg$parseSERIAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1238) {
        s0 = peg$c1238;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1239); }
      }

      return s0;
    }

    function peg$parseSERVER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1240) {
        s0 = peg$c1240;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1241); }
      }

      return s0;
    }

    function peg$parseSERVER_OPTIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1242) {
        s0 = peg$c1242;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1243); }
      }

      return s0;
    }

    function peg$parseSESSION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1244) {
        s0 = peg$c1244;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1245); }
      }

      return s0;
    }

    function peg$parseSESSION_USER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1246) {
        s0 = peg$c1246;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1247); }
      }

      return s0;
    }

    function peg$parseSET_VAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1248) {
        s0 = peg$c1248;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1249); }
      }

      return s0;
    }

    function peg$parseSHARE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1250) {
        s0 = peg$c1250;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1251); }
      }

      return s0;
    }

    function peg$parseSHOW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1252) {
        s0 = peg$c1252;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1253); }
      }

      return s0;
    }

    function peg$parseSHUTDOWN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1254) {
        s0 = peg$c1254;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1255); }
      }

      return s0;
    }

    function peg$parseSIGNAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1256) {
        s0 = peg$c1256;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1257); }
      }

      return s0;
    }

    function peg$parseSIGNED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1258) {
        s0 = peg$c1258;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1259); }
      }

      return s0;
    }

    function peg$parseSIMPLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1260) {
        s0 = peg$c1260;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1261); }
      }

      return s0;
    }

    function peg$parseSKIP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1262) {
        s0 = peg$c1262;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1263); }
      }

      return s0;
    }

    function peg$parseSLAVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1264) {
        s0 = peg$c1264;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1265); }
      }

      return s0;
    }

    function peg$parseSLOW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1266) {
        s0 = peg$c1266;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1267); }
      }

      return s0;
    }

    function peg$parseSNAPSHOT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1268) {
        s0 = peg$c1268;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1269); }
      }

      return s0;
    }

    function peg$parseSOME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1270) {
        s0 = peg$c1270;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1271); }
      }

      return s0;
    }

    function peg$parseSOCKET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1272) {
        s0 = peg$c1272;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1273); }
      }

      return s0;
    }

    function peg$parseSONAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1274) {
        s0 = peg$c1274;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1275); }
      }

      return s0;
    }

    function peg$parseSOUNDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1276) {
        s0 = peg$c1276;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1277); }
      }

      return s0;
    }

    function peg$parseSOURCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1278) {
        s0 = peg$c1278;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1279); }
      }

      return s0;
    }

    function peg$parseSPATIAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1280) {
        s0 = peg$c1280;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1281); }
      }

      return s0;
    }

    function peg$parseSQL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1282) {
        s0 = peg$c1282;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1283); }
      }

      return s0;
    }

    function peg$parseSQLEXCEPTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1284) {
        s0 = peg$c1284;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1285); }
      }

      return s0;
    }

    function peg$parseSQLSTATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1286) {
        s0 = peg$c1286;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1287); }
      }

      return s0;
    }

    function peg$parseSQLWARNING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1288) {
        s0 = peg$c1288;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1289); }
      }

      return s0;
    }

    function peg$parseSQL_AFTER_GTIDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c1290) {
        s0 = peg$c1290;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1291); }
      }

      return s0;
    }

    function peg$parseSQL_AFTER_MTS_GAPS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c1292) {
        s0 = peg$c1292;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1293); }
      }

      return s0;
    }

    function peg$parseSQL_BEFORE_GTIDS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c1294) {
        s0 = peg$c1294;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1295); }
      }

      return s0;
    }

    function peg$parseSQL_BIG_RESULT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1296) {
        s0 = peg$c1296;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1297); }
      }

      return s0;
    }

    function peg$parseSQL_BUFFER_RESULT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c1298) {
        s0 = peg$c1298;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1299); }
      }

      return s0;
    }

    function peg$parseSQL_CALC_FOUND_ROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 26) === peg$c1300) {
        s0 = peg$c1300;
        peg$currPos += 26;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1301); }
      }

      return s0;
    }

    function peg$parseSQL_CACHE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1302) {
        s0 = peg$c1302;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1303); }
      }

      return s0;
    }

    function peg$parseSQL_NO_CACHE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1304) {
        s0 = peg$c1304;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1305); }
      }

      return s0;
    }

    function peg$parseSQL_SMALL_RESULT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c1306) {
        s0 = peg$c1306;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1307); }
      }

      return s0;
    }

    function peg$parseSQL_THREAD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1308) {
        s0 = peg$c1308;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1309); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_DAY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1310) {
        s0 = peg$c1310;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1311); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_HOUR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1312) {
        s0 = peg$c1312;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1313); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_MICROSECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 26) === peg$c1314) {
        s0 = peg$c1314;
        peg$currPos += 26;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1315); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_MINUTE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1316) {
        s0 = peg$c1316;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1317); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_MONTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1318) {
        s0 = peg$c1318;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1319); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_QUARTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c1320) {
        s0 = peg$c1320;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1321); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_SECOND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1322) {
        s0 = peg$c1322;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1323); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_WEEK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1324) {
        s0 = peg$c1324;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1325); }
      }

      return s0;
    }

    function peg$parseSQL_TSI_YEAR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1326) {
        s0 = peg$c1326;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1327); }
      }

      return s0;
    }

    function peg$parseSRID_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1328) {
        s0 = peg$c1328;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1329); }
      }

      return s0;
    }

    function peg$parseSSL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1330) {
        s0 = peg$c1330;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1331); }
      }

      return s0;
    }

    function peg$parseSTACKED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1332) {
        s0 = peg$c1332;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1333); }
      }

      return s0;
    }

    function peg$parseSTARTING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1334) {
        s0 = peg$c1334;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1335); }
      }

      return s0;
    }

    function peg$parseSTARTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1336) {
        s0 = peg$c1336;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1337); }
      }

      return s0;
    }

    function peg$parseSTATS_AUTO_RECALC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 24) === peg$c1338) {
        s0 = peg$c1338;
        peg$currPos += 24;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1339); }
      }

      return s0;
    }

    function peg$parseSTATS_PERSISTENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c1340) {
        s0 = peg$c1340;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1341); }
      }

      return s0;
    }

    function peg$parseSTATS_SAMPLE_PAGES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c1342) {
        s0 = peg$c1342;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1343); }
      }

      return s0;
    }

    function peg$parseSTATUS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1344) {
        s0 = peg$c1344;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1345); }
      }

      return s0;
    }

    function peg$parseSTD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1346) {
        s0 = peg$c1346;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1347); }
      }

      return s0;
    }

    function peg$parseSTDDEV_POP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1348) {
        s0 = peg$c1348;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1349); }
      }

      return s0;
    }

    function peg$parseSTDDEV_SAMP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1350) {
        s0 = peg$c1350;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1351); }
      }

      return s0;
    }

    function peg$parseSTDDEV_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1352) {
        s0 = peg$c1352;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1353); }
      }

      return s0;
    }

    function peg$parseSTOP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1354) {
        s0 = peg$c1354;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1355); }
      }

      return s0;
    }

    function peg$parseSTORAGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1356) {
        s0 = peg$c1356;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1357); }
      }

      return s0;
    }

    function peg$parseSTORED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1358) {
        s0 = peg$c1358;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1359); }
      }

      return s0;
    }

    function peg$parseSTRAIGHT_JOIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1360) {
        s0 = peg$c1360;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1361); }
      }

      return s0;
    }

    function peg$parseSTREAM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1362) {
        s0 = peg$c1362;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1363); }
      }

      return s0;
    }

    function peg$parseSTRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1364) {
        s0 = peg$c1364;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1365); }
      }

      return s0;
    }

    function peg$parseSUBCLASS_ORIGIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c1366) {
        s0 = peg$c1366;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1367); }
      }

      return s0;
    }

    function peg$parseSUBDATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1368) {
        s0 = peg$c1368;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1369); }
      }

      return s0;
    }

    function peg$parseSUBJECT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1370) {
        s0 = peg$c1370;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1371); }
      }

      return s0;
    }

    function peg$parseSUBPARTITIONS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1372) {
        s0 = peg$c1372;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1373); }
      }

      return s0;
    }

    function peg$parseSUBPARTITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1374) {
        s0 = peg$c1374;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1375); }
      }

      return s0;
    }

    function peg$parseSUBSTR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1376) {
        s0 = peg$c1376;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1377); }
      }

      return s0;
    }

    function peg$parseSUBSTRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1378) {
        s0 = peg$c1378;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1379); }
      }

      return s0;
    }

    function peg$parseSUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1380) {
        s0 = peg$c1380;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1381); }
      }

      return s0;
    }

    function peg$parseSUPER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1382) {
        s0 = peg$c1382;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1383); }
      }

      return s0;
    }

    function peg$parseSUSPEND_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1384) {
        s0 = peg$c1384;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1385); }
      }

      return s0;
    }

    function peg$parseSWAPS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1386) {
        s0 = peg$c1386;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1387); }
      }

      return s0;
    }

    function peg$parseSWITCHES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1388) {
        s0 = peg$c1388;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1389); }
      }

      return s0;
    }

    function peg$parseSYSDATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1390) {
        s0 = peg$c1390;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1391); }
      }

      return s0;
    }

    function peg$parseSYSTEM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1392) {
        s0 = peg$c1392;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1393); }
      }

      return s0;
    }

    function peg$parseSYSTEM_USER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1394) {
        s0 = peg$c1394;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1395); }
      }

      return s0;
    }

    function peg$parseTABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1396) {
        s0 = peg$c1396;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1397); }
      }

      return s0;
    }

    function peg$parseTABLES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1398) {
        s0 = peg$c1398;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1399); }
      }

      return s0;
    }

    function peg$parseTABLESPACE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1400) {
        s0 = peg$c1400;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1401); }
      }

      return s0;
    }

    function peg$parseTABLE_CHECKSUM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1402) {
        s0 = peg$c1402;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1403); }
      }

      return s0;
    }

    function peg$parseTABLE_NAME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1404) {
        s0 = peg$c1404;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1405); }
      }

      return s0;
    }

    function peg$parseTEMPORARY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1406) {
        s0 = peg$c1406;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1407); }
      }

      return s0;
    }

    function peg$parseTEMPTABLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1408) {
        s0 = peg$c1408;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1409); }
      }

      return s0;
    }

    function peg$parseTERMINATED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1410) {
        s0 = peg$c1410;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1411); }
      }

      return s0;
    }

    function peg$parseTHAN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1412) {
        s0 = peg$c1412;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1413); }
      }

      return s0;
    }

    function peg$parseTHEN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1414) {
        s0 = peg$c1414;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1415); }
      }

      return s0;
    }

    function peg$parseTHREAD_PRIORITY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 22) === peg$c1416) {
        s0 = peg$c1416;
        peg$currPos += 22;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1417); }
      }

      return s0;
    }

    function peg$parseTIES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1418) {
        s0 = peg$c1418;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1419); }
      }

      return s0;
    }

    function peg$parseTIMESTAMP_ADD_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1420) {
        s0 = peg$c1420;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1421); }
      }

      return s0;
    }

    function peg$parseTIMESTAMP_DIFF_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1422) {
        s0 = peg$c1422;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1423); }
      }

      return s0;
    }

    function peg$parseTO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1424) {
        s0 = peg$c1424;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1425); }
      }

      return s0;
    }

    function peg$parseTRAILING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1426) {
        s0 = peg$c1426;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1427); }
      }

      return s0;
    }

    function peg$parseTRANSACTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1428) {
        s0 = peg$c1428;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1429); }
      }

      return s0;
    }

    function peg$parseTRIGGER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1430) {
        s0 = peg$c1430;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1431); }
      }

      return s0;
    }

    function peg$parseTRIGGERS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1432) {
        s0 = peg$c1432;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1433); }
      }

      return s0;
    }

    function peg$parseTRIM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1434) {
        s0 = peg$c1434;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1435); }
      }

      return s0;
    }

    function peg$parseTRUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1436) {
        s0 = peg$c1436;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1437); }
      }

      return s0;
    }

    function peg$parseTRUNCATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1438) {
        s0 = peg$c1438;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1439); }
      }

      return s0;
    }

    function peg$parseTYPES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1440) {
        s0 = peg$c1440;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1441); }
      }

      return s0;
    }

    function peg$parseTYPE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1442) {
        s0 = peg$c1442;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1443); }
      }

      return s0;
    }

    function peg$parseUDF_RETURNS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1444) {
        s0 = peg$c1444;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1445); }
      }

      return s0;
    }

    function peg$parseUNBOUNDED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1446) {
        s0 = peg$c1446;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1447); }
      }

      return s0;
    }

    function peg$parseUNCOMMITTED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1448) {
        s0 = peg$c1448;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1449); }
      }

      return s0;
    }

    function peg$parseUNDEFINED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1450) {
        s0 = peg$c1450;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1451); }
      }

      return s0;
    }

    function peg$parseUNDO_BUFFER_SIZE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 23) === peg$c1452) {
        s0 = peg$c1452;
        peg$currPos += 23;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1453); }
      }

      return s0;
    }

    function peg$parseUNDOFILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1454) {
        s0 = peg$c1454;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1455); }
      }

      return s0;
    }

    function peg$parseUNDO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1456) {
        s0 = peg$c1456;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1457); }
      }

      return s0;
    }

    function peg$parseUNICODE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1458) {
        s0 = peg$c1458;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1459); }
      }

      return s0;
    }

    function peg$parseUNION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1460) {
        s0 = peg$c1460;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1461); }
      }

      return s0;
    }

    function peg$parseUNIQUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1462) {
        s0 = peg$c1462;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1463); }
      }

      return s0;
    }

    function peg$parseUNKNOWN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1464) {
        s0 = peg$c1464;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1465); }
      }

      return s0;
    }

    function peg$parseUNINSTALL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1466) {
        s0 = peg$c1466;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1467); }
      }

      return s0;
    }

    function peg$parseUNSIGNED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1468) {
        s0 = peg$c1468;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1469); }
      }

      return s0;
    }

    function peg$parseUPDATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1470) {
        s0 = peg$c1470;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1471); }
      }

      return s0;
    }

    function peg$parseUPGRADE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1472) {
        s0 = peg$c1472;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1473); }
      }

      return s0;
    }

    function peg$parseUSAGE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1474) {
        s0 = peg$c1474;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1475); }
      }

      return s0;
    }

    function peg$parseUSER_RESOURCES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 21) === peg$c1476) {
        s0 = peg$c1476;
        peg$currPos += 21;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1477); }
      }

      return s0;
    }

    function peg$parseUSER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1478) {
        s0 = peg$c1478;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1479); }
      }

      return s0;
    }

    function peg$parseUSE_FRM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1480) {
        s0 = peg$c1480;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1481); }
      }

      return s0;
    }

    function peg$parseUSE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1482) {
        s0 = peg$c1482;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1483); }
      }

      return s0;
    }

    function peg$parseUSING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1484) {
        s0 = peg$c1484;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1485); }
      }

      return s0;
    }

    function peg$parseUTC_DATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1486) {
        s0 = peg$c1486;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1487); }
      }

      return s0;
    }

    function peg$parseUTC_TIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1488) {
        s0 = peg$c1488;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1489); }
      }

      return s0;
    }

    function peg$parseUTC_TIMESTAMP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1490) {
        s0 = peg$c1490;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1491); }
      }

      return s0;
    }

    function peg$parseVALIDATION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1492) {
        s0 = peg$c1492;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1493); }
      }

      return s0;
    }

    function peg$parseVALUE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1494) {
        s0 = peg$c1494;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1495); }
      }

      return s0;
    }

    function peg$parseVALUES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1496) {
        s0 = peg$c1496;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1497); }
      }

      return s0;
    }

    function peg$parseVARCHARACTER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1498) {
        s0 = peg$c1498;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1499); }
      }

      return s0;
    }

    function peg$parseVARIABLES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1500) {
        s0 = peg$c1500;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1501); }
      }

      return s0;
    }

    function peg$parseVARIANCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1502) {
        s0 = peg$c1502;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1503); }
      }

      return s0;
    }

    function peg$parseVARYING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1504) {
        s0 = peg$c1504;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1505); }
      }

      return s0;
    }

    function peg$parseVAR_POP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1506) {
        s0 = peg$c1506;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1507); }
      }

      return s0;
    }

    function peg$parseVAR_SAMP_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1508) {
        s0 = peg$c1508;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1509); }
      }

      return s0;
    }

    function peg$parseVCPU_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1510) {
        s0 = peg$c1510;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1511); }
      }

      return s0;
    }

    function peg$parseVIEW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1512) {
        s0 = peg$c1512;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1513); }
      }

      return s0;
    }

    function peg$parseVIRTUAL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1514) {
        s0 = peg$c1514;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1515); }
      }

      return s0;
    }

    function peg$parseVISIBLE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1516) {
        s0 = peg$c1516;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1517); }
      }

      return s0;
    }

    function peg$parseWAIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1518) {
        s0 = peg$c1518;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1519); }
      }

      return s0;
    }

    function peg$parseWARNINGS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1520) {
        s0 = peg$c1520;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1521); }
      }

      return s0;
    }

    function peg$parseWEEK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1522) {
        s0 = peg$c1522;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1523); }
      }

      return s0;
    }

    function peg$parseWHEN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1524) {
        s0 = peg$c1524;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1525); }
      }

      return s0;
    }

    function peg$parseWEIGHT_STRING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 20) === peg$c1526) {
        s0 = peg$c1526;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1527); }
      }

      return s0;
    }

    function peg$parseWHERE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1528) {
        s0 = peg$c1528;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1529); }
      }

      return s0;
    }

    function peg$parseWHILE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1530) {
        s0 = peg$c1530;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1531); }
      }

      return s0;
    }

    function peg$parseWINDOW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1532) {
        s0 = peg$c1532;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1533); }
      }

      return s0;
    }

    function peg$parseWITH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1534) {
        s0 = peg$c1534;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1535); }
      }

      return s0;
    }

    function peg$parseWITHOUT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1536) {
        s0 = peg$c1536;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1537); }
      }

      return s0;
    }

    function peg$parseWORK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1538) {
        s0 = peg$c1538;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1539); }
      }

      return s0;
    }

    function peg$parseWRAPPER_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1540) {
        s0 = peg$c1540;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1541); }
      }

      return s0;
    }

    function peg$parseWRITE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1542) {
        s0 = peg$c1542;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1543); }
      }

      return s0;
    }

    function peg$parseXA_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1544) {
        s0 = peg$c1544;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1545); }
      }

      return s0;
    }

    function peg$parseX509_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1546) {
        s0 = peg$c1546;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1547); }
      }

      return s0;
    }

    function peg$parseXID_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1548) {
        s0 = peg$c1548;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1549); }
      }

      return s0;
    }

    function peg$parseXML_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1550) {
        s0 = peg$c1550;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1551); }
      }

      return s0;
    }

    function peg$parseXOR_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1552) {
        s0 = peg$c1552;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1553); }
      }

      return s0;
    }

    function peg$parseYEAR_MONTH_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1554) {
        s0 = peg$c1554;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1555); }
      }

      return s0;
    }

    function peg$parseZEROFILL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1556) {
        s0 = peg$c1556;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1557); }
      }

      return s0;
    }

    function peg$parseINT1_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1558) {
        s0 = peg$c1558;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1559); }
      }

      return s0;
    }

    function peg$parseINT2_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1560) {
        s0 = peg$c1560;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1561); }
      }

      return s0;
    }

    function peg$parseINT3_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1562) {
        s0 = peg$c1562;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1563); }
      }

      return s0;
    }

    function peg$parseINT4_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1564) {
        s0 = peg$c1564;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1565); }
      }

      return s0;
    }

    function peg$parseINT8_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1566) {
        s0 = peg$c1566;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1567); }
      }

      return s0;
    }

    function peg$parseIDENTIFIER() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1568) {
        s0 = peg$c1568;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1569); }
      }

      return s0;
    }

    function peg$parseBACK_TICK_QUOTED_ID() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1570) {
        s0 = peg$c1570;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1571); }
      }

      return s0;
    }

    function peg$parseDOUBLE_QUOTED_TEXT() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1572) {
        s0 = peg$c1572;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1573); }
      }

      return s0;
    }

    function peg$parseSINGLE_QUOTED_TEXT() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1574) {
        s0 = peg$c1574;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1575); }
      }

      return s0;
    }

    function peg$parseHEX_NUMBER() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1576) {
        s0 = peg$c1576;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1577); }
      }

      return s0;
    }

    function peg$parseBIN_NUMBER() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c1578) {
        s1 = peg$c1578;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1579); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c1580.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1581); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c1580.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1581); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c1582) {
          s1 = peg$c1582;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1583); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c1580.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c1581); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c1580.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1581); }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c1584;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1585); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseDECIMAL_NUMBER() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1586) {
        s0 = peg$c1586;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1587); }
      }

      return s0;
    }

    function peg$parseINT_NUMBER() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1588) {
        s0 = peg$c1588;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1589); }
      }

      return s0;
    }

    function peg$parseFLOAT_NUMBER() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1590) {
        s0 = peg$c1590;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1591); }
      }

      return s0;
    }

    function peg$parseUNDERSCORE_CHARSET() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1592) {
        s0 = peg$c1592;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1593); }
      }

      return s0;
    }

    function peg$parseDOT_IDENTIFIER() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1594) {
        s0 = peg$c1594;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1595); }
      }

      return s0;
    }

    function peg$parseINVALID_INPUT() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1596) {
        s0 = peg$c1596;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1597); }
      }

      return s0;
    }

    function peg$parseLINEBREAK() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1598) {
        s0 = peg$c1598;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1599); }
      }

      return s0;
    }

    function peg$parseSTART_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1600) {
        s0 = peg$c1600;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1601); }
      }

      return s0;
    }

    function peg$parseUNLOCK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1602) {
        s0 = peg$c1602;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1603); }
      }

      return s0;
    }

    function peg$parseCLONE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1604) {
        s0 = peg$c1604;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1605); }
      }

      return s0;
    }

    function peg$parseGET_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1606) {
        s0 = peg$c1606;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1607); }
      }

      return s0;
    }

    function peg$parseASCII_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1608) {
        s0 = peg$c1608;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1609); }
      }

      return s0;
    }

    function peg$parseBIT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1610) {
        s0 = peg$c1610;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1611); }
      }

      return s0;
    }

    function peg$parseBUCKETS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1612) {
        s0 = peg$c1612;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1613); }
      }

      return s0;
    }

    function peg$parseCOMPONENT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1614) {
        s0 = peg$c1614;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1615); }
      }

      return s0;
    }

    function peg$parseNOW_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1616) {
        s0 = peg$c1616;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1617); }
      }

      return s0;
    }

    function peg$parseDEFINITION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1618) {
        s0 = peg$c1618;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1619); }
      }

      return s0;
    }

    function peg$parseDENSE_RANK_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1620) {
        s0 = peg$c1620;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1621); }
      }

      return s0;
    }

    function peg$parseDESCRIPTION_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 18) === peg$c1622) {
        s0 = peg$c1622;
        peg$currPos += 18;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1623); }
      }

      return s0;
    }

    function peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 28) === peg$c1624) {
        s0 = peg$c1624;
        peg$currPos += 28;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1625); }
      }

      return s0;
    }

    function peg$parseFOLLOWING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1626) {
        s0 = peg$c1626;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1627); }
      }

      return s0;
    }

    function peg$parseGROUPING_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1628) {
        s0 = peg$c1628;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1629); }
      }

      return s0;
    }

    function peg$parseGROUPS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1630) {
        s0 = peg$c1630;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1631); }
      }

      return s0;
    }

    function peg$parseLAG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1632) {
        s0 = peg$c1632;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1633); }
      }

      return s0;
    }

    function peg$parseLONG_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1634) {
        s0 = peg$c1634;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1635); }
      }

      return s0;
    }

    function peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 35) === peg$c1636) {
        s0 = peg$c1636;
        peg$currPos += 35;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1637); }
      }

      return s0;
    }

    function peg$parseNOT2_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1638) {
        s0 = peg$c1638;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1639); }
      }

      return s0;
    }

    function peg$parseNO_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c1640) {
        s0 = peg$c1640;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1641); }
      }

      return s0;
    }

    function peg$parseREFERENCE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1642) {
        s0 = peg$c1642;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1643); }
      }

      return s0;
    }

    function peg$parseRETURN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1644) {
        s0 = peg$c1644;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1645); }
      }

      return s0;
    }

    function peg$parseSPECIFIC_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1646) {
        s0 = peg$c1646;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1647); }
      }

      return s0;
    }

    function peg$parseAUTHORS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1648) {
        s0 = peg$c1648;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1649); }
      }

      return s0;
    }

    function peg$parseADDDATE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1650) {
        s0 = peg$c1650;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1651); }
      }

      return s0;
    }

    function peg$parseCONCAT_PIPES_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 19) === peg$c1652) {
        s0 = peg$c1652;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1653); }
      }

      return s0;
    }

    function peg$parseACTIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1654) {
        s0 = peg$c1654;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1655); }
      }

      return s0;
    }

    function peg$parseADMIN_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1656) {
        s0 = peg$c1656;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1657); }
      }

      return s0;
    }

    function peg$parseEXCLUDE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1658) {
        s0 = peg$c1658;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1659); }
      }

      return s0;
    }

    function peg$parseINACTIVE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1660) {
        s0 = peg$c1660;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1661); }
      }

      return s0;
    }

    function peg$parseLOCKED_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1662) {
        s0 = peg$c1662;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1663); }
      }

      return s0;
    }

    function peg$parseROUTINE_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c1664) {
        s0 = peg$c1664;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1665); }
      }

      return s0;
    }

    function peg$parseUNTIL_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1666) {
        s0 = peg$c1666;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1667); }
      }

      return s0;
    }

    function peg$parseARRAY_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c1668) {
        s0 = peg$c1668;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1669); }
      }

      return s0;
    }

    function peg$parsePASSWORD_LOCK_TIME_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 25) === peg$c1670) {
        s0 = peg$c1670;
        peg$currPos += 25;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1671); }
      }

      return s0;
    }

    function peg$parseNCHAR_TEXT() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c1672) {
        s0 = peg$c1672;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1673); }
      }

      return s0;
    }

    function peg$parseLONG_NUMBER() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c1674) {
        s0 = peg$c1674;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1675); }
      }

      return s0;
    }

    function peg$parseULONGLONG_NUMBER() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1676) {
        s0 = peg$c1676;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1677); }
      }

      return s0;
    }

    function peg$parseCUME_DIST_SYMBO() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c1678) {
        s0 = peg$c1678;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1679); }
      }

      return s0;
    }

    function peg$parseCUME_DIST_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c1680) {
        s0 = peg$c1680;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1681); }
      }

      return s0;
    }

    function peg$parseFOUND_ROWS_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c1682) {
        s0 = peg$c1682;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1683); }
      }

      return s0;
    }

    function peg$parseCONCAT_SYMBOL() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c1684) {
        s0 = peg$c1684;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1685); }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c1686) {
        s0 = peg$c1686;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1687); }
      }

      return s0;
    }


      const serverInfo = {
        ANSI_QUOTES: 1,
        isSqlModeActive() {
          return false;
        },
        getServerVersion() {
          return 80000;
        }
      };
      const serverVersion = serverInfo.getServerVersion();


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
