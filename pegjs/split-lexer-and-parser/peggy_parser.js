// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Start: peg$parseStart };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = "EQUAL_OPERATOR";
  var peg$c1 = "ASSIGN_OPERATOR";
  var peg$c2 = "NULL_SAFE_EQUAL_OPERATOR";
  var peg$c3 = "GREATER_OR_EQUAL_OPERATOR";
  var peg$c4 = "GREATER_THAN_OPERATOR";
  var peg$c5 = "LESS_OR_EQUAL_OPERATOR";
  var peg$c6 = "LESS_THAN_OPERATOR";
  var peg$c7 = "NOT_EQUAL_OPERATOR";
  var peg$c8 = "PLUS_OPERATOR";
  var peg$c9 = "MINUS_OPERATOR";
  var peg$c10 = "MULT_OPERATOR";
  var peg$c11 = "DIV_OPERATOR";
  var peg$c12 = "MOD_OPERATOR";
  var peg$c13 = "LOGICAL_NOT_OPERATOR";
  var peg$c14 = "BITWISE_NOT_OPERATOR";
  var peg$c15 = "SHIFT_LEFT_OPERATOR";
  var peg$c16 = "SHIFT_RIGHT_OPERATOR";
  var peg$c17 = "LOGICAL_AND_OPERATOR";
  var peg$c18 = "BITWISE_AND_OPERATOR";
  var peg$c19 = "BITWISE_XOR_OPERATOR";
  var peg$c20 = "LOGICAL_OR_OPERATOR";
  var peg$c21 = "BITWISE_OR_OPERATOR";
  var peg$c22 = "DOT_SYMBOL";
  var peg$c23 = "COMMA_SYMBOL";
  var peg$c24 = "SEMICOLON_SYMBOL";
  var peg$c25 = "COLON_SYMBOL";
  var peg$c26 = "OPEN_PAR_SYMBOL";
  var peg$c27 = "CLOSE_PAR_SYMBOL";
  var peg$c28 = "OPEN_CURLY_SYMBOL";
  var peg$c29 = "CLOSE_CURLY_SYMBOL";
  var peg$c30 = "UNDERLINE_SYMBOL";
  var peg$c31 = "JSON_SEPARATOR_SYMBOL";
  var peg$c32 = "JSON_UNQUOTED_SEPARATOR_SYMBOL";
  var peg$c33 = "AT_SIGN_SYMBOL";
  var peg$c34 = "AT_TEXT_SUFFIX";
  var peg$c35 = "AT_AT_SIGN_SYMBOL";
  var peg$c36 = "NULL2_SYMBOL";
  var peg$c37 = "PARAM_MARKER";
  var peg$c38 = "INT_SYMBOL";
  var peg$c39 = "TINYINT_SYMBOL";
  var peg$c40 = "SMALLINT_SYMBOL";
  var peg$c41 = "MEDIUMINT_SYMBOL";
  var peg$c42 = "BIGINT_SYMBOL";
  var peg$c43 = "REAL_SYMBOL";
  var peg$c44 = "DOUBLE_SYMBOL";
  var peg$c45 = "FLOAT_SYMBOL";
  var peg$c46 = "DECIMAL_SYMBOL";
  var peg$c47 = "NUMERIC_SYMBOL";
  var peg$c48 = "DATE_SYMBOL";
  var peg$c49 = "TIME_SYMBOL";
  var peg$c50 = "TIMESTAMP_SYMBOL";
  var peg$c51 = "DATETIME_SYMBOL";
  var peg$c52 = "YEAR_SYMBOL";
  var peg$c53 = "CHAR_SYMBOL";
  var peg$c54 = "VARCHAR_SYMBOL";
  var peg$c55 = "BINARY_SYMBOL";
  var peg$c56 = "VARBINARY_SYMBOL";
  var peg$c57 = "TINYBLOB_SYMBOL";
  var peg$c58 = "BLOB_SYMBOL";
  var peg$c59 = "MEDIUMBLOB_SYMBOL";
  var peg$c60 = "LONGBLOB_SYMBOL";
  var peg$c61 = "TINYTEXT_SYMBOL";
  var peg$c62 = "TEXT_SYMBOL";
  var peg$c63 = "MEDIUMTEXT_SYMBOL";
  var peg$c64 = "LONGTEXT_SYMBOL";
  var peg$c65 = "ENUM_SYMBOL";
  var peg$c66 = "SET_SYMBOL";
  var peg$c67 = "JSON_SYMBOL";
  var peg$c68 = "GEOMETRY_SYMBOL";
  var peg$c69 = "POINT_SYMBOL";
  var peg$c70 = "LINESTRING_SYMBOL";
  var peg$c71 = "POLYGON_SYMBOL";
  var peg$c72 = "GEOMETRYCOLLECTION_SYMBOL";
  var peg$c73 = "MULTIPOINT_SYMBOL";
  var peg$c74 = "MULTILINESTRING_SYMBOL";
  var peg$c75 = "MULTIPOLYGON_SYMBOL";
  var peg$c76 = "ACCESSIBLE_SYMBOL";
  var peg$c77 = "ACCOUNT_SYMBOL";
  var peg$c78 = "ACTION_SYMBOL";
  var peg$c79 = "ADD_SYMBOL";
  var peg$c80 = "AFTER_SYMBOL";
  var peg$c81 = "AGAINST_SYMBOL";
  var peg$c82 = "AGGREGATE_SYMBOL";
  var peg$c83 = "ALGORITHM_SYMBOL";
  var peg$c84 = "ALL_SYMBOL";
  var peg$c85 = "ALTER_SYMBOL";
  var peg$c86 = "ALWAYS_SYMBOL";
  var peg$c87 = "ANALYSE_SYMBOL";
  var peg$c88 = "ANALYZE_SYMBOL";
  var peg$c89 = "AND_SYMBOL";
  var peg$c90 = "ANY_SYMBOL";
  var peg$c91 = "AS_SYMBOL";
  var peg$c92 = "ASC_SYMBOL";
  var peg$c93 = "ASENSITIVE_SYMBOL";
  var peg$c94 = "AT_SYMBOL";
  var peg$c95 = "AUTOEXTEND_SIZE_SYMBOL";
  var peg$c96 = "AUTO_INCREMENT_SYMBOL";
  var peg$c97 = "AVG_ROW_LENGTH_SYMBOL";
  var peg$c98 = "AVG_SYMBOL";
  var peg$c99 = "BACKUP_SYMBOL";
  var peg$c100 = "BEFORE_SYMBOL";
  var peg$c101 = "BEGIN_SYMBOL";
  var peg$c102 = "BETWEEN_SYMBOL";
  var peg$c103 = "BINLOG_SYMBOL";
  var peg$c104 = "BIT_AND_SYMBOL";
  var peg$c105 = "BIT_OR_SYMBOL";
  var peg$c106 = "BIT_XOR_SYMBOL";
  var peg$c107 = "BLOCK_SYMBOL";
  var peg$c108 = "BOOL_SYMBOL";
  var peg$c109 = "BOOLEAN_SYMBOL";
  var peg$c110 = "BOTH_SYMBOL";
  var peg$c111 = "BTREE_SYMBOL";
  var peg$c112 = "BY_SYMBOL";
  var peg$c113 = "BYTE_SYMBOL";
  var peg$c114 = "CACHE_SYMBOL";
  var peg$c115 = "CALL_SYMBOL";
  var peg$c116 = "CASCADE_SYMBOL";
  var peg$c117 = "CASCADED_SYMBOL";
  var peg$c118 = "CASE_SYMBOL";
  var peg$c119 = "CAST_SYMBOL";
  var peg$c120 = "CATALOG_NAME_SYMBOL";
  var peg$c121 = "CHAIN_SYMBOL";
  var peg$c122 = "CHANGE_SYMBOL";
  var peg$c123 = "CHANGED_SYMBOL";
  var peg$c124 = "CHANNEL_SYMBOL";
  var peg$c125 = "CHARSET_SYMBOL";
  var peg$c126 = "CHARACTER_SYMBOL";
  var peg$c127 = "CHECK_SYMBOL";
  var peg$c128 = "CHECKSUM_SYMBOL";
  var peg$c129 = "CIPHER_SYMBOL";
  var peg$c130 = "CLASS_ORIGIN_SYMBOL";
  var peg$c131 = "CLIENT_SYMBOL";
  var peg$c132 = "CLOSE_SYMBOL";
  var peg$c133 = "COALESCE_SYMBOL";
  var peg$c134 = "CODE_SYMBOL";
  var peg$c135 = "COLLATE_SYMBOL";
  var peg$c136 = "COLLATION_SYMBOL";
  var peg$c137 = "COLUMN_FORMAT_SYMBOL";
  var peg$c138 = "COLUMN_NAME_SYMBOL";
  var peg$c139 = "COLUMNS_SYMBOL";
  var peg$c140 = "COLUMN_SYMBOL";
  var peg$c141 = "COMMENT_SYMBOL";
  var peg$c142 = "COMMITTED_SYMBOL";
  var peg$c143 = "COMMIT_SYMBOL";
  var peg$c144 = "COMPACT_SYMBOL";
  var peg$c145 = "COMPLETION_SYMBOL";
  var peg$c146 = "COMPRESSED_SYMBOL";
  var peg$c147 = "COMPRESSION_SYMBOL";
  var peg$c148 = "CONCURRENT_SYMBOL";
  var peg$c149 = "CONDITION_SYMBOL";
  var peg$c150 = "CONNECTION_SYMBOL";
  var peg$c151 = "CONSISTENT_SYMBOL";
  var peg$c152 = "CONSTRAINT_SYMBOL";
  var peg$c153 = "CONSTRAINTS_SYMBOL";
  var peg$c154 = "OVER_SYMBOL";
  var peg$c155 = "REPLICA_SYMBOL";
  var peg$c156 = "CONSTRAINT_CATALOG_SYMBOL";
  var peg$c157 = "CONSTRAINT_NAME_SYMBOL";
  var peg$c158 = "CONSTRAINT_SCHEMA_SYMBOL";
  var peg$c159 = "CONTAINS_SYMBOL";
  var peg$c160 = "CONTEXT_SYMBOL";
  var peg$c161 = "CONTINUE_SYMBOL";
  var peg$c162 = "CONTRIBUTORS_SYMBOL";
  var peg$c163 = "CONVERT_SYMBOL";
  var peg$c164 = "COUNT_SYMBOL";
  var peg$c165 = "CPU_SYMBOL";
  var peg$c166 = "CREATE_SYMBOL";
  var peg$c167 = "CROSS_SYMBOL";
  var peg$c168 = "CUBE_SYMBOL";
  var peg$c169 = "CURDATE_SYMBOL";
  var peg$c170 = "CURRENT_DATE_SYMBOL";
  var peg$c171 = "CURRENT_TIME_SYMBOL";
  var peg$c172 = "CURRENT_TIMESTAMP_SYMBOL";
  var peg$c173 = "CURRENT_USER_SYMBOL";
  var peg$c174 = "CURRENT_SYMBOL";
  var peg$c175 = "CURSOR_SYMBOL";
  var peg$c176 = "CURSOR_NAME_SYMBOL";
  var peg$c177 = "CURTIME_SYMBOL";
  var peg$c178 = "DATABASE_SYMBOL";
  var peg$c179 = "DATABASES_SYMBOL";
  var peg$c180 = "DATAFILE_SYMBOL";
  var peg$c181 = "DATA_SYMBOL";
  var peg$c182 = "DATE_ADD_SYMBOL";
  var peg$c183 = "DATE_SUB_SYMBOL";
  var peg$c184 = "DAY_HOUR_SYMBOL";
  var peg$c185 = "DAY_MICROSECOND_SYMBOL";
  var peg$c186 = "DAY_MINUTE_SYMBOL";
  var peg$c187 = "DAY_SECOND_SYMBOL";
  var peg$c188 = "DAY_SYMBOL";
  var peg$c189 = "DAYOFMONTH_SYMBOL";
  var peg$c190 = "DEALLOCATE_SYMBOL";
  var peg$c191 = "DEC_SYMBOL";
  var peg$c192 = "DECLARE_SYMBOL";
  var peg$c193 = "DEFAULT_SYMBOL";
  var peg$c194 = "DEFAULT_AUTH_SYMBOL";
  var peg$c195 = "DEFINER_SYMBOL";
  var peg$c196 = "DELAYED_SYMBOL";
  var peg$c197 = "DELAY_KEY_WRITE_SYMBOL";
  var peg$c198 = "DELETE_SYMBOL";
  var peg$c199 = "DESC_SYMBOL";
  var peg$c200 = "DESCRIBE_SYMBOL";
  var peg$c201 = "DES_KEY_FILE_SYMBOL";
  var peg$c202 = "DETERMINISTIC_SYMBOL";
  var peg$c203 = "DIAGNOSTICS_SYMBOL";
  var peg$c204 = "DIRECTORY_SYMBOL";
  var peg$c205 = "DISABLE_SYMBOL";
  var peg$c206 = "DISCARD_SYMBOL";
  var peg$c207 = "DISK_SYMBOL";
  var peg$c208 = "DISTINCT_SYMBOL";
  var peg$c209 = "DISTINCTROW_SYMBOL";
  var peg$c210 = "DIV_SYMBOL";
  var peg$c211 = "DO_SYMBOL";
  var peg$c212 = "DROP_SYMBOL";
  var peg$c213 = "DUAL_SYMBOL";
  var peg$c214 = "DUMPFILE_SYMBOL";
  var peg$c215 = "DUPLICATE_SYMBOL";
  var peg$c216 = "DYNAMIC_SYMBOL";
  var peg$c217 = "EACH_SYMBOL";
  var peg$c218 = "ELSE_SYMBOL";
  var peg$c219 = "ELSEIF_SYMBOL";
  var peg$c220 = "EMPTY_SYMBOL";
  var peg$c221 = "ENABLE_SYMBOL";
  var peg$c222 = "ENCLOSED_SYMBOL";
  var peg$c223 = "ENCRYPTION_SYMBOL";
  var peg$c224 = "END_SYMBOL";
  var peg$c225 = "ENDS_SYMBOL";
  var peg$c226 = "ENFORCED_SYMBOL";
  var peg$c227 = "ENGINES_SYMBOL";
  var peg$c228 = "ENGINE_SYMBOL";
  var peg$c229 = "ERROR_SYMBOL";
  var peg$c230 = "ERRORS_SYMBOL";
  var peg$c231 = "ESCAPED_SYMBOL";
  var peg$c232 = "ESCAPE_SYMBOL";
  var peg$c233 = "EVENT_SYMBOL";
  var peg$c234 = "EVENTS_SYMBOL";
  var peg$c235 = "EVERY_SYMBOL";
  var peg$c236 = "EXCHANGE_SYMBOL";
  var peg$c237 = "EXCEPT_SYMBOL";
  var peg$c238 = "EXECUTE_SYMBOL";
  var peg$c239 = "EXISTS_SYMBOL";
  var peg$c240 = "EXIT_SYMBOL";
  var peg$c241 = "EXPANSION_SYMBOL";
  var peg$c242 = "EXPIRE_SYMBOL";
  var peg$c243 = "EXPLAIN_SYMBOL";
  var peg$c244 = "EXPORT_SYMBOL";
  var peg$c245 = "EXTENDED_SYMBOL";
  var peg$c246 = "EXTENT_SIZE_SYMBOL";
  var peg$c247 = "EXTRACT_SYMBOL";
  var peg$c248 = "FALSE_SYMBOL";
  var peg$c249 = "FAST_SYMBOL";
  var peg$c250 = "FAULTS_SYMBOL";
  var peg$c251 = "FETCH_SYMBOL";
  var peg$c252 = "FIELDS_SYMBOL";
  var peg$c253 = "FILE_BLOCK_SIZE_SYMBOL";
  var peg$c254 = "FILE_SYMBOL";
  var peg$c255 = "FILTER_SYMBOL";
  var peg$c256 = "FIRST_SYMBOL";
  var peg$c257 = "FIRST_VALUE_SYMBOL";
  var peg$c258 = "FIXED_SYMBOL";
  var peg$c259 = "FLOAT4_SYMBOL";
  var peg$c260 = "FLOAT8_SYMBOL";
  var peg$c261 = "FLUSH_SYMBOL";
  var peg$c262 = "FOLLOWS_SYMBOL";
  var peg$c263 = "FORCE_SYMBOL";
  var peg$c264 = "FOREIGN_SYMBOL";
  var peg$c265 = "FOR_SYMBOL";
  var peg$c266 = "FORMAT_SYMBOL";
  var peg$c267 = "FOUND_SYMBOL";
  var peg$c268 = "FROM_SYMBOL";
  var peg$c269 = "FULLTEXT_SYMBOL";
  var peg$c270 = "FULL_SYMBOL";
  var peg$c271 = "FUNCTION_SYMBOL";
  var peg$c272 = "GENERATED_SYMBOL";
  var peg$c273 = "GENERAL_SYMBOL";
  var peg$c274 = "GET_FORMAT_SYMBOL";
  var peg$c275 = "GET_MASTER_PUBLIC_KEY_SYMBOL";
  var peg$c276 = "GLOBAL_SYMBOL";
  var peg$c277 = "GRANT_SYMBOL";
  var peg$c278 = "GRANTS_SYMBOL";
  var peg$c279 = "GROUP_CONCAT_SYMBOL";
  var peg$c280 = "GROUP_REPLICATION_SYMBOL";
  var peg$c281 = "GROUP_SYMBOL";
  var peg$c282 = "HANDLER_SYMBOL";
  var peg$c283 = "HASH_SYMBOL";
  var peg$c284 = "HAVING_SYMBOL";
  var peg$c285 = "HELP_SYMBOL";
  var peg$c286 = "HIGH_PRIORITY_SYMBOL";
  var peg$c287 = "HISTOGRAM_SYMBOL";
  var peg$c288 = "HISTORY_SYMBOL";
  var peg$c289 = "HOST_SYMBOL";
  var peg$c290 = "HOSTS_SYMBOL";
  var peg$c291 = "HOUR_MICROSECOND_SYMBOL";
  var peg$c292 = "HOUR_MINUTE_SYMBOL";
  var peg$c293 = "HOUR_SECOND_SYMBOL";
  var peg$c294 = "HOUR_SYMBOL";
  var peg$c295 = "IDENTIFIED_SYMBOL";
  var peg$c296 = "IF_SYMBOL";
  var peg$c297 = "IGNORE_SYMBOL";
  var peg$c298 = "IGNORE_SERVER_IDS_SYMBOL";
  var peg$c299 = "IMPORT_SYMBOL";
  var peg$c300 = "IN_SYMBOL";
  var peg$c301 = "INDEXES_SYMBOL";
  var peg$c302 = "INDEX_SYMBOL";
  var peg$c303 = "INFILE_SYMBOL";
  var peg$c304 = "INITIAL_SIZE_SYMBOL";
  var peg$c305 = "INNER_SYMBOL";
  var peg$c306 = "INOUT_SYMBOL";
  var peg$c307 = "INSENSITIVE_SYMBOL";
  var peg$c308 = "INSERT_SYMBOL";
  var peg$c309 = "INSERT_METHOD_SYMBOL";
  var peg$c310 = "INSTANCE_SYMBOL";
  var peg$c311 = "INSTALL_SYMBOL";
  var peg$c312 = "INTEGER_SYMBOL";
  var peg$c313 = "INTERVAL_SYMBOL";
  var peg$c314 = "INTO_SYMBOL";
  var peg$c315 = "INVISIBLE_SYMBOL";
  var peg$c316 = "INVOKER_SYMBOL";
  var peg$c317 = "IO_SYMBOL";
  var peg$c318 = "IPC_SYMBOL";
  var peg$c319 = "IS_SYMBOL";
  var peg$c320 = "ISOLATION_SYMBOL";
  var peg$c321 = "ISSUER_SYMBOL";
  var peg$c322 = "ITERATE_SYMBOL";
  var peg$c323 = "JOIN_SYMBOL";
  var peg$c324 = "JSON_TABLE_SYMBOL";
  var peg$c325 = "JSON_ARRAYAGG_SYMBOL";
  var peg$c326 = "JSON_OBJECTAGG_SYMBOL";
  var peg$c327 = "KEYS_SYMBOL";
  var peg$c328 = "KEY_BLOCK_SIZE_SYMBOL";
  var peg$c329 = "KEY_SYMBOL";
  var peg$c330 = "KILL_SYMBOL";
  var peg$c331 = "LANGUAGE_SYMBOL";
  var peg$c332 = "LAST_SYMBOL";
  var peg$c333 = "LAST_VALUE_SYMBOL";
  var peg$c334 = "LATERAL_SYMBOL";
  var peg$c335 = "LEAD_SYMBOL";
  var peg$c336 = "LEADING_SYMBOL";
  var peg$c337 = "LEAVE_SYMBOL";
  var peg$c338 = "LEAVES_SYMBOL";
  var peg$c339 = "LEFT_SYMBOL";
  var peg$c340 = "LESS_SYMBOL";
  var peg$c341 = "LEVEL_SYMBOL";
  var peg$c342 = "LIKE_SYMBOL";
  var peg$c343 = "LIMIT_SYMBOL";
  var peg$c344 = "LINEAR_SYMBOL";
  var peg$c345 = "LINES_SYMBOL";
  var peg$c346 = "LIST_SYMBOL";
  var peg$c347 = "LOAD_SYMBOL";
  var peg$c348 = "LOCALTIME_SYMBOL";
  var peg$c349 = "LOCALTIMESTAMP_SYMBOL";
  var peg$c350 = "LOCAL_SYMBOL";
  var peg$c351 = "LOCATOR_SYMBOL";
  var peg$c352 = "LOCK_SYMBOL";
  var peg$c353 = "LOCKS_SYMBOL";
  var peg$c354 = "LOGFILE_SYMBOL";
  var peg$c355 = "LOGS_SYMBOL";
  var peg$c356 = "LOOP_SYMBOL";
  var peg$c357 = "LOW_PRIORITY_SYMBOL";
  var peg$c358 = "MASTER_SYMBOL";
  var peg$c359 = "MASTER_AUTO_POSITION_SYMBOL";
  var peg$c360 = "MASTER_BIND_SYMBOL";
  var peg$c361 = "MASTER_CONNECT_RETRY_SYMBOL";
  var peg$c362 = "MASTER_DELAY_SYMBOL";
  var peg$c363 = "MASTER_HEARTBEAT_PERIOD_SYMBOL";
  var peg$c364 = "MASTER_HOST_SYMBOL";
  var peg$c365 = "NETWORK_NAMESPACE_SYMBOL";
  var peg$c366 = "MASTER_LOG_FILE_SYMBOL";
  var peg$c367 = "MASTER_LOG_POS_SYMBOL";
  var peg$c368 = "MASTER_PASSWORD_SYMBOL";
  var peg$c369 = "MASTER_PORT_SYMBOL";
  var peg$c370 = "MASTER_PUBLIC_KEY_PATH_SYMBOL";
  var peg$c371 = "MASTER_RETRY_COUNT_SYMBOL";
  var peg$c372 = "MASTER_SERVER_ID_SYMBOL";
  var peg$c373 = "MASTER_SSL_CAPATH_SYMBOL";
  var peg$c374 = "MASTER_SSL_CA_SYMBOL";
  var peg$c375 = "MASTER_SSL_CERT_SYMBOL";
  var peg$c376 = "MASTER_SSL_CIPHER_SYMBOL";
  var peg$c377 = "MASTER_SSL_CRL_SYMBOL";
  var peg$c378 = "MASTER_SSL_CRLPATH_SYMBOL";
  var peg$c379 = "MASTER_SSL_KEY_SYMBOL";
  var peg$c380 = "MASTER_SSL_SYMBOL";
  var peg$c381 = "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL";
  var peg$c382 = "MASTER_TLS_VERSION_SYMBOL";
  var peg$c383 = "MASTER_TLS_CIPHERSUITES_SYMBOL";
  var peg$c384 = "MASTER_USER_SYMBOL";
  var peg$c385 = "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL";
  var peg$c386 = "MATCH_SYMBOL";
  var peg$c387 = "MAX_CONNECTIONS_PER_HOUR_SYMBOL";
  var peg$c388 = "MAX_QUERIES_PER_HOUR_SYMBOL";
  var peg$c389 = "MAX_ROWS_SYMBOL";
  var peg$c390 = "MAX_SIZE_SYMBOL";
  var peg$c391 = "MAX_STATEMENT_TIME_SYMBOL";
  var peg$c392 = "MAX_UPDATES_PER_HOUR_SYMBOL";
  var peg$c393 = "MAX_USER_CONNECTIONS_SYMBOL";
  var peg$c394 = "MAXVALUE_SYMBOL";
  var peg$c395 = "MAX_SYMBOL";
  var peg$c396 = "MEDIUM_SYMBOL";
  var peg$c397 = "MEMBER_SYMBOL";
  var peg$c398 = "MEMORY_SYMBOL";
  var peg$c399 = "MERGE_SYMBOL";
  var peg$c400 = "MESSAGE_TEXT_SYMBOL";
  var peg$c401 = "MICROSECOND_SYMBOL";
  var peg$c402 = "MIDDLEINT_SYMBOL";
  var peg$c403 = "MIGRATE_SYMBOL";
  var peg$c404 = "MINUTE_MICROSECOND_SYMBOL";
  var peg$c405 = "MINUTE_SECOND_SYMBOL";
  var peg$c406 = "MINUTE_SYMBOL";
  var peg$c407 = "MIN_ROWS_SYMBOL";
  var peg$c408 = "MIN_SYMBOL";
  var peg$c409 = "MODE_SYMBOL";
  var peg$c410 = "MODIFIES_SYMBOL";
  var peg$c411 = "MODIFY_SYMBOL";
  var peg$c412 = "MOD_SYMBOL";
  var peg$c413 = "MONTH_SYMBOL";
  var peg$c414 = "MUTEX_SYMBOL";
  var peg$c415 = "MYSQL_ERRNO_SYMBOL";
  var peg$c416 = "NAME_SYMBOL";
  var peg$c417 = "NAMES_SYMBOL";
  var peg$c418 = "NATIONAL_SYMBOL";
  var peg$c419 = "NATURAL_SYMBOL";
  var peg$c420 = "NCHAR_SYMBOL";
  var peg$c421 = "NDBCLUSTER_SYMBOL";
  var peg$c422 = "NDB_SYMBOL";
  var peg$c423 = "NEG_SYMBOL";
  var peg$c424 = "NESTED_SYMBOL";
  var peg$c425 = "NEVER_SYMBOL";
  var peg$c426 = "NEW_SYMBOL";
  var peg$c427 = "NEXT_SYMBOL";
  var peg$c428 = "NODEGROUP_SYMBOL";
  var peg$c429 = "NONE_SYMBOL";
  var peg$c430 = "NONBLOCKING_SYMBOL";
  var peg$c431 = "NOT_SYMBOL";
  var peg$c432 = "NOWAIT_SYMBOL";
  var peg$c433 = "NO_WAIT_SYMBOL";
  var peg$c434 = "NO_WRITE_TO_BINLOG_SYMBOL";
  var peg$c435 = "NULL_SYMBOL";
  var peg$c436 = "NULLS_SYMBOL";
  var peg$c437 = "NUMBER_SYMBOL";
  var peg$c438 = "NVARCHAR_SYMBOL";
  var peg$c439 = "NTH_VALUE_SYMBOL";
  var peg$c440 = "NTILE_SYMBOL";
  var peg$c441 = "OF_SYMBOL";
  var peg$c442 = "OFF_SYMBOL";
  var peg$c443 = "OFFLINE_SYMBOL";
  var peg$c444 = "OFFSET_SYMBOL";
  var peg$c445 = "OJ_SYMBOL";
  var peg$c446 = "OLD_PASSWORD_SYMBOL";
  var peg$c447 = "OLD_SYMBOL";
  var peg$c448 = "ON_SYMBOL";
  var peg$c449 = "ONLINE_SYMBOL";
  var peg$c450 = "ONE_SYMBOL";
  var peg$c451 = "ONLY_SYMBOL";
  var peg$c452 = "OPEN_SYMBOL";
  var peg$c453 = "OPTIONAL_SYMBOL";
  var peg$c454 = "OPTIONALLY_SYMBOL";
  var peg$c455 = "OPTIONS_SYMBOL";
  var peg$c456 = "OPTION_SYMBOL";
  var peg$c457 = "OPTIMIZE_SYMBOL";
  var peg$c458 = "OPTIMIZER_COSTS_SYMBOL";
  var peg$c459 = "ORDER_SYMBOL";
  var peg$c460 = "ORDINALITY_SYMBOL";
  var peg$c461 = "ORGANIZATION_SYMBOL";
  var peg$c462 = "OR_SYMBOL";
  var peg$c463 = "OTHERS_SYMBOL";
  var peg$c464 = "OUTER_SYMBOL";
  var peg$c465 = "OUTFILE_SYMBOL";
  var peg$c466 = "OUT_SYMBOL";
  var peg$c467 = "OWNER_SYMBOL";
  var peg$c468 = "PACK_KEYS_SYMBOL";
  var peg$c469 = "PAGE_SYMBOL";
  var peg$c470 = "PARSER_SYMBOL";
  var peg$c471 = "PARTIAL_SYMBOL";
  var peg$c472 = "PARTITIONING_SYMBOL";
  var peg$c473 = "PARTITIONS_SYMBOL";
  var peg$c474 = "PARTITION_SYMBOL";
  var peg$c475 = "PASSWORD_SYMBOL";
  var peg$c476 = "PATH_SYMBOL";
  var peg$c477 = "PERCENT_RANK_SYMBOL";
  var peg$c478 = "PERSIST_SYMBOL";
  var peg$c479 = "PERSIST_ONLY_SYMBOL";
  var peg$c480 = "PHASE_SYMBOL";
  var peg$c481 = "PLUGIN_SYMBOL";
  var peg$c482 = "PLUGINS_SYMBOL";
  var peg$c483 = "PLUGIN_DIR_SYMBOL";
  var peg$c484 = "PORT_SYMBOL";
  var peg$c485 = "POSITION_SYMBOL";
  var peg$c486 = "PRECEDES_SYMBOL";
  var peg$c487 = "PRECEDING_SYMBOL";
  var peg$c488 = "PRECISION_SYMBOL";
  var peg$c489 = "PREPARE_SYMBOL";
  var peg$c490 = "PRESERVE_SYMBOL";
  var peg$c491 = "PREV_SYMBOL";
  var peg$c492 = "PRIMARY_SYMBOL";
  var peg$c493 = "PRIVILEGES_SYMBOL";
  var peg$c494 = "PRIVILEGE_CHECKS_USER_SYMBOL";
  var peg$c495 = "PROCEDURE_SYMBOL";
  var peg$c496 = "PROCESS_SYMBOL";
  var peg$c497 = "PROCESSLIST_SYMBOL";
  var peg$c498 = "PROFILES_SYMBOL";
  var peg$c499 = "PROFILE_SYMBOL";
  var peg$c500 = "PROXY_SYMBOL";
  var peg$c501 = "PURGE_SYMBOL";
  var peg$c502 = "QUARTER_SYMBOL";
  var peg$c503 = "QUERY_SYMBOL";
  var peg$c504 = "QUICK_SYMBOL";
  var peg$c505 = "RANDOM_SYMBOL";
  var peg$c506 = "RANGE_SYMBOL";
  var peg$c507 = "RANK_SYMBOL";
  var peg$c508 = "READS_SYMBOL";
  var peg$c509 = "READ_ONLY_SYMBOL";
  var peg$c510 = "READ_SYMBOL";
  var peg$c511 = "READ_WRITE_SYMBOL";
  var peg$c512 = "REBUILD_SYMBOL";
  var peg$c513 = "RECOVER_SYMBOL";
  var peg$c514 = "REDOFILE_SYMBOL";
  var peg$c515 = "REDO_BUFFER_SIZE_SYMBOL";
  var peg$c516 = "REDUNDANT_SYMBOL";
  var peg$c517 = "REFERENCES_SYMBOL";
  var peg$c518 = "RECURSIVE_SYMBOL";
  var peg$c519 = "REGEXP_SYMBOL";
  var peg$c520 = "RELAYLOG_SYMBOL";
  var peg$c521 = "RELAY_SYMBOL";
  var peg$c522 = "RELAY_LOG_FILE_SYMBOL";
  var peg$c523 = "RELAY_LOG_POS_SYMBOL";
  var peg$c524 = "RELAY_THREAD_SYMBOL";
  var peg$c525 = "RELEASE_SYMBOL";
  var peg$c526 = "RELOAD_SYMBOL";
  var peg$c527 = "REMOTE_SYMBOL";
  var peg$c528 = "REMOVE_SYMBOL";
  var peg$c529 = "RENAME_SYMBOL";
  var peg$c530 = "REORGANIZE_SYMBOL";
  var peg$c531 = "REPAIR_SYMBOL";
  var peg$c532 = "REPEAT_SYMBOL";
  var peg$c533 = "REPEATABLE_SYMBOL";
  var peg$c534 = "REPLACE_SYMBOL";
  var peg$c535 = "REPLICATION_SYMBOL";
  var peg$c536 = "REPLICATE_DO_DB_SYMBOL";
  var peg$c537 = "REPLICATE_IGNORE_DB_SYMBOL";
  var peg$c538 = "REPLICATE_DO_TABLE_SYMBOL";
  var peg$c539 = "REPLICATE_IGNORE_TABLE_SYMBOL";
  var peg$c540 = "REPLICATE_WILD_DO_TABLE_SYMBOL";
  var peg$c541 = "REPLICATE_WILD_IGNORE_TABLE_SYMBOL";
  var peg$c542 = "REPLICATE_REWRITE_DB_SYMBOL";
  var peg$c543 = "REQUIRE_SYMBOL";
  var peg$c544 = "REQUIRE_ROW_FORMAT_SYMBOL";
  var peg$c545 = "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL";
  var peg$c546 = "RESET_SYMBOL";
  var peg$c547 = "RESIGNAL_SYMBOL";
  var peg$c548 = "RESOURCE_SYMBOL";
  var peg$c549 = "RESPECT_SYMBOL";
  var peg$c550 = "RESTART_SYMBOL";
  var peg$c551 = "RESTORE_SYMBOL";
  var peg$c552 = "RESTRICT_SYMBOL";
  var peg$c553 = "RESUME_SYMBOL";
  var peg$c554 = "RETAIN_SYMBOL";
  var peg$c555 = "RETURNED_SQLSTATE_SYMBOL";
  var peg$c556 = "RETURNS_SYMBOL";
  var peg$c557 = "REUSE_SYMBOL";
  var peg$c558 = "REVERSE_SYMBOL";
  var peg$c559 = "REVOKE_SYMBOL";
  var peg$c560 = "RIGHT_SYMBOL";
  var peg$c561 = "RLIKE_SYMBOL";
  var peg$c562 = "ROLE_SYMBOL";
  var peg$c563 = "ROLLBACK_SYMBOL";
  var peg$c564 = "ROLLUP_SYMBOL";
  var peg$c565 = "ROTATE_SYMBOL";
  var peg$c566 = "ROW_SYMBOL";
  var peg$c567 = "ROWS_SYMBOL";
  var peg$c568 = "ROW_COUNT_SYMBOL";
  var peg$c569 = "ROW_FORMAT_SYMBOL";
  var peg$c570 = "ROW_NUMBER_SYMBOL";
  var peg$c571 = "RTREE_SYMBOL";
  var peg$c572 = "SAVEPOINT_SYMBOL";
  var peg$c573 = "SCHEMA_SYMBOL";
  var peg$c574 = "SCHEMAS_SYMBOL";
  var peg$c575 = "SCHEMA_NAME_SYMBOL";
  var peg$c576 = "SCHEDULE_SYMBOL";
  var peg$c577 = "SECOND_MICROSECOND_SYMBOL";
  var peg$c578 = "SECOND_SYMBOL";
  var peg$c579 = "SECONDARY_SYMBOL";
  var peg$c580 = "SECONDARY_ENGINE_SYMBOL";
  var peg$c581 = "SECONDARY_LOAD_SYMBOL";
  var peg$c582 = "SECONDARY_UNLOAD_SYMBOL";
  var peg$c583 = "SECURITY_SYMBOL";
  var peg$c584 = "SELECT_SYMBOL";
  var peg$c585 = "SENSITIVE_SYMBOL";
  var peg$c586 = "SEPARATOR_SYMBOL";
  var peg$c587 = "SERIALIZABLE_SYMBOL";
  var peg$c588 = "SERIAL_SYMBOL";
  var peg$c589 = "SERVER_SYMBOL";
  var peg$c590 = "SERVER_OPTIONS_SYMBOL";
  var peg$c591 = "SESSION_SYMBOL";
  var peg$c592 = "SESSION_USER_SYMBOL";
  var peg$c593 = "SET_VAR_SYMBOL";
  var peg$c594 = "SHARE_SYMBOL";
  var peg$c595 = "SHOW_SYMBOL";
  var peg$c596 = "SHUTDOWN_SYMBOL";
  var peg$c597 = "SIGNAL_SYMBOL";
  var peg$c598 = "SIGNED_SYMBOL";
  var peg$c599 = "SIMPLE_SYMBOL";
  var peg$c600 = "SKIP_SYMBOL";
  var peg$c601 = "SLAVE_SYMBOL";
  var peg$c602 = "SLOW_SYMBOL";
  var peg$c603 = "SNAPSHOT_SYMBOL";
  var peg$c604 = "SOME_SYMBOL";
  var peg$c605 = "SOCKET_SYMBOL";
  var peg$c606 = "SONAME_SYMBOL";
  var peg$c607 = "SOUNDS_SYMBOL";
  var peg$c608 = "SOURCE_SYMBOL";
  var peg$c609 = "SPATIAL_SYMBOL";
  var peg$c610 = "SQL_SYMBOL";
  var peg$c611 = "SQLEXCEPTION_SYMBOL";
  var peg$c612 = "SQLSTATE_SYMBOL";
  var peg$c613 = "SQLWARNING_SYMBOL";
  var peg$c614 = "SQL_AFTER_GTIDS_SYMBOL";
  var peg$c615 = "SQL_AFTER_MTS_GAPS_SYMBOL";
  var peg$c616 = "SQL_BEFORE_GTIDS_SYMBOL";
  var peg$c617 = "SQL_BIG_RESULT_SYMBOL";
  var peg$c618 = "SQL_BUFFER_RESULT_SYMBOL";
  var peg$c619 = "SQL_CALC_FOUND_ROWS_SYMBOL";
  var peg$c620 = "SQL_CACHE_SYMBOL";
  var peg$c621 = "SQL_NO_CACHE_SYMBOL";
  var peg$c622 = "SQL_SMALL_RESULT_SYMBOL";
  var peg$c623 = "SQL_THREAD_SYMBOL";
  var peg$c624 = "SQL_TSI_DAY_SYMBOL";
  var peg$c625 = "SQL_TSI_HOUR_SYMBOL";
  var peg$c626 = "SQL_TSI_MICROSECOND_SYMBOL";
  var peg$c627 = "SQL_TSI_MINUTE_SYMBOL";
  var peg$c628 = "SQL_TSI_MONTH_SYMBOL";
  var peg$c629 = "SQL_TSI_QUARTER_SYMBOL";
  var peg$c630 = "SQL_TSI_SECOND_SYMBOL";
  var peg$c631 = "SQL_TSI_WEEK_SYMBOL";
  var peg$c632 = "SQL_TSI_YEAR_SYMBOL";
  var peg$c633 = "SRID_SYMBOL";
  var peg$c634 = "SSL_SYMBOL";
  var peg$c635 = "STACKED_SYMBOL";
  var peg$c636 = "STARTING_SYMBOL";
  var peg$c637 = "STARTS_SYMBOL";
  var peg$c638 = "STATS_AUTO_RECALC_SYMBOL";
  var peg$c639 = "STATS_PERSISTENT_SYMBOL";
  var peg$c640 = "STATS_SAMPLE_PAGES_SYMBOL";
  var peg$c641 = "STATUS_SYMBOL";
  var peg$c642 = "STD_SYMBOL";
  var peg$c643 = "STDDEV_POP_SYMBOL";
  var peg$c644 = "STDDEV_SAMP_SYMBOL";
  var peg$c645 = "STDDEV_SYMBOL";
  var peg$c646 = "STOP_SYMBOL";
  var peg$c647 = "STORAGE_SYMBOL";
  var peg$c648 = "STORED_SYMBOL";
  var peg$c649 = "STRAIGHT_JOIN_SYMBOL";
  var peg$c650 = "STREAM_SYMBOL";
  var peg$c651 = "STRING_SYMBOL";
  var peg$c652 = "SUBCLASS_ORIGIN_SYMBOL";
  var peg$c653 = "SUBDATE_SYMBOL";
  var peg$c654 = "SUBJECT_SYMBOL";
  var peg$c655 = "SUBPARTITIONS_SYMBOL";
  var peg$c656 = "SUBPARTITION_SYMBOL";
  var peg$c657 = "SUBSTR_SYMBOL";
  var peg$c658 = "SUBSTRING_SYMBOL";
  var peg$c659 = "SUM_SYMBOL";
  var peg$c660 = "SUPER_SYMBOL";
  var peg$c661 = "SUSPEND_SYMBOL";
  var peg$c662 = "SWAPS_SYMBOL";
  var peg$c663 = "SWITCHES_SYMBOL";
  var peg$c664 = "SYSDATE_SYMBOL";
  var peg$c665 = "SYSTEM_SYMBOL";
  var peg$c666 = "SYSTEM_USER_SYMBOL";
  var peg$c667 = "TABLE_SYMBOL";
  var peg$c668 = "TABLES_SYMBOL";
  var peg$c669 = "TABLESPACE_SYMBOL";
  var peg$c670 = "TABLE_CHECKSUM_SYMBOL";
  var peg$c671 = "TABLE_NAME_SYMBOL";
  var peg$c672 = "TEMPORARY_SYMBOL";
  var peg$c673 = "TEMPTABLE_SYMBOL";
  var peg$c674 = "TERMINATED_SYMBOL";
  var peg$c675 = "THAN_SYMBOL";
  var peg$c676 = "THEN_SYMBOL";
  var peg$c677 = "THREAD_PRIORITY_SYMBOL";
  var peg$c678 = "TIES_SYMBOL";
  var peg$c679 = "TIMESTAMP_ADD_SYMBOL";
  var peg$c680 = "TIMESTAMP_DIFF_SYMBOL";
  var peg$c681 = "TO_SYMBOL";
  var peg$c682 = "TRAILING_SYMBOL";
  var peg$c683 = "TRANSACTION_SYMBOL";
  var peg$c684 = "TRIGGER_SYMBOL";
  var peg$c685 = "TRIGGERS_SYMBOL";
  var peg$c686 = "TRIM_SYMBOL";
  var peg$c687 = "TRUE_SYMBOL";
  var peg$c688 = "TRUNCATE_SYMBOL";
  var peg$c689 = "TYPES_SYMBOL";
  var peg$c690 = "TYPE_SYMBOL";
  var peg$c691 = "UDF_RETURNS_SYMBOL";
  var peg$c692 = "UNBOUNDED_SYMBOL";
  var peg$c693 = "UNCOMMITTED_SYMBOL";
  var peg$c694 = "UNDEFINED_SYMBOL";
  var peg$c695 = "UNDO_BUFFER_SIZE_SYMBOL";
  var peg$c696 = "UNDOFILE_SYMBOL";
  var peg$c697 = "UNDO_SYMBOL";
  var peg$c698 = "UNICODE_SYMBOL";
  var peg$c699 = "UNION_SYMBOL";
  var peg$c700 = "UNIQUE_SYMBOL";
  var peg$c701 = "UNKNOWN_SYMBOL";
  var peg$c702 = "UNINSTALL_SYMBOL";
  var peg$c703 = "UNSIGNED_SYMBOL";
  var peg$c704 = "UPDATE_SYMBOL";
  var peg$c705 = "UPGRADE_SYMBOL";
  var peg$c706 = "USAGE_SYMBOL";
  var peg$c707 = "USER_RESOURCES_SYMBOL";
  var peg$c708 = "USER_SYMBOL";
  var peg$c709 = "USE_FRM_SYMBOL";
  var peg$c710 = "USE_SYMBOL";
  var peg$c711 = "USING_SYMBOL";
  var peg$c712 = "UTC_DATE_SYMBOL";
  var peg$c713 = "UTC_TIME_SYMBOL";
  var peg$c714 = "UTC_TIMESTAMP_SYMBOL";
  var peg$c715 = "VALIDATION_SYMBOL";
  var peg$c716 = "VALUE_SYMBOL";
  var peg$c717 = "VALUES_SYMBOL";
  var peg$c718 = "VARCHARACTER_SYMBOL";
  var peg$c719 = "VARIABLES_SYMBOL";
  var peg$c720 = "VARIANCE_SYMBOL";
  var peg$c721 = "VARYING_SYMBOL";
  var peg$c722 = "VAR_POP_SYMBOL";
  var peg$c723 = "VAR_SAMP_SYMBOL";
  var peg$c724 = "VCPU_SYMBOL";
  var peg$c725 = "VIEW_SYMBOL";
  var peg$c726 = "VIRTUAL_SYMBOL";
  var peg$c727 = "VISIBLE_SYMBOL";
  var peg$c728 = "WAIT_SYMBOL";
  var peg$c729 = "WARNINGS_SYMBOL";
  var peg$c730 = "WEEK_SYMBOL";
  var peg$c731 = "WHEN_SYMBOL";
  var peg$c732 = "WEIGHT_STRING_SYMBOL";
  var peg$c733 = "WHERE_SYMBOL";
  var peg$c734 = "WHILE_SYMBOL";
  var peg$c735 = "WINDOW_SYMBOL";
  var peg$c736 = "WITH_SYMBOL";
  var peg$c737 = "WITHOUT_SYMBOL";
  var peg$c738 = "WORK_SYMBOL";
  var peg$c739 = "WRAPPER_SYMBOL";
  var peg$c740 = "WRITE_SYMBOL";
  var peg$c741 = "XA_SYMBOL";
  var peg$c742 = "X509_SYMBOL";
  var peg$c743 = "XID_SYMBOL";
  var peg$c744 = "XML_SYMBOL";
  var peg$c745 = "XOR_SYMBOL";
  var peg$c746 = "YEAR_MONTH_SYMBOL";
  var peg$c747 = "ZEROFILL_SYMBOL";
  var peg$c748 = "INT1_SYMBOL";
  var peg$c749 = "INT2_SYMBOL";
  var peg$c750 = "INT3_SYMBOL";
  var peg$c751 = "INT4_SYMBOL";
  var peg$c752 = "INT8_SYMBOL";
  var peg$c753 = "IDENTIFIER";
  var peg$c754 = "BACK_TICK_QUOTED_ID";
  var peg$c755 = "DOUBLE_QUOTED_TEXT";
  var peg$c756 = "SINGLE_QUOTED_TEXT";
  var peg$c757 = "HEX_NUMBER";
  var peg$c758 = "BIN_NUMBER";
  var peg$c759 = "DECIMAL_NUMBER";
  var peg$c760 = "INT_NUMBER";
  var peg$c761 = "FLOAT_NUMBER";
  var peg$c762 = "UNDERSCORE_CHARSET";
  var peg$c763 = "DOT_IDENTIFIER";
  var peg$c764 = "INVALID_INPUT";
  var peg$c765 = "LINEBREAK";
  var peg$c766 = "START_SYMBOL";
  var peg$c767 = "UNLOCK_SYMBOL";
  var peg$c768 = "CLONE_SYMBOL";
  var peg$c769 = "GET_SYMBOL";
  var peg$c770 = "ASCII_SYMBOL";
  var peg$c771 = "BIT_SYMBOL";
  var peg$c772 = "BUCKETS_SYMBOL";
  var peg$c773 = "COMPONENT_SYMBOL";
  var peg$c774 = "NOW_SYMBOL";
  var peg$c775 = "DEFINITION_SYMBOL";
  var peg$c776 = "DENSE_RANK_SYMBOL";
  var peg$c777 = "DESCRIPTION_SYMBOL";
  var peg$c778 = "FAILED_LOGIN_ATTEMPTS_SYMBOL";
  var peg$c779 = "FOLLOWING_SYMBOL";
  var peg$c780 = "GROUPING_SYMBOL";
  var peg$c781 = "GROUPS_SYMBOL";
  var peg$c782 = "LAG_SYMBOL";
  var peg$c783 = "LONG_SYMBOL";
  var peg$c784 = "MASTER_COMPRESSION_ALGORITHM_SYMBOL";
  var peg$c785 = "NOT2_SYMBOL";
  var peg$c786 = "NO_SYMBOL";
  var peg$c787 = "REFERENCE_SYMBOL";
  var peg$c788 = "RETURN_SYMBOL";
  var peg$c789 = "SPECIFIC_SYMBOL";
  var peg$c790 = "AUTHORS_SYMBOL";
  var peg$c791 = "ADDDATE_SYMBOL";
  var peg$c792 = "CONCAT_PIPES_SYMBOL";
  var peg$c793 = "ACTIVE_SYMBOL";
  var peg$c794 = "ADMIN_SYMBOL";
  var peg$c795 = "EXCLUDE_SYMBOL";
  var peg$c796 = "INACTIVE_SYMBOL";
  var peg$c797 = "LOCKED_SYMBOL";
  var peg$c798 = "ROUTINE_SYMBOL";
  var peg$c799 = "UNTIL_SYMBOL";
  var peg$c800 = "ARRAY_SYMBOL";
  var peg$c801 = "PASSWORD_LOCK_TIME_SYMBOL";
  var peg$c802 = "NCHAR_TEXT";
  var peg$c803 = "LONG_NUMBER";
  var peg$c804 = "ULONGLONG_NUMBER";
  var peg$c805 = "CUME_DIST_SYMBO";
  var peg$c806 = "CUME_DIST_SYMBOL";
  var peg$c807 = "FOUND_ROWS_SYMBOL";
  var peg$c808 = "CONCAT_SYMBOL";
  var peg$c809 = "EOF";


  var peg$e0 = peg$literalExpectation("EQUAL_OPERATOR", false);
  var peg$e1 = peg$literalExpectation("ASSIGN_OPERATOR", false);
  var peg$e2 = peg$literalExpectation("NULL_SAFE_EQUAL_OPERATOR", false);
  var peg$e3 = peg$literalExpectation("GREATER_OR_EQUAL_OPERATOR", false);
  var peg$e4 = peg$literalExpectation("GREATER_THAN_OPERATOR", false);
  var peg$e5 = peg$literalExpectation("LESS_OR_EQUAL_OPERATOR", false);
  var peg$e6 = peg$literalExpectation("LESS_THAN_OPERATOR", false);
  var peg$e7 = peg$literalExpectation("NOT_EQUAL_OPERATOR", false);
  var peg$e8 = peg$literalExpectation("PLUS_OPERATOR", false);
  var peg$e9 = peg$literalExpectation("MINUS_OPERATOR", false);
  var peg$e10 = peg$literalExpectation("MULT_OPERATOR", false);
  var peg$e11 = peg$literalExpectation("DIV_OPERATOR", false);
  var peg$e12 = peg$literalExpectation("MOD_OPERATOR", false);
  var peg$e13 = peg$literalExpectation("LOGICAL_NOT_OPERATOR", false);
  var peg$e14 = peg$literalExpectation("BITWISE_NOT_OPERATOR", false);
  var peg$e15 = peg$literalExpectation("SHIFT_LEFT_OPERATOR", false);
  var peg$e16 = peg$literalExpectation("SHIFT_RIGHT_OPERATOR", false);
  var peg$e17 = peg$literalExpectation("LOGICAL_AND_OPERATOR", false);
  var peg$e18 = peg$literalExpectation("BITWISE_AND_OPERATOR", false);
  var peg$e19 = peg$literalExpectation("BITWISE_XOR_OPERATOR", false);
  var peg$e20 = peg$literalExpectation("LOGICAL_OR_OPERATOR", false);
  var peg$e21 = peg$literalExpectation("BITWISE_OR_OPERATOR", false);
  var peg$e22 = peg$literalExpectation("DOT_SYMBOL", false);
  var peg$e23 = peg$literalExpectation("COMMA_SYMBOL", false);
  var peg$e24 = peg$literalExpectation("SEMICOLON_SYMBOL", false);
  var peg$e25 = peg$literalExpectation("COLON_SYMBOL", false);
  var peg$e26 = peg$literalExpectation("OPEN_PAR_SYMBOL", false);
  var peg$e27 = peg$literalExpectation("CLOSE_PAR_SYMBOL", false);
  var peg$e28 = peg$literalExpectation("OPEN_CURLY_SYMBOL", false);
  var peg$e29 = peg$literalExpectation("CLOSE_CURLY_SYMBOL", false);
  var peg$e30 = peg$literalExpectation("UNDERLINE_SYMBOL", false);
  var peg$e31 = peg$literalExpectation("JSON_SEPARATOR_SYMBOL", false);
  var peg$e32 = peg$literalExpectation("JSON_UNQUOTED_SEPARATOR_SYMBOL", false);
  var peg$e33 = peg$literalExpectation("AT_SIGN_SYMBOL", false);
  var peg$e34 = peg$literalExpectation("AT_TEXT_SUFFIX", false);
  var peg$e35 = peg$literalExpectation("AT_AT_SIGN_SYMBOL", false);
  var peg$e36 = peg$literalExpectation("NULL2_SYMBOL", false);
  var peg$e37 = peg$literalExpectation("PARAM_MARKER", false);
  var peg$e38 = peg$literalExpectation("INT_SYMBOL", false);
  var peg$e39 = peg$literalExpectation("TINYINT_SYMBOL", false);
  var peg$e40 = peg$literalExpectation("SMALLINT_SYMBOL", false);
  var peg$e41 = peg$literalExpectation("MEDIUMINT_SYMBOL", false);
  var peg$e42 = peg$literalExpectation("BIGINT_SYMBOL", false);
  var peg$e43 = peg$literalExpectation("REAL_SYMBOL", false);
  var peg$e44 = peg$literalExpectation("DOUBLE_SYMBOL", false);
  var peg$e45 = peg$literalExpectation("FLOAT_SYMBOL", false);
  var peg$e46 = peg$literalExpectation("DECIMAL_SYMBOL", false);
  var peg$e47 = peg$literalExpectation("NUMERIC_SYMBOL", false);
  var peg$e48 = peg$literalExpectation("DATE_SYMBOL", false);
  var peg$e49 = peg$literalExpectation("TIME_SYMBOL", false);
  var peg$e50 = peg$literalExpectation("TIMESTAMP_SYMBOL", false);
  var peg$e51 = peg$literalExpectation("DATETIME_SYMBOL", false);
  var peg$e52 = peg$literalExpectation("YEAR_SYMBOL", false);
  var peg$e53 = peg$literalExpectation("CHAR_SYMBOL", false);
  var peg$e54 = peg$literalExpectation("VARCHAR_SYMBOL", false);
  var peg$e55 = peg$literalExpectation("BINARY_SYMBOL", false);
  var peg$e56 = peg$literalExpectation("VARBINARY_SYMBOL", false);
  var peg$e57 = peg$literalExpectation("TINYBLOB_SYMBOL", false);
  var peg$e58 = peg$literalExpectation("BLOB_SYMBOL", false);
  var peg$e59 = peg$literalExpectation("MEDIUMBLOB_SYMBOL", false);
  var peg$e60 = peg$literalExpectation("LONGBLOB_SYMBOL", false);
  var peg$e61 = peg$literalExpectation("TINYTEXT_SYMBOL", false);
  var peg$e62 = peg$literalExpectation("TEXT_SYMBOL", false);
  var peg$e63 = peg$literalExpectation("MEDIUMTEXT_SYMBOL", false);
  var peg$e64 = peg$literalExpectation("LONGTEXT_SYMBOL", false);
  var peg$e65 = peg$literalExpectation("ENUM_SYMBOL", false);
  var peg$e66 = peg$literalExpectation("SET_SYMBOL", false);
  var peg$e67 = peg$literalExpectation("JSON_SYMBOL", false);
  var peg$e68 = peg$literalExpectation("GEOMETRY_SYMBOL", false);
  var peg$e69 = peg$literalExpectation("POINT_SYMBOL", false);
  var peg$e70 = peg$literalExpectation("LINESTRING_SYMBOL", false);
  var peg$e71 = peg$literalExpectation("POLYGON_SYMBOL", false);
  var peg$e72 = peg$literalExpectation("GEOMETRYCOLLECTION_SYMBOL", false);
  var peg$e73 = peg$literalExpectation("MULTIPOINT_SYMBOL", false);
  var peg$e74 = peg$literalExpectation("MULTILINESTRING_SYMBOL", false);
  var peg$e75 = peg$literalExpectation("MULTIPOLYGON_SYMBOL", false);
  var peg$e76 = peg$literalExpectation("ACCESSIBLE_SYMBOL", false);
  var peg$e77 = peg$literalExpectation("ACCOUNT_SYMBOL", false);
  var peg$e78 = peg$literalExpectation("ACTION_SYMBOL", false);
  var peg$e79 = peg$literalExpectation("ADD_SYMBOL", false);
  var peg$e80 = peg$literalExpectation("AFTER_SYMBOL", false);
  var peg$e81 = peg$literalExpectation("AGAINST_SYMBOL", false);
  var peg$e82 = peg$literalExpectation("AGGREGATE_SYMBOL", false);
  var peg$e83 = peg$literalExpectation("ALGORITHM_SYMBOL", false);
  var peg$e84 = peg$literalExpectation("ALL_SYMBOL", false);
  var peg$e85 = peg$literalExpectation("ALTER_SYMBOL", false);
  var peg$e86 = peg$literalExpectation("ALWAYS_SYMBOL", false);
  var peg$e87 = peg$literalExpectation("ANALYSE_SYMBOL", false);
  var peg$e88 = peg$literalExpectation("ANALYZE_SYMBOL", false);
  var peg$e89 = peg$literalExpectation("AND_SYMBOL", false);
  var peg$e90 = peg$literalExpectation("ANY_SYMBOL", false);
  var peg$e91 = peg$literalExpectation("AS_SYMBOL", false);
  var peg$e92 = peg$literalExpectation("ASC_SYMBOL", false);
  var peg$e93 = peg$literalExpectation("ASENSITIVE_SYMBOL", false);
  var peg$e94 = peg$literalExpectation("AT_SYMBOL", false);
  var peg$e95 = peg$literalExpectation("AUTOEXTEND_SIZE_SYMBOL", false);
  var peg$e96 = peg$literalExpectation("AUTO_INCREMENT_SYMBOL", false);
  var peg$e97 = peg$literalExpectation("AVG_ROW_LENGTH_SYMBOL", false);
  var peg$e98 = peg$literalExpectation("AVG_SYMBOL", false);
  var peg$e99 = peg$literalExpectation("BACKUP_SYMBOL", false);
  var peg$e100 = peg$literalExpectation("BEFORE_SYMBOL", false);
  var peg$e101 = peg$literalExpectation("BEGIN_SYMBOL", false);
  var peg$e102 = peg$literalExpectation("BETWEEN_SYMBOL", false);
  var peg$e103 = peg$literalExpectation("BINLOG_SYMBOL", false);
  var peg$e104 = peg$literalExpectation("BIT_AND_SYMBOL", false);
  var peg$e105 = peg$literalExpectation("BIT_OR_SYMBOL", false);
  var peg$e106 = peg$literalExpectation("BIT_XOR_SYMBOL", false);
  var peg$e107 = peg$literalExpectation("BLOCK_SYMBOL", false);
  var peg$e108 = peg$literalExpectation("BOOL_SYMBOL", false);
  var peg$e109 = peg$literalExpectation("BOOLEAN_SYMBOL", false);
  var peg$e110 = peg$literalExpectation("BOTH_SYMBOL", false);
  var peg$e111 = peg$literalExpectation("BTREE_SYMBOL", false);
  var peg$e112 = peg$literalExpectation("BY_SYMBOL", false);
  var peg$e113 = peg$literalExpectation("BYTE_SYMBOL", false);
  var peg$e114 = peg$literalExpectation("CACHE_SYMBOL", false);
  var peg$e115 = peg$literalExpectation("CALL_SYMBOL", false);
  var peg$e116 = peg$literalExpectation("CASCADE_SYMBOL", false);
  var peg$e117 = peg$literalExpectation("CASCADED_SYMBOL", false);
  var peg$e118 = peg$literalExpectation("CASE_SYMBOL", false);
  var peg$e119 = peg$literalExpectation("CAST_SYMBOL", false);
  var peg$e120 = peg$literalExpectation("CATALOG_NAME_SYMBOL", false);
  var peg$e121 = peg$literalExpectation("CHAIN_SYMBOL", false);
  var peg$e122 = peg$literalExpectation("CHANGE_SYMBOL", false);
  var peg$e123 = peg$literalExpectation("CHANGED_SYMBOL", false);
  var peg$e124 = peg$literalExpectation("CHANNEL_SYMBOL", false);
  var peg$e125 = peg$literalExpectation("CHARSET_SYMBOL", false);
  var peg$e126 = peg$literalExpectation("CHARACTER_SYMBOL", false);
  var peg$e127 = peg$literalExpectation("CHECK_SYMBOL", false);
  var peg$e128 = peg$literalExpectation("CHECKSUM_SYMBOL", false);
  var peg$e129 = peg$literalExpectation("CIPHER_SYMBOL", false);
  var peg$e130 = peg$literalExpectation("CLASS_ORIGIN_SYMBOL", false);
  var peg$e131 = peg$literalExpectation("CLIENT_SYMBOL", false);
  var peg$e132 = peg$literalExpectation("CLOSE_SYMBOL", false);
  var peg$e133 = peg$literalExpectation("COALESCE_SYMBOL", false);
  var peg$e134 = peg$literalExpectation("CODE_SYMBOL", false);
  var peg$e135 = peg$literalExpectation("COLLATE_SYMBOL", false);
  var peg$e136 = peg$literalExpectation("COLLATION_SYMBOL", false);
  var peg$e137 = peg$literalExpectation("COLUMN_FORMAT_SYMBOL", false);
  var peg$e138 = peg$literalExpectation("COLUMN_NAME_SYMBOL", false);
  var peg$e139 = peg$literalExpectation("COLUMNS_SYMBOL", false);
  var peg$e140 = peg$literalExpectation("COLUMN_SYMBOL", false);
  var peg$e141 = peg$literalExpectation("COMMENT_SYMBOL", false);
  var peg$e142 = peg$literalExpectation("COMMITTED_SYMBOL", false);
  var peg$e143 = peg$literalExpectation("COMMIT_SYMBOL", false);
  var peg$e144 = peg$literalExpectation("COMPACT_SYMBOL", false);
  var peg$e145 = peg$literalExpectation("COMPLETION_SYMBOL", false);
  var peg$e146 = peg$literalExpectation("COMPRESSED_SYMBOL", false);
  var peg$e147 = peg$literalExpectation("COMPRESSION_SYMBOL", false);
  var peg$e148 = peg$literalExpectation("CONCURRENT_SYMBOL", false);
  var peg$e149 = peg$literalExpectation("CONDITION_SYMBOL", false);
  var peg$e150 = peg$literalExpectation("CONNECTION_SYMBOL", false);
  var peg$e151 = peg$literalExpectation("CONSISTENT_SYMBOL", false);
  var peg$e152 = peg$literalExpectation("CONSTRAINT_SYMBOL", false);
  var peg$e153 = peg$literalExpectation("CONSTRAINTS_SYMBOL", false);
  var peg$e154 = peg$literalExpectation("OVER_SYMBOL", false);
  var peg$e155 = peg$literalExpectation("REPLICA_SYMBOL", false);
  var peg$e156 = peg$literalExpectation("CONSTRAINT_CATALOG_SYMBOL", false);
  var peg$e157 = peg$literalExpectation("CONSTRAINT_NAME_SYMBOL", false);
  var peg$e158 = peg$literalExpectation("CONSTRAINT_SCHEMA_SYMBOL", false);
  var peg$e159 = peg$literalExpectation("CONTAINS_SYMBOL", false);
  var peg$e160 = peg$literalExpectation("CONTEXT_SYMBOL", false);
  var peg$e161 = peg$literalExpectation("CONTINUE_SYMBOL", false);
  var peg$e162 = peg$literalExpectation("CONTRIBUTORS_SYMBOL", false);
  var peg$e163 = peg$literalExpectation("CONVERT_SYMBOL", false);
  var peg$e164 = peg$literalExpectation("COUNT_SYMBOL", false);
  var peg$e165 = peg$literalExpectation("CPU_SYMBOL", false);
  var peg$e166 = peg$literalExpectation("CREATE_SYMBOL", false);
  var peg$e167 = peg$literalExpectation("CROSS_SYMBOL", false);
  var peg$e168 = peg$literalExpectation("CUBE_SYMBOL", false);
  var peg$e169 = peg$literalExpectation("CURDATE_SYMBOL", false);
  var peg$e170 = peg$literalExpectation("CURRENT_DATE_SYMBOL", false);
  var peg$e171 = peg$literalExpectation("CURRENT_TIME_SYMBOL", false);
  var peg$e172 = peg$literalExpectation("CURRENT_TIMESTAMP_SYMBOL", false);
  var peg$e173 = peg$literalExpectation("CURRENT_USER_SYMBOL", false);
  var peg$e174 = peg$literalExpectation("CURRENT_SYMBOL", false);
  var peg$e175 = peg$literalExpectation("CURSOR_SYMBOL", false);
  var peg$e176 = peg$literalExpectation("CURSOR_NAME_SYMBOL", false);
  var peg$e177 = peg$literalExpectation("CURTIME_SYMBOL", false);
  var peg$e178 = peg$literalExpectation("DATABASE_SYMBOL", false);
  var peg$e179 = peg$literalExpectation("DATABASES_SYMBOL", false);
  var peg$e180 = peg$literalExpectation("DATAFILE_SYMBOL", false);
  var peg$e181 = peg$literalExpectation("DATA_SYMBOL", false);
  var peg$e182 = peg$literalExpectation("DATE_ADD_SYMBOL", false);
  var peg$e183 = peg$literalExpectation("DATE_SUB_SYMBOL", false);
  var peg$e184 = peg$literalExpectation("DAY_HOUR_SYMBOL", false);
  var peg$e185 = peg$literalExpectation("DAY_MICROSECOND_SYMBOL", false);
  var peg$e186 = peg$literalExpectation("DAY_MINUTE_SYMBOL", false);
  var peg$e187 = peg$literalExpectation("DAY_SECOND_SYMBOL", false);
  var peg$e188 = peg$literalExpectation("DAY_SYMBOL", false);
  var peg$e189 = peg$literalExpectation("DAYOFMONTH_SYMBOL", false);
  var peg$e190 = peg$literalExpectation("DEALLOCATE_SYMBOL", false);
  var peg$e191 = peg$literalExpectation("DEC_SYMBOL", false);
  var peg$e192 = peg$literalExpectation("DECLARE_SYMBOL", false);
  var peg$e193 = peg$literalExpectation("DEFAULT_SYMBOL", false);
  var peg$e194 = peg$literalExpectation("DEFAULT_AUTH_SYMBOL", false);
  var peg$e195 = peg$literalExpectation("DEFINER_SYMBOL", false);
  var peg$e196 = peg$literalExpectation("DELAYED_SYMBOL", false);
  var peg$e197 = peg$literalExpectation("DELAY_KEY_WRITE_SYMBOL", false);
  var peg$e198 = peg$literalExpectation("DELETE_SYMBOL", false);
  var peg$e199 = peg$literalExpectation("DESC_SYMBOL", false);
  var peg$e200 = peg$literalExpectation("DESCRIBE_SYMBOL", false);
  var peg$e201 = peg$literalExpectation("DES_KEY_FILE_SYMBOL", false);
  var peg$e202 = peg$literalExpectation("DETERMINISTIC_SYMBOL", false);
  var peg$e203 = peg$literalExpectation("DIAGNOSTICS_SYMBOL", false);
  var peg$e204 = peg$literalExpectation("DIRECTORY_SYMBOL", false);
  var peg$e205 = peg$literalExpectation("DISABLE_SYMBOL", false);
  var peg$e206 = peg$literalExpectation("DISCARD_SYMBOL", false);
  var peg$e207 = peg$literalExpectation("DISK_SYMBOL", false);
  var peg$e208 = peg$literalExpectation("DISTINCT_SYMBOL", false);
  var peg$e209 = peg$literalExpectation("DISTINCTROW_SYMBOL", false);
  var peg$e210 = peg$literalExpectation("DIV_SYMBOL", false);
  var peg$e211 = peg$literalExpectation("DO_SYMBOL", false);
  var peg$e212 = peg$literalExpectation("DROP_SYMBOL", false);
  var peg$e213 = peg$literalExpectation("DUAL_SYMBOL", false);
  var peg$e214 = peg$literalExpectation("DUMPFILE_SYMBOL", false);
  var peg$e215 = peg$literalExpectation("DUPLICATE_SYMBOL", false);
  var peg$e216 = peg$literalExpectation("DYNAMIC_SYMBOL", false);
  var peg$e217 = peg$literalExpectation("EACH_SYMBOL", false);
  var peg$e218 = peg$literalExpectation("ELSE_SYMBOL", false);
  var peg$e219 = peg$literalExpectation("ELSEIF_SYMBOL", false);
  var peg$e220 = peg$literalExpectation("EMPTY_SYMBOL", false);
  var peg$e221 = peg$literalExpectation("ENABLE_SYMBOL", false);
  var peg$e222 = peg$literalExpectation("ENCLOSED_SYMBOL", false);
  var peg$e223 = peg$literalExpectation("ENCRYPTION_SYMBOL", false);
  var peg$e224 = peg$literalExpectation("END_SYMBOL", false);
  var peg$e225 = peg$literalExpectation("ENDS_SYMBOL", false);
  var peg$e226 = peg$literalExpectation("ENFORCED_SYMBOL", false);
  var peg$e227 = peg$literalExpectation("ENGINES_SYMBOL", false);
  var peg$e228 = peg$literalExpectation("ENGINE_SYMBOL", false);
  var peg$e229 = peg$literalExpectation("ERROR_SYMBOL", false);
  var peg$e230 = peg$literalExpectation("ERRORS_SYMBOL", false);
  var peg$e231 = peg$literalExpectation("ESCAPED_SYMBOL", false);
  var peg$e232 = peg$literalExpectation("ESCAPE_SYMBOL", false);
  var peg$e233 = peg$literalExpectation("EVENT_SYMBOL", false);
  var peg$e234 = peg$literalExpectation("EVENTS_SYMBOL", false);
  var peg$e235 = peg$literalExpectation("EVERY_SYMBOL", false);
  var peg$e236 = peg$literalExpectation("EXCHANGE_SYMBOL", false);
  var peg$e237 = peg$literalExpectation("EXCEPT_SYMBOL", false);
  var peg$e238 = peg$literalExpectation("EXECUTE_SYMBOL", false);
  var peg$e239 = peg$literalExpectation("EXISTS_SYMBOL", false);
  var peg$e240 = peg$literalExpectation("EXIT_SYMBOL", false);
  var peg$e241 = peg$literalExpectation("EXPANSION_SYMBOL", false);
  var peg$e242 = peg$literalExpectation("EXPIRE_SYMBOL", false);
  var peg$e243 = peg$literalExpectation("EXPLAIN_SYMBOL", false);
  var peg$e244 = peg$literalExpectation("EXPORT_SYMBOL", false);
  var peg$e245 = peg$literalExpectation("EXTENDED_SYMBOL", false);
  var peg$e246 = peg$literalExpectation("EXTENT_SIZE_SYMBOL", false);
  var peg$e247 = peg$literalExpectation("EXTRACT_SYMBOL", false);
  var peg$e248 = peg$literalExpectation("FALSE_SYMBOL", false);
  var peg$e249 = peg$literalExpectation("FAST_SYMBOL", false);
  var peg$e250 = peg$literalExpectation("FAULTS_SYMBOL", false);
  var peg$e251 = peg$literalExpectation("FETCH_SYMBOL", false);
  var peg$e252 = peg$literalExpectation("FIELDS_SYMBOL", false);
  var peg$e253 = peg$literalExpectation("FILE_BLOCK_SIZE_SYMBOL", false);
  var peg$e254 = peg$literalExpectation("FILE_SYMBOL", false);
  var peg$e255 = peg$literalExpectation("FILTER_SYMBOL", false);
  var peg$e256 = peg$literalExpectation("FIRST_SYMBOL", false);
  var peg$e257 = peg$literalExpectation("FIRST_VALUE_SYMBOL", false);
  var peg$e258 = peg$literalExpectation("FIXED_SYMBOL", false);
  var peg$e259 = peg$literalExpectation("FLOAT4_SYMBOL", false);
  var peg$e260 = peg$literalExpectation("FLOAT8_SYMBOL", false);
  var peg$e261 = peg$literalExpectation("FLUSH_SYMBOL", false);
  var peg$e262 = peg$literalExpectation("FOLLOWS_SYMBOL", false);
  var peg$e263 = peg$literalExpectation("FORCE_SYMBOL", false);
  var peg$e264 = peg$literalExpectation("FOREIGN_SYMBOL", false);
  var peg$e265 = peg$literalExpectation("FOR_SYMBOL", false);
  var peg$e266 = peg$literalExpectation("FORMAT_SYMBOL", false);
  var peg$e267 = peg$literalExpectation("FOUND_SYMBOL", false);
  var peg$e268 = peg$literalExpectation("FROM_SYMBOL", false);
  var peg$e269 = peg$literalExpectation("FULLTEXT_SYMBOL", false);
  var peg$e270 = peg$literalExpectation("FULL_SYMBOL", false);
  var peg$e271 = peg$literalExpectation("FUNCTION_SYMBOL", false);
  var peg$e272 = peg$literalExpectation("GENERATED_SYMBOL", false);
  var peg$e273 = peg$literalExpectation("GENERAL_SYMBOL", false);
  var peg$e274 = peg$literalExpectation("GET_FORMAT_SYMBOL", false);
  var peg$e275 = peg$literalExpectation("GET_MASTER_PUBLIC_KEY_SYMBOL", false);
  var peg$e276 = peg$literalExpectation("GLOBAL_SYMBOL", false);
  var peg$e277 = peg$literalExpectation("GRANT_SYMBOL", false);
  var peg$e278 = peg$literalExpectation("GRANTS_SYMBOL", false);
  var peg$e279 = peg$literalExpectation("GROUP_CONCAT_SYMBOL", false);
  var peg$e280 = peg$literalExpectation("GROUP_REPLICATION_SYMBOL", false);
  var peg$e281 = peg$literalExpectation("GROUP_SYMBOL", false);
  var peg$e282 = peg$literalExpectation("HANDLER_SYMBOL", false);
  var peg$e283 = peg$literalExpectation("HASH_SYMBOL", false);
  var peg$e284 = peg$literalExpectation("HAVING_SYMBOL", false);
  var peg$e285 = peg$literalExpectation("HELP_SYMBOL", false);
  var peg$e286 = peg$literalExpectation("HIGH_PRIORITY_SYMBOL", false);
  var peg$e287 = peg$literalExpectation("HISTOGRAM_SYMBOL", false);
  var peg$e288 = peg$literalExpectation("HISTORY_SYMBOL", false);
  var peg$e289 = peg$literalExpectation("HOST_SYMBOL", false);
  var peg$e290 = peg$literalExpectation("HOSTS_SYMBOL", false);
  var peg$e291 = peg$literalExpectation("HOUR_MICROSECOND_SYMBOL", false);
  var peg$e292 = peg$literalExpectation("HOUR_MINUTE_SYMBOL", false);
  var peg$e293 = peg$literalExpectation("HOUR_SECOND_SYMBOL", false);
  var peg$e294 = peg$literalExpectation("HOUR_SYMBOL", false);
  var peg$e295 = peg$literalExpectation("IDENTIFIED_SYMBOL", false);
  var peg$e296 = peg$literalExpectation("IF_SYMBOL", false);
  var peg$e297 = peg$literalExpectation("IGNORE_SYMBOL", false);
  var peg$e298 = peg$literalExpectation("IGNORE_SERVER_IDS_SYMBOL", false);
  var peg$e299 = peg$literalExpectation("IMPORT_SYMBOL", false);
  var peg$e300 = peg$literalExpectation("IN_SYMBOL", false);
  var peg$e301 = peg$literalExpectation("INDEXES_SYMBOL", false);
  var peg$e302 = peg$literalExpectation("INDEX_SYMBOL", false);
  var peg$e303 = peg$literalExpectation("INFILE_SYMBOL", false);
  var peg$e304 = peg$literalExpectation("INITIAL_SIZE_SYMBOL", false);
  var peg$e305 = peg$literalExpectation("INNER_SYMBOL", false);
  var peg$e306 = peg$literalExpectation("INOUT_SYMBOL", false);
  var peg$e307 = peg$literalExpectation("INSENSITIVE_SYMBOL", false);
  var peg$e308 = peg$literalExpectation("INSERT_SYMBOL", false);
  var peg$e309 = peg$literalExpectation("INSERT_METHOD_SYMBOL", false);
  var peg$e310 = peg$literalExpectation("INSTANCE_SYMBOL", false);
  var peg$e311 = peg$literalExpectation("INSTALL_SYMBOL", false);
  var peg$e312 = peg$literalExpectation("INTEGER_SYMBOL", false);
  var peg$e313 = peg$literalExpectation("INTERVAL_SYMBOL", false);
  var peg$e314 = peg$literalExpectation("INTO_SYMBOL", false);
  var peg$e315 = peg$literalExpectation("INVISIBLE_SYMBOL", false);
  var peg$e316 = peg$literalExpectation("INVOKER_SYMBOL", false);
  var peg$e317 = peg$literalExpectation("IO_SYMBOL", false);
  var peg$e318 = peg$literalExpectation("IPC_SYMBOL", false);
  var peg$e319 = peg$literalExpectation("IS_SYMBOL", false);
  var peg$e320 = peg$literalExpectation("ISOLATION_SYMBOL", false);
  var peg$e321 = peg$literalExpectation("ISSUER_SYMBOL", false);
  var peg$e322 = peg$literalExpectation("ITERATE_SYMBOL", false);
  var peg$e323 = peg$literalExpectation("JOIN_SYMBOL", false);
  var peg$e324 = peg$literalExpectation("JSON_TABLE_SYMBOL", false);
  var peg$e325 = peg$literalExpectation("JSON_ARRAYAGG_SYMBOL", false);
  var peg$e326 = peg$literalExpectation("JSON_OBJECTAGG_SYMBOL", false);
  var peg$e327 = peg$literalExpectation("KEYS_SYMBOL", false);
  var peg$e328 = peg$literalExpectation("KEY_BLOCK_SIZE_SYMBOL", false);
  var peg$e329 = peg$literalExpectation("KEY_SYMBOL", false);
  var peg$e330 = peg$literalExpectation("KILL_SYMBOL", false);
  var peg$e331 = peg$literalExpectation("LANGUAGE_SYMBOL", false);
  var peg$e332 = peg$literalExpectation("LAST_SYMBOL", false);
  var peg$e333 = peg$literalExpectation("LAST_VALUE_SYMBOL", false);
  var peg$e334 = peg$literalExpectation("LATERAL_SYMBOL", false);
  var peg$e335 = peg$literalExpectation("LEAD_SYMBOL", false);
  var peg$e336 = peg$literalExpectation("LEADING_SYMBOL", false);
  var peg$e337 = peg$literalExpectation("LEAVE_SYMBOL", false);
  var peg$e338 = peg$literalExpectation("LEAVES_SYMBOL", false);
  var peg$e339 = peg$literalExpectation("LEFT_SYMBOL", false);
  var peg$e340 = peg$literalExpectation("LESS_SYMBOL", false);
  var peg$e341 = peg$literalExpectation("LEVEL_SYMBOL", false);
  var peg$e342 = peg$literalExpectation("LIKE_SYMBOL", false);
  var peg$e343 = peg$literalExpectation("LIMIT_SYMBOL", false);
  var peg$e344 = peg$literalExpectation("LINEAR_SYMBOL", false);
  var peg$e345 = peg$literalExpectation("LINES_SYMBOL", false);
  var peg$e346 = peg$literalExpectation("LIST_SYMBOL", false);
  var peg$e347 = peg$literalExpectation("LOAD_SYMBOL", false);
  var peg$e348 = peg$literalExpectation("LOCALTIME_SYMBOL", false);
  var peg$e349 = peg$literalExpectation("LOCALTIMESTAMP_SYMBOL", false);
  var peg$e350 = peg$literalExpectation("LOCAL_SYMBOL", false);
  var peg$e351 = peg$literalExpectation("LOCATOR_SYMBOL", false);
  var peg$e352 = peg$literalExpectation("LOCK_SYMBOL", false);
  var peg$e353 = peg$literalExpectation("LOCKS_SYMBOL", false);
  var peg$e354 = peg$literalExpectation("LOGFILE_SYMBOL", false);
  var peg$e355 = peg$literalExpectation("LOGS_SYMBOL", false);
  var peg$e356 = peg$literalExpectation("LOOP_SYMBOL", false);
  var peg$e357 = peg$literalExpectation("LOW_PRIORITY_SYMBOL", false);
  var peg$e358 = peg$literalExpectation("MASTER_SYMBOL", false);
  var peg$e359 = peg$literalExpectation("MASTER_AUTO_POSITION_SYMBOL", false);
  var peg$e360 = peg$literalExpectation("MASTER_BIND_SYMBOL", false);
  var peg$e361 = peg$literalExpectation("MASTER_CONNECT_RETRY_SYMBOL", false);
  var peg$e362 = peg$literalExpectation("MASTER_DELAY_SYMBOL", false);
  var peg$e363 = peg$literalExpectation("MASTER_HEARTBEAT_PERIOD_SYMBOL", false);
  var peg$e364 = peg$literalExpectation("MASTER_HOST_SYMBOL", false);
  var peg$e365 = peg$literalExpectation("NETWORK_NAMESPACE_SYMBOL", false);
  var peg$e366 = peg$literalExpectation("MASTER_LOG_FILE_SYMBOL", false);
  var peg$e367 = peg$literalExpectation("MASTER_LOG_POS_SYMBOL", false);
  var peg$e368 = peg$literalExpectation("MASTER_PASSWORD_SYMBOL", false);
  var peg$e369 = peg$literalExpectation("MASTER_PORT_SYMBOL", false);
  var peg$e370 = peg$literalExpectation("MASTER_PUBLIC_KEY_PATH_SYMBOL", false);
  var peg$e371 = peg$literalExpectation("MASTER_RETRY_COUNT_SYMBOL", false);
  var peg$e372 = peg$literalExpectation("MASTER_SERVER_ID_SYMBOL", false);
  var peg$e373 = peg$literalExpectation("MASTER_SSL_CAPATH_SYMBOL", false);
  var peg$e374 = peg$literalExpectation("MASTER_SSL_CA_SYMBOL", false);
  var peg$e375 = peg$literalExpectation("MASTER_SSL_CERT_SYMBOL", false);
  var peg$e376 = peg$literalExpectation("MASTER_SSL_CIPHER_SYMBOL", false);
  var peg$e377 = peg$literalExpectation("MASTER_SSL_CRL_SYMBOL", false);
  var peg$e378 = peg$literalExpectation("MASTER_SSL_CRLPATH_SYMBOL", false);
  var peg$e379 = peg$literalExpectation("MASTER_SSL_KEY_SYMBOL", false);
  var peg$e380 = peg$literalExpectation("MASTER_SSL_SYMBOL", false);
  var peg$e381 = peg$literalExpectation("MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", false);
  var peg$e382 = peg$literalExpectation("MASTER_TLS_VERSION_SYMBOL", false);
  var peg$e383 = peg$literalExpectation("MASTER_TLS_CIPHERSUITES_SYMBOL", false);
  var peg$e384 = peg$literalExpectation("MASTER_USER_SYMBOL", false);
  var peg$e385 = peg$literalExpectation("MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", false);
  var peg$e386 = peg$literalExpectation("MATCH_SYMBOL", false);
  var peg$e387 = peg$literalExpectation("MAX_CONNECTIONS_PER_HOUR_SYMBOL", false);
  var peg$e388 = peg$literalExpectation("MAX_QUERIES_PER_HOUR_SYMBOL", false);
  var peg$e389 = peg$literalExpectation("MAX_ROWS_SYMBOL", false);
  var peg$e390 = peg$literalExpectation("MAX_SIZE_SYMBOL", false);
  var peg$e391 = peg$literalExpectation("MAX_STATEMENT_TIME_SYMBOL", false);
  var peg$e392 = peg$literalExpectation("MAX_UPDATES_PER_HOUR_SYMBOL", false);
  var peg$e393 = peg$literalExpectation("MAX_USER_CONNECTIONS_SYMBOL", false);
  var peg$e394 = peg$literalExpectation("MAXVALUE_SYMBOL", false);
  var peg$e395 = peg$literalExpectation("MAX_SYMBOL", false);
  var peg$e396 = peg$literalExpectation("MEDIUM_SYMBOL", false);
  var peg$e397 = peg$literalExpectation("MEMBER_SYMBOL", false);
  var peg$e398 = peg$literalExpectation("MEMORY_SYMBOL", false);
  var peg$e399 = peg$literalExpectation("MERGE_SYMBOL", false);
  var peg$e400 = peg$literalExpectation("MESSAGE_TEXT_SYMBOL", false);
  var peg$e401 = peg$literalExpectation("MICROSECOND_SYMBOL", false);
  var peg$e402 = peg$literalExpectation("MIDDLEINT_SYMBOL", false);
  var peg$e403 = peg$literalExpectation("MIGRATE_SYMBOL", false);
  var peg$e404 = peg$literalExpectation("MINUTE_MICROSECOND_SYMBOL", false);
  var peg$e405 = peg$literalExpectation("MINUTE_SECOND_SYMBOL", false);
  var peg$e406 = peg$literalExpectation("MINUTE_SYMBOL", false);
  var peg$e407 = peg$literalExpectation("MIN_ROWS_SYMBOL", false);
  var peg$e408 = peg$literalExpectation("MIN_SYMBOL", false);
  var peg$e409 = peg$literalExpectation("MODE_SYMBOL", false);
  var peg$e410 = peg$literalExpectation("MODIFIES_SYMBOL", false);
  var peg$e411 = peg$literalExpectation("MODIFY_SYMBOL", false);
  var peg$e412 = peg$literalExpectation("MOD_SYMBOL", false);
  var peg$e413 = peg$literalExpectation("MONTH_SYMBOL", false);
  var peg$e414 = peg$literalExpectation("MUTEX_SYMBOL", false);
  var peg$e415 = peg$literalExpectation("MYSQL_ERRNO_SYMBOL", false);
  var peg$e416 = peg$literalExpectation("NAME_SYMBOL", false);
  var peg$e417 = peg$literalExpectation("NAMES_SYMBOL", false);
  var peg$e418 = peg$literalExpectation("NATIONAL_SYMBOL", false);
  var peg$e419 = peg$literalExpectation("NATURAL_SYMBOL", false);
  var peg$e420 = peg$literalExpectation("NCHAR_SYMBOL", false);
  var peg$e421 = peg$literalExpectation("NDBCLUSTER_SYMBOL", false);
  var peg$e422 = peg$literalExpectation("NDB_SYMBOL", false);
  var peg$e423 = peg$literalExpectation("NEG_SYMBOL", false);
  var peg$e424 = peg$literalExpectation("NESTED_SYMBOL", false);
  var peg$e425 = peg$literalExpectation("NEVER_SYMBOL", false);
  var peg$e426 = peg$literalExpectation("NEW_SYMBOL", false);
  var peg$e427 = peg$literalExpectation("NEXT_SYMBOL", false);
  var peg$e428 = peg$literalExpectation("NODEGROUP_SYMBOL", false);
  var peg$e429 = peg$literalExpectation("NONE_SYMBOL", false);
  var peg$e430 = peg$literalExpectation("NONBLOCKING_SYMBOL", false);
  var peg$e431 = peg$literalExpectation("NOT_SYMBOL", false);
  var peg$e432 = peg$literalExpectation("NOWAIT_SYMBOL", false);
  var peg$e433 = peg$literalExpectation("NO_WAIT_SYMBOL", false);
  var peg$e434 = peg$literalExpectation("NO_WRITE_TO_BINLOG_SYMBOL", false);
  var peg$e435 = peg$literalExpectation("NULL_SYMBOL", false);
  var peg$e436 = peg$literalExpectation("NULLS_SYMBOL", false);
  var peg$e437 = peg$literalExpectation("NUMBER_SYMBOL", false);
  var peg$e438 = peg$literalExpectation("NVARCHAR_SYMBOL", false);
  var peg$e439 = peg$literalExpectation("NTH_VALUE_SYMBOL", false);
  var peg$e440 = peg$literalExpectation("NTILE_SYMBOL", false);
  var peg$e441 = peg$literalExpectation("OF_SYMBOL", false);
  var peg$e442 = peg$literalExpectation("OFF_SYMBOL", false);
  var peg$e443 = peg$literalExpectation("OFFLINE_SYMBOL", false);
  var peg$e444 = peg$literalExpectation("OFFSET_SYMBOL", false);
  var peg$e445 = peg$literalExpectation("OJ_SYMBOL", false);
  var peg$e446 = peg$literalExpectation("OLD_PASSWORD_SYMBOL", false);
  var peg$e447 = peg$literalExpectation("OLD_SYMBOL", false);
  var peg$e448 = peg$literalExpectation("ON_SYMBOL", false);
  var peg$e449 = peg$literalExpectation("ONLINE_SYMBOL", false);
  var peg$e450 = peg$literalExpectation("ONE_SYMBOL", false);
  var peg$e451 = peg$literalExpectation("ONLY_SYMBOL", false);
  var peg$e452 = peg$literalExpectation("OPEN_SYMBOL", false);
  var peg$e453 = peg$literalExpectation("OPTIONAL_SYMBOL", false);
  var peg$e454 = peg$literalExpectation("OPTIONALLY_SYMBOL", false);
  var peg$e455 = peg$literalExpectation("OPTIONS_SYMBOL", false);
  var peg$e456 = peg$literalExpectation("OPTION_SYMBOL", false);
  var peg$e457 = peg$literalExpectation("OPTIMIZE_SYMBOL", false);
  var peg$e458 = peg$literalExpectation("OPTIMIZER_COSTS_SYMBOL", false);
  var peg$e459 = peg$literalExpectation("ORDER_SYMBOL", false);
  var peg$e460 = peg$literalExpectation("ORDINALITY_SYMBOL", false);
  var peg$e461 = peg$literalExpectation("ORGANIZATION_SYMBOL", false);
  var peg$e462 = peg$literalExpectation("OR_SYMBOL", false);
  var peg$e463 = peg$literalExpectation("OTHERS_SYMBOL", false);
  var peg$e464 = peg$literalExpectation("OUTER_SYMBOL", false);
  var peg$e465 = peg$literalExpectation("OUTFILE_SYMBOL", false);
  var peg$e466 = peg$literalExpectation("OUT_SYMBOL", false);
  var peg$e467 = peg$literalExpectation("OWNER_SYMBOL", false);
  var peg$e468 = peg$literalExpectation("PACK_KEYS_SYMBOL", false);
  var peg$e469 = peg$literalExpectation("PAGE_SYMBOL", false);
  var peg$e470 = peg$literalExpectation("PARSER_SYMBOL", false);
  var peg$e471 = peg$literalExpectation("PARTIAL_SYMBOL", false);
  var peg$e472 = peg$literalExpectation("PARTITIONING_SYMBOL", false);
  var peg$e473 = peg$literalExpectation("PARTITIONS_SYMBOL", false);
  var peg$e474 = peg$literalExpectation("PARTITION_SYMBOL", false);
  var peg$e475 = peg$literalExpectation("PASSWORD_SYMBOL", false);
  var peg$e476 = peg$literalExpectation("PATH_SYMBOL", false);
  var peg$e477 = peg$literalExpectation("PERCENT_RANK_SYMBOL", false);
  var peg$e478 = peg$literalExpectation("PERSIST_SYMBOL", false);
  var peg$e479 = peg$literalExpectation("PERSIST_ONLY_SYMBOL", false);
  var peg$e480 = peg$literalExpectation("PHASE_SYMBOL", false);
  var peg$e481 = peg$literalExpectation("PLUGIN_SYMBOL", false);
  var peg$e482 = peg$literalExpectation("PLUGINS_SYMBOL", false);
  var peg$e483 = peg$literalExpectation("PLUGIN_DIR_SYMBOL", false);
  var peg$e484 = peg$literalExpectation("PORT_SYMBOL", false);
  var peg$e485 = peg$literalExpectation("POSITION_SYMBOL", false);
  var peg$e486 = peg$literalExpectation("PRECEDES_SYMBOL", false);
  var peg$e487 = peg$literalExpectation("PRECEDING_SYMBOL", false);
  var peg$e488 = peg$literalExpectation("PRECISION_SYMBOL", false);
  var peg$e489 = peg$literalExpectation("PREPARE_SYMBOL", false);
  var peg$e490 = peg$literalExpectation("PRESERVE_SYMBOL", false);
  var peg$e491 = peg$literalExpectation("PREV_SYMBOL", false);
  var peg$e492 = peg$literalExpectation("PRIMARY_SYMBOL", false);
  var peg$e493 = peg$literalExpectation("PRIVILEGES_SYMBOL", false);
  var peg$e494 = peg$literalExpectation("PRIVILEGE_CHECKS_USER_SYMBOL", false);
  var peg$e495 = peg$literalExpectation("PROCEDURE_SYMBOL", false);
  var peg$e496 = peg$literalExpectation("PROCESS_SYMBOL", false);
  var peg$e497 = peg$literalExpectation("PROCESSLIST_SYMBOL", false);
  var peg$e498 = peg$literalExpectation("PROFILES_SYMBOL", false);
  var peg$e499 = peg$literalExpectation("PROFILE_SYMBOL", false);
  var peg$e500 = peg$literalExpectation("PROXY_SYMBOL", false);
  var peg$e501 = peg$literalExpectation("PURGE_SYMBOL", false);
  var peg$e502 = peg$literalExpectation("QUARTER_SYMBOL", false);
  var peg$e503 = peg$literalExpectation("QUERY_SYMBOL", false);
  var peg$e504 = peg$literalExpectation("QUICK_SYMBOL", false);
  var peg$e505 = peg$literalExpectation("RANDOM_SYMBOL", false);
  var peg$e506 = peg$literalExpectation("RANGE_SYMBOL", false);
  var peg$e507 = peg$literalExpectation("RANK_SYMBOL", false);
  var peg$e508 = peg$literalExpectation("READS_SYMBOL", false);
  var peg$e509 = peg$literalExpectation("READ_ONLY_SYMBOL", false);
  var peg$e510 = peg$literalExpectation("READ_SYMBOL", false);
  var peg$e511 = peg$literalExpectation("READ_WRITE_SYMBOL", false);
  var peg$e512 = peg$literalExpectation("REBUILD_SYMBOL", false);
  var peg$e513 = peg$literalExpectation("RECOVER_SYMBOL", false);
  var peg$e514 = peg$literalExpectation("REDOFILE_SYMBOL", false);
  var peg$e515 = peg$literalExpectation("REDO_BUFFER_SIZE_SYMBOL", false);
  var peg$e516 = peg$literalExpectation("REDUNDANT_SYMBOL", false);
  var peg$e517 = peg$literalExpectation("REFERENCES_SYMBOL", false);
  var peg$e518 = peg$literalExpectation("RECURSIVE_SYMBOL", false);
  var peg$e519 = peg$literalExpectation("REGEXP_SYMBOL", false);
  var peg$e520 = peg$literalExpectation("RELAYLOG_SYMBOL", false);
  var peg$e521 = peg$literalExpectation("RELAY_SYMBOL", false);
  var peg$e522 = peg$literalExpectation("RELAY_LOG_FILE_SYMBOL", false);
  var peg$e523 = peg$literalExpectation("RELAY_LOG_POS_SYMBOL", false);
  var peg$e524 = peg$literalExpectation("RELAY_THREAD_SYMBOL", false);
  var peg$e525 = peg$literalExpectation("RELEASE_SYMBOL", false);
  var peg$e526 = peg$literalExpectation("RELOAD_SYMBOL", false);
  var peg$e527 = peg$literalExpectation("REMOTE_SYMBOL", false);
  var peg$e528 = peg$literalExpectation("REMOVE_SYMBOL", false);
  var peg$e529 = peg$literalExpectation("RENAME_SYMBOL", false);
  var peg$e530 = peg$literalExpectation("REORGANIZE_SYMBOL", false);
  var peg$e531 = peg$literalExpectation("REPAIR_SYMBOL", false);
  var peg$e532 = peg$literalExpectation("REPEAT_SYMBOL", false);
  var peg$e533 = peg$literalExpectation("REPEATABLE_SYMBOL", false);
  var peg$e534 = peg$literalExpectation("REPLACE_SYMBOL", false);
  var peg$e535 = peg$literalExpectation("REPLICATION_SYMBOL", false);
  var peg$e536 = peg$literalExpectation("REPLICATE_DO_DB_SYMBOL", false);
  var peg$e537 = peg$literalExpectation("REPLICATE_IGNORE_DB_SYMBOL", false);
  var peg$e538 = peg$literalExpectation("REPLICATE_DO_TABLE_SYMBOL", false);
  var peg$e539 = peg$literalExpectation("REPLICATE_IGNORE_TABLE_SYMBOL", false);
  var peg$e540 = peg$literalExpectation("REPLICATE_WILD_DO_TABLE_SYMBOL", false);
  var peg$e541 = peg$literalExpectation("REPLICATE_WILD_IGNORE_TABLE_SYMBOL", false);
  var peg$e542 = peg$literalExpectation("REPLICATE_REWRITE_DB_SYMBOL", false);
  var peg$e543 = peg$literalExpectation("REQUIRE_SYMBOL", false);
  var peg$e544 = peg$literalExpectation("REQUIRE_ROW_FORMAT_SYMBOL", false);
  var peg$e545 = peg$literalExpectation("REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", false);
  var peg$e546 = peg$literalExpectation("RESET_SYMBOL", false);
  var peg$e547 = peg$literalExpectation("RESIGNAL_SYMBOL", false);
  var peg$e548 = peg$literalExpectation("RESOURCE_SYMBOL", false);
  var peg$e549 = peg$literalExpectation("RESPECT_SYMBOL", false);
  var peg$e550 = peg$literalExpectation("RESTART_SYMBOL", false);
  var peg$e551 = peg$literalExpectation("RESTORE_SYMBOL", false);
  var peg$e552 = peg$literalExpectation("RESTRICT_SYMBOL", false);
  var peg$e553 = peg$literalExpectation("RESUME_SYMBOL", false);
  var peg$e554 = peg$literalExpectation("RETAIN_SYMBOL", false);
  var peg$e555 = peg$literalExpectation("RETURNED_SQLSTATE_SYMBOL", false);
  var peg$e556 = peg$literalExpectation("RETURNS_SYMBOL", false);
  var peg$e557 = peg$literalExpectation("REUSE_SYMBOL", false);
  var peg$e558 = peg$literalExpectation("REVERSE_SYMBOL", false);
  var peg$e559 = peg$literalExpectation("REVOKE_SYMBOL", false);
  var peg$e560 = peg$literalExpectation("RIGHT_SYMBOL", false);
  var peg$e561 = peg$literalExpectation("RLIKE_SYMBOL", false);
  var peg$e562 = peg$literalExpectation("ROLE_SYMBOL", false);
  var peg$e563 = peg$literalExpectation("ROLLBACK_SYMBOL", false);
  var peg$e564 = peg$literalExpectation("ROLLUP_SYMBOL", false);
  var peg$e565 = peg$literalExpectation("ROTATE_SYMBOL", false);
  var peg$e566 = peg$literalExpectation("ROW_SYMBOL", false);
  var peg$e567 = peg$literalExpectation("ROWS_SYMBOL", false);
  var peg$e568 = peg$literalExpectation("ROW_COUNT_SYMBOL", false);
  var peg$e569 = peg$literalExpectation("ROW_FORMAT_SYMBOL", false);
  var peg$e570 = peg$literalExpectation("ROW_NUMBER_SYMBOL", false);
  var peg$e571 = peg$literalExpectation("RTREE_SYMBOL", false);
  var peg$e572 = peg$literalExpectation("SAVEPOINT_SYMBOL", false);
  var peg$e573 = peg$literalExpectation("SCHEMA_SYMBOL", false);
  var peg$e574 = peg$literalExpectation("SCHEMAS_SYMBOL", false);
  var peg$e575 = peg$literalExpectation("SCHEMA_NAME_SYMBOL", false);
  var peg$e576 = peg$literalExpectation("SCHEDULE_SYMBOL", false);
  var peg$e577 = peg$literalExpectation("SECOND_MICROSECOND_SYMBOL", false);
  var peg$e578 = peg$literalExpectation("SECOND_SYMBOL", false);
  var peg$e579 = peg$literalExpectation("SECONDARY_SYMBOL", false);
  var peg$e580 = peg$literalExpectation("SECONDARY_ENGINE_SYMBOL", false);
  var peg$e581 = peg$literalExpectation("SECONDARY_LOAD_SYMBOL", false);
  var peg$e582 = peg$literalExpectation("SECONDARY_UNLOAD_SYMBOL", false);
  var peg$e583 = peg$literalExpectation("SECURITY_SYMBOL", false);
  var peg$e584 = peg$literalExpectation("SELECT_SYMBOL", false);
  var peg$e585 = peg$literalExpectation("SENSITIVE_SYMBOL", false);
  var peg$e586 = peg$literalExpectation("SEPARATOR_SYMBOL", false);
  var peg$e587 = peg$literalExpectation("SERIALIZABLE_SYMBOL", false);
  var peg$e588 = peg$literalExpectation("SERIAL_SYMBOL", false);
  var peg$e589 = peg$literalExpectation("SERVER_SYMBOL", false);
  var peg$e590 = peg$literalExpectation("SERVER_OPTIONS_SYMBOL", false);
  var peg$e591 = peg$literalExpectation("SESSION_SYMBOL", false);
  var peg$e592 = peg$literalExpectation("SESSION_USER_SYMBOL", false);
  var peg$e593 = peg$literalExpectation("SET_VAR_SYMBOL", false);
  var peg$e594 = peg$literalExpectation("SHARE_SYMBOL", false);
  var peg$e595 = peg$literalExpectation("SHOW_SYMBOL", false);
  var peg$e596 = peg$literalExpectation("SHUTDOWN_SYMBOL", false);
  var peg$e597 = peg$literalExpectation("SIGNAL_SYMBOL", false);
  var peg$e598 = peg$literalExpectation("SIGNED_SYMBOL", false);
  var peg$e599 = peg$literalExpectation("SIMPLE_SYMBOL", false);
  var peg$e600 = peg$literalExpectation("SKIP_SYMBOL", false);
  var peg$e601 = peg$literalExpectation("SLAVE_SYMBOL", false);
  var peg$e602 = peg$literalExpectation("SLOW_SYMBOL", false);
  var peg$e603 = peg$literalExpectation("SNAPSHOT_SYMBOL", false);
  var peg$e604 = peg$literalExpectation("SOME_SYMBOL", false);
  var peg$e605 = peg$literalExpectation("SOCKET_SYMBOL", false);
  var peg$e606 = peg$literalExpectation("SONAME_SYMBOL", false);
  var peg$e607 = peg$literalExpectation("SOUNDS_SYMBOL", false);
  var peg$e608 = peg$literalExpectation("SOURCE_SYMBOL", false);
  var peg$e609 = peg$literalExpectation("SPATIAL_SYMBOL", false);
  var peg$e610 = peg$literalExpectation("SQL_SYMBOL", false);
  var peg$e611 = peg$literalExpectation("SQLEXCEPTION_SYMBOL", false);
  var peg$e612 = peg$literalExpectation("SQLSTATE_SYMBOL", false);
  var peg$e613 = peg$literalExpectation("SQLWARNING_SYMBOL", false);
  var peg$e614 = peg$literalExpectation("SQL_AFTER_GTIDS_SYMBOL", false);
  var peg$e615 = peg$literalExpectation("SQL_AFTER_MTS_GAPS_SYMBOL", false);
  var peg$e616 = peg$literalExpectation("SQL_BEFORE_GTIDS_SYMBOL", false);
  var peg$e617 = peg$literalExpectation("SQL_BIG_RESULT_SYMBOL", false);
  var peg$e618 = peg$literalExpectation("SQL_BUFFER_RESULT_SYMBOL", false);
  var peg$e619 = peg$literalExpectation("SQL_CALC_FOUND_ROWS_SYMBOL", false);
  var peg$e620 = peg$literalExpectation("SQL_CACHE_SYMBOL", false);
  var peg$e621 = peg$literalExpectation("SQL_NO_CACHE_SYMBOL", false);
  var peg$e622 = peg$literalExpectation("SQL_SMALL_RESULT_SYMBOL", false);
  var peg$e623 = peg$literalExpectation("SQL_THREAD_SYMBOL", false);
  var peg$e624 = peg$literalExpectation("SQL_TSI_DAY_SYMBOL", false);
  var peg$e625 = peg$literalExpectation("SQL_TSI_HOUR_SYMBOL", false);
  var peg$e626 = peg$literalExpectation("SQL_TSI_MICROSECOND_SYMBOL", false);
  var peg$e627 = peg$literalExpectation("SQL_TSI_MINUTE_SYMBOL", false);
  var peg$e628 = peg$literalExpectation("SQL_TSI_MONTH_SYMBOL", false);
  var peg$e629 = peg$literalExpectation("SQL_TSI_QUARTER_SYMBOL", false);
  var peg$e630 = peg$literalExpectation("SQL_TSI_SECOND_SYMBOL", false);
  var peg$e631 = peg$literalExpectation("SQL_TSI_WEEK_SYMBOL", false);
  var peg$e632 = peg$literalExpectation("SQL_TSI_YEAR_SYMBOL", false);
  var peg$e633 = peg$literalExpectation("SRID_SYMBOL", false);
  var peg$e634 = peg$literalExpectation("SSL_SYMBOL", false);
  var peg$e635 = peg$literalExpectation("STACKED_SYMBOL", false);
  var peg$e636 = peg$literalExpectation("STARTING_SYMBOL", false);
  var peg$e637 = peg$literalExpectation("STARTS_SYMBOL", false);
  var peg$e638 = peg$literalExpectation("STATS_AUTO_RECALC_SYMBOL", false);
  var peg$e639 = peg$literalExpectation("STATS_PERSISTENT_SYMBOL", false);
  var peg$e640 = peg$literalExpectation("STATS_SAMPLE_PAGES_SYMBOL", false);
  var peg$e641 = peg$literalExpectation("STATUS_SYMBOL", false);
  var peg$e642 = peg$literalExpectation("STD_SYMBOL", false);
  var peg$e643 = peg$literalExpectation("STDDEV_POP_SYMBOL", false);
  var peg$e644 = peg$literalExpectation("STDDEV_SAMP_SYMBOL", false);
  var peg$e645 = peg$literalExpectation("STDDEV_SYMBOL", false);
  var peg$e646 = peg$literalExpectation("STOP_SYMBOL", false);
  var peg$e647 = peg$literalExpectation("STORAGE_SYMBOL", false);
  var peg$e648 = peg$literalExpectation("STORED_SYMBOL", false);
  var peg$e649 = peg$literalExpectation("STRAIGHT_JOIN_SYMBOL", false);
  var peg$e650 = peg$literalExpectation("STREAM_SYMBOL", false);
  var peg$e651 = peg$literalExpectation("STRING_SYMBOL", false);
  var peg$e652 = peg$literalExpectation("SUBCLASS_ORIGIN_SYMBOL", false);
  var peg$e653 = peg$literalExpectation("SUBDATE_SYMBOL", false);
  var peg$e654 = peg$literalExpectation("SUBJECT_SYMBOL", false);
  var peg$e655 = peg$literalExpectation("SUBPARTITIONS_SYMBOL", false);
  var peg$e656 = peg$literalExpectation("SUBPARTITION_SYMBOL", false);
  var peg$e657 = peg$literalExpectation("SUBSTR_SYMBOL", false);
  var peg$e658 = peg$literalExpectation("SUBSTRING_SYMBOL", false);
  var peg$e659 = peg$literalExpectation("SUM_SYMBOL", false);
  var peg$e660 = peg$literalExpectation("SUPER_SYMBOL", false);
  var peg$e661 = peg$literalExpectation("SUSPEND_SYMBOL", false);
  var peg$e662 = peg$literalExpectation("SWAPS_SYMBOL", false);
  var peg$e663 = peg$literalExpectation("SWITCHES_SYMBOL", false);
  var peg$e664 = peg$literalExpectation("SYSDATE_SYMBOL", false);
  var peg$e665 = peg$literalExpectation("SYSTEM_SYMBOL", false);
  var peg$e666 = peg$literalExpectation("SYSTEM_USER_SYMBOL", false);
  var peg$e667 = peg$literalExpectation("TABLE_SYMBOL", false);
  var peg$e668 = peg$literalExpectation("TABLES_SYMBOL", false);
  var peg$e669 = peg$literalExpectation("TABLESPACE_SYMBOL", false);
  var peg$e670 = peg$literalExpectation("TABLE_CHECKSUM_SYMBOL", false);
  var peg$e671 = peg$literalExpectation("TABLE_NAME_SYMBOL", false);
  var peg$e672 = peg$literalExpectation("TEMPORARY_SYMBOL", false);
  var peg$e673 = peg$literalExpectation("TEMPTABLE_SYMBOL", false);
  var peg$e674 = peg$literalExpectation("TERMINATED_SYMBOL", false);
  var peg$e675 = peg$literalExpectation("THAN_SYMBOL", false);
  var peg$e676 = peg$literalExpectation("THEN_SYMBOL", false);
  var peg$e677 = peg$literalExpectation("THREAD_PRIORITY_SYMBOL", false);
  var peg$e678 = peg$literalExpectation("TIES_SYMBOL", false);
  var peg$e679 = peg$literalExpectation("TIMESTAMP_ADD_SYMBOL", false);
  var peg$e680 = peg$literalExpectation("TIMESTAMP_DIFF_SYMBOL", false);
  var peg$e681 = peg$literalExpectation("TO_SYMBOL", false);
  var peg$e682 = peg$literalExpectation("TRAILING_SYMBOL", false);
  var peg$e683 = peg$literalExpectation("TRANSACTION_SYMBOL", false);
  var peg$e684 = peg$literalExpectation("TRIGGER_SYMBOL", false);
  var peg$e685 = peg$literalExpectation("TRIGGERS_SYMBOL", false);
  var peg$e686 = peg$literalExpectation("TRIM_SYMBOL", false);
  var peg$e687 = peg$literalExpectation("TRUE_SYMBOL", false);
  var peg$e688 = peg$literalExpectation("TRUNCATE_SYMBOL", false);
  var peg$e689 = peg$literalExpectation("TYPES_SYMBOL", false);
  var peg$e690 = peg$literalExpectation("TYPE_SYMBOL", false);
  var peg$e691 = peg$literalExpectation("UDF_RETURNS_SYMBOL", false);
  var peg$e692 = peg$literalExpectation("UNBOUNDED_SYMBOL", false);
  var peg$e693 = peg$literalExpectation("UNCOMMITTED_SYMBOL", false);
  var peg$e694 = peg$literalExpectation("UNDEFINED_SYMBOL", false);
  var peg$e695 = peg$literalExpectation("UNDO_BUFFER_SIZE_SYMBOL", false);
  var peg$e696 = peg$literalExpectation("UNDOFILE_SYMBOL", false);
  var peg$e697 = peg$literalExpectation("UNDO_SYMBOL", false);
  var peg$e698 = peg$literalExpectation("UNICODE_SYMBOL", false);
  var peg$e699 = peg$literalExpectation("UNION_SYMBOL", false);
  var peg$e700 = peg$literalExpectation("UNIQUE_SYMBOL", false);
  var peg$e701 = peg$literalExpectation("UNKNOWN_SYMBOL", false);
  var peg$e702 = peg$literalExpectation("UNINSTALL_SYMBOL", false);
  var peg$e703 = peg$literalExpectation("UNSIGNED_SYMBOL", false);
  var peg$e704 = peg$literalExpectation("UPDATE_SYMBOL", false);
  var peg$e705 = peg$literalExpectation("UPGRADE_SYMBOL", false);
  var peg$e706 = peg$literalExpectation("USAGE_SYMBOL", false);
  var peg$e707 = peg$literalExpectation("USER_RESOURCES_SYMBOL", false);
  var peg$e708 = peg$literalExpectation("USER_SYMBOL", false);
  var peg$e709 = peg$literalExpectation("USE_FRM_SYMBOL", false);
  var peg$e710 = peg$literalExpectation("USE_SYMBOL", false);
  var peg$e711 = peg$literalExpectation("USING_SYMBOL", false);
  var peg$e712 = peg$literalExpectation("UTC_DATE_SYMBOL", false);
  var peg$e713 = peg$literalExpectation("UTC_TIME_SYMBOL", false);
  var peg$e714 = peg$literalExpectation("UTC_TIMESTAMP_SYMBOL", false);
  var peg$e715 = peg$literalExpectation("VALIDATION_SYMBOL", false);
  var peg$e716 = peg$literalExpectation("VALUE_SYMBOL", false);
  var peg$e717 = peg$literalExpectation("VALUES_SYMBOL", false);
  var peg$e718 = peg$literalExpectation("VARCHARACTER_SYMBOL", false);
  var peg$e719 = peg$literalExpectation("VARIABLES_SYMBOL", false);
  var peg$e720 = peg$literalExpectation("VARIANCE_SYMBOL", false);
  var peg$e721 = peg$literalExpectation("VARYING_SYMBOL", false);
  var peg$e722 = peg$literalExpectation("VAR_POP_SYMBOL", false);
  var peg$e723 = peg$literalExpectation("VAR_SAMP_SYMBOL", false);
  var peg$e724 = peg$literalExpectation("VCPU_SYMBOL", false);
  var peg$e725 = peg$literalExpectation("VIEW_SYMBOL", false);
  var peg$e726 = peg$literalExpectation("VIRTUAL_SYMBOL", false);
  var peg$e727 = peg$literalExpectation("VISIBLE_SYMBOL", false);
  var peg$e728 = peg$literalExpectation("WAIT_SYMBOL", false);
  var peg$e729 = peg$literalExpectation("WARNINGS_SYMBOL", false);
  var peg$e730 = peg$literalExpectation("WEEK_SYMBOL", false);
  var peg$e731 = peg$literalExpectation("WHEN_SYMBOL", false);
  var peg$e732 = peg$literalExpectation("WEIGHT_STRING_SYMBOL", false);
  var peg$e733 = peg$literalExpectation("WHERE_SYMBOL", false);
  var peg$e734 = peg$literalExpectation("WHILE_SYMBOL", false);
  var peg$e735 = peg$literalExpectation("WINDOW_SYMBOL", false);
  var peg$e736 = peg$literalExpectation("WITH_SYMBOL", false);
  var peg$e737 = peg$literalExpectation("WITHOUT_SYMBOL", false);
  var peg$e738 = peg$literalExpectation("WORK_SYMBOL", false);
  var peg$e739 = peg$literalExpectation("WRAPPER_SYMBOL", false);
  var peg$e740 = peg$literalExpectation("WRITE_SYMBOL", false);
  var peg$e741 = peg$literalExpectation("XA_SYMBOL", false);
  var peg$e742 = peg$literalExpectation("X509_SYMBOL", false);
  var peg$e743 = peg$literalExpectation("XID_SYMBOL", false);
  var peg$e744 = peg$literalExpectation("XML_SYMBOL", false);
  var peg$e745 = peg$literalExpectation("XOR_SYMBOL", false);
  var peg$e746 = peg$literalExpectation("YEAR_MONTH_SYMBOL", false);
  var peg$e747 = peg$literalExpectation("ZEROFILL_SYMBOL", false);
  var peg$e748 = peg$literalExpectation("INT1_SYMBOL", false);
  var peg$e749 = peg$literalExpectation("INT2_SYMBOL", false);
  var peg$e750 = peg$literalExpectation("INT3_SYMBOL", false);
  var peg$e751 = peg$literalExpectation("INT4_SYMBOL", false);
  var peg$e752 = peg$literalExpectation("INT8_SYMBOL", false);
  var peg$e753 = peg$literalExpectation("IDENTIFIER", false);
  var peg$e754 = peg$literalExpectation("BACK_TICK_QUOTED_ID", false);
  var peg$e755 = peg$literalExpectation("DOUBLE_QUOTED_TEXT", false);
  var peg$e756 = peg$literalExpectation("SINGLE_QUOTED_TEXT", false);
  var peg$e757 = peg$literalExpectation("HEX_NUMBER", false);
  var peg$e758 = peg$literalExpectation("BIN_NUMBER", false);
  var peg$e759 = peg$literalExpectation("DECIMAL_NUMBER", false);
  var peg$e760 = peg$literalExpectation("INT_NUMBER", false);
  var peg$e761 = peg$literalExpectation("FLOAT_NUMBER", false);
  var peg$e762 = peg$literalExpectation("UNDERSCORE_CHARSET", false);
  var peg$e763 = peg$literalExpectation("DOT_IDENTIFIER", false);
  var peg$e764 = peg$literalExpectation("INVALID_INPUT", false);
  var peg$e765 = peg$literalExpectation("LINEBREAK", false);
  var peg$e766 = peg$literalExpectation("START_SYMBOL", false);
  var peg$e767 = peg$literalExpectation("UNLOCK_SYMBOL", false);
  var peg$e768 = peg$literalExpectation("CLONE_SYMBOL", false);
  var peg$e769 = peg$literalExpectation("GET_SYMBOL", false);
  var peg$e770 = peg$literalExpectation("ASCII_SYMBOL", false);
  var peg$e771 = peg$literalExpectation("BIT_SYMBOL", false);
  var peg$e772 = peg$literalExpectation("BUCKETS_SYMBOL", false);
  var peg$e773 = peg$literalExpectation("COMPONENT_SYMBOL", false);
  var peg$e774 = peg$literalExpectation("NOW_SYMBOL", false);
  var peg$e775 = peg$literalExpectation("DEFINITION_SYMBOL", false);
  var peg$e776 = peg$literalExpectation("DENSE_RANK_SYMBOL", false);
  var peg$e777 = peg$literalExpectation("DESCRIPTION_SYMBOL", false);
  var peg$e778 = peg$literalExpectation("FAILED_LOGIN_ATTEMPTS_SYMBOL", false);
  var peg$e779 = peg$literalExpectation("FOLLOWING_SYMBOL", false);
  var peg$e780 = peg$literalExpectation("GROUPING_SYMBOL", false);
  var peg$e781 = peg$literalExpectation("GROUPS_SYMBOL", false);
  var peg$e782 = peg$literalExpectation("LAG_SYMBOL", false);
  var peg$e783 = peg$literalExpectation("LONG_SYMBOL", false);
  var peg$e784 = peg$literalExpectation("MASTER_COMPRESSION_ALGORITHM_SYMBOL", false);
  var peg$e785 = peg$literalExpectation("NOT2_SYMBOL", false);
  var peg$e786 = peg$literalExpectation("NO_SYMBOL", false);
  var peg$e787 = peg$literalExpectation("REFERENCE_SYMBOL", false);
  var peg$e788 = peg$literalExpectation("RETURN_SYMBOL", false);
  var peg$e789 = peg$literalExpectation("SPECIFIC_SYMBOL", false);
  var peg$e790 = peg$literalExpectation("AUTHORS_SYMBOL", false);
  var peg$e791 = peg$literalExpectation("ADDDATE_SYMBOL", false);
  var peg$e792 = peg$literalExpectation("CONCAT_PIPES_SYMBOL", false);
  var peg$e793 = peg$literalExpectation("ACTIVE_SYMBOL", false);
  var peg$e794 = peg$literalExpectation("ADMIN_SYMBOL", false);
  var peg$e795 = peg$literalExpectation("EXCLUDE_SYMBOL", false);
  var peg$e796 = peg$literalExpectation("INACTIVE_SYMBOL", false);
  var peg$e797 = peg$literalExpectation("LOCKED_SYMBOL", false);
  var peg$e798 = peg$literalExpectation("ROUTINE_SYMBOL", false);
  var peg$e799 = peg$literalExpectation("UNTIL_SYMBOL", false);
  var peg$e800 = peg$literalExpectation("ARRAY_SYMBOL", false);
  var peg$e801 = peg$literalExpectation("PASSWORD_LOCK_TIME_SYMBOL", false);
  var peg$e802 = peg$literalExpectation("NCHAR_TEXT", false);
  var peg$e803 = peg$literalExpectation("LONG_NUMBER", false);
  var peg$e804 = peg$literalExpectation("ULONGLONG_NUMBER", false);
  var peg$e805 = peg$literalExpectation("CUME_DIST_SYMBO", false);
  var peg$e806 = peg$literalExpectation("CUME_DIST_SYMBOL", false);
  var peg$e807 = peg$literalExpectation("FOUND_ROWS_SYMBOL", false);
  var peg$e808 = peg$literalExpectation("CONCAT_SYMBOL", false);
  var peg$e809 = peg$literalExpectation("EOF", false);

  var peg$f0 = function() {serverVersion >= 80000};
  var peg$f1 = function() {serverVersion >= 80000};
  var peg$f2 = function() {serverVersion >= 80000};
  var peg$f3 = function() {serverVersion >= 50604};
  var peg$f4 = function() {serverVersion >= 80014};
  var peg$f5 = function() {serverVersion >= 50713};
  var peg$f6 = function() {serverVersion < 80000};
  var peg$f7 = function() {serverVersion < 50700};
  var peg$f8 = function() {serverVersion >= 80014};
  var peg$f9 = function() {serverVersion >= 50704};
  var peg$f10 = function() {serverVersion >= 50704};
  var peg$f11 = function() {serverVersion >= 50700};
  var peg$f12 = function() {serverVersion < 50700};
  var peg$f13 = function() {serverVersion >= 80017};
  var peg$f14 = function() {serverVersion >= 80019};
  var peg$f15 = function() {serverVersion >= 80014};
  var peg$f16 = function() {serverVersion >= 80000};
  var peg$f17 = function() {serverVersion >= 80017};
  var peg$f18 = function() {serverVersion >= 80019};
  var peg$f19 = function() {serverVersion >= 80000};
  var peg$f20 = function() {serverVersion >= 50700};
  var peg$f21 = function() {serverVersion >= 80014};
  var peg$f22 = function() {serverVersion >= 50708 && serverVersion < 80000};
  var peg$f23 = function() {serverVersion >= 50706};
  var peg$f24 = function() {serverVersion < 80000};
  var peg$f25 = function() {serverVersion >= 80014};
  var peg$f26 = function() {serverVersion >= 80000};
  var peg$f27 = function() {serverVersion >= 80011};
  var peg$f28 = function() {serverVersion >= 80014};
  var peg$f29 = function() {serverVersion >= 80016};
  var peg$f30 = function() {serverVersion >= 80014};
  var peg$f31 = function() {serverVersion >= 80014};
  var peg$f32 = function() {serverVersion >= 50707};
  var peg$f33 = function() {serverVersion >= 80014};
  var peg$f34 = function() {serverVersion >= 50700};
  var peg$f35 = function() {serverVersion >= 80000};
  var peg$f36 = function() {serverVersion >= 80011};
  var peg$f37 = function() {serverVersion >= 80014};
  var peg$f38 = function() {serverVersion >= 80000};
  var peg$f39 = function() {serverVersion >= 80017};
  var peg$f40 = function() {serverVersion >= 50602};
  var peg$f41 = function() {serverVersion < 50709};
  var peg$f42 = function() {serverVersion >= 50709};
  var peg$f43 = function() { serverVersion >= 80018};
  var peg$f44 = function() { serverVersion >= 80018};
  var peg$f45 = function() {serverVersion >= 80000};
  var peg$f46 = function() {serverVersion < 80000};
  var peg$f47 = function() {serverVersion >= 80019};
  var peg$f48 = function() {serverVersion >= 80019};
  var peg$f49 = function() {serverVersion >= 80000};
  var peg$f50 = function() {serverVersion < 80000};
  var peg$f51 = function() {serverVersion < 80000};
  var peg$f52 = function() {serverVersion >= 50704 && serverVersion < 50708};
  var peg$f53 = function() {serverVersion >= 80000};
  var peg$f54 = function() {serverVersion >= 80000};
  var peg$f55 = function() {serverVersion >= 80000};
  var peg$f56 = function() {serverVersion < 80017};
  var peg$f57 = function() {serverVersion >= 80004};
  var peg$f58 = function() {serverVersion >= 80000};
  var peg$f59 = function() {serverVersion >= 80014};
  var peg$f60 = function() {serverVersion >= 80014};
  var peg$f61 = function() {serverVersion < 80017};
  var peg$f62 = function() {serverVersion >= 80000};
  var peg$f63 = function() {serverVersion >= 50605};
  var peg$f64 = function() {serverVersion >= 80000};
  var peg$f65 = function() {serverVersion >= 80000};
  var peg$f66 = function() {serverVersion >= 50704};
  var peg$f67 = function() {serverVersion > 80000};
  var peg$f68 = function() {serverVersion >= 50700};
  var peg$f69 = function() {serverVersion > 50706};
  var peg$f70 = function() {serverVersion >= 80000};
  var peg$f71 = function() {serverVersion >= 50606};
  var peg$f72 = function() {serverVersion >= 50606};
  var peg$f73 = function() {serverVersion >= 50604};
  var peg$f74 = function() {serverVersion >= 80014};
  var peg$f75 = function() {serverVersion >= 50606};
  var peg$f76 = function() {serverVersion >= 80000};
  var peg$f77 = function() {serverVersion >= 50706};
  var peg$f78 = function() {serverVersion < 80014};
  var peg$f79 = function() {serverVersion >= 80014};
  var peg$f80 = function() {serverVersion >= 50706};
  var peg$f81 = function() {serverVersion >= 80014};
  var peg$f82 = function() {serverVersion >= 80014};
  var peg$f83 = function() {serverVersion >= 80014};
  var peg$f84 = function() {serverVersion >= 80000};
  var peg$f85 = function() {serverVersion >= 80018};
  var peg$f86 = function() {serverVersion >= 50706};
  var peg$f87 = function() {serverVersion >= 50706};
  var peg$f88 = function() {serverVersion >= 80000};
  var peg$f89 = function() {serverVersion >= 80014};
  var peg$f90 = function() {serverVersion >= 50706};
  var peg$f91 = function() {serverVersion >= 80000};
  var peg$f92 = function() {serverVersion < 80011};
  var peg$f93 = function() {serverVersion >= 80011};
  var peg$f94 = function() {serverVersion < 80011};
  var peg$f95 = function() {serverVersion >= 80011};
  var peg$f96 = function() {serverVersion < 80011};
  var peg$f97 = function() {serverVersion >= 80000};
  var peg$f98 = function() {serverVersion >= 80000};
  var peg$f99 = function() {serverVersion < 80000};
  var peg$f100 = function() {serverVersion >= 80000};
  var peg$f101 = function() {serverVersion > 80000};
  var peg$f102 = function() {serverVersion > 80000};
  var peg$f103 = function() {serverVersion >= 80017};
  var peg$f104 = function() {serverVersion >= 80000};
  var peg$f105 = function() {serverVersion < 50706};
  var peg$f106 = function() {serverVersion < 80014};
  var peg$f107 = function() {serverVersion >= 80018};
  var peg$f108 = function() {serverVersion >= 80011};
  var peg$f109 = function() {serverVersion >= 80000};
  var peg$f110 = function() {serverVersion < 50700};
  var peg$f111 = function() {serverVersion >= 80000};
  var peg$f112 = function() {serverVersion < 50700};
  var peg$f113 = function() {serverVersion >= 50704};
  var peg$f114 = function() {serverVersion >= 80000};
  var peg$f115 = function() {serverVersion >= 80000};
  var peg$f116 = function() {serverVersion >= 80014};
  var peg$f117 = function() {serverVersion >= 80000};
  var peg$f118 = function() {serverVersion >= 50700 && serverVersion < 50706};
  var peg$f119 = function() {serverVersion >= 50709};
  var peg$f120 = function() {serverVersion < 80000};
  var peg$f121 = function() {serverVersion >= 50706};
  var peg$f122 = function() {serverVersion >= 50606};
  var peg$f123 = function() {serverVersion >= 80011};
  var peg$f124 = function() {serverVersion < 80000};
  var peg$f125 = function() {serverVersion < 80000};
  var peg$f126 = function() {serverVersion >= 50605};
  var peg$f127 = function() {serverVersion >= 80018};
  var peg$f128 = function() {serverVersion >= 80019};
  var peg$f129 = function() {serverVersion >= 50603};
  var peg$f130 = function() {serverVersion >= 50700};
  var peg$f131 = function(head, tail) {
      return tail.reduce((result, element) => {
        return {
          type: element.type,
          left: result,
          operator: element.operator,
          right: element.right
        };
      }, head);
    };
  var peg$f132 = function(right) { return { type: 'AND', operator: text(), right }; };
  var peg$f133 = function(right) { return { type: 'XOR', operator: 'XOR', right }; };
  var peg$f134 = function(right) { return { type: 'OR', operator: text(), right }; };
  var peg$f135 = function(head, tail) {
      return tail.reduce((result, element) => {
        return {
          type: element.type,
          left: result,
          operator: element.operator,
          right: element.right
        };
      }, head);
    };
  var peg$f136 = function(not) { return { type: 'IS_NULL', operator: 'IS', not, right: 'NULL' }; };
  var peg$f137 = function(right) { return { type: 'COMP_OP', operator: text(), right }; };
  var peg$f138 = function() { return { type: 'COMP_OP_SUBQUERY', operator: text(), subquery }; };
  var peg$f139 = function() {serverVersion >= 80017};
  var peg$f140 = function(right) { return { type: 'MEMBER_OF', operator: 'MEMBER OF', right }; };
  var peg$f141 = function(right) { return { type: 'SOUNDS_LIKE', operator: 'SOUNDS LIKE', right }; };
  var peg$f142 = function() {serverVersion >= 80017};
  var peg$f143 = function(head, tail) {
      return tail.reduce((result, element) => {
        return {
          type: element.type,
          left: result,
          operator: element.operator,
          right: element.right
        };
      }, head);
    };
  var peg$f144 = function(right) { return { type: 'BITWISE_XOR', operator: '^', right }; };
  var peg$f145 = function(right) { return { type: 'MULT_DIV_MOD', operator: text(), right }; };
  var peg$f146 = function(right) { return { type: 'PLUS_MINUS', operator: text(), right }; };
  var peg$f147 = function(expr, interval) { return { type: 'PLUS_MINUS_INTERVAL', operator: text(), expr, interval }; };
  var peg$f148 = function(right) { return { type: 'SHIFT', operator: text(), right }; };
  var peg$f149 = function(right) { return { type: 'BITWISE_AND', operator: '&', right }; };
  var peg$f150 = function(right) { return { type: 'BITWISE_OR', operator: '|', right }; };
  var peg$f151 = function(head, tail) {
      return tail.reduce((result, element) => {
        return {
          type: element.type,
          left: result,
          operator: element.operator,
          right: element.right
        };
      }, head);
    };
  var peg$f152 = function() {serverVersion >= 80000};
  var peg$f153 = function() {serverVersion >= 80000};
  var peg$f154 = function(right) { return { type: 'COLLATE', operator: 'COLLATE', right }; };
  var peg$f155 = function(right) { return { type: 'CONCAT', operator: '||', right }; };
  var peg$f156 = function(right) { return { type: 'INTERVAL_PLUS', operator: '+', expr, interval, right }; };
  var peg$f157 = function() {serverVersion >= 80017};
  var peg$f158 = function() {serverVersion >= 50708};
  var peg$f159 = function() {serverVersion >= 50713};
  var peg$f160 = function() {serverVersion >= 80000};
  var peg$f161 = function() {serverVersion >= 80000};
  var peg$f162 = function() {serverVersion >= 80000};
  var peg$f163 = function() {serverVersion >= 80000};
  var peg$f164 = function() {serverVersion >= 80000};
  var peg$f165 = function() {serverVersion >= 80000};
  var peg$f166 = function() {serverVersion >= 80000};
  var peg$f167 = function() {serverVersion >= 80000};
  var peg$f168 = function() {serverVersion >= 80000};
  var peg$f169 = function() {serverVersion >= 80000};
  var peg$f170 = function() {serverVersion >= 80000};
  var peg$f171 = function() {serverVersion >= 80000};
  var peg$f172 = function() {serverVersion >= 80000};
  var peg$f173 = function() {serverVersion < 50607};
  var peg$f174 = function() {serverVersion < 80011};
  var peg$f175 = function() {serverVersion < 80000};
  var peg$f176 = function() {serverVersion < 50706};
  var peg$f177 = function() {serverVersion >= 50604};
  var peg$f178 = function() {serverVersion < 80017};
  var peg$f179 = function() {serverVersion >= 80017};
  var peg$f180 = function() {serverVersion >= 50708};
  var peg$f181 = function() {serverVersion >= 80017};
  var peg$f182 = function() {serverVersion >= 80017};
  var peg$f183 = function() {serverVersion >= 50706};
  var peg$f184 = function() {serverVersion >= 50700};
  var peg$f185 = function() {serverVersion < 80016};
  var peg$f186 = function() {serverVersion >= 80017};
  var peg$f187 = function() {serverVersion >= 80014};
  var peg$f188 = function() {serverVersion >= 80013};
  var peg$f189 = function() {serverVersion >= 80000};
  var peg$f190 = function() {serverVersion >= 80017};
  var peg$f191 = function() {serverVersion >= 80017};
  var peg$f192 = function() {serverVersion >= 80013};
  var peg$f193 = function() {serverVersion < 80013};
  var peg$f194 = function() {serverVersion >= 80000};
  var peg$f195 = function() {serverVersion >= 50708};
  var peg$f196 = function() {serverVersion < 80011};
  var peg$f197 = function() {serverVersion < 80011};
  var peg$f198 = function() {serverVersion >= 80018};
  var peg$f199 = function() {serverVersion >= 80014};
  var peg$f200 = function() {serverVersion >= 50708};
  var peg$f201 = function() {serverVersion >= 50711};
  var peg$f202 = function() {serverVersion >= 50707};
  var peg$f203 = function() {serverVersion >= 50700};
  var peg$f204 = function() {serverVersion < 80011};
  var peg$f205 = function() {serverVersion >= 50706};
  var peg$f206 = function() {serverVersion >= 80018};
  var peg$f207 = function() {serverVersion >= 80014};
  var peg$f208 = function() {serverVersion >= 50602};
  var peg$f209 = function() {serverVersion >= 80000};
  var peg$f210 = function() {serverVersion < 80000};
  var peg$f211 = function() {serverInfo.isSqlModeActive(serverInfo.ANSI_QUOTES)};
  var peg$f212 = function() {serverVersion < 80000};
  var peg$f213 = function() {serverVersion >= 80017};
  var peg$f214 = function() {serverVersion >= 80017};
  var peg$f215 = function() {serverVersion < 80017};
  var peg$f216 = function() {serverVersion >= 50709};
  var peg$f217 = function() {serverVersion >= 80011};
  var peg$f218 = function() {serverVersion < 80017};
  var peg$f219 = function() {serverVersion >= 80019};
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0;

    s0 = peg$parsequery();

    return s0;
  }

  function peg$parsequery() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parseEOF();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesimpleStatement();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebeginWork();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseSEMICOLON_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOF();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseEOF();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesimpleStatement() {
    var s0, s1, s2;

    s0 = peg$parsealterStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecreateStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedropStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parserenameTableStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetruncateTableStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$savedPos = peg$currPos;
              s1 = peg$f0();
              if (s1) {
                s1 = undefined;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseimportStatement();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parsecallStatement();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsedeleteStatement();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsedoStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsehandlerStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseinsertStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseloadStatement();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsereplaceStatement();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseselectStatement();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseupdateStatement();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsetransactionOrLockingStatement();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsereplicationStatement();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsepreparedStatement();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        peg$savedPos = peg$currPos;
                                        s1 = peg$f1();
                                        if (s1) {
                                          s1 = undefined;
                                        } else {
                                          s1 = peg$FAILED;
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parsecloneStatement();
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseaccountManagementStatement();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsetableAdministrationStatement();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseinstallUninstallStatment();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsesetStatement();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseshowStatement();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    peg$savedPos = peg$currPos;
                                                    s1 = peg$f2();
                                                    if (s1) {
                                                      s1 = undefined;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseresourceGroupManagement();
                                                      if (s2 !== peg$FAILED) {
                                                        s1 = [s1, s2];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseotherAdministrativeStatement();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseutilityStatement();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          peg$savedPos = peg$currPos;
                                                          s1 = peg$f3();
                                                          if (s1) {
                                                            s1 = undefined;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                          }
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parsegetDiagnostics();
                                                            if (s2 !== peg$FAILED) {
                                                              s1 = [s1, s2];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsesignalStatement();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseresignalStatement();
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsealterStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseALTER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsealterTable();
      if (s2 === peg$FAILED) {
        s2 = peg$parsealterDatabase();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsePROCEDURE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsequalifiedIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseroutineAlterOptions();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseFUNCTION_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsequalifiedIdentifier();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseroutineAlterOptions();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$parsealterView();
              if (s2 === peg$FAILED) {
                s2 = peg$parsealterEvent();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsealterTablespace();
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s3 = peg$f4();
                    if (s3) {
                      s3 = undefined;
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsealterUndoTablespace();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsealterLogfileGroup();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsealterServer();
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          peg$savedPos = peg$currPos;
                          s3 = peg$f5();
                          if (s3) {
                            s3 = undefined;
                          } else {
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseINSTANCE_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseROTATE_SYMBOL();
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parsetextOrIdentifier();
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parseMASTER_SYMBOL();
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parseKEY_SYMBOL();
                                    if (s8 !== peg$FAILED) {
                                      s3 = [s3, s4, s5, s6, s7, s8];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterDatabase() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseDATABASE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsecreateDatabaseOption();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsecreateDatabaseOption();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          peg$savedPos = peg$currPos;
          s4 = peg$f6();
          if (s4) {
            s4 = undefined;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseUPGRADE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseDATA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDIRECTORY_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseNAME_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7, s8];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterEvent() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parsedefinerClause();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseEVENT_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsequalifiedIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseON_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseSCHEDULE_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseschedule();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$currPos;
        s6 = peg$parseON_SYMBOL();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseCOMPLETION_SYMBOL();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseNOT_SYMBOL();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parsePRESERVE_SYMBOL();
            if (s9 !== peg$FAILED) {
              s6 = [s6, s7, s8, s9];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$currPos;
        s7 = peg$parseRENAME_SYMBOL();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseTO_SYMBOL();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseidentifier();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseENABLE_SYMBOL();
        if (s7 === peg$FAILED) {
          s7 = peg$currPos;
          s8 = peg$parseDISABLE_SYMBOL();
          if (s8 !== peg$FAILED) {
            s9 = peg$currPos;
            s10 = peg$parseON_SYMBOL();
            if (s10 !== peg$FAILED) {
              s11 = peg$parseSLAVE_SYMBOL();
              if (s11 !== peg$FAILED) {
                s10 = [s10, s11];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$currPos;
        s9 = peg$parseCOMMENT_SYMBOL();
        if (s9 !== peg$FAILED) {
          s10 = peg$parsetextLiteral();
          if (s10 !== peg$FAILED) {
            s9 = [s9, s10];
            s8 = s9;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$currPos;
        s10 = peg$parseDO_SYMBOL();
        if (s10 !== peg$FAILED) {
          s11 = peg$parsecompoundStatement();
          if (s11 !== peg$FAILED) {
            s10 = [s10, s11];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterLogfileGroup() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLOGFILE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseGROUP_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseADD_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseUNDOFILE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextLiteral();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsealterLogfileGroupOptions();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterLogfileGroupOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsealterLogfileGroupOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsealterLogfileGroupOption();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parsealterLogfileGroupOption();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterLogfileGroupOption() {
    var s0;

    s0 = peg$parsetsOptionInitialSize();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetsOptionEngine();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionWait();
      }
    }

    return s0;
  }

  function peg$parsealterServer() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSERVER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextOrIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseserverOptions();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterTable() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseonlineOption();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    peg$savedPos = peg$currPos;
    s3 = peg$f7();
    if (s3) {
      s3 = undefined;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseIGNORE_SYMBOL();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseTABLE_SYMBOL();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsetableRef();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsealterTableActions();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s1 = [s1, s2, s3, s4, s5];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterTableActions() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsealterCommandList();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepartitionClause();
      if (s2 === peg$FAILED) {
        s2 = peg$parseremovePartitioning();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsepartitionClause();
      if (s0 === peg$FAILED) {
        s0 = peg$parseremovePartitioning();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parsealterCommandsModifierList();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCOMMA_SYMBOL();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          s2 = peg$parsestandaloneAlterCommands();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsealterCommandList() {
    var s0, s1, s2, s3;

    s0 = peg$parsealterCommandsModifierList();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsealterCommandsModifierList();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOMMA_SYMBOL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parsealterList();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsealterCommandsModifierList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsealterCommandsModifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsealterCommandsModifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterCommandsModifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestandaloneAlterCommands() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDISCARD_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTABLESPACE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIMPORT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLESPACE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsealterPartition();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f8();
          if (s1) {
            s1 = undefined;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSECONDARY_LOAD_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseSECONDARY_UNLOAD_SYMBOL();
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsealterPartition() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseADD_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePARTITION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenoWriteToBinLog();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parsepartitionDefinitions();
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsePARTITIONS_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsereal_ulong_number();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDROP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARTITION_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifierList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseREBUILD_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePARTITION_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenoWriteToBinLog();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parseallOrPartitionNameList();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseOPTIMIZE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsePARTITION_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenoWriteToBinLog();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parseallOrPartitionNameList();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsenoWriteToBinLog();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseANALYZE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsePARTITION_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenoWriteToBinLog();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parseallOrPartitionNameList();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCHECK_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsePARTITION_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseallOrPartitionNameList();
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsecheckOption();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parsecheckOption();
                    }
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseREPAIR_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsePARTITION_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsenoWriteToBinLog();
                    if (s3 === peg$FAILED) {
                      s3 = null;
                    }
                    s4 = peg$parseallOrPartitionNameList();
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parserepairType();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parserepairType();
                      }
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseCOALESCE_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsePARTITION_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsenoWriteToBinLog();
                      if (s3 === peg$FAILED) {
                        s3 = null;
                      }
                      s4 = peg$parsereal_ulong_number();
                      if (s4 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseTRUNCATE_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsePARTITION_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseallOrPartitionNameList();
                        if (s3 !== peg$FAILED) {
                          s1 = [s1, s2, s3];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseREORGANIZE_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsePARTITION_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsenoWriteToBinLog();
                          if (s3 === peg$FAILED) {
                            s3 = null;
                          }
                          s4 = peg$currPos;
                          s5 = peg$parseidentifierList();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseINTO_SYMBOL();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parsepartitionDefinitions();
                              if (s7 !== peg$FAILED) {
                                s5 = [s5, s6, s7];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                          if (s4 === peg$FAILED) {
                            s4 = null;
                          }
                          s1 = [s1, s2, s3, s4];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseEXCHANGE_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsePARTITION_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseidentifier();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseWITH_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseTABLE_SYMBOL();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parsetableRef();
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parsewithValidation();
                                    if (s7 === peg$FAILED) {
                                      s7 = null;
                                    }
                                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$savedPos = peg$currPos;
                          s1 = peg$f9();
                          if (s1) {
                            s1 = undefined;
                          } else {
                            s1 = peg$FAILED;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseDISCARD_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parsePARTITION_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseallOrPartitionNameList();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseTABLESPACE_SYMBOL();
                                  if (s5 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            peg$savedPos = peg$currPos;
                            s1 = peg$f10();
                            if (s1) {
                              s1 = undefined;
                            } else {
                              s1 = peg$FAILED;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseIMPORT_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsePARTITION_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseallOrPartitionNameList();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseTABLESPACE_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsealterList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsealterListItem();
    if (s1 === peg$FAILED) {
      s1 = peg$parsecreateTableOptionsSpaceSeparated();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsealterListItem();
        if (s5 === peg$FAILED) {
          s5 = peg$parsealterCommandsModifier();
          if (s5 === peg$FAILED) {
            s5 = peg$parsecreateTableOptionsSpaceSeparated();
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterListItem();
          if (s5 === peg$FAILED) {
            s5 = peg$parsealterCommandsModifier();
            if (s5 === peg$FAILED) {
              s5 = peg$parsecreateTableOptionsSpaceSeparated();
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterCommandsModifier() {
    var s0;

    s0 = peg$parsealterAlgorithmOption();
    if (s0 === peg$FAILED) {
      s0 = peg$parsealterLockOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewithValidation();
      }
    }

    return s0;
  }

  function peg$parsealterListItem() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseADD_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCOLUMN_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parseidentifier();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefieldDefinition();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsecheckOrReferences();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseplace();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseOPEN_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableElementList();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseCLOSE_PAR_SYMBOL();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseADD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableConstraintDef();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHANGE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCOLUMN_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefieldDefinition();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseplace();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMODIFY_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCOLUMN_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsefieldDefinition();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseplace();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDROP_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseCOLUMN_SYMBOL();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parseidentifier();
              if (s4 !== peg$FAILED) {
                s5 = peg$parserestrict();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseFOREIGN_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseKEY_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s6 = peg$f11();
                    if (s6) {
                      s6 = undefined;
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseidentifier();
                      if (s7 !== peg$FAILED) {
                        s6 = [s6, s7];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 === peg$FAILED) {
                      s5 = peg$currPos;
                      peg$savedPos = peg$currPos;
                      s6 = peg$f12();
                      if (s6) {
                        s6 = undefined;
                      } else {
                        s6 = peg$FAILED;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseidentifier();
                        if (s7 === peg$FAILED) {
                          s7 = null;
                        }
                        s6 = [s6, s7];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      s3 = [s3, s4, s5];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parsePRIMARY_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseKEY_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsekeyOrIndex();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsefieldIdentifier();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      peg$savedPos = peg$currPos;
                      s3 = peg$f13();
                      if (s3) {
                        s3 = undefined;
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseCHECK_SYMBOL();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseidentifier();
                          if (s5 !== peg$FAILED) {
                            s3 = [s3, s4, s5];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        peg$savedPos = peg$currPos;
                        s3 = peg$f14();
                        if (s3) {
                          s3 = undefined;
                        } else {
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCONSTRAINT_SYMBOL();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseidentifier();
                            if (s5 !== peg$FAILED) {
                              s3 = [s3, s4, s5];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDISABLE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseKEYS_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseENABLE_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseKEYS_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseALTER_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseCOLUMN_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    s3 = peg$parseidentifier();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$currPos;
                      s5 = peg$parseSET_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseDEFAULT_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$currPos;
                          peg$savedPos = peg$currPos;
                          s8 = peg$f15();
                          if (s8) {
                            s8 = undefined;
                          } else {
                            s8 = peg$FAILED;
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseexprWithParentheses();
                            if (s9 !== peg$FAILED) {
                              s8 = [s8, s9];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsesignedLiteral();
                          }
                          if (s7 !== peg$FAILED) {
                            s5 = [s5, s6, s7];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                      if (s4 === peg$FAILED) {
                        s4 = peg$currPos;
                        s5 = peg$parseDROP_SYMBOL();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseDEFAULT_SYMBOL();
                          if (s6 !== peg$FAILED) {
                            s5 = [s5, s6];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      }
                      if (s4 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s1 = peg$f16();
                    if (s1) {
                      s1 = undefined;
                    } else {
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseALTER_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseINDEX_SYMBOL();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsefieldIdentifier();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parsevisibility();
                            if (s5 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$savedPos = peg$currPos;
                      s1 = peg$f17();
                      if (s1) {
                        s1 = undefined;
                      } else {
                        s1 = peg$FAILED;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseALTER_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseCHECK_SYMBOL();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseidentifier();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseconstraintEnforcement();
                              if (s5 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$savedPos = peg$currPos;
                        s1 = peg$f18();
                        if (s1) {
                          s1 = undefined;
                        } else {
                          s1 = peg$FAILED;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseALTER_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseCONSTRAINT_SYMBOL();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseidentifier();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseconstraintEnforcement();
                                if (s5 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4, s5];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$savedPos = peg$currPos;
                          s1 = peg$f19();
                          if (s1) {
                            s1 = undefined;
                          } else {
                            s1 = peg$FAILED;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseRENAME_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseCOLUMN_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseidentifier();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseTO_SYMBOL();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parseidentifier();
                                    if (s6 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5, s6];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseRENAME_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseTO_SYMBOL();
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseAS_SYMBOL();
                              }
                              if (s2 === peg$FAILED) {
                                s2 = null;
                              }
                              s3 = peg$parsetableName();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              peg$savedPos = peg$currPos;
                              s1 = peg$f20();
                              if (s1) {
                                s1 = undefined;
                              } else {
                                s1 = peg$FAILED;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseRENAME_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsekeyOrIndex();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsefieldIdentifier();
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parseTO_SYMBOL();
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parseidentifier();
                                        if (s6 !== peg$FAILED) {
                                          s1 = [s1, s2, s3, s4, s5, s6];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseCONVERT_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseTO_SYMBOL();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsecharset();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$currPos;
                                      peg$savedPos = peg$currPos;
                                      s5 = peg$f21();
                                      if (s5) {
                                        s5 = undefined;
                                      } else {
                                        s5 = peg$FAILED;
                                      }
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parseDEFAULT_SYMBOL();
                                        if (s6 !== peg$FAILED) {
                                          s5 = [s5, s6];
                                          s4 = s5;
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                      if (s4 === peg$FAILED) {
                                        s4 = peg$parsecharsetName();
                                      }
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parsecollate();
                                        if (s5 === peg$FAILED) {
                                          s5 = null;
                                        }
                                        s1 = [s1, s2, s3, s4, s5];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseFORCE_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseORDER_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseBY_SYMBOL();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parsealterOrderList();
                                        if (s3 !== peg$FAILED) {
                                          s1 = [s1, s2, s3];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      peg$savedPos = peg$currPos;
                                      s1 = peg$f22();
                                      if (s1) {
                                        s1 = undefined;
                                      } else {
                                        s1 = peg$FAILED;
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseUPGRADE_SYMBOL();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parsePARTITIONING_SYMBOL();
                                          if (s3 !== peg$FAILED) {
                                            s1 = [s1, s2, s3];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseplace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAFTER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseFIRST_SYMBOL();
    }

    return s0;
  }

  function peg$parserestrict() {
    var s0;

    s0 = peg$parseRESTRICT_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCASCADE_SYMBOL();
    }

    return s0;
  }

  function peg$parsealterOrderList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedirection();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseCOMMA_SYMBOL();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseidentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsedirection();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseidentifier();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsedirection();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterAlgorithmOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseALGORITHM_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseDEFAULT_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = peg$parseidentifier();
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterLockOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseLOCK_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseDEFAULT_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = peg$parseidentifier();
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindexLockAndAlgorithm() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsealterAlgorithmOption();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsealterLockOption();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsealterLockOption();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealterAlgorithmOption();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsewithValidation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f23();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWITH_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parseWITHOUT_SYMBOL();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVALIDATION_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseremovePartitioning() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseREMOVE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePARTITIONING_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseallOrPartitionNameList() {
    var s0;

    s0 = peg$parseALL_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseidentifierList();
    }

    return s0;
  }

  function peg$parsealterTablespace() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseTABLESPACE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseADD_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$parseDROP_SYMBOL();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDATAFILE_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetextLiteral();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsealterTablespaceOptions();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          peg$savedPos = peg$currPos;
          s4 = peg$f24();
          if (s4) {
            s4 = undefined;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseCHANGE_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDATAFILE_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetextLiteral();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parsechangeTablespaceOption();
                  if (s10 !== peg$FAILED) {
                    s11 = [];
                    s12 = peg$currPos;
                    s13 = peg$parseCOMMA_SYMBOL();
                    if (s13 === peg$FAILED) {
                      s13 = null;
                    }
                    s14 = peg$parsechangeTablespaceOption();
                    if (s14 !== peg$FAILED) {
                      s13 = [s13, s14];
                      s12 = s13;
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$currPos;
                      s13 = peg$parseCOMMA_SYMBOL();
                      if (s13 === peg$FAILED) {
                        s13 = null;
                      }
                      s14 = peg$parsechangeTablespaceOption();
                      if (s14 !== peg$FAILED) {
                        s13 = [s13, s14];
                        s12 = s13;
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    }
                    s10 = [s10, s11];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseREAD_ONLY_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseREAD_WRITE_SYMBOL();
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseNOT_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseACCESSIBLE_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseRENAME_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseTO_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseidentifier();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              peg$savedPos = peg$currPos;
              s4 = peg$f25();
              if (s4) {
                s4 = undefined;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsealterTablespaceOptions();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterUndoTablespace() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseUNDO_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTABLESPACE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSET_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseACTIVE_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseINACTIVE_SYMBOL();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseundoTableSpaceOptions();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseundoTableSpaceOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetsOptionEngine();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsetsOptionEngine();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parsetsOptionEngine();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterTablespaceOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsealterTablespaceOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsealterTablespaceOption();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parsealterTablespaceOption();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterTablespaceOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseINITIAL_SIZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsesizeNumber();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsetsOptionAutoextendSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionMaxSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionEngine();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionWait();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionEncryption();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsechangeTablespaceOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseINITIAL_SIZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsesizeNumber();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsetsOptionAutoextendSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionMaxSize();
      }
    }

    return s0;
  }

  function peg$parsealterView() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseviewAlgorithm();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsedefinerClause();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseviewSuid();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseVIEW_SYMBOL();
    if (s4 !== peg$FAILED) {
      s5 = peg$parseviewRef();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseviewTail();
        if (s6 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5, s6];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseviewTail() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecolumnInternalRefList();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseAS_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseviewSelect();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseviewSelect() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsequeryExpressionOrParens();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseviewCheckOption();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseviewCheckOption() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseWITH_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCASCADED_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLOCAL_SYMBOL();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCHECK_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseOPTION_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseCREATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecreateDatabase();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecreateTable();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecreateFunction();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecreateProcedure();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecreateUdf();
              if (s2 === peg$FAILED) {
                s2 = peg$parsecreateLogfileGroup();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsecreateView();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsecreateTrigger();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsecreateIndex();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsecreateServer();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsecreateTablespace();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsecreateEvent();
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              peg$savedPos = peg$currPos;
                              s3 = peg$f26();
                              if (s3) {
                                s3 = undefined;
                              } else {
                                s3 = peg$FAILED;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsecreateRole();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                peg$savedPos = peg$currPos;
                                s3 = peg$f27();
                                if (s3) {
                                  s3 = undefined;
                                } else {
                                  s3 = peg$FAILED;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsecreateSpatialReference();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  peg$savedPos = peg$currPos;
                                  s3 = peg$f28();
                                  if (s3) {
                                    s3 = undefined;
                                  } else {
                                    s3 = peg$FAILED;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsecreateUndoTablespace();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateDatabase() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDATABASE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifNotExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseidentifier();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parsecreateDatabaseOption();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parsecreateDatabaseOption();
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateDatabaseOption() {
    var s0, s1, s2;

    s0 = peg$parsedefaultCharset();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedefaultCollation();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f29();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedefaultEncryption();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsecreateTable() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseTEMPORARY_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseTABLE_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseifNotExists();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsetableName();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$currPos;
        s7 = peg$parseOPEN_PAR_SYMBOL();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsetableElementList();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseCLOSE_PAR_SYMBOL();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parsecreateTableOptions();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parsepartitionClause();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parseduplicateAsQueryExpression();
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s6 = [s6, s7, s8, s9];
        s5 = s6;
        if (s5 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableElementList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetableElement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetableElement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableElement() {
    var s0;

    s0 = peg$parsecolumnDefinition();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetableConstraintDef();
    }

    return s0;
  }

  function peg$parseduplicateAsQueryExpression() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseREPLACE_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseIGNORE_SYMBOL();
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseAS_SYMBOL();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parsequeryExpressionOrParens();
    if (s3 !== peg$FAILED) {
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsequeryExpressionOrParens() {
    var s0;

    s0 = peg$parsequeryExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parsequeryExpressionParens();
    }

    return s0;
  }

  function peg$parsecreateRoutine() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseCREATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecreateProcedure();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecreateFunction();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecreateUdf();
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSEMICOLON_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseEOF();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateProcedure() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsedefinerClause();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsePROCEDURE_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsequalifiedIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseOPEN_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseprocedureParameter();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$currPos;
            s9 = peg$parseCOMMA_SYMBOL();
            if (s9 !== peg$FAILED) {
              s10 = peg$parseprocedureParameter();
              if (s10 !== peg$FAILED) {
                s9 = [s9, s10];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$currPos;
              s9 = peg$parseCOMMA_SYMBOL();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseprocedureParameter();
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            }
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseCLOSE_PAR_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseroutineCreateOption();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseroutineCreateOption();
            }
            s8 = peg$parsecompoundStatement();
            if (s8 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsedefinerClause();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseFUNCTION_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsequalifiedIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseOPEN_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parsefunctionParameter();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$currPos;
            s9 = peg$parseCOMMA_SYMBOL();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsefunctionParameter();
              if (s10 !== peg$FAILED) {
                s9 = [s9, s10];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$currPos;
              s9 = peg$parseCOMMA_SYMBOL();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsefunctionParameter();
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            }
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseCLOSE_PAR_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseRETURNS_SYMBOL();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsetypeWithOptCollate();
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parseroutineCreateOption();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseroutineCreateOption();
                }
                s10 = peg$parsecompoundStatement();
                if (s10 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateUdf() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAGGREGATE_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseFUNCTION_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseidentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseRETURNS_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSTRING_SYMBOL();
          if (s5 === peg$FAILED) {
            s5 = peg$parseINT_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseREAL_SYMBOL();
              if (s5 === peg$FAILED) {
                s5 = peg$parseDECIMAL_SYMBOL();
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseSONAME_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetextLiteral();
              if (s7 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6, s7];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseroutineCreateOption() {
    var s0, s1, s2;

    s0 = peg$parseroutineOption();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNOT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseDETERMINISTIC_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseroutineAlterOptions() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseroutineCreateOption();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseroutineCreateOption();
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseroutineOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCOMMENT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextLiteral();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLANGUAGE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSQL_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNO_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSQL_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCONTAINS_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSQL_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseREADS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseSQL_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseDATA_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMODIFIES_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseSQL_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseDATA_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseSQL_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseSECURITY_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseDEFINER_SYMBOL();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseINVOKER_SYMBOL();
                    }
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecreateIndex() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseonlineOption();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    s3 = peg$parseUNIQUE_SYMBOL();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseINDEX_SYMBOL();
    if (s4 !== peg$FAILED) {
      s5 = peg$currPos;
      peg$savedPos = peg$currPos;
      s6 = peg$f30();
      if (s6) {
        s6 = undefined;
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseidentifier();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseindexTypeClause();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = peg$parseindexNameAndType();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parsecreateIndexTarget();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseindexOption();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseindexOption();
          }
          s3 = [s3, s4, s5, s6, s7];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseFULLTEXT_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseINDEX_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecreateIndexTarget();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsefulltextIndexOption();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsefulltextIndexOption();
              }
              s3 = [s3, s4, s5, s6, s7];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseSPATIAL_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseINDEX_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecreateIndexTarget();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsecommonIndexOption();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsecommonIndexOption();
                }
                s3 = [s3, s4, s5, s6, s7];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseindexLockAndAlgorithm();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindexNameAndType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseUSING_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseindexType();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTYPE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseindexType();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecreateIndexTarget() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseON_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetableRef();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsekeyListVariants();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateLogfileGroup() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLOGFILE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseGROUP_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseADD_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseUNDOFILE_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseREDOFILE_SYMBOL();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextLiteral();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselogfileGroupOptions();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselogfileGroupOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parselogfileGroupOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parselogfileGroupOption();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parselogfileGroupOption();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselogfileGroupOption() {
    var s0;

    s0 = peg$parsetsOptionInitialSize();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetsOptionUndoRedoBufferSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionNodegroup();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionEngine();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionWait();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionComment();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecreateServer() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSERVER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextOrIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFOREIGN_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDATA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWRAPPER_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextOrIdentifier();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseserverOptions();
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseserverOptions() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseOPTIONS_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseserverOption();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseserverOption();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseserverOption();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s5 = peg$parseCLOSE_PAR_SYMBOL();
          if (s5 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseserverOption() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHOST_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextLiteral();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDATABASE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUSER_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextLiteral();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePASSWORD_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetextLiteral();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSOCKET_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsetextLiteral();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseOWNER_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsetextLiteral();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePORT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseulong_number();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecreateTablespace() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseTABLESPACE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetsDataFileName();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseUSE_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseLOGFILE_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseGROUP_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseidentifier();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parsetablespaceOptions();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateUndoTablespace() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseUNDO_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTABLESPACE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseADD_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetsDataFile();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseundoTableSpaceOptions();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsDataFileName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f31();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseADD_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetsDataFile();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseADD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetsDataFile();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetsDataFile() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDATAFILE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextLiteral();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetablespaceOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetablespaceOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsetablespaceOption();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parsetablespaceOption();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetablespaceOption() {
    var s0, s1, s2;

    s0 = peg$parsetsOptionInitialSize();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetsOptionAutoextendSize();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetsOptionMaxSize();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetsOptionExtentSize();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetsOptionNodegroup();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetsOptionEngine();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetsOptionWait();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetsOptionComment();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s1 = peg$f32();
                    if (s1) {
                      s1 = undefined;
                    } else {
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsetsOptionFileblockSize();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$savedPos = peg$currPos;
                      s1 = peg$f33();
                      if (s1) {
                        s1 = undefined;
                      } else {
                        s1 = peg$FAILED;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsetsOptionEncryption();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetsOptionInitialSize() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseINITIAL_SIZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsesizeNumber();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionUndoRedoBufferSize() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsesizeNumber();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionAutoextendSize() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsesizeNumber();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionMaxSize() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseMAX_SIZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsesizeNumber();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionExtentSize() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseEXTENT_SIZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsesizeNumber();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionNodegroup() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNODEGROUP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsereal_ulong_number();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionEngine() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseSTORAGE_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseENGINE_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseEQUAL_OPERATOR();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsetextOrIdentifier();
      if (s4 !== peg$FAILED) {
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionWait() {
    var s0;

    s0 = peg$parseWAIT_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNO_WAIT_SYMBOL();
    }

    return s0;
  }

  function peg$parsetsOptionComment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCOMMENT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsetextLiteral();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionFileblockSize() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsesizeNumber();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetsOptionEncryption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseENCRYPTION_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseSINGLE_QUOTED_TEXT();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateView() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseviewReplaceOrAlgorithm();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsedefinerClause();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseviewSuid();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseVIEW_SYMBOL();
    if (s4 !== peg$FAILED) {
      s5 = peg$parseviewName();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseviewTail();
        if (s6 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5, s6];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseviewReplaceOrAlgorithm() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseREPLACE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseviewAlgorithm();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseviewAlgorithm();
    }

    return s0;
  }

  function peg$parseviewAlgorithm() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseALGORITHM_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealgorithm() {
    var s0;

    s0 = peg$parseUNDEFINED_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMERGE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTEMPTABLE_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parseviewSuid() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSQL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSECURITY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDEFINER_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseINVOKER_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateTrigger() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedefinerClause();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseTRIGGER_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsequalifiedIdentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetiming() {
    var s0;

    s0 = peg$parseBEFORE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAFTER_SYMBOL();
    }

    return s0;
  }

  function peg$parseevent() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseINSERT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseUPDATE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDELETE_SYMBOL();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseON_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetableRef();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFOR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEACH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseROW_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetriggerFollowsPrecedesClause();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s8 = peg$parsecompoundStatement();
                if (s8 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetriggerFollowsPrecedesClause() {
    var s0;

    peg$savedPos = peg$currPos;
    s0 = peg$f34();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseordering() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseFOLLOWS_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parsePRECEDES_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextOrIdentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateEvent() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parsedefinerClause();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseEVENT_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseifNotExists();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsequalifiedIdentifier();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseON_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseSCHEDULE_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseschedule();
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parseON_SYMBOL();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseCOMPLETION_SYMBOL();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseNOT_SYMBOL();
                  if (s11 === peg$FAILED) {
                    s11 = null;
                  }
                  s12 = peg$parsePRESERVE_SYMBOL();
                  if (s12 !== peg$FAILED) {
                    s9 = [s9, s10, s11, s12];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s9 = peg$parseENABLE_SYMBOL();
              if (s9 === peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseDISABLE_SYMBOL();
                if (s10 !== peg$FAILED) {
                  s11 = peg$currPos;
                  s12 = peg$parseON_SYMBOL();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parseSLAVE_SYMBOL();
                    if (s13 !== peg$FAILED) {
                      s12 = [s12, s13];
                      s11 = s12;
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                  if (s11 === peg$FAILED) {
                    s11 = null;
                  }
                  s10 = [s10, s11];
                  s9 = s10;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              }
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              s10 = peg$currPos;
              s11 = peg$parseCOMMENT_SYMBOL();
              if (s11 !== peg$FAILED) {
                s12 = peg$parsetextLiteral();
                if (s12 !== peg$FAILED) {
                  s11 = [s11, s12];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s11 = peg$parseDO_SYMBOL();
              if (s11 !== peg$FAILED) {
                s12 = peg$parsecompoundStatement();
                if (s12 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateRole() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseROLE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifNotExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseroleList();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateSpatialReference() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseOR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseREPLACE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSPATIAL_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseREFERENCE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSYSTEM_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsereal_ulonglong_number();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsesrsAttribute();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsesrsAttribute();
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSPATIAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREFERENCE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSYSTEM_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseifNotExists();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = peg$parsereal_ulonglong_number();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsesrsAttribute();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsesrsAttribute();
              }
              s1 = [s1, s2, s3, s4, s5, s6];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesrsAttribute() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNAME_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTEXT_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSINGLE_QUOTED_TEXT();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDEFINITION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTEXT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseORGANIZATION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSINGLE_QUOTED_TEXT();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIDENTIFIED_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseBY_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsereal_ulonglong_number();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDESCRIPTION_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTEXT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedropStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDROP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedropDatabase();
      if (s2 === peg$FAILED) {
        s2 = peg$parsedropEvent();
        if (s2 === peg$FAILED) {
          s2 = peg$parsedropFunction();
          if (s2 === peg$FAILED) {
            s2 = peg$parsedropProcedure();
            if (s2 === peg$FAILED) {
              s2 = peg$parsedropIndex();
              if (s2 === peg$FAILED) {
                s2 = peg$parsedropLogfileGroup();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsedropServer();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsedropTable();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsedropTableSpace();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsedropTrigger();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsedropView();
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            peg$savedPos = peg$currPos;
                            s3 = peg$f35();
                            if (s3) {
                              s3 = undefined;
                            } else {
                              s3 = peg$FAILED;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parsedropRole();
                              if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              peg$savedPos = peg$currPos;
                              s3 = peg$f36();
                              if (s3) {
                                s3 = undefined;
                              } else {
                                s3 = peg$FAILED;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsedropSpatialReference();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                peg$savedPos = peg$currPos;
                                s3 = peg$f37();
                                if (s3) {
                                  s3 = undefined;
                                } else {
                                  s3 = peg$FAILED;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsedropUndoTablespace();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropDatabase() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDATABASE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseidentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropEvent() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseEVENT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsequalifiedIdentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseFUNCTION_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsequalifiedIdentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropProcedure() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePROCEDURE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsequalifiedIdentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropIndex() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseonlineOption();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseINDEX_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsefieldIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseON_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableRef();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseindexLockAndAlgorithm();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropLogfileGroup() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseLOGFILE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseGROUP_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsedropLogfileGroupOption();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parseCOMMA_SYMBOL();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parsedropLogfileGroupOption();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s9 = peg$parsedropLogfileGroupOption();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropLogfileGroupOption() {
    var s0;

    s0 = peg$parsetsOptionWait();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetsOptionEngine();
    }

    return s0;
  }

  function peg$parsedropServer() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSERVER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsetextOrIdentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropTable() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTEMPORARY_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseTABLE_SYMBOL();
    if (s2 === peg$FAILED) {
      s2 = peg$parseTABLES_SYMBOL();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseifExists();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsetableRefList();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseRESTRICT_SYMBOL();
        if (s5 === peg$FAILED) {
          s5 = peg$parseCASCADE_SYMBOL();
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s1 = [s1, s2, s3, s4, s5];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropTableSpace() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseTABLESPACE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsedropLogfileGroupOption();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseCOMMA_SYMBOL();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parsedropLogfileGroupOption();
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseCOMMA_SYMBOL();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parsedropLogfileGroupOption();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropTrigger() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTRIGGER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsequalifiedIdentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropView() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseVIEW_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseviewRefList();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseRESTRICT_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$parseCASCADE_SYMBOL();
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropRole() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseROLE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifExists();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseroleList();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropSpatialReference() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSPATIAL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseREFERENCE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSYSTEM_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseifExists();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parsereal_ulonglong_number();
          if (s5 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropUndoTablespace() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseUNDO_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTABLESPACE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseundoTableSpaceOptions();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserenameTableStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseRENAME_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTABLE_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parseTABLES_SYMBOL();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parserenamePair();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parserenamePair();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parserenamePair();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserenamePair() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetableRef();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTO_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetableName();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetruncateTableStatement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTRUNCATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTABLE_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsetableRef();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseimportStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseIMPORT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTABLE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFROM_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextStringLiteralList();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecallStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseCALL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequalifiedIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseOPEN_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexprList();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseCLOSE_PAR_SYMBOL();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeleteStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$savedPos = peg$currPos;
    s2 = peg$f38();
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsewithClause();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseDELETE_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsedeleteStatementOption();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsedeleteStatementOption();
      }
      s4 = peg$currPos;
      s5 = peg$parseFROM_SYMBOL();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parsetableAliasRefList();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseUSING_SYMBOL();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsetableReferenceList();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsewhereClause();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsetableRef();
          if (s7 !== peg$FAILED) {
            s8 = peg$currPos;
            peg$savedPos = peg$currPos;
            s9 = peg$f39();
            if (s9) {
              s9 = undefined;
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parsetableAlias();
              if (s10 !== peg$FAILED) {
                s9 = [s9, s10];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parsepartitionDelete();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parsewhereClause();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s11 = peg$parseorderClause();
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s12 = peg$parsesimpleLimitClause();
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s7 = [s7, s8, s9, s10, s11, s12];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsetableAliasRefList();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseFROM_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetableReferenceList();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsewhereClause();
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s5 = [s5, s6, s7, s8];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionDelete() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f40();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePARTITION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPEN_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifierList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeleteStatementOption() {
    var s0;

    s0 = peg$parseQUICK_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLOW_PRIORITY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseQUICK_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIGNORE_SYMBOL();
        }
      }
    }

    return s0;
  }

  function peg$parsedoStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDO_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$savedPos = peg$currPos;
      s3 = peg$f41();
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseexprList();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        peg$savedPos = peg$currPos;
        s3 = peg$f42();
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseselectItemList();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehandlerStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseHANDLER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsetableRef();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseOPEN_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableAlias();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseREAD_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsehandlerReadOrScan();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsewhereClause();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s8 = peg$parselimitClause();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehandlerReadOrScan() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$parseFIRST_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNEXT_SYMBOL();
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFIRST_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseNEXT_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePREV_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseLAST_SYMBOL();
            }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$parseLESS_THAN_OPERATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$parseGREATER_THAN_OPERATOR();
              if (s3 === peg$FAILED) {
                s3 = peg$parseLESS_OR_EQUAL_OPERATOR();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseGREATER_OR_EQUAL_OPERATOR();
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPEN_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsevalues();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseinsertStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseINSERT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinsertLockOption();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseIGNORE_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseINTO_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsetableRef();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseusePartition();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$currPos;
        s8 = peg$parseinsertFromConstructor();
        if (s8 !== peg$FAILED) {
          s9 = peg$currPos;
          peg$savedPos = peg$currPos;
          s10 = peg$f43();
          if (s10) {
            s10 = undefined;
          } else {
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parsevaluesReference();
            if (s11 !== peg$FAILED) {
              s10 = [s10, s11];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s8 = [s8, s9];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = peg$currPos;
          s8 = peg$parseSET_SYMBOL();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseupdateList();
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              peg$savedPos = peg$currPos;
              s11 = peg$f44();
              if (s11) {
                s11 = undefined;
              } else {
                s11 = peg$FAILED;
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parsevaluesReference();
                if (s12 !== peg$FAILED) {
                  s11 = [s11, s12];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = peg$parseinsertQueryExpression();
          }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseinsertUpdateList();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsertLockOption() {
    var s0;

    s0 = peg$parseLOW_PRIORITY_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDELAYED_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHIGH_PRIORITY_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parseinsertFromConstructor() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseOPEN_PAR_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsefields();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseCLOSE_PAR_SYMBOL();
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseinsertValues();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefields() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseinsertIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseinsertIdentifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseinsertIdentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsertValues() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseVALUES_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseVALUE_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalueList();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsertQueryExpression() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsequeryExpressionOrParens();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefields();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequeryExpressionOrParens();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsevalueList() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalues();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCLOSE_PAR_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseCOMMA_SYMBOL();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseOPEN_PAR_SYMBOL();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsevalues();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseCLOSE_PAR_SYMBOL();
            if (s9 !== peg$FAILED) {
              s6 = [s6, s7, s8, s9];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseOPEN_PAR_SYMBOL();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsevalues();
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s9 = peg$parseCLOSE_PAR_SYMBOL();
              if (s9 !== peg$FAILED) {
                s6 = [s6, s7, s8, s9];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalues() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 === peg$FAILED) {
      s1 = peg$parseDEFAULT_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseexpr();
        if (s5 === peg$FAILED) {
          s5 = peg$parseDEFAULT_SYMBOL();
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDEFAULT_SYMBOL();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevaluesReference() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAS_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecolumnInternalRefList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsertUpdateList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseON_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDUPLICATE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseKEY_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseUPDATE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseupdateList();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseloadStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parseLOAD_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedataOrXml();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLOW_PRIORITY_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCONCURRENT_SYMBOL();
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseLOCAL_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseINFILE_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsetextLiteral();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseREPLACE_SYMBOL();
            if (s7 === peg$FAILED) {
              s7 = peg$parseIGNORE_SYMBOL();
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parseINTO_SYMBOL();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseTABLE_SYMBOL();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsetableRef();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseusePartition();
                  if (s11 === peg$FAILED) {
                    s11 = null;
                  }
                  s12 = peg$parsecharsetClause();
                  if (s12 === peg$FAILED) {
                    s12 = null;
                  }
                  s13 = peg$parsexmlRowsIdentifiedBy();
                  if (s13 === peg$FAILED) {
                    s13 = null;
                  }
                  s14 = peg$parsefieldsClause();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  s15 = peg$parselinesClause();
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s16 = peg$parseloadDataFileTail();
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedataOrXml() {
    var s0;

    s0 = peg$parseDATA_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseXML_SYMBOL();
    }

    return s0;
  }

  function peg$parsexmlRowsIdentifiedBy() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseROWS_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIDENTIFIED_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBY_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextString();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseloadDataFileTail() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseIGNORE_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseINT_NUMBER();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseLINES_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = peg$parseROWS_SYMBOL();
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseloadDataFileTargetList();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$currPos;
    s4 = peg$parseSET_SYMBOL();
    if (s4 !== peg$FAILED) {
      s5 = peg$parseupdateList();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s1 = [s1, s2, s3];
    s0 = s1;

    return s0;
  }

  function peg$parseloadDataFileTargetList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefieldOrVariableList();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCLOSE_PAR_SYMBOL();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefieldOrVariableList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefieldIdentifier();
    if (s1 === peg$FAILED) {
      s1 = peg$parseuserVariable();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefieldIdentifier();
        if (s5 === peg$FAILED) {
          s5 = peg$parseuserVariable();
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefieldIdentifier();
          if (s5 === peg$FAILED) {
            s5 = peg$parseuserVariable();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereplaceStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseREPLACE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLOW_PRIORITY_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parseDELAYED_SYMBOL();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseINTO_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsetableRef();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseusePartition();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseinsertFromConstructor();
        if (s6 === peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parseSET_SYMBOL();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseupdateList();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = peg$parseinsertQueryExpression();
          }
        }
        if (s6 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5, s6];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselectStatement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsequeryExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselockingClauseList();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsequeryExpressionParens();
      if (s0 === peg$FAILED) {
        s0 = peg$parseselectStatementWithInto();
      }
    }

    return s0;
  }

  function peg$parseselectStatementWithInto() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseselectStatementWithInto();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsequeryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseintoClause();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselockingClauseList();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselockingClauseList();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseintoClause();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsequeryExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$savedPos = peg$currPos;
    s2 = peg$f45();
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsewithClause();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    s3 = peg$parsequeryExpressionBody();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseorderClause();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parselimitClause();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsequeryExpressionParens();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseorderClause();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parselimitClause();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$savedPos = peg$currPos;
      s4 = peg$f46();
      if (s4) {
        s4 = undefined;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseprocedureAnalyseClause();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsequeryExpressionBody() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsequeryPrimary();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parsequeryExpressionParens();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseUNION_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseunionOption();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parsequeryPrimary();
          if (s5 === peg$FAILED) {
            s5 = peg$parsequeryExpressionParens();
          }
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseUNION_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseunionOption();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parsequeryPrimary();
        if (s6 === peg$FAILED) {
          s6 = peg$parsequeryExpressionParens();
        }
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseUNION_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseunionOption();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parsequeryPrimary();
          if (s6 === peg$FAILED) {
            s6 = peg$parsequeryExpressionParens();
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsequeryExpressionParens() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequeryExpressionParens();
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsequeryExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parselockingClauseList();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsequeryPrimary() {
    var s0, s1, s2;

    s0 = peg$parsequerySpecification();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f47();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableValueConstructor();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f48();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexplicitTable();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsequerySpecification() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseSELECT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseselectOption();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseselectOption();
      }
      s3 = peg$parseselectItemList();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseintoClause();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parsefromClause();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parsewhereClause();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parsegroupByClause();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parsehavingClause();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$currPos;
        peg$savedPos = peg$currPos;
        s10 = peg$f49();
        if (s10) {
          s10 = undefined;
        } else {
          s10 = peg$FAILED;
        }
        if (s10 !== peg$FAILED) {
          s11 = peg$parsewindowClause();
          if (s11 !== peg$FAILED) {
            s10 = [s10, s11];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsequerySpecOption() {
    var s0;

    s0 = peg$parseALL_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDISTINCT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseHIGH_PRIORITY_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSQL_SMALL_RESULT_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSQL_BIG_RESULT_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSQL_CALC_FOUND_ROWS_SYMBOL();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselimitClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseLIMIT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselimitOptions();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesimpleLimitClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseLIMIT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselimitOption();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselimitOptions() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parselimitOption();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCOMMA_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = peg$parseOFFSET_SYMBOL();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parselimitOption();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselimitOption() {
    var s0;

    s0 = peg$parseidentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePARAM_MARKER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseULONGLONG_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLONG_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseINT_NUMBER();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseintoClause() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseINTO_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseOUTFILE_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseSINGLE_QUOTED_TEXT();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecharsetClause();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parsefieldsClause();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parselinesClause();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s3 = [s3, s4, s5, s6, s7];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDUMPFILE_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSINGLE_QUOTED_TEXT();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsetextOrIdentifier();
          if (s3 === peg$FAILED) {
            s3 = peg$parseuserVariable();
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetextOrIdentifier();
              if (s7 === peg$FAILED) {
                s7 = peg$parseuserVariable();
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetextOrIdentifier();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseuserVariable();
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprocedureAnalyseClause() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsePROCEDURE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseANALYSE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPEN_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseINT_NUMBER();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseCOMMA_SYMBOL();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseINT_NUMBER();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseCLOSE_PAR_SYMBOL();
          if (s5 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehavingClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHAVING_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewindowClause() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseWINDOW_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewindowDefinition();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewindowDefinition();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewindowDefinition();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewindowDefinition() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAS_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewindowSpec();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewindowSpec() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewindowSpecDetails();
      s3 = peg$parseCLOSE_PAR_SYMBOL();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewindowSpecDetails() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    s3 = peg$parsePARTITION_SYMBOL();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseBY_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseorderList();
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseorderClause();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parsewindowFrameClause();
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s1 = [s1, s2, s3, s4];
    s0 = s1;

    return s0;
  }

  function peg$parsewindowFrameClause() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsewindowFrameUnits();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewindowFrameExtent();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewindowFrameExclusion();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewindowFrameUnits() {
    var s0;

    s0 = peg$parseROWS_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRANGE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseGROUPS_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parsewindowFrameExtent() {
    var s0;

    s0 = peg$parsewindowFrameStart();
    if (s0 === peg$FAILED) {
      s0 = peg$parsewindowFrameBetween();
    }

    return s0;
  }

  function peg$parsewindowFrameStart() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseUNBOUNDED_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePRECEDING_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseulonglong_number();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePRECEDING_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePARAM_MARKER();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePRECEDING_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseINTERVAL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpr();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseinterval();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsePRECEDING_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCURRENT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseROW_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewindowFrameBetween() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseBETWEEN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewindowFrameBound();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAND_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewindowFrameBound();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewindowFrameBound() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsewindowFrameStart();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUNBOUNDED_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFOLLOWING_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseulonglong_number();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFOLLOWING_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePARAM_MARKER();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFOLLOWING_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseINTERVAL_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexpr();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseinterval();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseFOLLOWING_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewindowFrameExclusion() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseEXCLUDE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCURRENT_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseROW_SYMBOL();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseGROUP_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTIES_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseNO_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseOTHERS_SYMBOL();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewithClause() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseWITH_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRECURSIVE_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsecommonTableExpression();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseCOMMA_SYMBOL();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsecommonTableExpression();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecommonTableExpression();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecommonTableExpression() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecolumnInternalRefList();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseAS_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsequeryExpressionParens();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegroupByClause() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseGROUP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseorderList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseolapOption();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseolapOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseWITH_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseROLLUP_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f50();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWITH_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCUBE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseorderClause() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseORDER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseorderList();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirection() {
    var s0;

    s0 = peg$parseASC_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDESC_SYMBOL();
    }

    return s0;
  }

  function peg$parsefromClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseFROM_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDUAL_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parsetableReferenceList();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableReferenceList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetableReference();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetableReference();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableReference();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableValueConstructor() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseVALUES_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserowValueExplicit();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parserowValueExplicit();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parserowValueExplicit();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexplicitTable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTABLE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetableRef();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserowValueExplicit() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseROW_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevalues();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselectOption() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsequerySpecOption();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSQL_NO_CACHE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f51();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSQL_CACHE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f52();
          if (s1) {
            s1 = undefined;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseMAX_STATEMENT_TIME_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseEQUAL_OPERATOR();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsereal_ulong_number();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parselockingClauseList() {
    var s0, s1;

    s0 = [];
    s1 = peg$parselockingClause();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parselockingClause();
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselockingClause() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseFOR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselockStrengh();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$savedPos = peg$currPos;
        s4 = peg$f53();
        if (s4) {
          s4 = undefined;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOF_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetableAliasRefList();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        peg$savedPos = peg$currPos;
        s5 = peg$f54();
        if (s5) {
          s5 = undefined;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parselockedRowAction();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLOCK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIN_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSHARE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMODE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parselockStrengh() {
    var s0, s1, s2;

    s0 = peg$parseUPDATE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f55();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSHARE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parselockedRowAction() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSKIP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLOCKED_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseNOWAIT_SYMBOL();
    }

    return s0;
  }

  function peg$parseselectItemList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseselectItem();
    if (s1 === peg$FAILED) {
      s1 = peg$parseMULT_OPERATOR();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseselectItem();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseselectItem();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselectItem() {
    var s0, s1, s2;

    s0 = peg$parsetableWild();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselectAlias();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseselectAlias() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAS_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseidentifier();
    if (s2 === peg$FAILED) {
      s2 = peg$parseSINGLE_QUOTED_TEXT();
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhereClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseWHERE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableReference() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetableFactor();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parseOPEN_CURLY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$savedPos = peg$currPos;
        s4 = peg$f56();
        if (s4) {
          s4 = undefined;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseOJ_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseescapedTableReference();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_CURLY_SYMBOL();
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsejoinedTable();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsejoinedTable();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseescapedTableReference() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetableFactor();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsejoinedTable();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsejoinedTable();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejoinedTable() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseinnerJoinType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetableReference();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseON_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseUSING_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifierListWithParentheses();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseouterJoinType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetableReference();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseON_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseUSING_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierListWithParentheses();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenaturalJoinType();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetableFactor();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsenaturalJoinType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNATURAL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINNER_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseJOIN_SYMBOL();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNATURAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLEFT_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseRIGHT_SYMBOL();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOUTER_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseJOIN_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseinnerJoinType() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseINNER_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseCROSS_SYMBOL();
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseJOIN_SYMBOL();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
    }

    return s0;
  }

  function peg$parseouterJoinType() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseLEFT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseRIGHT_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOUTER_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseJOIN_SYMBOL();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableFactor() {
    var s0, s1, s2;

    s0 = peg$parsesingleTable();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesingleTableParens();
      if (s0 === peg$FAILED) {
        s0 = peg$parsederivedTable();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetableReferenceListParens();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$f57();
            if (s1) {
              s1 = undefined;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsetableFunction();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesingleTable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsetableRef();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseusePartition();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsetableAlias();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseindexHintList();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s1 = [s1, s2, s3, s4];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesingleTableParens() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesingleTable();
      if (s2 === peg$FAILED) {
        s2 = peg$parsesingleTableParens();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsederivedTable() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsequeryExpressionParens();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetableAlias();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      peg$savedPos = peg$currPos;
      s4 = peg$f58();
      if (s4) {
        s4 = undefined;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecolumnInternalRefList();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f59();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLATERAL_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequeryExpressionParens();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetableAlias();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = peg$parsecolumnInternalRefList();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetableReferenceListParens() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetableReferenceList();
      if (s2 === peg$FAILED) {
        s2 = peg$parsetableReferenceListParens();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseJSON_TABLE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCOMMA_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSINGLE_QUOTED_TEXT();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecolumnsClause();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCLOSE_PAR_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetableAlias();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolumnsClause() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseCOLUMNS_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsejtColumn();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsejtColumn();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsejtColumn();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s5 = peg$parseCLOSE_PAR_SYMBOL();
          if (s5 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejtColumn() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFOR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseORDINALITY_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedataType();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$savedPos = peg$currPos;
          s4 = peg$f60();
          if (s4) {
            s4 = undefined;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecollate();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseEXISTS_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parsePATH_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseSINGLE_QUOTED_TEXT();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseonEmptyOrError();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6, s7];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNESTED_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePATH_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecolumnsClause();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseonEmptyOrError() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseonEmpty();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseonError();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseonError();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseonEmpty();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseonEmpty() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsejtOnResponse();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseON_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEMPTY_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseonError() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsejtOnResponse();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseON_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseERROR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejtOnResponse() {
    var s0, s1, s2;

    s0 = peg$parseERROR_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNULL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDEFAULT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSINGLE_QUOTED_TEXT();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseunionOption() {
    var s0;

    s0 = peg$parseDISTINCT_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseALL_SYMBOL();
    }

    return s0;
  }

  function peg$parsetableAlias() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAS_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      peg$savedPos = peg$currPos;
      s2 = peg$f61();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEQUAL_OPERATOR();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseidentifier();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindexHintList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseindexHint();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseindexHint();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseindexHint();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindexHint() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseindexHintType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsekeyOrIndex();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseindexHintClause();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseOPEN_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseindexList();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseCLOSE_PAR_SYMBOL();
            if (s6 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5, s6];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUSE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyOrIndex();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseindexHintClause();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseOPEN_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseindexList();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseCLOSE_PAR_SYMBOL();
            if (s6 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5, s6];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseindexHintType() {
    var s0;

    s0 = peg$parseFORCE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIGNORE_SYMBOL();
    }

    return s0;
  }

  function peg$parsekeyOrIndex() {
    var s0;

    s0 = peg$parseKEY_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseINDEX_SYMBOL();
    }

    return s0;
  }

  function peg$parseconstraintKeyType() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsePRIMARY_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKEY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUNIQUE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyOrIndex();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseindexHintClause() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseFOR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseJOIN_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseORDER_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseBY_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseGROUP_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBY_SYMBOL();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindexList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseindexListElement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseindexListElement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseindexListElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindexListElement() {
    var s0;

    s0 = peg$parseidentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePRIMARY_SYMBOL();
    }

    return s0;
  }

  function peg$parseupdateStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$savedPos = peg$currPos;
    s2 = peg$f62();
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsewithClause();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseUPDATE_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseLOW_PRIORITY_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseIGNORE_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsetableReferenceList();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseSET_SYMBOL();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseupdateList();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsewhereClause();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseorderClause();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parsesimpleLimitClause();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetransactionOrLockingStatement() {
    var s0;

    s0 = peg$parsetransactionStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesavepointStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parselockStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsexaStatement();
        }
      }
    }

    return s0;
  }

  function peg$parsetransactionStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSTART_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTRANSACTION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsetransactionCharacteristic();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsetransactionCharacteristic();
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCOMMIT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWORK_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$currPos;
        s4 = peg$parseAND_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseNO_SYMBOL();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseCHAIN_SYMBOL();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        s5 = peg$parseNO_SYMBOL();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseRELEASE_SYMBOL();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebeginWork() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBEGIN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWORK_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetransactionCharacteristic() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseWITH_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCONSISTENT_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSNAPSHOT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f63();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREAD_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWRITE_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseONLY_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesavepointStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSAVEPOINT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseROLLBACK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWORK_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$currPos;
        s4 = peg$parseTO_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSAVEPOINT_SYMBOL();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseidentifier();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$parseAND_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseNO_SYMBOL();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseCHAIN_SYMBOL();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$currPos;
          s6 = peg$parseNO_SYMBOL();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseRELEASE_SYMBOL();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s4 = [s4, s5];
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRELEASE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSAVEPOINT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parselockStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLOCK_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTABLES_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselockItem();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parselockItem();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselockItem();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f64();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLOCK_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseINSTANCE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFOR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBACKUP_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUNLOCK_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTABLES_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseTABLE_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$savedPos = peg$currPos;
              s3 = peg$f65();
              if (s3) {
                s3 = undefined;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseINSTANCE_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parselockItem() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetableRef();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetableAlias();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parselockOption();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselockOption() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseREAD_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLOCAL_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLOW_PRIORITY_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseWRITE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsexaStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseXA_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseSTART_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = peg$parseBEGIN_SYMBOL();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsexid();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseJOIN_SYMBOL();
          if (s5 === peg$FAILED) {
            s5 = peg$parseRESUME_SYMBOL();
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseEND_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsexid();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseSUSPEND_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parseFOR_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseMIGRATE_SYMBOL();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsePREPARE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsexid();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseCOMMIT_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsexid();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseONE_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsePHASE_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseROLLBACK_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsexid();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseRECOVER_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsexaConvert();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsexaConvert() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f66();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCONVERT_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseXID_SYMBOL();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsexid() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetextString();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCOMMA_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetextString();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseulong_number();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresetOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseMASTER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemasterResetOptions();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseQUERY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCACHE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSLAVE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseALL_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parsechannel();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsemasterResetOptions() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTO_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsereal_ulong_number();
      if (s2 === peg$FAILED) {
        s2 = peg$parsereal_ulonglong_number();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereplicationStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsePURGE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBINARY_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parseMASTER_SYMBOL();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLOGS_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseTO_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetextLiteral();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseBEFORE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpr();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsechangeMaster();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRESET_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseresetOption();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseresetOption();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parseCOMMA_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseresetOption();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f67();
          if (s1) {
            s1 = undefined;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseRESET_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsePERSIST_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$parseifExists();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseidentifier();
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseslave();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$savedPos = peg$currPos;
              s1 = peg$f68();
              if (s1) {
                s1 = undefined;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsechangeReplication();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parsereplicationLoad();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  peg$savedPos = peg$currPos;
                  s1 = peg$f69();
                  if (s1) {
                    s1 = undefined;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsegroupReplication();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsereplicationLoad() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseLOAD_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDATA_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseTABLE_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetableRef();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFROM_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMASTER_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsechangeMaster() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCHANGE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseMASTER_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTO_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsechangeMasterOptions();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsechannel();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsechangeMasterOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemasterOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemasterOption();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemasterOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemasterOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseMASTER_HOST_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSINGLE_QUOTED_TEXT();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNETWORK_NAMESPACE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMASTER_BIND_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMASTER_USER_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMASTER_PASSWORD_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseSINGLE_QUOTED_TEXT();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMASTER_PORT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseulong_number();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseulong_number();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEQUAL_OPERATOR();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseulong_number();
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseMASTER_DELAY_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseEQUAL_OPERATOR();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseulong_number();
                        if (s3 !== peg$FAILED) {
                          s1 = [s1, s2, s3];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseMASTER_SSL_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseEQUAL_OPERATOR();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseulong_number();
                          if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseMASTER_SSL_CA_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseEQUAL_OPERATOR();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseSINGLE_QUOTED_TEXT();
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseEQUAL_OPERATOR();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseSINGLE_QUOTED_TEXT();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseEQUAL_OPERATOR();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseSINGLE_QUOTED_TEXT();
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseMASTER_SSL_CERT_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseEQUAL_OPERATOR();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseSINGLE_QUOTED_TEXT();
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseEQUAL_OPERATOR();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsemasterTlsCiphersuitesDef();
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseEQUAL_OPERATOR();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseSINGLE_QUOTED_TEXT();
                                      if (s3 !== peg$FAILED) {
                                        s1 = [s1, s2, s3];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseEQUAL_OPERATOR();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseSINGLE_QUOTED_TEXT();
                                        if (s3 !== peg$FAILED) {
                                          s1 = [s1, s2, s3];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseMASTER_SSL_VERIFY_SERVER_CERT_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseEQUAL_OPERATOR();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseulong_number();
                                          if (s3 !== peg$FAILED) {
                                            s1 = [s1, s2, s3];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseEQUAL_OPERATOR();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parsetextLiteral();
                                            if (s3 !== peg$FAILED) {
                                              s1 = [s1, s2, s3];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseEQUAL_OPERATOR();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseSINGLE_QUOTED_TEXT();
                                              if (s3 !== peg$FAILED) {
                                                s1 = [s1, s2, s3];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseEQUAL_OPERATOR();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseSINGLE_QUOTED_TEXT();
                                                if (s3 !== peg$FAILED) {
                                                  s1 = [s1, s2, s3];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parseEQUAL_OPERATOR();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parseulong_number();
                                                  if (s3 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseEQUAL_OPERATOR();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseulong_number();
                                                    if (s3 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseEQUAL_OPERATOR();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseserverIdList();
                                                      if (s3 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseEQUAL_OPERATOR();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parseSINGLE_QUOTED_TEXT();
                                                        if (s3 !== peg$FAILED) {
                                                          s1 = [s1, s2, s3];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parseEQUAL_OPERATOR();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parseulong_number();
                                                          if (s3 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parseEQUAL_OPERATOR();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parseulong_number();
                                                            if (s3 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parseEQUAL_OPERATOR();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parseprivilegeCheckDef();
                                                              if (s3 !== peg$FAILED) {
                                                                s1 = [s1, s2, s3];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseREQUIRE_ROW_FORMAT_SYMBOL();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parseEQUAL_OPERATOR();
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parseulong_number();
                                                                if (s3 !== peg$FAILED) {
                                                                  s1 = [s1, s2, s3];
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseEQUAL_OPERATOR();
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parsetablePrimaryKeyCheckDef();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s1 = [s1, s2, s3];
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsemasterFileDef();
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseprivilegeCheckDef() {
    var s0;

    s0 = peg$parseuserIdentifierOrText();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNULL_SYMBOL();
    }

    return s0;
  }

  function peg$parsetablePrimaryKeyCheckDef() {
    var s0;

    s0 = peg$parseSTREAM_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseON_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOFF_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parsemasterTlsCiphersuitesDef() {
    var s0;

    s0 = peg$parseSINGLE_QUOTED_TEXT();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNULL_SYMBOL();
    }

    return s0;
  }

  function peg$parsemasterFileDef() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseMASTER_LOG_FILE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSINGLE_QUOTED_TEXT();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMASTER_LOG_POS_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseulonglong_number();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRELAY_LOG_FILE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSINGLE_QUOTED_TEXT();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRELAY_LOG_POS_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseulong_number();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseserverIdList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseulong_number();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseCOMMA_SYMBOL();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseulong_number();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseulong_number();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCLOSE_PAR_SYMBOL();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsechangeReplication() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseCHANGE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseREPLICATION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFILTER_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefilterDefinition();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parseCOMMA_SYMBOL();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsefilterDefinition();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsefilterDefinition();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            s6 = peg$currPos;
            peg$savedPos = peg$currPos;
            s7 = peg$f70();
            if (s7) {
              s7 = undefined;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsechannel();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterDefinition() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseREPLICATE_DO_DB_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPEN_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefilterDbList();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseCLOSE_PAR_SYMBOL();
          if (s5 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefilterDbList();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPEN_PAR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsefilterTableList();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseOPEN_PAR_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsefilterTableList();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseOPEN_PAR_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsefilterStringList();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s5 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseOPEN_PAR_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsefilterStringList();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseOPEN_PAR_SYMBOL();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsefilterDbPairList();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      s5 = peg$parseCLOSE_PAR_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefilterDbList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseidentifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterTableList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefilterTableRef();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefilterTableRef();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefilterTableRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterStringList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSINGLE_QUOTED_TEXT();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSINGLE_QUOTED_TEXT();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSINGLE_QUOTED_TEXT();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterDbPairList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseschemaIdentifierPair();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseschemaIdentifierPair();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseschemaIdentifierPair();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslave() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSTART_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSLAVE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseslaveThreadOptions();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        s5 = peg$parseUNTIL_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseslaveUntilOptions();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseslaveConnectionOptions();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsechannel();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTOP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSLAVE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseslaveThreadOptions();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parsechannel();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseslaveUntilOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemasterFileDef();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      peg$savedPos = peg$currPos;
      s2 = peg$f71();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEQUAL_OPERATOR();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetextString();
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        peg$savedPos = peg$currPos;
        s2 = peg$f72();
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemasterFileDef();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemasterFileDef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslaveConnectionOptions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f73();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseUSER_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseEQUAL_OPERATOR();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetextString();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parsePASSWORD_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseEQUAL_OPERATOR();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsetextString();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parseDEFAULT_AUTH_SYMBOL();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseEQUAL_OPERATOR();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsetextString();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$currPos;
      s6 = peg$parsePLUGIN_DIR_SYMBOL();
      if (s6 !== peg$FAILED) {
        s7 = peg$parseEQUAL_OPERATOR();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsetextString();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s1 = [s1, s2, s3, s4, s5];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslaveThreadOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseslaveThreadOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseslaveThreadOption();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseslaveThreadOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslaveThreadOption() {
    var s0;

    s0 = peg$parseRELAY_THREAD_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSQL_THREAD_SYMBOL();
    }

    return s0;
  }

  function peg$parsegroupReplication() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSTART_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSTOP_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseGROUP_REPLICATION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepreparedStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsePREPARE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFROM_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextLiteral();
          if (s4 === peg$FAILED) {
            s4 = peg$parseuserVariable();
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseexecuteStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDEALLOCATE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDROP_SYMBOL();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePREPARE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseexecuteStatement() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseEXECUTE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseUSING_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexecuteVarList();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexecuteVarList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseuserVariable();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseuserVariable();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseuserVariable();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecloneStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseCLONE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseLOCAL_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseDATA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDIRECTORY_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseequal();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseSINGLE_QUOTED_TEXT();
            if (s7 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6, s7];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseREMOTE_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseFOR_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseREPLICATION_SYMBOL();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$savedPos = peg$currPos;
          s3 = peg$f74();
          if (s3) {
            s3 = undefined;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINSTANCE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFROM_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseuser();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCOLON_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseulong_number();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseIDENTIFIED_SYMBOL();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseBY_SYMBOL();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseSINGLE_QUOTED_TEXT();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsedataDirSSL();
                            if (s12 === peg$FAILED) {
                              s12 = null;
                            }
                            s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedataDirSSL() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$parsessl();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDATA_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIRECTORY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseequal();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseSINGLE_QUOTED_TEXT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsessl();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsessl() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseREQUIRE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNO_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseSSL_SYMBOL();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaccountManagementStatement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f75();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsealterUser();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsecreateUser();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedropUser();
        if (s0 === peg$FAILED) {
          s0 = peg$parsegrant();
          if (s0 === peg$FAILED) {
            s0 = peg$parserenameUser();
            if (s0 === peg$FAILED) {
              s0 = peg$parserevoke();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$savedPos = peg$currPos;
                s1 = peg$f76();
                if (s1) {
                  s1 = undefined;
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsesetRole();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsealterUser() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseALTER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUSER_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$savedPos = peg$currPos;
        s4 = peg$f77();
        if (s4) {
          s4 = undefined;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseifExists();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parsealterUserTail();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterUserTail() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$savedPos = peg$currPos;
    s2 = peg$f78();
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecreateUserList();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      peg$savedPos = peg$currPos;
      s2 = peg$f79();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsealterUserList();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecreateUserTail();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f80();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseuser();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIED_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBY_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetextString();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$savedPos = peg$currPos;
                s7 = peg$f81();
                if (s7) {
                  s7 = undefined;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsereplacePassword();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                s7 = peg$currPos;
                peg$savedPos = peg$currPos;
                s8 = peg$f82();
                if (s8) {
                  s8 = undefined;
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseretainCurrentPassword();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f83();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseuser();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsediscardOldPassword();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f84();
          if (s1) {
            s1 = undefined;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseuser();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDEFAULT_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseROLE_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseALL_SYMBOL();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseNONE_SYMBOL();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseroleList();
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$f85();
            if (s1) {
              s1 = undefined;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseuser();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseIDENTIFIED_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parseWITH_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsetextOrIdentifier();
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s5 = peg$parseBY_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseRANDOM_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsePASSWORD_SYMBOL();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseretainCurrentPassword();
                        if (s8 === peg$FAILED) {
                          s8 = null;
                        }
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsereal_ulong_number();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePASSWORD_LOCK_TIME_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsereal_ulong_number();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseUNBOUNDED_SYMBOL();
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseuserFunction() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseUSER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseparentheses();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateUser() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseCREATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUSER_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$savedPos = peg$currPos;
        s4 = peg$f86();
        if (s4) {
          s4 = undefined;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseifNotExists();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecreateUserList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedefaultRoleClause();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecreateUserTail();
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateUserTail() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f87();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parserequireClause();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseconnectOptions();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      s5 = peg$parseaccountLockPasswordExpireOptions();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseaccountLockPasswordExpireOptions();
      }
      s1 = [s1, s2, s3, s4];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefaultRoleClause() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f88();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDEFAULT_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseROLE_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseroleList();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserequireClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseREQUIRE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserequireList();
      if (s2 === peg$FAILED) {
        s2 = peg$parseSSL_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseX509_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseNONE_SYMBOL();
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconnectOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseWITH_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseulong_number();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseulong_number();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseulong_number();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseulong_number();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseulong_number();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseulong_number();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseulong_number();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseulong_number();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaccountLockPasswordExpireOptions() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseACCOUNT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLOCK_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parseUNLOCK_SYMBOL();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePASSWORD_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseEXPIRE_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseINTERVAL_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsereal_ulong_number();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDAY_SYMBOL();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parseNEVER_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = peg$parseDEFAULT_SYMBOL();
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseHISTORY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsereal_ulong_number();
            if (s4 === peg$FAILED) {
              s4 = peg$parseDEFAULT_SYMBOL();
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseREUSE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseINTERVAL_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parsereal_ulong_number();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseDAY_SYMBOL();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$parseDEFAULT_SYMBOL();
                }
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$savedPos = peg$currPos;
              s3 = peg$f89();
              if (s3) {
                s3 = undefined;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseREQUIRE_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseCURRENT_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseDEFAULT_SYMBOL();
                    if (s6 === peg$FAILED) {
                      s6 = peg$parseOPTIONAL_SYMBOL();
                    }
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedropUser() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDROP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUSER_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$savedPos = peg$currPos;
        s4 = peg$f90();
        if (s4) {
          s4 = undefined;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseifExists();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseuserList();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegrant() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseGRANT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$savedPos = peg$currPos;
      s3 = peg$f91();
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseroleOrPrivilegesList();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTO_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseuserList();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parseWITH_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseADMIN_SYMBOL();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseOPTION_SYMBOL();
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s3 = [s3, s4, s5, s6, s7];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseroleOrPrivilegesList();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseALL_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePRIVILEGES_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseON_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseaclType();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parsegrantIdentifier();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTO_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsegrantTargetList();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseversionedRequireClause();
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  s10 = peg$parsegrantOptions();
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  s11 = peg$parsegrantAs();
                  if (s11 === peg$FAILED) {
                    s11 = null;
                  }
                  s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsePROXY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseON_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseuser();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTO_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsegrantTargetList();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseWITH_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseGRANT_SYMBOL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseOPTION_SYMBOL();
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    s3 = [s3, s4, s5, s6, s7, s8];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegrantTargetList() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f92();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecreateUserList();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f93();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseuserList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsegrantOptions() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f94();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWITH_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsegrantOption();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsegrantOption();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f95();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWITH_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGRANT_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOPTION_SYMBOL();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseexceptRoleList() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseEXCEPT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseroleList();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewithRoles() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseWITH_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseROLE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseroleList();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseALL_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexceptRoleList();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseNONE_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = peg$parseDEFAULT_SYMBOL();
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegrantAs() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAS_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUSER_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewithRoles();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseversionedRequireClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f96();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parserequireClause();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserenameUser() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseRENAME_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUSER_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseuser();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTO_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseuser();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseuser();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseTO_SYMBOL();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseuser();
                    if (s11 !== peg$FAILED) {
                      s8 = [s8, s9, s10, s11];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseCOMMA_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseuser();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseTO_SYMBOL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseuser();
                      if (s11 !== peg$FAILED) {
                        s8 = [s8, s9, s10, s11];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              s1 = [s1, s2, s3, s4, s5, s6];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserevoke() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseREVOKE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$savedPos = peg$currPos;
      s3 = peg$f97();
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseroleOrPrivilegesList();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseFROM_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseuserList();
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseroleOrPrivilegesList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseonTypeTo();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseFROM_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseuserList();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseALL_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsePRIVILEGES_SYMBOL();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = peg$currPos;
            peg$savedPos = peg$currPos;
            s6 = peg$f98();
            if (s6) {
              s6 = undefined;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseON_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseaclType();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = peg$parsegrantIdentifier();
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseCOMMA_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseGRANT_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseOPTION_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseFROM_SYMBOL();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseuserList();
                      if (s10 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9, s10];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsePROXY_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseON_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseuser();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseFROM_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseuserList();
                    if (s7 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6, s7];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseonTypeTo() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f99();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseON_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseaclType();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parsegrantIdentifier();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f100();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseON_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseaclType();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parsegrantIdentifier();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseaclType() {
    var s0;

    s0 = peg$parseTABLE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFUNCTION_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePROCEDURE_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parseroleOrPrivilegesList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseroleOrPrivilege();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseroleOrPrivilege();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseroleOrPrivilege();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseroleOrPrivilege() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f101();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseroleIdentifierOrText();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecolumnInternalRefList();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseroleIdentifierOrText();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAT_TEXT_SUFFIX();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseAT_SIGN_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetextOrIdentifier();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSELECT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINSERT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseUPDATE_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseREFERENCES_SYMBOL();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolumnInternalRefList();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseDELETE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUSAGE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseINDEX_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDROP_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseEXECUTE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseRELOAD_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSHUTDOWN_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsePROCESS_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseFILE_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsePROXY_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseSUPER_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseEVENT_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseTRIGGER_SYMBOL();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseGRANT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOPTION_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSHOW_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseDATABASES_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCREATE_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseTEMPORARY_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseTABLES_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$parseROUTINE_SYMBOL();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseTABLESPACE_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseUSER_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseVIEW_SYMBOL();
                      }
                    }
                  }
                }
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseLOCK_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseTABLES_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseREPLICATION_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseCLIENT_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseSLAVE_SYMBOL();
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseSHOW_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseVIEW_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseALTER_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseROUTINE_SYMBOL();
                        if (s2 === peg$FAILED) {
                          s2 = null;
                        }
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$savedPos = peg$currPos;
                        s1 = peg$f102();
                        if (s1) {
                          s1 = undefined;
                        } else {
                          s1 = peg$FAILED;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseCREATE_SYMBOL();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parseDROP_SYMBOL();
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseROLE_SYMBOL();
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsegrantIdentifier() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseMULT_OPERATOR();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDOT_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseMULT_OPERATOR();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDOT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMULT_OPERATOR();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetableRef();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f103();
          if (s1) {
            s1 = undefined;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseidentifier();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDOT_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetableRef();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parserequireList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parserequireListElement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseAND_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parserequireListElement();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseAND_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parserequireListElement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserequireListElement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCIPHER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextString();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseISSUER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextString();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSUBJECT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetextString();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsegrantOption() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseGRANT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPTION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseulong_number();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseulong_number();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseulong_number();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseulong_number();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesetRole() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSET_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseROLE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseroleList();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseROLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNONE_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = peg$parseDEFAULT_SYMBOL();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSET_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDEFAULT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseROLE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseroleList();
              if (s4 === peg$FAILED) {
                s4 = peg$parseNONE_SYMBOL();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseALL_SYMBOL();
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseTO_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseroleList();
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSET_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseROLE_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseALL_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$parseEXCEPT_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseroleList();
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseroleList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parserole();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parserole();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserole();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserole() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseroleIdentifierOrText();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseAT_SIGN_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetextOrIdentifier();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseAT_TEXT_SUFFIX();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableAdministrationStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseANALYZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenoWriteToBinLog();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseTABLE_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetableRefList();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$savedPos = peg$currPos;
          s6 = peg$f104();
          if (s6) {
            s6 = undefined;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsehistogram();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCHECK_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTABLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetableRefList();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsecheckOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsecheckOption();
            }
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHECKSUM_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTABLE_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetableRefList();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseQUICK_SYMBOL();
              if (s4 === peg$FAILED) {
                s4 = peg$parseEXTENDED_SYMBOL();
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseOPTIMIZE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenoWriteToBinLog();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parseTABLE_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetableRefList();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseREPAIR_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenoWriteToBinLog();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s3 = peg$parseTABLE_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetableRefList();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parserepairType();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parserepairType();
                  }
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsehistogram() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseUPDATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHISTOGRAM_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseON_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifierList();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseWITH_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseINT_NUMBER();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseBUCKETS_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDROP_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHISTOGRAM_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifierList();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecheckOption() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseFOR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUPGRADE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseQUICK_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFAST_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMEDIUM_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseEXTENDED_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCHANGED_SYMBOL();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parserepairType() {
    var s0;

    s0 = peg$parseQUICK_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEXTENDED_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUSE_FRM_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parseinstallUninstallStatment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseINSTALL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePLUGIN_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSONAME_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSINGLE_QUOTED_TEXT();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseINSTALL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOMPONENT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetextStringLiteralList();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUNINSTALL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsePLUGIN_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUNINSTALL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCOMPONENT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseSINGLE_QUOTED_TEXT();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$currPos;
                s6 = peg$parseCOMMA_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseSINGLE_QUOTED_TEXT();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = peg$parseCOMMA_SYMBOL();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseSINGLE_QUOTED_TEXT();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesetStatement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSET_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestartOptionValueList();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestartOptionValueList() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseoptionValueNoOptionType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoptionValueListContinued();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTRANSACTION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetransactionCharacteristics();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseoptionType();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestartOptionValueListFollowingOptionType();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePASSWORD_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseFOR_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseuser();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parseequal();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsetextString();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsereplacePassword();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                s7 = peg$parseretainCurrentPassword();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$parsetextString();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsereplacePassword();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  s7 = peg$parseretainCurrentPassword();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  peg$savedPos = peg$currPos;
                  s5 = peg$f105();
                  if (s5) {
                    s5 = undefined;
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseOLD_PASSWORD_SYMBOL();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseOPEN_PAR_SYMBOL();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsetextString();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s9 !== peg$FAILED) {
                            s5 = [s5, s6, s7, s8, s9];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s5 = peg$f106();
                    if (s5) {
                      s5 = undefined;
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsePASSWORD_SYMBOL();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseOPEN_PAR_SYMBOL();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parsetextString();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseCLOSE_PAR_SYMBOL();
                            if (s9 !== peg$FAILED) {
                              s5 = [s5, s6, s7, s8, s9];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  }
                }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$f107();
            if (s1) {
              s1 = undefined;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsePASSWORD_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseFOR_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseuser();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parseTO_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseRANDOM_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsereplacePassword();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    s7 = peg$parseretainCurrentPassword();
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetransactionCharacteristics() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsetransactionAccessMode();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseisolationLevel();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseisolationLevel();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCOMMA_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetransactionAccessMode();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetransactionAccessMode() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseREAD_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWRITE_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$parseONLY_SYMBOL();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseisolationLevel() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseISOLATION_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLEVEL_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseREPEATABLE_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseREAD_SYMBOL();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseREAD_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMITTED_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = peg$parseUNCOMMITTED_SYMBOL();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseSERIALIZABLE_SYMBOL();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoptionValueListContinued() {
    var s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseCOMMA_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseoptionValue();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parseCOMMA_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoptionValue();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseoptionValueNoOptionType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseinternalVariableName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequal();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesetExprOrDefault();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsecharsetClause();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseuserVariable();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseequal();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpr();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsesetSystemVariable();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseequal();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesetExprOrDefault();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseNAMES_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseequal();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseexpr();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parsecharsetName();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsecollate();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  peg$savedPos = peg$currPos;
                  s3 = peg$f108();
                  if (s3) {
                    s3 = undefined;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseDEFAULT_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseoptionValue() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseoptionType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinternalVariableName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseequal();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesetExprOrDefault();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseoptionValueNoOptionType();
    }

    return s0;
  }

  function peg$parsesetSystemVariable() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAT_AT_SIGN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesetVarIdentType();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseinternalVariableName();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestartOptionValueListFollowingOptionType() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseoptionValueFollowingOptionType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoptionValueListContinued();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTRANSACTION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetransactionCharacteristics();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseoptionValueFollowingOptionType() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseinternalVariableName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequal();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesetExprOrDefault();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetExprOrDefault() {
    var s0, s1, s2;

    s0 = peg$parseexpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDEFAULT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseON_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseALL_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBINARY_SYMBOL();
          }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f109();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseROW_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseSYSTEM_SYMBOL();
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseshowStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseSHOW_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$savedPos = peg$currPos;
      s3 = peg$f110();
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseAUTHORS_SYMBOL();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDATABASES_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parselikeOrWhere();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseshowCommandType();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseTABLES_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseinDb();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parselikeOrWhere();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s3 = [s3, s4, s5, s6];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseFULL_SYMBOL();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parseTRIGGERS_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinDb();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parselikeOrWhere();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseEVENTS_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseinDb();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = peg$parselikeOrWhere();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseTABLE_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseSTATUS_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseinDb();
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    s6 = peg$parselikeOrWhere();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseOPEN_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseTABLES_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseinDb();
                      if (s5 === peg$FAILED) {
                        s5 = null;
                      }
                      s6 = peg$parselikeOrWhere();
                      if (s6 === peg$FAILED) {
                        s6 = null;
                      }
                      s3 = [s3, s4, s5, s6];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsePLUGINS_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseENGINE_SYMBOL();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsetextOrIdentifier();
                        if (s4 === peg$FAILED) {
                          s4 = peg$parseALL_SYMBOL();
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseSTATUS_SYMBOL();
                          if (s5 === peg$FAILED) {
                            s5 = peg$parseMUTEX_SYMBOL();
                            if (s5 === peg$FAILED) {
                              s5 = peg$parseLOGS_SYMBOL();
                            }
                          }
                          if (s5 !== peg$FAILED) {
                            s3 = [s3, s4, s5];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parseshowCommandType();
                        if (s3 === peg$FAILED) {
                          s3 = null;
                        }
                        s4 = peg$parseCOLUMNS_SYMBOL();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseFROM_SYMBOL();
                          if (s5 === peg$FAILED) {
                            s5 = peg$parseIN_SYMBOL();
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsetableRef();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseinDb();
                              if (s7 === peg$FAILED) {
                                s7 = null;
                              }
                              s8 = peg$parselikeOrWhere();
                              if (s8 === peg$FAILED) {
                                s8 = null;
                              }
                              s3 = [s3, s4, s5, s6, s7, s8];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseBINARY_SYMBOL();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parseMASTER_SYMBOL();
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseLOGS_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s3 = [s3, s4];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            s3 = peg$parseSLAVE_SYMBOL();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseHOSTS_SYMBOL();
                              if (s4 === peg$FAILED) {
                                s4 = peg$currPos;
                                s5 = peg$parseSTATUS_SYMBOL();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parsenonBlocking();
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parsechannel();
                                    if (s7 === peg$FAILED) {
                                      s7 = null;
                                    }
                                    s5 = [s5, s6, s7];
                                    s4 = s5;
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              }
                              if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              s3 = peg$parseBINLOG_SYMBOL();
                              if (s3 === peg$FAILED) {
                                s3 = peg$parseRELAYLOG_SYMBOL();
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseEVENTS_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$currPos;
                                  s6 = peg$parseIN_SYMBOL();
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parsetextString();
                                    if (s7 !== peg$FAILED) {
                                      s6 = [s6, s7];
                                      s5 = s6;
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                  if (s5 === peg$FAILED) {
                                    s5 = null;
                                  }
                                  s6 = peg$currPos;
                                  s7 = peg$parseFROM_SYMBOL();
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parseulonglong_number();
                                    if (s8 !== peg$FAILED) {
                                      s7 = [s7, s8];
                                      s6 = s7;
                                    } else {
                                      peg$currPos = s6;
                                      s6 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                  }
                                  if (s6 === peg$FAILED) {
                                    s6 = null;
                                  }
                                  s7 = peg$parselimitClause();
                                  if (s7 === peg$FAILED) {
                                    s7 = null;
                                  }
                                  s8 = peg$parsechannel();
                                  if (s8 === peg$FAILED) {
                                    s8 = null;
                                  }
                                  s3 = [s3, s4, s5, s6, s7, s8];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$currPos;
                                peg$savedPos = peg$currPos;
                                s4 = peg$f111();
                                if (s4) {
                                  s4 = undefined;
                                } else {
                                  s4 = peg$FAILED;
                                }
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseEXTENDED_SYMBOL();
                                  if (s5 !== peg$FAILED) {
                                    s4 = [s4, s5];
                                    s3 = s4;
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$FAILED;
                                }
                                if (s3 === peg$FAILED) {
                                  s3 = null;
                                }
                                s4 = peg$parseINDEX_SYMBOL();
                                if (s4 === peg$FAILED) {
                                  s4 = peg$parseINDEXES_SYMBOL();
                                  if (s4 === peg$FAILED) {
                                    s4 = peg$parseKEYS_SYMBOL();
                                  }
                                }
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parsefromOrIn();
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parsetableRef();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parseinDb();
                                      if (s7 === peg$FAILED) {
                                        s7 = null;
                                      }
                                      s8 = peg$parsewhereClause();
                                      if (s8 === peg$FAILED) {
                                        s8 = null;
                                      }
                                      s3 = [s3, s4, s5, s6, s7, s8];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  s3 = peg$parseSTORAGE_SYMBOL();
                                  if (s3 === peg$FAILED) {
                                    s3 = null;
                                  }
                                  s4 = peg$parseENGINES_SYMBOL();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$currPos;
                                    s3 = peg$parseCOUNT_SYMBOL();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseOPEN_PAR_SYMBOL();
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parseMULT_OPERATOR();
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parseCLOSE_PAR_SYMBOL();
                                          if (s6 !== peg$FAILED) {
                                            s7 = peg$parseWARNINGS_SYMBOL();
                                            if (s7 === peg$FAILED) {
                                              s7 = peg$parseERRORS_SYMBOL();
                                            }
                                            if (s7 !== peg$FAILED) {
                                              s3 = [s3, s4, s5, s6, s7];
                                              s2 = s3;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$currPos;
                                      s3 = peg$parseWARNINGS_SYMBOL();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parselimitClause();
                                        if (s4 === peg$FAILED) {
                                          s4 = null;
                                        }
                                        s3 = [s3, s4];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$currPos;
                                        s3 = peg$parseERRORS_SYMBOL();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parselimitClause();
                                          if (s4 === peg$FAILED) {
                                            s4 = null;
                                          }
                                          s3 = [s3, s4];
                                          s2 = s3;
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$FAILED;
                                        }
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$parsePROFILES_SYMBOL();
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$currPos;
                                            s3 = peg$parsePROFILE_SYMBOL();
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$currPos;
                                              s5 = peg$parseprofileType();
                                              if (s5 !== peg$FAILED) {
                                                s6 = [];
                                                s7 = peg$currPos;
                                                s8 = peg$parseCOMMA_SYMBOL();
                                                if (s8 !== peg$FAILED) {
                                                  s9 = peg$parseprofileType();
                                                  if (s9 !== peg$FAILED) {
                                                    s8 = [s8, s9];
                                                    s7 = s8;
                                                  } else {
                                                    peg$currPos = s7;
                                                    s7 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s7;
                                                  s7 = peg$FAILED;
                                                }
                                                while (s7 !== peg$FAILED) {
                                                  s6.push(s7);
                                                  s7 = peg$currPos;
                                                  s8 = peg$parseCOMMA_SYMBOL();
                                                  if (s8 !== peg$FAILED) {
                                                    s9 = peg$parseprofileType();
                                                    if (s9 !== peg$FAILED) {
                                                      s8 = [s8, s9];
                                                      s7 = s8;
                                                    } else {
                                                      peg$currPos = s7;
                                                      s7 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s7;
                                                    s7 = peg$FAILED;
                                                  }
                                                }
                                                s5 = [s5, s6];
                                                s4 = s5;
                                              } else {
                                                peg$currPos = s4;
                                                s4 = peg$FAILED;
                                              }
                                              if (s4 === peg$FAILED) {
                                                s4 = null;
                                              }
                                              s5 = peg$currPos;
                                              s6 = peg$parseFOR_SYMBOL();
                                              if (s6 !== peg$FAILED) {
                                                s7 = peg$parseQUERY_SYMBOL();
                                                if (s7 !== peg$FAILED) {
                                                  s8 = peg$parseINT_NUMBER();
                                                  if (s8 !== peg$FAILED) {
                                                    s6 = [s6, s7, s8];
                                                    s5 = s6;
                                                  } else {
                                                    peg$currPos = s5;
                                                    s5 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s5;
                                                  s5 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s5;
                                                s5 = peg$FAILED;
                                              }
                                              if (s5 === peg$FAILED) {
                                                s5 = null;
                                              }
                                              s6 = peg$parselimitClause();
                                              if (s6 === peg$FAILED) {
                                                s6 = null;
                                              }
                                              s3 = [s3, s4, s5, s6];
                                              s2 = s3;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$FAILED;
                                            }
                                            if (s2 === peg$FAILED) {
                                              s2 = peg$currPos;
                                              s3 = peg$parseoptionType();
                                              if (s3 === peg$FAILED) {
                                                s3 = null;
                                              }
                                              s4 = peg$parseSTATUS_SYMBOL();
                                              if (s4 === peg$FAILED) {
                                                s4 = peg$parseVARIABLES_SYMBOL();
                                              }
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parselikeOrWhere();
                                                if (s5 === peg$FAILED) {
                                                  s5 = null;
                                                }
                                                s3 = [s3, s4, s5];
                                                s2 = s3;
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$FAILED;
                                              }
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$currPos;
                                                s3 = peg$parseFULL_SYMBOL();
                                                if (s3 === peg$FAILED) {
                                                  s3 = null;
                                                }
                                                s4 = peg$parsePROCESSLIST_SYMBOL();
                                                if (s4 !== peg$FAILED) {
                                                  s3 = [s3, s4];
                                                  s2 = s3;
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$FAILED;
                                                }
                                                if (s2 === peg$FAILED) {
                                                  s2 = peg$currPos;
                                                  s3 = peg$parsecharset();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parselikeOrWhere();
                                                    if (s4 === peg$FAILED) {
                                                      s4 = null;
                                                    }
                                                    s3 = [s3, s4];
                                                    s2 = s3;
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$FAILED;
                                                  }
                                                  if (s2 === peg$FAILED) {
                                                    s2 = peg$currPos;
                                                    s3 = peg$parseCOLLATION_SYMBOL();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parselikeOrWhere();
                                                      if (s4 === peg$FAILED) {
                                                        s4 = null;
                                                      }
                                                      s3 = [s3, s4];
                                                      s2 = s3;
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$FAILED;
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                      s2 = peg$currPos;
                                                      peg$savedPos = peg$currPos;
                                                      s3 = peg$f112();
                                                      if (s3) {
                                                        s3 = undefined;
                                                      } else {
                                                        s3 = peg$FAILED;
                                                      }
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parseCONTRIBUTORS_SYMBOL();
                                                        if (s4 !== peg$FAILED) {
                                                          s3 = [s3, s4];
                                                          s2 = s3;
                                                        } else {
                                                          peg$currPos = s2;
                                                          s2 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$FAILED;
                                                      }
                                                      if (s2 === peg$FAILED) {
                                                        s2 = peg$parsePRIVILEGES_SYMBOL();
                                                        if (s2 === peg$FAILED) {
                                                          s2 = peg$currPos;
                                                          s3 = peg$parseGRANTS_SYMBOL();
                                                          if (s3 !== peg$FAILED) {
                                                            s4 = peg$currPos;
                                                            s5 = peg$parseFOR_SYMBOL();
                                                            if (s5 !== peg$FAILED) {
                                                              s6 = peg$parseuser();
                                                              if (s6 !== peg$FAILED) {
                                                                s5 = [s5, s6];
                                                                s4 = s5;
                                                              } else {
                                                                peg$currPos = s4;
                                                                s4 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s4;
                                                              s4 = peg$FAILED;
                                                            }
                                                            if (s4 === peg$FAILED) {
                                                              s4 = null;
                                                            }
                                                            s3 = [s3, s4];
                                                            s2 = s3;
                                                          } else {
                                                            peg$currPos = s2;
                                                            s2 = peg$FAILED;
                                                          }
                                                          if (s2 === peg$FAILED) {
                                                            s2 = peg$currPos;
                                                            s3 = peg$parseGRANTS_SYMBOL();
                                                            if (s3 !== peg$FAILED) {
                                                              s4 = peg$parseFOR_SYMBOL();
                                                              if (s4 !== peg$FAILED) {
                                                                s5 = peg$parseuser();
                                                                if (s5 !== peg$FAILED) {
                                                                  s6 = peg$parseUSING_SYMBOL();
                                                                  if (s6 !== peg$FAILED) {
                                                                    s7 = peg$parseuserList();
                                                                    if (s7 !== peg$FAILED) {
                                                                      s3 = [s3, s4, s5, s6, s7];
                                                                      s2 = s3;
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s2;
                                                                  s2 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s2;
                                                                s2 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s2;
                                                              s2 = peg$FAILED;
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                              s2 = peg$currPos;
                                                              s3 = peg$parseMASTER_SYMBOL();
                                                              if (s3 !== peg$FAILED) {
                                                                s4 = peg$parseSTATUS_SYMBOL();
                                                                if (s4 !== peg$FAILED) {
                                                                  s3 = [s3, s4];
                                                                  s2 = s3;
                                                                } else {
                                                                  peg$currPos = s2;
                                                                  s2 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s2;
                                                                s2 = peg$FAILED;
                                                              }
                                                              if (s2 === peg$FAILED) {
                                                                s2 = peg$currPos;
                                                                s3 = peg$parseCREATE_SYMBOL();
                                                                if (s3 !== peg$FAILED) {
                                                                  s4 = peg$currPos;
                                                                  s5 = peg$parseDATABASE_SYMBOL();
                                                                  if (s5 !== peg$FAILED) {
                                                                    s6 = peg$parseifNotExists();
                                                                    if (s6 === peg$FAILED) {
                                                                      s6 = null;
                                                                    }
                                                                    s7 = peg$parseidentifier();
                                                                    if (s7 !== peg$FAILED) {
                                                                      s5 = [s5, s6, s7];
                                                                      s4 = s5;
                                                                    } else {
                                                                      peg$currPos = s4;
                                                                      s4 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s4;
                                                                    s4 = peg$FAILED;
                                                                  }
                                                                  if (s4 === peg$FAILED) {
                                                                    s4 = peg$currPos;
                                                                    s5 = peg$parseEVENT_SYMBOL();
                                                                    if (s5 !== peg$FAILED) {
                                                                      s6 = peg$parsequalifiedIdentifier();
                                                                      if (s6 !== peg$FAILED) {
                                                                        s5 = [s5, s6];
                                                                        s4 = s5;
                                                                      } else {
                                                                        peg$currPos = s4;
                                                                        s4 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s4;
                                                                      s4 = peg$FAILED;
                                                                    }
                                                                    if (s4 === peg$FAILED) {
                                                                      s4 = peg$currPos;
                                                                      s5 = peg$parseFUNCTION_SYMBOL();
                                                                      if (s5 !== peg$FAILED) {
                                                                        s6 = peg$parsequalifiedIdentifier();
                                                                        if (s6 !== peg$FAILED) {
                                                                          s5 = [s5, s6];
                                                                          s4 = s5;
                                                                        } else {
                                                                          peg$currPos = s4;
                                                                          s4 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s4;
                                                                        s4 = peg$FAILED;
                                                                      }
                                                                      if (s4 === peg$FAILED) {
                                                                        s4 = peg$currPos;
                                                                        s5 = peg$parsePROCEDURE_SYMBOL();
                                                                        if (s5 !== peg$FAILED) {
                                                                          s6 = peg$parsequalifiedIdentifier();
                                                                          if (s6 !== peg$FAILED) {
                                                                            s5 = [s5, s6];
                                                                            s4 = s5;
                                                                          } else {
                                                                            peg$currPos = s4;
                                                                            s4 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s4;
                                                                          s4 = peg$FAILED;
                                                                        }
                                                                        if (s4 === peg$FAILED) {
                                                                          s4 = peg$currPos;
                                                                          s5 = peg$parseTABLE_SYMBOL();
                                                                          if (s5 !== peg$FAILED) {
                                                                            s6 = peg$parsetableRef();
                                                                            if (s6 !== peg$FAILED) {
                                                                              s5 = [s5, s6];
                                                                              s4 = s5;
                                                                            } else {
                                                                              peg$currPos = s4;
                                                                              s4 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s4;
                                                                            s4 = peg$FAILED;
                                                                          }
                                                                          if (s4 === peg$FAILED) {
                                                                            s4 = peg$currPos;
                                                                            s5 = peg$parseTRIGGER_SYMBOL();
                                                                            if (s5 !== peg$FAILED) {
                                                                              s6 = peg$parsequalifiedIdentifier();
                                                                              if (s6 !== peg$FAILED) {
                                                                                s5 = [s5, s6];
                                                                                s4 = s5;
                                                                              } else {
                                                                                peg$currPos = s4;
                                                                                s4 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s4;
                                                                              s4 = peg$FAILED;
                                                                            }
                                                                            if (s4 === peg$FAILED) {
                                                                              s4 = peg$currPos;
                                                                              s5 = peg$parseVIEW_SYMBOL();
                                                                              if (s5 !== peg$FAILED) {
                                                                                s6 = peg$parseviewRef();
                                                                                if (s6 !== peg$FAILED) {
                                                                                  s5 = [s5, s6];
                                                                                  s4 = s5;
                                                                                } else {
                                                                                  peg$currPos = s4;
                                                                                  s4 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s4;
                                                                                s4 = peg$FAILED;
                                                                              }
                                                                              if (s4 === peg$FAILED) {
                                                                                s4 = peg$currPos;
                                                                                peg$savedPos = peg$currPos;
                                                                                s5 = peg$f113();
                                                                                if (s5) {
                                                                                  s5 = undefined;
                                                                                } else {
                                                                                  s5 = peg$FAILED;
                                                                                }
                                                                                if (s5 !== peg$FAILED) {
                                                                                  s6 = peg$parseUSER_SYMBOL();
                                                                                  if (s6 !== peg$FAILED) {
                                                                                    s7 = peg$parseuser();
                                                                                    if (s7 !== peg$FAILED) {
                                                                                      s5 = [s5, s6, s7];
                                                                                      s4 = s5;
                                                                                    } else {
                                                                                      peg$currPos = s4;
                                                                                      s4 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s4;
                                                                                    s4 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s4;
                                                                                  s4 = peg$FAILED;
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                  if (s4 !== peg$FAILED) {
                                                                    s3 = [s3, s4];
                                                                    s2 = s3;
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s2;
                                                                  s2 = peg$FAILED;
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                  s2 = peg$currPos;
                                                                  s3 = peg$parsePROCEDURE_SYMBOL();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s4 = peg$parseSTATUS_SYMBOL();
                                                                    if (s4 !== peg$FAILED) {
                                                                      s5 = peg$parselikeOrWhere();
                                                                      if (s5 === peg$FAILED) {
                                                                        s5 = null;
                                                                      }
                                                                      s3 = [s3, s4, s5];
                                                                      s2 = s3;
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$FAILED;
                                                                  }
                                                                  if (s2 === peg$FAILED) {
                                                                    s2 = peg$currPos;
                                                                    s3 = peg$parseFUNCTION_SYMBOL();
                                                                    if (s3 !== peg$FAILED) {
                                                                      s4 = peg$parseSTATUS_SYMBOL();
                                                                      if (s4 !== peg$FAILED) {
                                                                        s5 = peg$parselikeOrWhere();
                                                                        if (s5 === peg$FAILED) {
                                                                          s5 = null;
                                                                        }
                                                                        s3 = [s3, s4, s5];
                                                                        s2 = s3;
                                                                      } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s2;
                                                                      s2 = peg$FAILED;
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                      s2 = peg$currPos;
                                                                      s3 = peg$parsePROCEDURE_SYMBOL();
                                                                      if (s3 !== peg$FAILED) {
                                                                        s4 = peg$parseCODE_SYMBOL();
                                                                        if (s4 !== peg$FAILED) {
                                                                          s5 = peg$parsequalifiedIdentifier();
                                                                          if (s5 !== peg$FAILED) {
                                                                            s3 = [s3, s4, s5];
                                                                            s2 = s3;
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s2;
                                                                          s2 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$FAILED;
                                                                      }
                                                                      if (s2 === peg$FAILED) {
                                                                        s2 = peg$currPos;
                                                                        s3 = peg$parseFUNCTION_SYMBOL();
                                                                        if (s3 !== peg$FAILED) {
                                                                          s4 = peg$parseCODE_SYMBOL();
                                                                          if (s4 !== peg$FAILED) {
                                                                            s5 = peg$parsequalifiedIdentifier();
                                                                            if (s5 !== peg$FAILED) {
                                                                              s3 = [s3, s4, s5];
                                                                              s2 = s3;
                                                                            } else {
                                                                              peg$currPos = s2;
                                                                              s2 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s2;
                                                                          s2 = peg$FAILED;
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                          s2 = peg$currPos;
                                                                          peg$savedPos = peg$currPos;
                                                                          s3 = peg$f114();
                                                                          if (s3) {
                                                                            s3 = undefined;
                                                                          } else {
                                                                            s3 = peg$FAILED;
                                                                          }
                                                                          if (s3 !== peg$FAILED) {
                                                                            s4 = peg$parseCREATE_SYMBOL();
                                                                            if (s4 !== peg$FAILED) {
                                                                              s5 = peg$parseUSER_SYMBOL();
                                                                              if (s5 !== peg$FAILED) {
                                                                                s6 = peg$parseuser();
                                                                                if (s6 !== peg$FAILED) {
                                                                                  s3 = [s3, s4, s5, s6];
                                                                                  s2 = s3;
                                                                                } else {
                                                                                  peg$currPos = s2;
                                                                                  s2 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s2;
                                                                                s2 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s2;
                                                                              s2 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s2;
                                                                            s2 = peg$FAILED;
                                                                          }
                                                                          if (s2 === peg$FAILED) {
                                                                            s2 = peg$currPos;
                                                                            peg$savedPos = peg$currPos;
                                                                            s3 = peg$f115();
                                                                            if (s3) {
                                                                              s3 = undefined;
                                                                            } else {
                                                                              s3 = peg$FAILED;
                                                                            }
                                                                            if (s3 !== peg$FAILED) {
                                                                              s4 = peg$parseCREATE_SYMBOL();
                                                                              if (s4 !== peg$FAILED) {
                                                                                s5 = peg$currPos;
                                                                                s6 = peg$parseROLE_SYMBOL();
                                                                                if (s6 !== peg$FAILED) {
                                                                                  s7 = peg$parseroleIdentifier();
                                                                                  if (s7 !== peg$FAILED) {
                                                                                    s6 = [s6, s7];
                                                                                    s5 = s6;
                                                                                  } else {
                                                                                    peg$currPos = s5;
                                                                                    s5 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s5;
                                                                                  s5 = peg$FAILED;
                                                                                }
                                                                                if (s5 === peg$FAILED) {
                                                                                  s5 = peg$currPos;
                                                                                  s6 = peg$parseSPATIAL_SYMBOL();
                                                                                  if (s6 !== peg$FAILED) {
                                                                                    s7 = peg$parseREFERENCE_SYMBOL();
                                                                                    if (s7 !== peg$FAILED) {
                                                                                      s8 = peg$parseSYSTEM_SYMBOL();
                                                                                      if (s8 !== peg$FAILED) {
                                                                                        s9 = peg$parsereal_ulonglong_number();
                                                                                        if (s9 !== peg$FAILED) {
                                                                                          s6 = [s6, s7, s8, s9];
                                                                                          s5 = s6;
                                                                                        } else {
                                                                                          peg$currPos = s5;
                                                                                          s5 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s5;
                                                                                        s5 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s5;
                                                                                      s5 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s5;
                                                                                    s5 = peg$FAILED;
                                                                                  }
                                                                                }
                                                                                if (s5 !== peg$FAILED) {
                                                                                  s3 = [s3, s4, s5];
                                                                                  s2 = s3;
                                                                                } else {
                                                                                  peg$currPos = s2;
                                                                                  s2 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s2;
                                                                                s2 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s2;
                                                                              s2 = peg$FAILED;
                                                                            }
                                                                            if (s2 === peg$FAILED) {
                                                                              s2 = peg$currPos;
                                                                              peg$savedPos = peg$currPos;
                                                                              s3 = peg$f116();
                                                                              if (s3) {
                                                                                s3 = undefined;
                                                                              } else {
                                                                                s3 = peg$FAILED;
                                                                              }
                                                                              if (s3 !== peg$FAILED) {
                                                                                s4 = peg$parseCREATE_SYMBOL();
                                                                                if (s4 !== peg$FAILED) {
                                                                                  s5 = peg$parseTABLESPACE_SYMBOL();
                                                                                  if (s5 !== peg$FAILED) {
                                                                                    s6 = peg$parseidentifier();
                                                                                    if (s6 !== peg$FAILED) {
                                                                                      s3 = [s3, s4, s5, s6];
                                                                                      s2 = s3;
                                                                                    } else {
                                                                                      peg$currPos = s2;
                                                                                      s2 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s2;
                                                                                    s2 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s2;
                                                                                  s2 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s2;
                                                                                s2 = peg$FAILED;
                                                                              }
                                                                              if (s2 === peg$FAILED) {
                                                                                s2 = peg$currPos;
                                                                                s3 = peg$parseCONSTRAINTS_SYMBOL();
                                                                                if (s3 === peg$FAILED) {
                                                                                  s3 = peg$parseINDEXES_SYMBOL();
                                                                                  if (s3 === peg$FAILED) {
                                                                                    s3 = peg$parseKEYS_SYMBOL();
                                                                                  }
                                                                                }
                                                                                if (s3 !== peg$FAILED) {
                                                                                  s4 = peg$parseFROM_SYMBOL();
                                                                                  if (s4 !== peg$FAILED) {
                                                                                    s5 = peg$parsetableRef();
                                                                                    if (s5 !== peg$FAILED) {
                                                                                      s3 = [s3, s4, s5];
                                                                                      s2 = s3;
                                                                                    } else {
                                                                                      peg$currPos = s2;
                                                                                      s2 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s2;
                                                                                    s2 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s2;
                                                                                  s2 = peg$FAILED;
                                                                                }
                                                                                if (s2 === peg$FAILED) {
                                                                                  s2 = peg$currPos;
                                                                                  s3 = peg$parseCOMPONENT_SYMBOL();
                                                                                  if (s3 !== peg$FAILED) {
                                                                                    s4 = peg$parseSINGLE_QUOTED_TEXT();
                                                                                    if (s4 !== peg$FAILED) {
                                                                                      s5 = peg$parseSTATUS_SYMBOL();
                                                                                      if (s5 !== peg$FAILED) {
                                                                                        s3 = [s3, s4, s5];
                                                                                        s2 = s3;
                                                                                      } else {
                                                                                        peg$currPos = s2;
                                                                                        s2 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s2;
                                                                                      s2 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s2;
                                                                                    s2 = peg$FAILED;
                                                                                  }
                                                                                  if (s2 === peg$FAILED) {
                                                                                    s2 = peg$currPos;
                                                                                    s3 = peg$parseREPLICA_SYMBOL();
                                                                                    if (s3 === peg$FAILED) {
                                                                                      s3 = peg$parseSOURCE_SYMBOL();
                                                                                    }
                                                                                    if (s3 !== peg$FAILED) {
                                                                                      s4 = peg$parseSTATUS_SYMBOL();
                                                                                      if (s4 === peg$FAILED) {
                                                                                        s4 = peg$parseHOSTS_SYMBOL();
                                                                                      }
                                                                                      if (s4 !== peg$FAILED) {
                                                                                        s5 = peg$parsechannel();
                                                                                        if (s5 === peg$FAILED) {
                                                                                          s5 = null;
                                                                                        }
                                                                                        s3 = [s3, s4, s5];
                                                                                        s2 = s3;
                                                                                      } else {
                                                                                        peg$currPos = s2;
                                                                                        s2 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s2;
                                                                                      s2 = peg$FAILED;
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshowCommandType() {
    var s0, s1, s2, s3;

    s0 = peg$parseFULL_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f117();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEXTENDED_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFULL_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsenonBlocking() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f118();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNONBLOCKING_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefromOrIn() {
    var s0;

    s0 = peg$parseFROM_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIN_SYMBOL();
    }

    return s0;
  }

  function peg$parseinDb() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsefromOrIn();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprofileType() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBLOCK_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIO_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCONTEXT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSWITCHES_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePAGE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFAULTS_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseALL_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCPU_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIPC_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseMEMORY_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSOURCE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSWAPS_SYMBOL();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseotherAdministrativeStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseBINLOG_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextLiteral();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCACHE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINDEX_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekeyCacheListOrParts();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIN_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifier();
              if (s5 === peg$FAILED) {
                s5 = peg$parseDEFAULT_SYMBOL();
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFLUSH_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenoWriteToBinLog();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parseflushTables();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseflushOption();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseflushOption();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parseCOMMA_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseflushOption();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseKILL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCONNECTION_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseQUERY_SYMBOL();
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parseexpr();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseLOAD_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseINDEX_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseINTO_SYMBOL();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseCACHE_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsepreloadTail();
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              peg$savedPos = peg$currPos;
              s1 = peg$f119();
              if (s1) {
                s1 = undefined;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseSHUTDOWN_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsekeyCacheListOrParts() {
    var s0;

    s0 = peg$parsekeyCacheList();
    if (s0 === peg$FAILED) {
      s0 = peg$parseassignToKeycachePartition();
    }

    return s0;
  }

  function peg$parsekeyCacheList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseassignToKeycache();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseassignToKeycache();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseassignToKeycache();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassignToKeycache() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsetableRef();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecacheKeyList();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassignToKeycachePartition() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsetableRef();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePARTITION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPEN_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseallOrPartitionNameList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecacheKeyList();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecacheKeyList() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsekeyOrIndex();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsekeyUsageList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyUsageElement() {
    var s0;

    s0 = peg$parseidentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePRIMARY_SYMBOL();
    }

    return s0;
  }

  function peg$parsekeyUsageList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsekeyUsageElement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsekeyUsageElement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsekeyUsageElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseflushOption() {
    var s0, s1, s2, s3;

    s0 = peg$parseDES_KEY_FILE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseHOSTS_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePRIVILEGES_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSTATUS_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUSER_RESOURCES_SYMBOL();
          }
        }
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parselogType();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseLOGS_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRELAY_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLOGS_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsechannel();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f120();
          if (s1) {
            s1 = undefined;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseQUERY_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseCACHE_SYMBOL();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$f121();
            if (s1) {
              s1 = undefined;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPTIMIZER_COSTS_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselogType() {
    var s0;

    s0 = peg$parseBINARY_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseENGINE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseERROR_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGENERAL_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSLOW_SYMBOL();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseflushTables() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTABLES_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseTABLE_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseWITH_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseREAD_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLOCK_SYMBOL();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseidentifierList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseflushTablesOptions();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseflushTablesOptions() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f122();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFOR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEXPORT_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseREAD_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLOCK_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsepreloadTail() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsetableRef();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseadminPartition();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecacheKeyList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        s5 = peg$parseIGNORE_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseLEAVES_SYMBOL();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsepreloadList();
    }

    return s0;
  }

  function peg$parsepreloadList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsepreloadKeys();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsepreloadKeys();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsepreloadKeys();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepreloadKeys() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetableRef();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecacheKeyList();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parseIGNORE_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseLEAVES_SYMBOL();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadminPartition() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsePARTITION_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseallOrPartitionNameList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresourceGroupManagement() {
    var s0;

    s0 = peg$parsecreateResourceGroup();
    if (s0 === peg$FAILED) {
      s0 = peg$parsealterResourceGroup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesetResourceGroup();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedropResourceGroup();
        }
      }
    }

    return s0;
  }

  function peg$parsecreateResourceGroup() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseCREATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRESOURCE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseGROUP_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTYPE_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseequal();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s7 = peg$parseUSER_SYMBOL();
              if (s7 === peg$FAILED) {
                s7 = peg$parseSYSTEM_SYMBOL();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseresourceGroupVcpuList();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = peg$parseresourceGroupPriority();
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                s10 = peg$parseresourceGroupEnableDisable();
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresourceGroupVcpuList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseVCPU_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequal();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsevcpuNumOrRange();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseCOMMA_SYMBOL();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parsevcpuNumOrRange();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parsevcpuNumOrRange();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevcpuNumOrRange() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseINT_NUMBER();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseMINUS_OPERATOR();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseINT_NUMBER();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresourceGroupPriority() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTHREAD_PRIORITY_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseequal();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseINT_NUMBER();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresourceGroupEnableDisable() {
    var s0;

    s0 = peg$parseENABLE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDISABLE_SYMBOL();
    }

    return s0;
  }

  function peg$parsealterResourceGroup() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseALTER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRESOURCE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseGROUP_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseresourceGroupVcpuList();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseresourceGroupPriority();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseresourceGroupEnableDisable();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parseFORCE_SYMBOL();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetResourceGroup() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSET_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRESOURCE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseGROUP_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseFOR_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsethreadIdList();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsethreadIdList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsereal_ulong_number();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsereal_ulong_number();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parsereal_ulong_number();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedropResourceGroup() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDROP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRESOURCE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseGROUP_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseFORCE_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseutilityStatement() {
    var s0, s1, s2;

    s0 = peg$parsedescribeStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexplainStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehelpCommand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseuseCommand();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$f123();
            if (s1) {
              s1 = undefined;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseRESTART_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedescribeStatement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseEXPLAIN_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseDESCRIBE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDESC_SYMBOL();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetableRef();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetextString();
        if (s3 === peg$FAILED) {
          s3 = peg$parsefieldIdentifier();
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexplainStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseEXPLAIN_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseDESCRIBE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDESC_SYMBOL();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$savedPos = peg$currPos;
      s3 = peg$f124();
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseEXTENDED_SYMBOL();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        peg$savedPos = peg$currPos;
        s3 = peg$f125();
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsePARTITIONS_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$savedPos = peg$currPos;
          s3 = peg$f126();
          if (s3) {
            s3 = undefined;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFORMAT_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEQUAL_OPERATOR();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetextOrIdentifier();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            peg$savedPos = peg$currPos;
            s3 = peg$f127();
            if (s3) {
              s3 = undefined;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseANALYZE_SYMBOL();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$savedPos = peg$currPos;
              s3 = peg$f128();
              if (s3) {
                s3 = undefined;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseANALYZE_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseFORMAT_SYMBOL();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseEQUAL_OPERATOR();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsetextOrIdentifier();
                      if (s7 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          }
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseexplainableStatement();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexplainableStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parseselectStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f129();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedeleteStatement();
        if (s2 === peg$FAILED) {
          s2 = peg$parseinsertStatement();
          if (s2 === peg$FAILED) {
            s2 = peg$parsereplaceStatement();
            if (s2 === peg$FAILED) {
              s2 = peg$parseupdateStatement();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f130();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFOR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCONNECTION_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsereal_ulong_number();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsehelpCommand() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHELP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextOrIdentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseuseCommand() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseUSE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseexprPrimary();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseexprTail();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseexprTail();
      }
      peg$savedPos = s0;
      s0 = peg$f131(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexprPrimary() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseboolPri();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseIS_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsenotRule();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseTRUE_SYMBOL();
        if (s5 === peg$FAILED) {
          s5 = peg$parseFALSE_SYMBOL();
          if (s5 === peg$FAILED) {
            s5 = peg$parseUNKNOWN_SYMBOL();
          }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNOT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexprPrimary();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseexprTail() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAND_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseLOGICAL_AND_OPERATOR();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f132(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseXOR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f133(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOR_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLOGICAL_OR_OPERATOR();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f134(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseboolPri() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsepredicate();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseboolPriTail();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseboolPriTail();
      }
      peg$savedPos = s0;
      s0 = peg$f135(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseboolPriTail() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseIS_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenotRule();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseNULL_SYMBOL();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f136(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecompOp();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepredicate();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f137(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecompOp();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseALL_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseANY_SYMBOL();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsequeryExpressionParens();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f138();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f139();
          if (s1) {
            s1 = undefined;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseMEMBER_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseOF_SYMBOL();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parsesimpleExprWithParentheses();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f140(s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSOUNDS_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseLIKE_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsebitExpr();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f141(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecompOp() {
    var s0;

    s0 = peg$parseEQUAL_OPERATOR();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNULL_SAFE_EQUAL_OPERATOR();
      if (s0 === peg$FAILED) {
        s0 = peg$parseGREATER_OR_EQUAL_OPERATOR();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGREATER_THAN_OPERATOR();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLESS_OR_EQUAL_OPERATOR();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLESS_THAN_OPERATOR();
              if (s0 === peg$FAILED) {
                s0 = peg$parseNOT_EQUAL_OPERATOR();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepredicate() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsebitExpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsenotRule();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsepredicateOperations();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        peg$savedPos = peg$currPos;
        s3 = peg$f142();
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMEMBER_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOF_SYMBOL();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parsesimpleExprWithParentheses();
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseSOUNDS_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLIKE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebitExpr();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepredicateOperations() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsequeryExpressionParens();
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseOPEN_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexprList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBETWEEN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebitExpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAND_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepredicate();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLIKE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesimpleExpr();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseESCAPE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesimpleExpr();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseREGEXP_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsebitExpr();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebitExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesimpleExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsebitExprTail();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsebitExprTail();
      }
      peg$savedPos = s0;
      s0 = peg$f143(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebitExprTail() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseBITWISE_XOR_OPERATOR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesimpleExpr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f144(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMULT_OPERATOR();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDIV_OPERATOR();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMOD_OPERATOR();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDIV_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseMOD_SYMBOL();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesimpleExpr();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f145(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePLUS_OPERATOR();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMINUS_OPERATOR();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesimpleExpr();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f146(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePLUS_OPERATOR();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMINUS_OPERATOR();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseINTERVAL_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseexpr();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseinterval();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f147(s3, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSHIFT_LEFT_OPERATOR();
            if (s1 === peg$FAILED) {
              s1 = peg$parseSHIFT_RIGHT_OPERATOR();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsesimpleExpr();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f148(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseBITWISE_AND_OPERATOR();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsesimpleExpr();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f149(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseBITWISE_OR_OPERATOR();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsesimpleExpr();
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f150(s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesimpleExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesimpleExprPrimary();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesimpleExprTail();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesimpleExprTail();
      }
      peg$savedPos = s0;
      s0 = peg$f151(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesimpleExprPrimary() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsevariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseequal();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseexpr();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsefieldIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsejsonOperator();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseruntimeFunctionCall();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefunctionCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parseliteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePARAM_MARKER();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesumExpr();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  peg$savedPos = peg$currPos;
                  s1 = peg$f152();
                  if (s1) {
                    s1 = undefined;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsegroupingOperation();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s1 = peg$f153();
                    if (s1) {
                      s1 = undefined;
                    } else {
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsewindowFunctionCall();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsePLUS_OPERATOR();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseMINUS_OPERATOR();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseBITWISE_NOT_OPERATOR();
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsesimpleExprPrimary();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsenot2Rule();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsesimpleExprPrimary();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseROW_SYMBOL();
                          if (s1 === peg$FAILED) {
                            s1 = null;
                          }
                          s2 = peg$parseOPEN_PAR_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseexprList();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseCLOSE_PAR_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseEXISTS_SYMBOL();
                            if (s1 === peg$FAILED) {
                              s1 = null;
                            }
                            s2 = peg$parsequeryExpressionParens();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseOPEN_CURLY_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseidentifier();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseexpr();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseCLOSE_CURLY_SYMBOL();
                                    if (s4 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseMATCH_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseidentListArg();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseAGAINST_SYMBOL();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseOPEN_PAR_SYMBOL();
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parsebitExpr();
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parsefulltextOptions();
                                          if (s6 === peg$FAILED) {
                                            s6 = null;
                                          }
                                          s7 = peg$parseCLOSE_PAR_SYMBOL();
                                          if (s7 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5, s6, s7];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseBINARY_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parsesimpleExprPrimary();
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseCAST_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseOPEN_PAR_SYMBOL();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseexpr();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseAS_SYMBOL();
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parsecastType();
                                            if (s5 !== peg$FAILED) {
                                              s6 = peg$parsearrayCast();
                                              if (s6 === peg$FAILED) {
                                                s6 = null;
                                              }
                                              s7 = peg$parseCLOSE_PAR_SYMBOL();
                                              if (s7 !== peg$FAILED) {
                                                s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseCASE_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseexpr();
                                        if (s2 === peg$FAILED) {
                                          s2 = null;
                                        }
                                        s3 = [];
                                        s4 = peg$currPos;
                                        s5 = peg$parsewhenExpression();
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parsethenExpression();
                                          if (s6 !== peg$FAILED) {
                                            s5 = [s5, s6];
                                            s4 = s5;
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                        if (s4 !== peg$FAILED) {
                                          while (s4 !== peg$FAILED) {
                                            s3.push(s4);
                                            s4 = peg$currPos;
                                            s5 = peg$parsewhenExpression();
                                            if (s5 !== peg$FAILED) {
                                              s6 = peg$parsethenExpression();
                                              if (s6 !== peg$FAILED) {
                                                s5 = [s5, s6];
                                                s4 = s5;
                                              } else {
                                                peg$currPos = s4;
                                                s4 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s4;
                                              s4 = peg$FAILED;
                                            }
                                          }
                                        } else {
                                          s3 = peg$FAILED;
                                        }
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseelseExpression();
                                          if (s4 === peg$FAILED) {
                                            s4 = null;
                                          }
                                          s5 = peg$parseEND_SYMBOL();
                                          if (s5 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseCONVERT_SYMBOL();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseOPEN_PAR_SYMBOL();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parseexpr();
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parseCOMMA_SYMBOL();
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parsecastType();
                                                if (s5 !== peg$FAILED) {
                                                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                  if (s6 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3, s4, s5, s6];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseCONVERT_SYMBOL();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseOPEN_PAR_SYMBOL();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseexpr();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseUSING_SYMBOL();
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$parsecharsetName();
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                    if (s6 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3, s4, s5, s6];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseDEFAULT_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseOPEN_PAR_SYMBOL();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parsesimpleIdentifier();
                                                if (s3 !== peg$FAILED) {
                                                  s4 = peg$parseCLOSE_PAR_SYMBOL();
                                                  if (s4 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3, s4];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseVALUES_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parsesimpleIdentifier();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parseCLOSE_PAR_SYMBOL();
                                                    if (s4 !== peg$FAILED) {
                                                      s1 = [s1, s2, s3, s4];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseINTERVAL_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseexpr();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseinterval();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parsePLUS_OPERATOR();
                                                      if (s4 !== peg$FAILED) {
                                                        s5 = peg$parseexpr();
                                                        if (s5 !== peg$FAILED) {
                                                          s1 = [s1, s2, s3, s4, s5];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesimpleExprTail() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCOLLATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextOrIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f154(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCONCAT_PIPES_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesimpleExpr();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f155(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseINTERVAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinterval();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsePLUS_OPERATOR();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexpr();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f156(s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsearrayCast() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f157();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseARRAY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejsonOperator() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f158();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseJSON_SEPARATOR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSINGLE_QUOTED_TEXT();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f159();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseJSON_UNQUOTED_SEPARATOR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_TEXT();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesumExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseAVG_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDISTINCT_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseinSumExpr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCLOSE_PAR_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$savedPos = peg$currPos;
            s7 = peg$f160();
            if (s7) {
              s7 = undefined;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsewindowingClause();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBIT_AND_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBIT_OR_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBIT_XOR_SYMBOL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinSumExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PAR_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$savedPos = peg$currPos;
              s6 = peg$f161();
              if (s6) {
                s6 = undefined;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsewindowingClause();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f162();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsejsonFunction();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCOUNT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOPEN_PAR_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseALL_SYMBOL();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parseMULT_OPERATOR();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAR_SYMBOL();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  peg$savedPos = peg$currPos;
                  s7 = peg$f163();
                  if (s7) {
                    s7 = undefined;
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsewindowingClause();
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCOUNT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPEN_PAR_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseALL_SYMBOL();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = peg$parseMULT_OPERATOR();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$parseinSumExpr();
                  if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$parseDISTINCT_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseexprList();
                      if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseCLOSE_PAR_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s6 = peg$f164();
                    if (s6) {
                      s6 = undefined;
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsewindowingClause();
                      if (s7 !== peg$FAILED) {
                        s6 = [s6, s7];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMIN_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPEN_PAR_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseDISTINCT_SYMBOL();
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  s4 = peg$parseinSumExpr();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$currPos;
                      peg$savedPos = peg$currPos;
                      s7 = peg$f165();
                      if (s7) {
                        s7 = undefined;
                      } else {
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsewindowingClause();
                        if (s8 !== peg$FAILED) {
                          s7 = [s7, s8];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                      if (s6 === peg$FAILED) {
                        s6 = null;
                      }
                      s1 = [s1, s2, s3, s4, s5, s6];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMAX_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseOPEN_PAR_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseDISTINCT_SYMBOL();
                    if (s3 === peg$FAILED) {
                      s3 = null;
                    }
                    s4 = peg$parseinSumExpr();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseCLOSE_PAR_SYMBOL();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$currPos;
                        peg$savedPos = peg$currPos;
                        s7 = peg$f166();
                        if (s7) {
                          s7 = undefined;
                        } else {
                          s7 = peg$FAILED;
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parsewindowingClause();
                          if (s8 !== peg$FAILED) {
                            s7 = [s7, s8];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                        if (s6 === peg$FAILED) {
                          s6 = null;
                        }
                        s1 = [s1, s2, s3, s4, s5, s6];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseSTD_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseinSumExpr();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$currPos;
                          peg$savedPos = peg$currPos;
                          s6 = peg$f167();
                          if (s6) {
                            s6 = undefined;
                          } else {
                            s6 = peg$FAILED;
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parsewindowingClause();
                            if (s7 !== peg$FAILED) {
                              s6 = [s6, s7];
                              s5 = s6;
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                          if (s5 === peg$FAILED) {
                            s5 = null;
                          }
                          s1 = [s1, s2, s3, s4, s5];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseVARIANCE_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseOPEN_PAR_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseinSumExpr();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$currPos;
                            peg$savedPos = peg$currPos;
                            s6 = peg$f168();
                            if (s6) {
                              s6 = undefined;
                            } else {
                              s6 = peg$FAILED;
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parsewindowingClause();
                              if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                            if (s5 === peg$FAILED) {
                              s5 = null;
                            }
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseSTDDEV_SAMP_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseOPEN_PAR_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseinSumExpr();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseCLOSE_PAR_SYMBOL();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$currPos;
                              peg$savedPos = peg$currPos;
                              s6 = peg$f169();
                              if (s6) {
                                s6 = undefined;
                              } else {
                                s6 = peg$FAILED;
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parsewindowingClause();
                                if (s7 !== peg$FAILED) {
                                  s6 = [s6, s7];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                              if (s5 === peg$FAILED) {
                                s5 = null;
                              }
                              s1 = [s1, s2, s3, s4, s5];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseVAR_SAMP_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseOPEN_PAR_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseinSumExpr();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseCLOSE_PAR_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$currPos;
                                peg$savedPos = peg$currPos;
                                s6 = peg$f170();
                                if (s6) {
                                  s6 = undefined;
                                } else {
                                  s6 = peg$FAILED;
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parsewindowingClause();
                                  if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                                if (s5 === peg$FAILED) {
                                  s5 = null;
                                }
                                s1 = [s1, s2, s3, s4, s5];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseSUM_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseOPEN_PAR_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseDISTINCT_SYMBOL();
                              if (s3 === peg$FAILED) {
                                s3 = null;
                              }
                              s4 = peg$parseinSumExpr();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseCLOSE_PAR_SYMBOL();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$currPos;
                                  peg$savedPos = peg$currPos;
                                  s7 = peg$f171();
                                  if (s7) {
                                    s7 = undefined;
                                  } else {
                                    s7 = peg$FAILED;
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parsewindowingClause();
                                    if (s8 !== peg$FAILED) {
                                      s7 = [s7, s8];
                                      s6 = s7;
                                    } else {
                                      peg$currPos = s6;
                                      s6 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                  }
                                  if (s6 === peg$FAILED) {
                                    s6 = null;
                                  }
                                  s1 = [s1, s2, s3, s4, s5, s6];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseGROUP_CONCAT_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseOPEN_PAR_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseDISTINCT_SYMBOL();
                                if (s3 === peg$FAILED) {
                                  s3 = null;
                                }
                                s4 = peg$parseexprList();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseorderClause();
                                  if (s5 === peg$FAILED) {
                                    s5 = null;
                                  }
                                  s6 = peg$currPos;
                                  s7 = peg$parseSEPARATOR_SYMBOL();
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parsetextString();
                                    if (s8 !== peg$FAILED) {
                                      s7 = [s7, s8];
                                      s6 = s7;
                                    } else {
                                      peg$currPos = s6;
                                      s6 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                  }
                                  if (s6 === peg$FAILED) {
                                    s6 = null;
                                  }
                                  s7 = peg$parseCLOSE_PAR_SYMBOL();
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$currPos;
                                    peg$savedPos = peg$currPos;
                                    s9 = peg$f172();
                                    if (s9) {
                                      s9 = undefined;
                                    } else {
                                      s9 = peg$FAILED;
                                    }
                                    if (s9 !== peg$FAILED) {
                                      s10 = peg$parsewindowingClause();
                                      if (s10 !== peg$FAILED) {
                                        s9 = [s9, s10];
                                        s8 = s9;
                                      } else {
                                        peg$currPos = s8;
                                        s8 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s8;
                                      s8 = peg$FAILED;
                                    }
                                    if (s8 === peg$FAILED) {
                                      s8 = null;
                                    }
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsegroupingOperation() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseGROUPING_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexprList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewindowFunctionCall() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseROW_NUMBER_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseRANK_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDENSE_RANK_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseCUME_DIST_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parsePERCENT_RANK_SYMBOL();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseparentheses();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewindowingClause();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNTILE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesimpleExprWithParentheses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewindowingClause();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLEAD_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLAG_SYMBOL();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAR_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseleadLagInfo();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenullTreatment();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                s7 = peg$parsewindowingClause();
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFIRST_VALUE_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLAST_VALUE_SYMBOL();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexprWithParentheses();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenullTreatment();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parsewindowingClause();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseNTH_VALUE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPEN_PAR_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpr();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseCOMMA_SYMBOL();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsesimpleExpr();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseCLOSE_PAR_SYMBOL();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$currPos;
                        s8 = peg$parseFROM_SYMBOL();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseFIRST_SYMBOL();
                          if (s9 === peg$FAILED) {
                            s9 = peg$parseLAST_SYMBOL();
                          }
                          if (s9 !== peg$FAILED) {
                            s8 = [s8, s9];
                            s7 = s8;
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                        if (s7 === peg$FAILED) {
                          s7 = null;
                        }
                        s8 = peg$parsenullTreatment();
                        if (s8 === peg$FAILED) {
                          s8 = null;
                        }
                        s9 = peg$parsewindowingClause();
                        if (s9 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewindowingClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseOVER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 === peg$FAILED) {
        s2 = peg$parsewindowSpec();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseleadLagInfo() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCOMMA_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseulonglong_number();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePARAM_MARKER();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenullTreatment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRESPECT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseIGNORE_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNULLS_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejsonFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseJSON_ARRAYAGG_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinSumExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewindowingClause();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseJSON_OBJECTAGG_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinSumExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCOMMA_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinSumExpr();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsewindowingClause();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseinSumExpr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseALL_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseexpr();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentListArg() {
    var s0, s1, s2, s3;

    s0 = peg$parseidentList();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCLOSE_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseidentList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsesimpleIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsesimpleIdentifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesimpleIdentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefulltextOptions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseIN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBOOLEAN_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMODE_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIN_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNATURAL_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLANGUAGE_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMODE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseWITH_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseQUERY_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseEXPANSION_SYMBOL();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWITH_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseQUERY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEXPANSION_SYMBOL();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseruntimeFunctionCall() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseCHAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexprList();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseUSING_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecharsetName();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseCLOSE_PAR_SYMBOL();
          if (s5 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCURRENT_USER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparentheses();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDATE_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexprWithParentheses();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDAY_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexprWithParentheses();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseHOUR_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexprWithParentheses();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseINSERT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPEN_PAR_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpr();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCOMMA_SYMBOL();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseexpr();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseCOMMA_SYMBOL();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseexpr();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parseCOMMA_SYMBOL();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseexpr();
                              if (s9 !== peg$FAILED) {
                                s10 = peg$parseCLOSE_PAR_SYMBOL();
                                if (s10 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseINTERVAL_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseOPEN_PAR_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpr();
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$currPos;
                      s6 = peg$parseCOMMA_SYMBOL();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseexpr();
                        if (s7 !== peg$FAILED) {
                          s6 = [s6, s7];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$currPos;
                          s6 = peg$parseCOMMA_SYMBOL();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseexpr();
                            if (s7 !== peg$FAILED) {
                              s6 = [s6, s7];
                              s5 = s6;
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        }
                      } else {
                        s4 = peg$FAILED;
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseCLOSE_PAR_SYMBOL();
                        if (s5 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseLEFT_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseexpr();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseCOMMA_SYMBOL();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseexpr();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseCLOSE_PAR_SYMBOL();
                            if (s6 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseMINUTE_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseexprWithParentheses();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseMONTH_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseexprWithParentheses();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseRIGHT_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseOPEN_PAR_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseexpr();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseCOMMA_SYMBOL();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseexpr();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                                  if (s6 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseSECOND_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseexprWithParentheses();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseTIME_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseexprWithParentheses();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseTIMESTAMP_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseexpr();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$currPos;
                                    s5 = peg$parseCOMMA_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parseexpr();
                                      if (s6 !== peg$FAILED) {
                                        s5 = [s5, s6];
                                        s4 = s5;
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                    if (s4 === peg$FAILED) {
                                      s4 = null;
                                    }
                                    s5 = peg$parseCLOSE_PAR_SYMBOL();
                                    if (s5 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsetrimFunction();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseUSER_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseparentheses();
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseVALUES_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseexprWithParentheses();
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseYEAR_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseexprWithParentheses();
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseADDDATE_SYMBOL();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parseSUBDATE_SYMBOL();
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseOPEN_PAR_SYMBOL();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parseexpr();
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parseCOMMA_SYMBOL();
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parseexpr();
                                                if (s5 === peg$FAILED) {
                                                  s5 = peg$currPos;
                                                  s6 = peg$parseINTERVAL_SYMBOL();
                                                  if (s6 !== peg$FAILED) {
                                                    s7 = peg$parseexpr();
                                                    if (s7 !== peg$FAILED) {
                                                      s8 = peg$parseinterval();
                                                      if (s8 !== peg$FAILED) {
                                                        s6 = [s6, s7, s8];
                                                        s5 = s6;
                                                      } else {
                                                        peg$currPos = s5;
                                                        s5 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s5;
                                                      s5 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s5;
                                                    s5 = peg$FAILED;
                                                  }
                                                }
                                                if (s5 !== peg$FAILED) {
                                                  s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                  if (s6 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3, s4, s5, s6];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseCURDATE_SYMBOL();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseparentheses();
                                            if (s2 === peg$FAILED) {
                                              s2 = null;
                                            }
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseCURTIME_SYMBOL();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parsetimeFunctionParameters();
                                              if (s2 === peg$FAILED) {
                                                s2 = null;
                                              }
                                              s1 = [s1, s2];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseDATE_ADD_SYMBOL();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parseDATE_SUB_SYMBOL();
                                              }
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parseexpr();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parseCOMMA_SYMBOL();
                                                    if (s4 !== peg$FAILED) {
                                                      s5 = peg$parseINTERVAL_SYMBOL();
                                                      if (s5 !== peg$FAILED) {
                                                        s6 = peg$parseexpr();
                                                        if (s6 !== peg$FAILED) {
                                                          s7 = peg$parseinterval();
                                                          if (s7 !== peg$FAILED) {
                                                            s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                            if (s8 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseEXTRACT_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseinterval();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parseFROM_SYMBOL();
                                                      if (s4 !== peg$FAILED) {
                                                        s5 = peg$parseexpr();
                                                        if (s5 !== peg$FAILED) {
                                                          s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                          if (s6 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3, s4, s5, s6];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseGET_FORMAT_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseOPEN_PAR_SYMBOL();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parsedateTimeTtype();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parseCOMMA_SYMBOL();
                                                        if (s4 !== peg$FAILED) {
                                                          s5 = peg$parseexpr();
                                                          if (s5 !== peg$FAILED) {
                                                            s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                            if (s6 !== peg$FAILED) {
                                                              s1 = [s1, s2, s3, s4, s5, s6];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseNOW_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parsetimeFunctionParameters();
                                                      if (s2 === peg$FAILED) {
                                                        s2 = null;
                                                      }
                                                      s1 = [s1, s2];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parsePOSITION_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parseOPEN_PAR_SYMBOL();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parsebitExpr();
                                                          if (s3 !== peg$FAILED) {
                                                            s4 = peg$parseIN_SYMBOL();
                                                            if (s4 !== peg$FAILED) {
                                                              s5 = peg$parseexpr();
                                                              if (s5 !== peg$FAILED) {
                                                                s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                if (s6 !== peg$FAILED) {
                                                                  s1 = [s1, s2, s3, s4, s5, s6];
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsesubstringFunction();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseSYSDATE_SYMBOL();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parsetimeFunctionParameters();
                                                            if (s2 === peg$FAILED) {
                                                              s2 = null;
                                                            }
                                                            s1 = [s1, s2];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseTIMESTAMP_ADD_SYMBOL();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parseTIMESTAMP_DIFF_SYMBOL();
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parseOPEN_PAR_SYMBOL();
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parseintervalTimeStamp();
                                                                if (s3 !== peg$FAILED) {
                                                                  s4 = peg$parseCOMMA_SYMBOL();
                                                                  if (s4 !== peg$FAILED) {
                                                                    s5 = peg$parseexpr();
                                                                    if (s5 !== peg$FAILED) {
                                                                      s6 = peg$parseCOMMA_SYMBOL();
                                                                      if (s6 !== peg$FAILED) {
                                                                        s7 = peg$parseexpr();
                                                                        if (s7 !== peg$FAILED) {
                                                                          s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                          if (s8 !== peg$FAILED) {
                                                                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                            s0 = s1;
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseUTC_DATE_SYMBOL();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseparentheses();
                                                                if (s2 === peg$FAILED) {
                                                                  s2 = null;
                                                                }
                                                                s1 = [s1, s2];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parseUTC_TIME_SYMBOL();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = peg$parsetimeFunctionParameters();
                                                                  if (s2 === peg$FAILED) {
                                                                    s2 = null;
                                                                  }
                                                                  s1 = [s1, s2];
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  s1 = peg$parseUTC_TIMESTAMP_SYMBOL();
                                                                  if (s1 !== peg$FAILED) {
                                                                    s2 = peg$parsetimeFunctionParameters();
                                                                    if (s2 === peg$FAILED) {
                                                                      s2 = null;
                                                                    }
                                                                    s1 = [s1, s2];
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    s1 = peg$parseASCII_SYMBOL();
                                                                    if (s1 !== peg$FAILED) {
                                                                      s2 = peg$parseexprWithParentheses();
                                                                      if (s2 !== peg$FAILED) {
                                                                        s1 = [s1, s2];
                                                                        s0 = s1;
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$currPos;
                                                                      s1 = peg$parseCHARSET_SYMBOL();
                                                                      if (s1 !== peg$FAILED) {
                                                                        s2 = peg$parseexprWithParentheses();
                                                                        if (s2 !== peg$FAILED) {
                                                                          s1 = [s1, s2];
                                                                          s0 = s1;
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        s1 = peg$parseCOALESCE_SYMBOL();
                                                                        if (s1 !== peg$FAILED) {
                                                                          s2 = peg$parseexprListWithParentheses();
                                                                          if (s2 !== peg$FAILED) {
                                                                            s1 = [s1, s2];
                                                                            s0 = s1;
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$currPos;
                                                                          s1 = peg$parseCOLLATION_SYMBOL();
                                                                          if (s1 !== peg$FAILED) {
                                                                            s2 = peg$parseexprWithParentheses();
                                                                            if (s2 !== peg$FAILED) {
                                                                              s1 = [s1, s2];
                                                                              s0 = s1;
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$currPos;
                                                                            s1 = peg$parseDATABASE_SYMBOL();
                                                                            if (s1 !== peg$FAILED) {
                                                                              s2 = peg$parseparentheses();
                                                                              if (s2 !== peg$FAILED) {
                                                                                s1 = [s1, s2];
                                                                                s0 = s1;
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$FAILED;
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$currPos;
                                                                              s1 = peg$parseIF_SYMBOL();
                                                                              if (s1 !== peg$FAILED) {
                                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                if (s2 !== peg$FAILED) {
                                                                                  s3 = peg$parseexpr();
                                                                                  if (s3 !== peg$FAILED) {
                                                                                    s4 = peg$parseCOMMA_SYMBOL();
                                                                                    if (s4 !== peg$FAILED) {
                                                                                      s5 = peg$parseexpr();
                                                                                      if (s5 !== peg$FAILED) {
                                                                                        s6 = peg$parseCOMMA_SYMBOL();
                                                                                        if (s6 !== peg$FAILED) {
                                                                                          s7 = peg$parseexpr();
                                                                                          if (s7 !== peg$FAILED) {
                                                                                            s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                            if (s8 !== peg$FAILED) {
                                                                                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                                              s0 = s1;
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$currPos;
                                                                                s1 = peg$parseFORMAT_SYMBOL();
                                                                                if (s1 !== peg$FAILED) {
                                                                                  s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                  if (s2 !== peg$FAILED) {
                                                                                    s3 = peg$parseexpr();
                                                                                    if (s3 !== peg$FAILED) {
                                                                                      s4 = peg$parseCOMMA_SYMBOL();
                                                                                      if (s4 !== peg$FAILED) {
                                                                                        s5 = peg$parseexpr();
                                                                                        if (s5 !== peg$FAILED) {
                                                                                          s6 = peg$currPos;
                                                                                          s7 = peg$parseCOMMA_SYMBOL();
                                                                                          if (s7 !== peg$FAILED) {
                                                                                            s8 = peg$parseexpr();
                                                                                            if (s8 !== peg$FAILED) {
                                                                                              s7 = [s7, s8];
                                                                                              s6 = s7;
                                                                                            } else {
                                                                                              peg$currPos = s6;
                                                                                              s6 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s6;
                                                                                            s6 = peg$FAILED;
                                                                                          }
                                                                                          if (s6 === peg$FAILED) {
                                                                                            s6 = null;
                                                                                          }
                                                                                          s7 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                          if (s7 !== peg$FAILED) {
                                                                                            s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                                                            s0 = s1;
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$FAILED;
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$currPos;
                                                                                  s1 = peg$parseMICROSECOND_SYMBOL();
                                                                                  if (s1 !== peg$FAILED) {
                                                                                    s2 = peg$parseexprWithParentheses();
                                                                                    if (s2 !== peg$FAILED) {
                                                                                      s1 = [s1, s2];
                                                                                      s0 = s1;
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$currPos;
                                                                                    s1 = peg$parseMOD_SYMBOL();
                                                                                    if (s1 !== peg$FAILED) {
                                                                                      s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                      if (s2 !== peg$FAILED) {
                                                                                        s3 = peg$parseexpr();
                                                                                        if (s3 !== peg$FAILED) {
                                                                                          s4 = peg$parseCOMMA_SYMBOL();
                                                                                          if (s4 !== peg$FAILED) {
                                                                                            s5 = peg$parseexpr();
                                                                                            if (s5 !== peg$FAILED) {
                                                                                              s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                              if (s6 !== peg$FAILED) {
                                                                                                s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$currPos;
                                                                                      peg$savedPos = peg$currPos;
                                                                                      s1 = peg$f173();
                                                                                      if (s1) {
                                                                                        s1 = undefined;
                                                                                      } else {
                                                                                        s1 = peg$FAILED;
                                                                                      }
                                                                                      if (s1 !== peg$FAILED) {
                                                                                        s2 = peg$parseOLD_PASSWORD_SYMBOL();
                                                                                        if (s2 !== peg$FAILED) {
                                                                                          s3 = peg$parseOPEN_PAR_SYMBOL();
                                                                                          if (s3 !== peg$FAILED) {
                                                                                            s4 = peg$parsetextLiteral();
                                                                                            if (s4 !== peg$FAILED) {
                                                                                              s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                              if (s5 !== peg$FAILED) {
                                                                                                s1 = [s1, s2, s3, s4, s5];
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$currPos;
                                                                                        peg$savedPos = peg$currPos;
                                                                                        s1 = peg$f174();
                                                                                        if (s1) {
                                                                                          s1 = undefined;
                                                                                        } else {
                                                                                          s1 = peg$FAILED;
                                                                                        }
                                                                                        if (s1 !== peg$FAILED) {
                                                                                          s2 = peg$parsePASSWORD_SYMBOL();
                                                                                          if (s2 !== peg$FAILED) {
                                                                                            s3 = peg$parseexprWithParentheses();
                                                                                            if (s3 !== peg$FAILED) {
                                                                                              s1 = [s1, s2, s3];
                                                                                              s0 = s1;
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$currPos;
                                                                                          s1 = peg$parseQUARTER_SYMBOL();
                                                                                          if (s1 !== peg$FAILED) {
                                                                                            s2 = peg$parseexprWithParentheses();
                                                                                            if (s2 !== peg$FAILED) {
                                                                                              s1 = [s1, s2];
                                                                                              s0 = s1;
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$currPos;
                                                                                            s1 = peg$parseREPEAT_SYMBOL();
                                                                                            if (s1 !== peg$FAILED) {
                                                                                              s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                              if (s2 !== peg$FAILED) {
                                                                                                s3 = peg$parseexpr();
                                                                                                if (s3 !== peg$FAILED) {
                                                                                                  s4 = peg$parseCOMMA_SYMBOL();
                                                                                                  if (s4 !== peg$FAILED) {
                                                                                                    s5 = peg$parseexpr();
                                                                                                    if (s5 !== peg$FAILED) {
                                                                                                      s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                      if (s6 !== peg$FAILED) {
                                                                                                        s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                        s0 = s1;
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$FAILED;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$currPos;
                                                                                              s1 = peg$parseREPLACE_SYMBOL();
                                                                                              if (s1 !== peg$FAILED) {
                                                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                if (s2 !== peg$FAILED) {
                                                                                                  s3 = peg$parseexpr();
                                                                                                  if (s3 !== peg$FAILED) {
                                                                                                    s4 = peg$parseCOMMA_SYMBOL();
                                                                                                    if (s4 !== peg$FAILED) {
                                                                                                      s5 = peg$parseexpr();
                                                                                                      if (s5 !== peg$FAILED) {
                                                                                                        s6 = peg$parseCOMMA_SYMBOL();
                                                                                                        if (s6 !== peg$FAILED) {
                                                                                                          s7 = peg$parseexpr();
                                                                                                          if (s7 !== peg$FAILED) {
                                                                                                            s8 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                            if (s8 !== peg$FAILED) {
                                                                                                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                                                                              s0 = s1;
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$FAILED;
                                                                                                            }
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                          }
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$FAILED;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$FAILED;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$currPos;
                                                                                                s1 = peg$parseREVERSE_SYMBOL();
                                                                                                if (s1 !== peg$FAILED) {
                                                                                                  s2 = peg$parseexprWithParentheses();
                                                                                                  if (s2 !== peg$FAILED) {
                                                                                                    s1 = [s1, s2];
                                                                                                    s0 = s1;
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$FAILED;
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$currPos;
                                                                                                  s1 = peg$parseROW_COUNT_SYMBOL();
                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                    s2 = peg$parseparentheses();
                                                                                                    if (s2 !== peg$FAILED) {
                                                                                                      s1 = [s1, s2];
                                                                                                      s0 = s1;
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$currPos;
                                                                                                    s1 = peg$parseSCHEMA_SYMBOL();
                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                      s2 = peg$parseparentheses();
                                                                                                      if (s2 !== peg$FAILED) {
                                                                                                        s1 = [s1, s2];
                                                                                                        s0 = s1;
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$currPos;
                                                                                                      s1 = peg$parseSESSION_USER_SYMBOL();
                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                        s2 = peg$parseparentheses();
                                                                                                        if (s2 !== peg$FAILED) {
                                                                                                          s1 = [s1, s2];
                                                                                                          s0 = s1;
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$FAILED;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$currPos;
                                                                                                        s1 = peg$parseSYSTEM_USER_SYMBOL();
                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                          s2 = peg$parseparentheses();
                                                                                                          if (s2 !== peg$FAILED) {
                                                                                                            s1 = [s1, s2];
                                                                                                            s0 = s1;
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                          }
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$FAILED;
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$currPos;
                                                                                                          s1 = peg$parseTRUNCATE_SYMBOL();
                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                            s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                            if (s2 !== peg$FAILED) {
                                                                                                              s3 = peg$parseexpr();
                                                                                                              if (s3 !== peg$FAILED) {
                                                                                                                s4 = peg$parseCOMMA_SYMBOL();
                                                                                                                if (s4 !== peg$FAILED) {
                                                                                                                  s5 = peg$parseexpr();
                                                                                                                  if (s5 !== peg$FAILED) {
                                                                                                                    s6 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                    if (s6 !== peg$FAILED) {
                                                                                                                      s1 = [s1, s2, s3, s4, s5, s6];
                                                                                                                      s0 = s1;
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$FAILED;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$FAILED;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$FAILED;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                              }
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$FAILED;
                                                                                                            }
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$currPos;
                                                                                                            s1 = peg$parseWEEK_SYMBOL();
                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                              s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                              if (s2 !== peg$FAILED) {
                                                                                                                s3 = peg$parseexpr();
                                                                                                                if (s3 !== peg$FAILED) {
                                                                                                                  s4 = peg$currPos;
                                                                                                                  s5 = peg$parseCOMMA_SYMBOL();
                                                                                                                  if (s5 !== peg$FAILED) {
                                                                                                                    s6 = peg$parseexpr();
                                                                                                                    if (s6 !== peg$FAILED) {
                                                                                                                      s5 = [s5, s6];
                                                                                                                      s4 = s5;
                                                                                                                    } else {
                                                                                                                      peg$currPos = s4;
                                                                                                                      s4 = peg$FAILED;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s4;
                                                                                                                    s4 = peg$FAILED;
                                                                                                                  }
                                                                                                                  if (s4 === peg$FAILED) {
                                                                                                                    s4 = null;
                                                                                                                  }
                                                                                                                  s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                  if (s5 !== peg$FAILED) {
                                                                                                                    s1 = [s1, s2, s3, s4, s5];
                                                                                                                    s0 = s1;
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$FAILED;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$FAILED;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                              }
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$FAILED;
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$currPos;
                                                                                                              s1 = peg$parseWEIGHT_STRING_SYMBOL();
                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                s2 = peg$parseOPEN_PAR_SYMBOL();
                                                                                                                if (s2 !== peg$FAILED) {
                                                                                                                  s3 = peg$parseexpr();
                                                                                                                  if (s3 !== peg$FAILED) {
                                                                                                                    s4 = peg$currPos;
                                                                                                                    s5 = peg$currPos;
                                                                                                                    s6 = peg$parseAS_SYMBOL();
                                                                                                                    if (s6 !== peg$FAILED) {
                                                                                                                      s7 = peg$parseCHAR_SYMBOL();
                                                                                                                      if (s7 !== peg$FAILED) {
                                                                                                                        s8 = peg$parsewsNumCodepoints();
                                                                                                                        if (s8 !== peg$FAILED) {
                                                                                                                          s6 = [s6, s7, s8];
                                                                                                                          s5 = s6;
                                                                                                                        } else {
                                                                                                                          peg$currPos = s5;
                                                                                                                          s5 = peg$FAILED;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s5;
                                                                                                                        s5 = peg$FAILED;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s5;
                                                                                                                      s5 = peg$FAILED;
                                                                                                                    }
                                                                                                                    if (s5 === peg$FAILED) {
                                                                                                                      s5 = null;
                                                                                                                    }
                                                                                                                    s6 = peg$currPos;
                                                                                                                    peg$savedPos = peg$currPos;
                                                                                                                    s7 = peg$f175();
                                                                                                                    if (s7) {
                                                                                                                      s7 = undefined;
                                                                                                                    } else {
                                                                                                                      s7 = peg$FAILED;
                                                                                                                    }
                                                                                                                    if (s7 !== peg$FAILED) {
                                                                                                                      s8 = peg$parseweightStringLevels();
                                                                                                                      if (s8 !== peg$FAILED) {
                                                                                                                        s7 = [s7, s8];
                                                                                                                        s6 = s7;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s6;
                                                                                                                        s6 = peg$FAILED;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s6;
                                                                                                                      s6 = peg$FAILED;
                                                                                                                    }
                                                                                                                    if (s6 === peg$FAILED) {
                                                                                                                      s6 = null;
                                                                                                                    }
                                                                                                                    s5 = [s5, s6];
                                                                                                                    s4 = s5;
                                                                                                                    if (s4 !== peg$FAILED) {
                                                                                                                      s5 = peg$parseCLOSE_PAR_SYMBOL();
                                                                                                                      if (s5 !== peg$FAILED) {
                                                                                                                        s1 = [s1, s2, s3, s4, s5];
                                                                                                                        s0 = s1;
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$FAILED;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$FAILED;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$FAILED;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$FAILED;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parsegeometryFunction();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$currPos;
                                                                                                                  s1 = peg$parseFOUND_ROWS_SYMBOL();
                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                    s2 = peg$parseparentheses();
                                                                                                                    if (s2 !== peg$FAILED) {
                                                                                                                      s1 = [s1, s2];
                                                                                                                      s0 = s1;
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$FAILED;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$FAILED;
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsegeometryFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f176();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCONTAINS_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPEN_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexpr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpr();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCLOSE_PAR_SYMBOL();
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexprList();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLINESTRING_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexprListWithParentheses();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMULTILINESTRING_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexprListWithParentheses();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMULTIPOINT_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexprListWithParentheses();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMULTIPOLYGON_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseexprListWithParentheses();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePOINT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseOPEN_PAR_SYMBOL();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpr();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseCOMMA_SYMBOL();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseexpr();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseCLOSE_PAR_SYMBOL();
                          if (s6 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePOLYGON_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseexprListWithParentheses();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetimeFunctionParameters() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefractionalPrecision();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCLOSE_PAR_SYMBOL();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefractionalPrecision() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f177();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINT_NUMBER();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseweightStringLevels() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLEVEL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsereal_ulong_number();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseMINUS_OPERATOR();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsereal_ulong_number();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseweightStringLevelListItem();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseweightStringLevelListItem();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseweightStringLevelListItem();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseweightStringLevelListItem() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsereal_ulong_number();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseASC_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = peg$parseDESC_SYMBOL();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseREVERSE_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseREVERSE_SYMBOL();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeTtype() {
    var s0;

    s0 = peg$parseDATE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTIME_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDATETIME_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTIMESTAMP_SYMBOL();
        }
      }
    }

    return s0;
  }

  function peg$parsetrimFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseTRIM_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseexpr();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseFROM_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseexpr();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseLEADING_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpr();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseFROM_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpr();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseTRAILING_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpr();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parseFROM_SYMBOL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpr();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseBOTH_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexpr();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s6 = peg$parseFROM_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexpr();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubstringFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseSUBSTRING_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSUBSTR_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseexpr();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseexpr();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseFROM_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpr();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseFOR_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseexpr();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunctionCall() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsepureIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseudfExprList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsequalifiedIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexprList();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseudfExprList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseudfExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseudfExpr();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseudfExpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseudfExpr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseselectAlias();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariable() {
    var s0;

    s0 = peg$parseuserVariable();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesystemVariable();
    }

    return s0;
  }

  function peg$parseuserVariable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAT_SIGN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextOrIdentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseAT_TEXT_SUFFIX();
    }

    return s0;
  }

  function peg$parsesystemVariable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseAT_AT_SIGN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevarIdentType();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsetextOrIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsedotIdentifier();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinternalVariableName() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f178();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedotIdentifier();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f179();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselValueIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedotIdentifier();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDEFAULT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedotIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsewhenExpression() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseWHEN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsethenExpression() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTHEN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseelseExpression() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseELSE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecastType() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseBINARY_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefieldLength();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCHAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldLength();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parsecharsetWithOptBinary();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenchar();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefieldLength();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSIGNED_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseINT_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseUNSIGNED_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseINT_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseDATE_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseTIME_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsetypeDatetimePrecision();
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseDATETIME_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsetypeDatetimePrecision();
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseDECIMAL_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsefloatOptions();
                      if (s2 === peg$FAILED) {
                        s2 = null;
                      }
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      peg$savedPos = peg$currPos;
                      s1 = peg$f180();
                      if (s1) {
                        s1 = undefined;
                      } else {
                        s1 = peg$FAILED;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseJSON_SYMBOL();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        peg$savedPos = peg$currPos;
                        s1 = peg$f181();
                        if (s1) {
                          s1 = undefined;
                        } else {
                          s1 = peg$FAILED;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parserealType();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseprecision();
                            if (s3 === peg$FAILED) {
                              s3 = null;
                            }
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$savedPos = peg$currPos;
                          s1 = peg$f182();
                          if (s1) {
                            s1 = undefined;
                          } else {
                            s1 = peg$FAILED;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseFLOAT_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseprecision();
                              if (s3 === peg$FAILED) {
                                s3 = null;
                              }
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseexprList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseexpr();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexprListWithParentheses() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexprList();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexprWithParentheses() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesimpleExprWithParentheses() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesimpleExpr();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorderList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseorderExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseorderExpression();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseorderExpression();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorderExpression() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedirection();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegroupList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseexpr();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsechannel() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f183();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFOR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCHANNEL_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSINGLE_QUOTED_TEXT();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecompoundStatement() {
    var s0;

    s0 = peg$parsesimpleStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parsereturnStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseifStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecaseStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parselabeledBlock();
            if (s0 === peg$FAILED) {
              s0 = peg$parsebeginEndBlock();
              if (s0 === peg$FAILED) {
                s0 = peg$parselabeledControl();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseunlabeledControl();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseleaveStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseiterateStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsecursorOpen();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsecursorFetch();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsecursorClose();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsespDeclarations();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsereturnStatement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRETURN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseifStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseIF_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseifBody();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEND_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIF_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseifBody() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsethenStatement();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseELSEIF_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseifBody();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseELSE_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecompoundStatementList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsethenStatement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTHEN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecompoundStatementList();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecompoundStatementList() {
    var s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parsecompoundStatement();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseSEMICOLON_SYMBOL();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parsecompoundStatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecaseStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseCASE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parsewhenExpression();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsethenStatement();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsewhenExpression();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsethenStatement();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseelseStatement();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseEND_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseCASE_SYMBOL();
          if (s6 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5, s6];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseelseStatement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseELSE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecompoundStatementList();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselabeledBlock() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parselabel();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebeginEndBlock();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelIdentifier();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselabel() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parselabelIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCOLON_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebeginEndBlock() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseBEGIN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespDeclarations();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsecompoundStatementList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseEND_SYMBOL();
      if (s4 !== peg$FAILED) {
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselabeledControl() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parselabel();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunlabeledControl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelIdentifier();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunlabeledControl() {
    var s0;

    s0 = peg$parseloopBlock();
    if (s0 === peg$FAILED) {
      s0 = peg$parsewhileDoBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parserepeatUntilBlock();
      }
    }

    return s0;
  }

  function peg$parseloopBlock() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseLOOP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecompoundStatementList();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEND_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLOOP_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhileDoBlock() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseWHILE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDO_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecompoundStatementList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEND_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWHILE_SYMBOL();
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserepeatUntilBlock() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseREPEAT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecompoundStatementList();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseUNTIL_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexpr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEND_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseREPEAT_SYMBOL();
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespDeclarations() {
    var s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parsespDeclaration();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseSEMICOLON_SYMBOL();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parsespDeclaration();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON_SYMBOL();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespDeclaration() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDECLARE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevariableDeclaration();
      if (s2 === peg$FAILED) {
        s2 = peg$parseconditionDeclaration();
        if (s2 === peg$FAILED) {
          s2 = peg$parsehandlerDeclaration();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecursorDeclaration();
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariableDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseidentifierList();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedataType();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecollate();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        s5 = peg$parseDEFAULT_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseexpr();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconditionDeclaration() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCONDITION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFOR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsespCondition();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespCondition() {
    var s0;

    s0 = peg$parseulong_number();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesqlstate();
    }

    return s0;
  }

  function peg$parsesqlstate() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSQLSTATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseVALUE_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsetextLiteral();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehandlerDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseCONTINUE_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEXIT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNDO_SYMBOL();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHANDLER_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFOR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsehandlerCondition();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parseCOMMA_SYMBOL();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsehandlerCondition();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parseCOMMA_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsehandlerCondition();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            s6 = peg$parsecompoundStatement();
            if (s6 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5, s6];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehandlerCondition() {
    var s0, s1, s2;

    s0 = peg$parsespCondition();
    if (s0 === peg$FAILED) {
      s0 = peg$parseidentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSQLWARNING_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenotRule();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFOUND_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseSQLEXCEPTION_SYMBOL();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecursorDeclaration() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCURSOR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFOR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseselectStatement();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiterateStatement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseITERATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselabelIdentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseleaveStatement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseLEAVE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselabelIdentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegetDiagnostics() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseGET_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCURRENT_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        peg$savedPos = peg$currPos;
        s3 = peg$f184();
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSTACKED_SYMBOL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseDIAGNOSTICS_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsestatementInformationItem();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$parseCOMMA_SYMBOL();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsestatementInformationItem();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$parseCOMMA_SYMBOL();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsestatementInformationItem();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseCONDITION_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesignalAllowedExpr();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseconditionInformationItem();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$currPos;
                s10 = peg$parseCOMMA_SYMBOL();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseconditionInformationItem();
                  if (s11 !== peg$FAILED) {
                    s10 = [s10, s11];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$currPos;
                  s10 = peg$parseCOMMA_SYMBOL();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseconditionInformationItem();
                    if (s11 !== peg$FAILED) {
                      s10 = [s10, s11];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                }
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesignalAllowedExpr() {
    var s0;

    s0 = peg$parseliteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parsevariable();
      if (s0 === peg$FAILED) {
        s0 = peg$parsequalifiedIdentifier();
      }
    }

    return s0;
  }

  function peg$parsestatementInformationItem() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsevariable();
    if (s1 === peg$FAILED) {
      s1 = peg$parseidentifier();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNUMBER_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = peg$parseROW_COUNT_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconditionInformationItem() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsevariable();
    if (s1 === peg$FAILED) {
      s1 = peg$parseidentifier();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesignalInformationItemName();
        if (s3 === peg$FAILED) {
          s3 = peg$parseRETURNED_SQLSTATE_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesignalInformationItemName() {
    var s0;

    s0 = peg$parseCLASS_ORIGIN_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCATALOG_NAME_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSCHEMA_NAME_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseTABLE_NAME_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCOLUMN_NAME_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCURSOR_NAME_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesignalStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseSIGNAL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 === peg$FAILED) {
        s2 = peg$parsesqlstate();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseSET_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesignalInformationItem();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parseCOMMA_SYMBOL();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsesignalInformationItem();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parseCOMMA_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsesignalInformationItem();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresignalStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseRESIGNAL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 === peg$FAILED) {
        s2 = peg$parsesqlstate();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parseSET_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsesignalInformationItem();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$parseCOMMA_SYMBOL();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsesignalInformationItem();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$parseCOMMA_SYMBOL();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsesignalInformationItem();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesignalInformationItem() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesignalInformationItemName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesignalAllowedExpr();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecursorOpen() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecursorClose() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCLOSE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecursorFetch() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseFETCH_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseNEXT_SYMBOL();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseFROM_SYMBOL();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseidentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseINTO_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifierList();
          if (s5 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseschedule() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEVERY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinterval();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSTARTS_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpr();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = peg$currPos;
            s6 = peg$parseENDS_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpr();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecolumnDefinition() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecolumnName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefieldDefinition();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecheckOrReferences();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecheckOrReferences() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f185();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecheckConstraint();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsereferences();
    }

    return s0;
  }

  function peg$parsecheckConstraint() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCHECK_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexprWithParentheses();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconstraintEnforcement() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseNOT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseENFORCED_SYMBOL();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableConstraintDef() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseKEY_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseINDEX_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseindexNameAndType();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsekeyListVariants();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseindexOption();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseindexOption();
        }
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFULLTEXT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyOrIndex();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseidentifier();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parsekeyListVariants();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsefulltextIndexOption();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsefulltextIndexOption();
          }
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSPATIAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekeyOrIndex();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parseidentifier();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parsekeyListVariants();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsecommonIndexOption();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsecommonIndexOption();
            }
            s1 = [s1, s2, s3, s4, s5];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseconstraintName();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          s2 = peg$currPos;
          s3 = peg$currPos;
          s4 = peg$parsePRIMARY_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseKEY_SYMBOL();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseUNIQUE_SYMBOL();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsekeyOrIndex();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseindexNameAndType();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = peg$parsekeyListVariants();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseindexOption();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseindexOption();
              }
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseFOREIGN_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseKEY_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifier();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s6 = peg$parsekeyList();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsereferences();
                  if (s7 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6, s7];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parsecheckConstraint();
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                peg$savedPos = peg$currPos;
                s5 = peg$f186();
                if (s5) {
                  s5 = undefined;
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseconstraintEnforcement();
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseconstraintName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCONSTRAINT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefieldDefinition() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedataType();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsecolumnAttribute();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsecolumnAttribute();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolumnAttribute() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNOT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsenullLiteral();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f187();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSECONDARY_SYMBOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDEFAULT_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesignedLiteral();
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseNOW_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetimeFunctionParameters();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$savedPos = peg$currPos;
              s3 = peg$f188();
              if (s3) {
                s3 = undefined;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseexprWithParentheses();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseON_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseUPDATE_SYMBOL();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseNOW_SYMBOL();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetimeFunctionParameters();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseAUTO_INCREMENT_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSERIAL_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDEFAULT_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseVALUE_SYMBOL();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePRIMARY_SYMBOL();
                if (s1 === peg$FAILED) {
                  s1 = null;
                }
                s2 = peg$parseKEY_SYMBOL();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseUNIQUE_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseKEY_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseCOMMENT_SYMBOL();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsetextLiteral();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsecollate();
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseCOLUMN_FORMAT_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsecolumnFormat();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseSTORAGE_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsestorageMedia();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            peg$savedPos = peg$currPos;
                            s1 = peg$f189();
                            if (s1) {
                              s1 = undefined;
                            } else {
                              s1 = peg$FAILED;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseSRID_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsereal_ulonglong_number();
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              peg$savedPos = peg$currPos;
                              s1 = peg$f190();
                              if (s1) {
                                s1 = undefined;
                              } else {
                                s1 = peg$FAILED;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseconstraintName();
                                if (s2 === peg$FAILED) {
                                  s2 = null;
                                }
                                s3 = peg$parsecheckConstraint();
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                peg$savedPos = peg$currPos;
                                s1 = peg$f191();
                                if (s1) {
                                  s1 = undefined;
                                } else {
                                  s1 = peg$FAILED;
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseconstraintEnforcement();
                                  if (s2 !== peg$FAILED) {
                                    s1 = [s1, s2];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecolumnFormat() {
    var s0;

    s0 = peg$parseFIXED_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDYNAMIC_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDEFAULT_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parsestorageMedia() {
    var s0;

    s0 = peg$parseDISK_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMEMORY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDEFAULT_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parsegcolAttribute() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseUNIQUE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKEY_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCOMMENT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextString();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenotRule();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = peg$parseNULL_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePRIMARY_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          s2 = peg$parseKEY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsereferences() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseREFERENCES_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetableRef();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifierListWithParentheses();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        s5 = peg$parseMATCH_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseFULL_SYMBOL();
          if (s6 === peg$FAILED) {
            s6 = peg$parsePARTIAL_SYMBOL();
            if (s6 === peg$FAILED) {
              s6 = peg$parseSIMPLE_SYMBOL();
            }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$currPos;
        s6 = peg$currPos;
        s7 = peg$parseON_SYMBOL();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseUPDATE_SYMBOL();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsedeleteOption();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$currPos;
        s8 = peg$parseON_SYMBOL();
        if (s8 !== peg$FAILED) {
          s9 = peg$parseDELETE_SYMBOL();
          if (s9 !== peg$FAILED) {
            s10 = peg$parsedeleteOption();
            if (s10 !== peg$FAILED) {
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s6 = [s6, s7];
        s5 = s6;
        s1 = [s1, s2, s3, s4, s5];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeleteOption() {
    var s0, s1, s2;

    s0 = peg$parseRESTRICT_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCASCADE_SYMBOL();
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSET_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenullLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNO_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseACTION_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsekeyList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsekeyPart();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsekeyPart();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsekeyPart();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyPart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefieldLength();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsedirection();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyListWithExpression() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsekeyPartOrExpression();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsekeyPartOrExpression();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsekeyPartOrExpression();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyPartOrExpression() {
    var s0, s1, s2;

    s0 = peg$parsekeyPart();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexprWithParentheses();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedirection();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsekeyListVariants() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f192();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsekeyListWithExpression();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f193();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekeyList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseindexType() {
    var s0;

    s0 = peg$parseBTREE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRTREE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHASH_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parseindexOption() {
    var s0;

    s0 = peg$parsecommonIndexOption();
    if (s0 === peg$FAILED) {
      s0 = peg$parseindexTypeClause();
    }

    return s0;
  }

  function peg$parsecommonIndexOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseulong_number();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCOMMENT_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetextLiteral();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f194();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevisibility();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsevisibility() {
    var s0;

    s0 = peg$parseVISIBLE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseINVISIBLE_SYMBOL();
    }

    return s0;
  }

  function peg$parseindexTypeClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseUSING_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseTYPE_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseindexType();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefulltextIndexOption() {
    var s0, s1, s2, s3;

    s0 = peg$parsecommonIndexOption();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseWITH_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePARSER_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedataTypeDefinition() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsedataType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOF();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedataType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseINT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseTINYINT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSMALLINT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMEDIUMINT_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseBIGINT_SYMBOL();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefieldLength();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsefieldOptions();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseREAL_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseDOUBLE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePRECISION_SYMBOL();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprecision();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parsefieldOptions();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFLOAT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDECIMAL_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseNUMERIC_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseFIXED_SYMBOL();
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefloatOptions();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parsefieldOptions();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseBIT_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefieldLength();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseBOOL_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBOOLEAN_SYMBOL();
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCHAR_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsefieldLength();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s3 = peg$parsecharsetWithOptBinary();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsenchar();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsefieldLength();
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  s3 = peg$parseBINARY_SYMBOL();
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseBINARY_SYMBOL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsefieldLength();
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$currPos;
                    s2 = peg$parseCHAR_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseVARYING_SYMBOL();
                      if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseVARCHAR_SYMBOL();
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsefieldLength();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsecharsetWithOptBinary();
                        if (s3 === peg$FAILED) {
                          s3 = null;
                        }
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$currPos;
                      s2 = peg$parseNATIONAL_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseVARCHAR_SYMBOL();
                        if (s3 !== peg$FAILED) {
                          s2 = [s2, s3];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseNVARCHAR_SYMBOL();
                        if (s1 === peg$FAILED) {
                          s1 = peg$currPos;
                          s2 = peg$parseNCHAR_SYMBOL();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseVARCHAR_SYMBOL();
                            if (s3 !== peg$FAILED) {
                              s2 = [s2, s3];
                              s1 = s2;
                            } else {
                              peg$currPos = s1;
                              s1 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                          if (s1 === peg$FAILED) {
                            s1 = peg$currPos;
                            s2 = peg$parseNATIONAL_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseCHAR_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseVARYING_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s2 = [s2, s3, s4];
                                  s1 = s2;
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s1;
                              s1 = peg$FAILED;
                            }
                            if (s1 === peg$FAILED) {
                              s1 = peg$currPos;
                              s2 = peg$parseNCHAR_SYMBOL();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseVARYING_SYMBOL();
                                if (s3 !== peg$FAILED) {
                                  s2 = [s2, s3];
                                  s1 = s2;
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                              }
                            }
                          }
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsefieldLength();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseBINARY_SYMBOL();
                          if (s3 === peg$FAILED) {
                            s3 = null;
                          }
                          s1 = [s1, s2, s3];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseVARBINARY_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsefieldLength();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseLONG_SYMBOL();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseVARBINARY_SYMBOL();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseLONG_SYMBOL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$currPos;
                              s3 = peg$parseCHAR_SYMBOL();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseVARYING_SYMBOL();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseVARCHAR_SYMBOL();
                              }
                              if (s2 === peg$FAILED) {
                                s2 = null;
                              }
                              s3 = peg$parsecharsetWithOptBinary();
                              if (s3 === peg$FAILED) {
                                s3 = null;
                              }
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseYEAR_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parsefieldLength();
                                if (s2 === peg$FAILED) {
                                  s2 = null;
                                }
                                s3 = peg$parsefieldOptions();
                                if (s3 === peg$FAILED) {
                                  s3 = null;
                                }
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseDATE_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseTIME_SYMBOL();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parsetypeDatetimePrecision();
                                    if (s2 === peg$FAILED) {
                                      s2 = null;
                                    }
                                    s1 = [s1, s2];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseTIMESTAMP_SYMBOL();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsetypeDatetimePrecision();
                                      if (s2 === peg$FAILED) {
                                        s2 = null;
                                      }
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseDATETIME_SYMBOL();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsetypeDatetimePrecision();
                                        if (s2 === peg$FAILED) {
                                          s2 = null;
                                        }
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseTINYBLOB_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseBLOB_SYMBOL();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parsefieldLength();
                                            if (s2 === peg$FAILED) {
                                              s2 = null;
                                            }
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseMEDIUMBLOB_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseLONGBLOB_SYMBOL();
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseTINYTEXT_SYMBOL();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parsecharsetWithOptBinary();
                                                if (s2 === peg$FAILED) {
                                                  s2 = null;
                                                }
                                                s1 = [s1, s2];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseTEXT_SYMBOL();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parsefieldLength();
                                                  if (s2 === peg$FAILED) {
                                                    s2 = null;
                                                  }
                                                  s3 = peg$parsecharsetWithOptBinary();
                                                  if (s3 === peg$FAILED) {
                                                    s3 = null;
                                                  }
                                                  s1 = [s1, s2, s3];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseMEDIUMTEXT_SYMBOL();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parsecharsetWithOptBinary();
                                                    if (s2 === peg$FAILED) {
                                                      s2 = null;
                                                    }
                                                    s1 = [s1, s2];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseLONGTEXT_SYMBOL();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parsecharsetWithOptBinary();
                                                      if (s2 === peg$FAILED) {
                                                        s2 = null;
                                                      }
                                                      s1 = [s1, s2];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseENUM_SYMBOL();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsestringList();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parsecharsetWithOptBinary();
                                                          if (s3 === peg$FAILED) {
                                                            s3 = null;
                                                          }
                                                          s1 = [s1, s2, s3];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseSET_SYMBOL();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parsestringList();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parsecharsetWithOptBinary();
                                                            if (s3 === peg$FAILED) {
                                                              s3 = null;
                                                            }
                                                            s1 = [s1, s2, s3];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseSERIAL_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            peg$savedPos = peg$currPos;
                                                            s1 = peg$f195();
                                                            if (s1) {
                                                              s1 = undefined;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parseJSON_SYMBOL();
                                                              if (s2 !== peg$FAILED) {
                                                                s1 = [s1, s2];
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseGEOMETRY_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsePOINT_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseLINESTRING_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsePOLYGON_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenchar() {
    var s0, s1, s2;

    s0 = peg$parseNCHAR_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNATIONAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCHAR_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserealType() {
    var s0, s1, s2;

    s0 = peg$parseREAL_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDOUBLE_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePRECISION_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefieldLength() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsereal_ulonglong_number();
      if (s2 === peg$FAILED) {
        s2 = peg$parseDECIMAL_NUMBER();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefieldOptions() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseSIGNED_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseUNSIGNED_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseZEROFILL_SYMBOL();
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseSIGNED_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseUNSIGNED_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseZEROFILL_SYMBOL();
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecharsetWithOptBinary() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parseascii();
    if (s0 === peg$FAILED) {
      s0 = peg$parseunicode();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBYTE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecharset();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecharsetName();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseBINARY_SYMBOL();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseBINARY_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parsecharset();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecharsetName();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseascii() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseASCII_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBINARY_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBINARY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseASCII_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseunicode() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseUNICODE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBINARY_SYMBOL();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBINARY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUNICODE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsewsNumCodepoints() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsereal_ulong_number();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetypeDatetimePrecision() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINT_NUMBER();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecharsetName() {
    var s0, s1, s2;

    s0 = peg$parsetextOrIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBINARY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f196();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDEFAULT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsecollationName() {
    var s0, s1, s2;

    s0 = peg$parsetextOrIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f197();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDEFAULT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f198();
        if (s1) {
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseBINARY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsecreateTableOptions() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecreateTableOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parsecreateTableOption();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parsecreateTableOption();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateTableOptionsSpaceSeparated() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsecreateTableOption();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecreateTableOption();
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateTableOption() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseENGINE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsetextOrIdentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f199();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSECONDARY_ENGINE_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseequal();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseNULL_SYMBOL();
          if (s4 === peg$FAILED) {
            s4 = peg$parsetextOrIdentifier();
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMAX_ROWS_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parseulonglong_number();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMIN_ROWS_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parseulonglong_number();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseAVG_ROW_LENGTH_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s3 = peg$parseulong_number();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsePASSWORD_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s3 = peg$parseSINGLE_QUOTED_TEXT();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCOMMENT_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  s3 = peg$parseSINGLE_QUOTED_TEXT();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  peg$savedPos = peg$currPos;
                  s1 = peg$f200();
                  if (s1) {
                    s1 = undefined;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseCOMPRESSION_SYMBOL();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseEQUAL_OPERATOR();
                      if (s3 === peg$FAILED) {
                        s3 = null;
                      }
                      s4 = peg$parsetextString();
                      if (s4 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s1 = peg$f201();
                    if (s1) {
                      s1 = undefined;
                    } else {
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseENCRYPTION_SYMBOL();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseEQUAL_OPERATOR();
                        if (s3 === peg$FAILED) {
                          s3 = null;
                        }
                        s4 = peg$parsetextString();
                        if (s4 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseAUTO_INCREMENT_SYMBOL();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseEQUAL_OPERATOR();
                        if (s2 === peg$FAILED) {
                          s2 = null;
                        }
                        s3 = peg$parseulonglong_number();
                        if (s3 !== peg$FAILED) {
                          s1 = [s1, s2, s3];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsePACK_KEYS_SYMBOL();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseEQUAL_OPERATOR();
                          if (s2 === peg$FAILED) {
                            s2 = null;
                          }
                          s3 = peg$parseternaryOption();
                          if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseSTATS_PERSISTENT_SYMBOL();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseEQUAL_OPERATOR();
                            if (s2 === peg$FAILED) {
                              s2 = null;
                            }
                            s3 = peg$parseternaryOption();
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseCHECKSUM_SYMBOL();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseTABLE_CHECKSUM_SYMBOL();
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseEQUAL_OPERATOR();
                              if (s2 === peg$FAILED) {
                                s2 = null;
                              }
                              s3 = peg$parseulong_number();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseEQUAL_OPERATOR();
                                if (s2 === peg$FAILED) {
                                  s2 = null;
                                }
                                s3 = peg$parseulong_number();
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseROW_FORMAT_SYMBOL();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseEQUAL_OPERATOR();
                                  if (s2 === peg$FAILED) {
                                    s2 = null;
                                  }
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseformat() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$parseDEFAULT_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDYNAMIC_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFIXED_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCOMPRESSED_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseREDUNDANT_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCOMPACT_SYMBOL();
            }
          }
        }
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUNION_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQUAL_OPERATOR();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseOPEN_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetableRefList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsedefaultCharset();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedefaultCollation();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseINSERT_METHOD_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQUAL_OPERATOR();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemethod() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parseNO_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFIRST_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLAST_SYMBOL();
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDATA_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIRECTORY_SYMBOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEQUAL_OPERATOR();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parsetextString();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseINDEX_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDIRECTORY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEQUAL_OPERATOR();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parsetextString();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTABLESPACE_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$savedPos = peg$currPos;
            s3 = peg$f202();
            if (s3) {
              s3 = undefined;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEQUAL_OPERATOR();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSTORAGE_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseDISK_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseMEMORY_SYMBOL();
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCONNECTION_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s3 = peg$parsetextString();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEQUAL_OPERATOR();
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  s3 = peg$parseulong_number();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseternaryOption() {
    var s0;

    s0 = peg$parseulong_number();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDEFAULT_SYMBOL();
    }

    return s0;
  }

  function peg$parsedefaultCollation() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDEFAULT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseCOLLATE_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseEQUAL_OPERATOR();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsecollationName();
      if (s4 !== peg$FAILED) {
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefaultEncryption() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDEFAULT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseENCRYPTION_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseEQUAL_OPERATOR();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseSINGLE_QUOTED_TEXT();
      if (s4 !== peg$FAILED) {
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefaultCharset() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDEFAULT_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsecharset();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseEQUAL_OPERATOR();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsecharsetName();
      if (s4 !== peg$FAILED) {
        s1 = [s1, s2, s3, s4];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionClause() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsePARTITION_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepartitionTypeDef();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsePARTITIONS_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsereal_ulong_number();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parsesubPartitions();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parsepartitionDefinitions();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionTypeDef() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseLINEAR_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseKEY_SYMBOL();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsepartitionKeyAlgorithm();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseOPEN_PAR_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseidentifierList();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseCLOSE_PAR_SYMBOL();
        if (s6 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5, s6];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLINEAR_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseHASH_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPEN_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebitExpr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRANGE_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLIST_SYMBOL();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseOPEN_PAR_SYMBOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsebitExpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCLOSE_PAR_SYMBOL();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseCOLUMNS_SYMBOL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseOPEN_PAR_SYMBOL();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidentifierList();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s6 = peg$parseCLOSE_PAR_SYMBOL();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsesubPartitions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseSUBPARTITION_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLINEAR_SYMBOL();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        s5 = peg$parseHASH_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseOPEN_PAR_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsebitExpr();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseCLOSE_PAR_SYMBOL();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseKEY_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepartitionKeyAlgorithm();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseidentifierListWithParentheses();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseSUBPARTITIONS_SYMBOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsereal_ulong_number();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionKeyAlgorithm() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f203();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseALGORITHM_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEQUAL_OPERATOR();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsereal_ulong_number();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionDefinitions() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepartitionDefinition();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsepartitionDefinition();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepartitionDefinition();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parsePARTITION_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseVALUES_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLESS_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTHAN_SYMBOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsepartitionValueItemListParen();
              if (s7 === peg$FAILED) {
                s7 = peg$parseMAXVALUE_SYMBOL();
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseVALUES_SYMBOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIN_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepartitionValuesIn();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = [];
        s5 = peg$parsepartitionOption();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parsepartitionOption();
        }
        s5 = peg$currPos;
        s6 = peg$parseOPEN_PAR_SYMBOL();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsesubpartitionDefinition();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$currPos;
            s10 = peg$parseCOMMA_SYMBOL();
            if (s10 !== peg$FAILED) {
              s11 = peg$parsesubpartitionDefinition();
              if (s11 !== peg$FAILED) {
                s10 = [s10, s11];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$currPos;
              s10 = peg$parseCOMMA_SYMBOL();
              if (s10 !== peg$FAILED) {
                s11 = peg$parsesubpartitionDefinition();
                if (s11 !== peg$FAILED) {
                  s10 = [s10, s11];
                  s9 = s10;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            }
            s9 = peg$parseCLOSE_PAR_SYMBOL();
            if (s9 !== peg$FAILED) {
              s6 = [s6, s7, s8, s9];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s1 = [s1, s2, s3, s4, s5];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionValuesIn() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$parsepartitionValueItemListParen();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOPEN_PAR_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepartitionValueItemListParen();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepartitionValueItemListParen();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsepartitionValueItemListParen();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          s4 = peg$parseCLOSE_PAR_SYMBOL();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsepartitionOption() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseTABLESPACE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseidentifier();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTORAGE_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseENGINE_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEQUAL_OPERATOR();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parsetextOrIdentifier();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNODEGROUP_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQUAL_OPERATOR();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parsereal_ulong_number();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMAX_ROWS_SYMBOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMIN_ROWS_SYMBOL();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQUAL_OPERATOR();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parsereal_ulong_number();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDATA_SYMBOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseINDEX_SYMBOL();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseDIRECTORY_SYMBOL();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseEQUAL_OPERATOR();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parsetextLiteral();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCOMMENT_SYMBOL();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEQUAL_OPERATOR();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s3 = peg$parsetextLiteral();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesubpartitionDefinition() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseSUBPARTITION_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextOrIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsepartitionOption();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsepartitionOption();
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionValueItemListParen() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepartitionValueItem();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsepartitionValueItem();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepartitionValueItem();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartitionValueItem() {
    var s0;

    s0 = peg$parsebitExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMAXVALUE_SYMBOL();
    }

    return s0;
  }

  function peg$parsedefinerClause() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDEFINER_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseuser();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseifExists() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseIF_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEXISTS_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseifNotExists() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseIF_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenotRule();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEXISTS_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprocedureParameter() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseIN_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseOUT_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINOUT_SYMBOL();
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsefunctionParameter();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunctionParameter() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetypeWithOptCollate();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecollate() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCOLLATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecollationName();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetypeWithOptCollate() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsedataType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecollate();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseschemaIdentifierPair() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOMMA_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseviewRefList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseviewRef();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseviewRef();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseviewRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseupdateList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseupdateElement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseupdateElement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseupdateElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseupdateElement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsefieldIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL_OPERATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpr();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDEFAULT_SYMBOL();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecharsetClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsecharset();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecharsetName();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecharset() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCHAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSET_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseCHARSET_SYMBOL();
    }

    return s0;
  }

  function peg$parsefieldsClause() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCOLUMNS_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsefieldTerm();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsefieldTerm();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefieldTerm() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseTERMINATED_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetextString();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOPTIONALLY_SYMBOL();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseENCLOSED_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBY_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetextString();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseESCAPED_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseBY_SYMBOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetextString();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parselinesClause() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseLINES_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parselineTerm();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parselineTerm();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselineTerm() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTERMINATED_SYMBOL();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSTARTING_SYMBOL();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBY_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetextString();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseuserList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseuser();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseuser();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseuser();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateUserList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecreateUserEntry();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecreateUserEntry();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecreateUserEntry();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterUserList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsealterUserEntry();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsealterUserEntry();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsealterUserEntry();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreateUserEntry() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseuser();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseIDENTIFIED_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseBY_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          peg$savedPos = peg$currPos;
          s7 = peg$f204();
          if (s7) {
            s7 = undefined;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parsePASSWORD_SYMBOL();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parsetextString();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseWITH_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetextOrIdentifier();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parseAS_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsetextStringHash();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                peg$savedPos = peg$currPos;
                s8 = peg$f205();
                if (s8) {
                  s8 = undefined;
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseBY_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsetextString();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            peg$savedPos = peg$currPos;
            s5 = peg$f206();
            if (s5) {
              s5 = undefined;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseWITH_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetextOrIdentifier();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s7 = peg$parseBY_SYMBOL();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseRANDOM_SYMBOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsePASSWORD_SYMBOL();
                  if (s9 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8, s9];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealterUserEntry() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseuser();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseIDENTIFIED_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parseWITH_SYMBOL();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsetextOrIdentifier();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseBY_SYMBOL();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsetextString();
          if (s7 !== peg$FAILED) {
            s8 = peg$currPos;
            s9 = peg$parseREPLACE_SYMBOL();
            if (s9 !== peg$FAILED) {
              s10 = peg$parsetextString();
              if (s10 !== peg$FAILED) {
                s9 = [s9, s10];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseretainCurrentPassword();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s5 = [s5, s6, s7, s8, s9];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseWITH_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetextOrIdentifier();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parseAS_SYMBOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsetextStringHash();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseretainCurrentPassword();
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        peg$savedPos = peg$currPos;
        s3 = peg$f207();
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsediscardOldPassword();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseretainCurrentPassword() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseRETAIN_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCURRENT_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePASSWORD_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsediscardOldPassword() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDISCARD_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOLD_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePASSWORD_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereplacePassword() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseREPLACE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextString();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseuserIdentifierOrText() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsetextOrIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseAT_SIGN_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetextOrIdentifier();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseAT_TEXT_SUFFIX();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseuser() {
    var s0, s1, s2;

    s0 = peg$parseuserIdentifierOrText();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCURRENT_USER_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparentheses();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parselikeClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseLIKE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSINGLE_QUOTED_TEXT();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselikeOrWhere() {
    var s0;

    s0 = peg$parselikeClause();
    if (s0 === peg$FAILED) {
      s0 = peg$parsewhereClause();
    }

    return s0;
  }

  function peg$parseonlineOption() {
    var s0;

    s0 = peg$parseONLINE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseOFFLINE_SYMBOL();
    }

    return s0;
  }

  function peg$parsenoWriteToBinLog() {
    var s0;

    s0 = peg$parseLOCAL_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNO_WRITE_TO_BINLOG_SYMBOL();
    }

    return s0;
  }

  function peg$parseusePartition() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f208();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePARTITION_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifierListWithParentheses();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefieldIdentifier() {
    var s0, s1, s2;

    s0 = peg$parsedotIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsequalifiedIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedotIdentifier();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecolumnName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f209();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f210();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefieldIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecolumnInternalRefList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseidentifier();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifier();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsertIdentifier() {
    var s0;

    s0 = peg$parsefieldIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetableWild();
    }

    return s0;
  }

  function peg$parsetableWild() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDOT_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseidentifier();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDOT_SYMBOL();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseMULT_OPERATOR();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseviewName() {
    var s0;

    s0 = peg$parsequalifiedIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedotIdentifier();
    }

    return s0;
  }

  function peg$parseviewRef() {
    var s0;

    s0 = peg$parsequalifiedIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedotIdentifier();
    }

    return s0;
  }

  function peg$parsetableName() {
    var s0;

    s0 = peg$parsequalifiedIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedotIdentifier();
    }

    return s0;
  }

  function peg$parsefilterTableRef() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedotIdentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableRefWithWildcard() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDOT_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseMULT_OPERATOR();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsedotIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseDOT_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseMULT_OPERATOR();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableRef() {
    var s0;

    s0 = peg$parsequalifiedIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedotIdentifier();
    }

    return s0;
  }

  function peg$parsetableRefList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetableRef();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetableRef();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetableAliasRefList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetableRefWithWildcard();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetableRefWithWildcard();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetableRefWithWildcard();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselabelIdentifier() {
    var s0;

    s0 = peg$parsepureIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parselabelKeyword();
    }

    return s0;
  }

  function peg$parseroleIdentifier() {
    var s0;

    s0 = peg$parsepureIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseroleKeyword();
    }

    return s0;
  }

  function peg$parsepureIdentifier() {
    var s0, s1, s2;

    s0 = peg$parseIDENTIFIER();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBACK_TICK_QUOTED_ID();
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f211();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOUBLE_QUOTED_TEXT();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0;

    s0 = peg$parsepureIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseidentifierKeyword();
    }

    return s0;
  }

  function peg$parseidentifierList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseidentifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifierListWithParentheses() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifierList();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE_PAR_SYMBOL();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsequalifiedIdentifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedotIdentifier();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesimpleIdentifier() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsedotIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsedotIdentifier();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f212();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedotIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedotIdentifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedotIdentifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDOT_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseulong_number() {
    var s0;

    s0 = peg$parseINT_NUMBER();
    if (s0 === peg$FAILED) {
      s0 = peg$parseHEX_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLONG_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseULONGLONG_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDECIMAL_NUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFLOAT_NUMBER();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsereal_ulong_number() {
    var s0;

    s0 = peg$parseINT_NUMBER();
    if (s0 === peg$FAILED) {
      s0 = peg$parseHEX_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLONG_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseULONGLONG_NUMBER();
        }
      }
    }

    return s0;
  }

  function peg$parseulonglong_number() {
    var s0;

    s0 = peg$parseINT_NUMBER();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLONG_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseULONGLONG_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDECIMAL_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFLOAT_NUMBER();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsereal_ulonglong_number() {
    var s0, s1, s2;

    s0 = peg$parseINT_NUMBER();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f213();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEX_NUMBER();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseULONGLONG_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLONG_NUMBER();
        }
      }
    }

    return s0;
  }

  function peg$parseliteral() {
    var s0, s1, s2;

    s0 = peg$parsetextLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetemporalLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenullLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseboolLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseUNDERSCORE_CHARSET();
              if (s1 === peg$FAILED) {
                s1 = null;
              }
              s2 = peg$parseHEX_NUMBER();
              if (s2 === peg$FAILED) {
                s2 = peg$parseBIN_NUMBER();
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesignedLiteral() {
    var s0, s1, s2;

    s0 = peg$parseliteral();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePLUS_OPERATOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseulong_number();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMINUS_OPERATOR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseulong_number();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsestringList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextString();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsetextString();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetextString();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseCLOSE_PAR_SYMBOL();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetextString() {
    var s0;

    s0 = peg$parseSINGLE_QUOTED_TEXT();
    if (s0 === peg$FAILED) {
      s0 = peg$parseHEX_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBIN_NUMBER();
      }
    }

    return s0;
  }

  function peg$parsetextStringHash() {
    var s0, s1, s2;

    s0 = peg$parseSINGLE_QUOTED_TEXT();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f214();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEX_NUMBER();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetextLiteral() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseUNDERSCORE_CHARSET();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseSINGLE_QUOTED_TEXT();
    if (s3 !== peg$FAILED) {
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parseNCHAR_TEXT();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSINGLE_QUOTED_TEXT();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSINGLE_QUOTED_TEXT();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetextStringLiteralList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSINGLE_QUOTED_TEXT();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA_SYMBOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSINGLE_QUOTED_TEXT();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA_SYMBOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSINGLE_QUOTED_TEXT();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumLiteral() {
    var s0;

    s0 = peg$parseINT_NUMBER();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLONG_NUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseULONGLONG_NUMBER();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDECIMAL_NUMBER();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFLOAT_NUMBER();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseboolLiteral() {
    var s0;

    s0 = peg$parseTRUE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFALSE_SYMBOL();
    }

    return s0;
  }

  function peg$parsenullLiteral() {
    var s0;

    s0 = peg$parseNULL_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNULL2_SYMBOL();
    }

    return s0;
  }

  function peg$parsetemporalLiteral() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDATE_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSINGLE_QUOTED_TEXT();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTIME_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSINGLE_QUOTED_TEXT();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTIMESTAMP_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSINGLE_QUOTED_TEXT();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsefloatOptions() {
    var s0;

    s0 = peg$parsefieldLength();
    if (s0 === peg$FAILED) {
      s0 = peg$parseprecision();
    }

    return s0;
  }

  function peg$parseprecision() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINT_NUMBER();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOMMA_SYMBOL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseINT_NUMBER();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PAR_SYMBOL();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetextOrIdentifier() {
    var s0;

    s0 = peg$parseidentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSINGLE_QUOTED_TEXT();
    }

    return s0;
  }

  function peg$parselValueIdentifier() {
    var s0;

    s0 = peg$parsepureIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parselValueKeyword();
    }

    return s0;
  }

  function peg$parseroleIdentifierOrText() {
    var s0;

    s0 = peg$parseroleIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSINGLE_QUOTED_TEXT();
    }

    return s0;
  }

  function peg$parsesizeNumber() {
    var s0;

    s0 = peg$parsereal_ulonglong_number();
    if (s0 === peg$FAILED) {
      s0 = peg$parsepureIdentifier();
    }

    return s0;
  }

  function peg$parseparentheses() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PAR_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCLOSE_PAR_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseequal() {
    var s0;

    s0 = peg$parseEQUAL_OPERATOR();
    if (s0 === peg$FAILED) {
      s0 = peg$parseASSIGN_OPERATOR();
    }

    return s0;
  }

  function peg$parseoptionType() {
    var s0;

    s0 = peg$parsePERSIST_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePERSIST_ONLY_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseGLOBAL_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLOCAL_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSESSION_SYMBOL();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevarIdentType() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseGLOBAL_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDOT_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLOCAL_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSESSION_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDOT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsesetVarIdentType() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsePERSIST_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDOT_SYMBOL();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePERSIST_ONLY_SYMBOL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDOT_SYMBOL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseGLOBAL_SYMBOL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDOT_SYMBOL();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLOCAL_SYMBOL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDOT_SYMBOL();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSESSION_SYMBOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseDOT_SYMBOL();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenotRule() {
    var s0;

    s0 = peg$parseNOT_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNOT2_SYMBOL();
    }

    return s0;
  }

  function peg$parsenot2Rule() {
    var s0;

    s0 = peg$parseLOGICAL_NOT_OPERATOR();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNOT2_SYMBOL();
    }

    return s0;
  }

  function peg$parseinterval() {
    var s0;

    s0 = peg$parseintervalTimeStamp();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSECOND_MICROSECOND_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMINUTE_MICROSECOND_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMINUTE_SECOND_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseHOUR_MICROSECOND_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseHOUR_SECOND_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseHOUR_MINUTE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseDAY_MICROSECOND_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDAY_SECOND_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseDAY_MINUTE_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseDAY_HOUR_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseYEAR_MONTH_SYMBOL();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseintervalTimeStamp() {
    var s0;

    s0 = peg$parseMICROSECOND_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSECOND_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMINUTE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseHOUR_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDAY_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseWEEK_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseMONTH_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseQUARTER_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseYEAR_SYMBOL();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseidentifierKeyword() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f215();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselabelKeyword();
      if (s2 === peg$FAILED) {
        s2 = peg$parseroleOrIdentifierKeyword();
        if (s2 === peg$FAILED) {
          s2 = peg$parseEXECUTE_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            peg$savedPos = peg$currPos;
            s3 = peg$f216();
            if (s3) {
              s3 = undefined;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseSHUTDOWN_SYMBOL();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              peg$savedPos = peg$currPos;
              s3 = peg$f217();
              if (s3) {
                s3 = undefined;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseRESTART_SYMBOL();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseidentifierKeywordsUnambiguous();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsAmbiguous1RolesAndLabels();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
          if (s0 === peg$FAILED) {
            s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
            if (s0 === peg$FAILED) {
              s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseidentifierKeywordsAmbiguous1RolesAndLabels() {
    var s0;

    s0 = peg$parseEXECUTE_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRESTART_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSHUTDOWN_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parseidentifierKeywordsAmbiguous2Labels() {
    var s0;

    s0 = peg$parseASCII_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBEGIN_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBYTE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCACHE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCHARSET_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCHECKSUM_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCLONE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseCOMMENT_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCOMMIT_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCONTAINS_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseDEALLOCATE_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDO_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseEND_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseFLUSH_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseFOLLOWS_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseHANDLER_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseHELP_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseIMPORT_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseINSTALL_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseLANGUAGE_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseNO_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsePRECEDES_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsePREPARE_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseREPAIR_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseRESET_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseROLLBACK_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseSAVEPOINT_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseSIGNED_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseSLAVE_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseSTART_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseSTOP_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseTRUNCATE_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseUNICODE_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseUNINSTALL_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseXA_SYMBOL();
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselabelKeyword() {
    var s0, s1, s2;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f218();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseroleOrLabelKeyword();
      if (s2 === peg$FAILED) {
        s2 = peg$parseEVENT_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseFILE_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseNONE_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parsePROCESS_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parsePROXY_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseRELOAD_SYMBOL();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseREPLICATION_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseRESOURCE_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseSUPER_SYMBOL();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseidentifierKeywordsUnambiguous();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
        }
      }
    }

    return s0;
  }

  function peg$parseidentifierKeywordsAmbiguous3Roles() {
    var s0;

    s0 = peg$parseEVENT_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFILE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNONE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePROCESS_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePROXY_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRELOAD_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseREPLICATION_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseRESOURCE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSUPER_SYMBOL();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseidentifierKeywordsUnambiguous() {
    var s0, s1, s2;

    s0 = peg$parseACTION_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseACCOUNT_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseACTIVE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseADDDATE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseADMIN_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAFTER_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAGAINST_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAGGREGATE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseALGORITHM_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseALWAYS_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseANY_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseAT_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseAUTO_INCREMENT_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseAVG_ROW_LENGTH_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseAVG_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseBACKUP_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseBINLOG_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseBIT_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseBLOCK_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseBOOLEAN_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseBOOL_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseBTREE_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseBUCKETS_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseCASCADED_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseCATALOG_NAME_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseCHAIN_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseCHANGED_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseCHANNEL_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseCIPHER_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseCLASS_ORIGIN_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseCLIENT_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseCLOSE_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseCOALESCE_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseCODE_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseCOLLATION_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseCOLUMNS_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseCOLUMN_FORMAT_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseCOLUMN_NAME_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseCOMMITTED_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseCOMPACT_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseCOMPLETION_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseCOMPONENT_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseCOMPRESSED_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseCOMPRESSION_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseCONCURRENT_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseCONNECTION_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseCONSISTENT_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseCONTEXT_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseCPU_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseCURRENT_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseCURSOR_NAME_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseDATAFILE_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseDATA_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseDATETIME_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseDATE_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseDAY_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseDEFAULT_AUTH_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseDEFINER_SYMBOL();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parseDEFINITION_SYMBOL();
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$parseDESCRIPTION_SYMBOL();
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parseDIAGNOSTICS_SYMBOL();
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$parseDIRECTORY_SYMBOL();
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$parseDISABLE_SYMBOL();
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$parseDISCARD_SYMBOL();
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$parseDISK_SYMBOL();
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$parseDUMPFILE_SYMBOL();
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$parseDUPLICATE_SYMBOL();
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$parseDYNAMIC_SYMBOL();
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$parseENABLE_SYMBOL();
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        s0 = peg$parseENCRYPTION_SYMBOL();
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          s0 = peg$parseENDS_SYMBOL();
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            s0 = peg$parseENFORCED_SYMBOL();
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              s0 = peg$parseENGINES_SYMBOL();
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                s0 = peg$parseENGINE_SYMBOL();
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  s0 = peg$parseENUM_SYMBOL();
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    s0 = peg$parseERRORS_SYMBOL();
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      s0 = peg$parseERROR_SYMBOL();
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        s0 = peg$parseESCAPE_SYMBOL();
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          s0 = peg$parseEVENTS_SYMBOL();
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            s0 = peg$parseEVERY_SYMBOL();
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              s0 = peg$parseEXCHANGE_SYMBOL();
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                s0 = peg$parseEXCLUDE_SYMBOL();
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                  s0 = peg$parseEXPANSION_SYMBOL();
                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                    s0 = peg$parseEXPIRE_SYMBOL();
                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                      s0 = peg$parseEXPORT_SYMBOL();
                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                        s0 = peg$parseEXTENDED_SYMBOL();
                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                          s0 = peg$parseEXTENT_SIZE_SYMBOL();
                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                            s0 = peg$parseFAST_SYMBOL();
                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                              s0 = peg$parseFAULTS_SYMBOL();
                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                s0 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                  s0 = peg$parseFILTER_SYMBOL();
                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                    s0 = peg$parseFIRST_SYMBOL();
                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                      s0 = peg$parseFIXED_SYMBOL();
                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                        s0 = peg$parseFOLLOWING_SYMBOL();
                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                          s0 = peg$parseFORMAT_SYMBOL();
                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                            s0 = peg$parseFOUND_SYMBOL();
                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                              s0 = peg$parseFULL_SYMBOL();
                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                s0 = peg$parseGENERAL_SYMBOL();
                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                  s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                    s0 = peg$parseGEOMETRY_SYMBOL();
                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                      s0 = peg$parseGET_FORMAT_SYMBOL();
                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                        s0 = peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL();
                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                          s0 = peg$parseGRANTS_SYMBOL();
                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                            s0 = peg$parseGROUP_REPLICATION_SYMBOL();
                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                              s0 = peg$parseHASH_SYMBOL();
                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                s0 = peg$parseHISTOGRAM_SYMBOL();
                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                  s0 = peg$parseHISTORY_SYMBOL();
                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                    s0 = peg$parseHOSTS_SYMBOL();
                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                      s0 = peg$parseHOST_SYMBOL();
                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                        s0 = peg$parseHOUR_SYMBOL();
                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                          s0 = peg$parseIDENTIFIED_SYMBOL();
                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                            s0 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                              s0 = peg$parseINACTIVE_SYMBOL();
                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                s0 = peg$parseINDEXES_SYMBOL();
                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                  s0 = peg$parseINITIAL_SIZE_SYMBOL();
                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                    s0 = peg$parseINSERT_METHOD_SYMBOL();
                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                      s0 = peg$parseINSTANCE_SYMBOL();
                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                        s0 = peg$parseINVISIBLE_SYMBOL();
                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                          s0 = peg$parseINVOKER_SYMBOL();
                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                            s0 = peg$parseIO_SYMBOL();
                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                              s0 = peg$parseIPC_SYMBOL();
                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                s0 = peg$parseISOLATION_SYMBOL();
                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s0 = peg$parseISSUER_SYMBOL();
                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s0 = peg$parseJSON_SYMBOL();
                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s0 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s0 = peg$parseLAST_SYMBOL();
                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s0 = peg$parseLEAVES_SYMBOL();
                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s0 = peg$parseLESS_SYMBOL();
                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s0 = peg$parseLEVEL_SYMBOL();
                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s0 = peg$parseLINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s0 = peg$parseLIST_SYMBOL();
                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s0 = peg$parseLOCKED_SYMBOL();
                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s0 = peg$parseLOCKS_SYMBOL();
                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s0 = peg$parseLOGFILE_SYMBOL();
                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s0 = peg$parseLOGS_SYMBOL();
                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_DELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_HOST_SYMBOL();
                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                        s0 = peg$parseNETWORK_NAMESPACE_SYMBOL();
                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_PORT_SYMBOL();
                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_SERVER_ID_SYMBOL();
                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SSL_CA_SYMBOL();
                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_SSL_CERT_SYMBOL();
                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_SSL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_USER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMAX_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMAX_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMEDIUM_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMEMORY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMERGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMICROSECOND_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMIGRATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMINUTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMIN_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMODE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMODIFY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMONTH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMUTEX_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNAMES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNAME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNATIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNDBCLUSTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNESTED_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNEVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNEW_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNODEGROUP_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNOWAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNO_WAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNULLS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNUMBER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNVARCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseOFFSET_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseOJ_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseOLD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseONE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseOPEN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseOPTIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseOPTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseORDINALITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseORGANIZATION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseOTHERS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseOWNER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePACK_KEYS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePAGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePARSER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePARTIAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePARTITIONING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePARTITIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePHASE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePLUGINS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePLUGIN_DIR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePLUGIN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePORT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePRECEDING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePRESERVE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePREV_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePRIVILEGES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePROCESSLIST_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePROFILES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePROFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseQUARTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseQUERY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseQUICK_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseREAD_ONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseREBUILD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseRECOVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREDUNDANT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREFERENCE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseRELAY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAYLOG_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_LOG_FILE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_LOG_POS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRELAY_THREAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREMOVE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
s0 = peg$parseREORGANIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPEATABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_DO_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSER_RESOURCES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESPECT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESTORE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRESUME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
s0 = peg$parseRETAIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNED_SQLSTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREUSE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREVERSE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROLLUP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROUTINE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROW_COUNT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROW_FORMAT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRTREE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSCHEDULE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSCHEMA_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_ENGINE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_LOAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECONDARY_UNLOAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECOND_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
s0 = peg$parseSECURITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseSERIALIZABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIAL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERVER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSHARE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSIMPLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSKIP_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
s0 = peg$parseSLOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSNAPSHOT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOUNDS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseSOURCE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BIG_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CALC_FOUND_ROWS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_NO_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_SMALL_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_THREAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSRID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTACKED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTARTS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_PERSISTENT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATUS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORAGE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTRAIGHT_JOIN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
s0 = peg$parseSTREAM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBDATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBJECT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITIONS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
s0 = peg$parseSUSPEND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWITCHES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseTABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLESPACE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_CHECKSUM_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseTABLE_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPORARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPTABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTERMINATED_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseTEXT_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseTHAN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseTHREAD_PRIORITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseTIES_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseTIMESTAMP_ADD_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseTIMESTAMP_DIFF_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRANSACTION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
s0 = peg$parseTRIGGERS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNBOUNDED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNCOMMITTED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDEFINED_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseUNDOFILE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNKNOWN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNTIL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUPGRADE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseUSER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSE_FRM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALIDATION_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseVALUE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALUES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARBINARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseVARIABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARIANCE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARYING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVAR_POP_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseVAR_SAMP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVCPU_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIEW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIRTUAL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVISIBLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWAIT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWARNINGS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEEK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEIGHT_STRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWHEN_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseWHERE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWHILE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWINDOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWITH_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWITHOUT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWORK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWRAPPER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
s0 = peg$parseWRITE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXA_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseX509_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXML_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXOR_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_MONTH_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseZEROFILL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f219();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseARRAY_SYMBOL();
        if (s2 === peg$FAILED) {
          s2 = peg$parseARRAY_SYMBOL();
          if (s2 === peg$FAILED) {
            s2 = peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL();
            if (s2 === peg$FAILED) {
              s2 = peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL();
              if (s2 === peg$FAILED) {
                s2 = peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseMEMBER_SYMBOL();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseOFF_SYMBOL();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsePASSWORD_LOCK_TIME_SYMBOL();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsePRIVILEGE_CHECKS_USER_SYMBOL();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parseRANDOM_SYMBOL();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseREQUIRE_ROW_FORMAT_SYMBOL();
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseSTREAM_SYMBOL();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$parseTIMESTAMP_SYMBOL();
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$parseTIME_SYMBOL();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseroleKeyword() {
    var s0;

    s0 = peg$parseroleOrLabelKeyword();
    if (s0 === peg$FAILED) {
      s0 = peg$parseroleOrIdentifierKeyword();
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseidentifierKeywordsUnambiguous();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous4SystemVariables();
        }
      }
    }

    return s0;
  }

  function peg$parselValueKeyword() {
    var s0;

    s0 = peg$parseidentifierKeywordsUnambiguous();
    if (s0 === peg$FAILED) {
      s0 = peg$parseidentifierKeywordsAmbiguous1RolesAndLabels();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifierKeywordsAmbiguous2Labels();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifierKeywordsAmbiguous3Roles();
        }
      }
    }

    return s0;
  }

  function peg$parseidentifierKeywordsAmbiguous4SystemVariables() {
    var s0;

    s0 = peg$parseGLOBAL_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLOCAL_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePERSIST_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePERSIST_ONLY_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSESSION_SYMBOL();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseroleOrIdentifierKeyword() {
    var s0;

    s0 = peg$parseACCOUNT_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseASCII_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseALWAYS_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBACKUP_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBEGIN_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBYTE_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCACHE_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseCHARSET_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCHECKSUM_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCLONE_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseCLOSE_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseCOMMENT_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseCOMMIT_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseCONTAINS_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseDEALLOCATE_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseDO_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseEND_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseFLUSH_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseFOLLOWS_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseFORMAT_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseGROUP_REPLICATION_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseHANDLER_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseHELP_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseHOST_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseINSTALL_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseINVISIBLE_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseLANGUAGE_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseNO_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseOPEN_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseOPTIONS_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseOWNER_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsePARSER_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsePARTITION_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsePORT_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsePRECEDES_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsePREPARE_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseREMOVE_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseREPAIR_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseRESET_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseRESTORE_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseROLE_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseROLLBACK_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseSAVEPOINT_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseSECONDARY_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseSECONDARY_ENGINE_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseSECONDARY_LOAD_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseSECONDARY_UNLOAD_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseSECURITY_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseSERVER_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseSIGNED_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseSOCKET_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseSLAVE_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseSONAME_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseSTART_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseSTOP_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseTRUNCATE_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseUNICODE_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseUNINSTALL_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseUPGRADE_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseVISIBLE_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseWRAPPER_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseXA_SYMBOL();
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseSHUTDOWN_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIMPORT_SYMBOL();
      }
    }

    return s0;
  }

  function peg$parseroleOrLabelKeyword() {
    var s0;

    s0 = peg$parseACTION_SYMBOL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseACTIVE_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseADDDATE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAFTER_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAGAINST_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAGGREGATE_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseALGORITHM_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseANALYSE_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseANY_SYMBOL();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseAT_SYMBOL();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseAUTHORS_SYMBOL();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseAUTO_INCREMENT_SYMBOL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseAUTOEXTEND_SIZE_SYMBOL();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseAVG_ROW_LENGTH_SYMBOL();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseAVG_SYMBOL();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseBINLOG_SYMBOL();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseBIT_SYMBOL();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseBLOCK_SYMBOL();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseBOOL_SYMBOL();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseBOOLEAN_SYMBOL();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseBTREE_SYMBOL();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseBUCKETS_SYMBOL();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseCASCADED_SYMBOL();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseCATALOG_NAME_SYMBOL();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseCHAIN_SYMBOL();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseCHANGED_SYMBOL();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseCHANNEL_SYMBOL();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseCIPHER_SYMBOL();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseCLIENT_SYMBOL();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseCLASS_ORIGIN_SYMBOL();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseCOALESCE_SYMBOL();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseCODE_SYMBOL();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseCOLLATION_SYMBOL();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseCOLUMN_NAME_SYMBOL();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseCOLUMN_FORMAT_SYMBOL();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseCOLUMNS_SYMBOL();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseCOMMITTED_SYMBOL();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseCOMPACT_SYMBOL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseCOMPLETION_SYMBOL();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseCOMPONENT_SYMBOL();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseCOMPRESSED_SYMBOL();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseCOMPRESSION_SYMBOL();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseCONCURRENT_SYMBOL();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseCONNECTION_SYMBOL();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseCONSISTENT_SYMBOL();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseCONSTRAINT_CATALOG_SYMBOL();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseCONSTRAINT_SCHEMA_SYMBOL();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseCONSTRAINT_NAME_SYMBOL();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseCONTEXT_SYMBOL();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseCONTRIBUTORS_SYMBOL();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseCPU_SYMBOL();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseCURRENT_SYMBOL();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseCURSOR_NAME_SYMBOL();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseDATA_SYMBOL();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseDATAFILE_SYMBOL();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseDATETIME_SYMBOL();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseDATE_SYMBOL();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseDAY_SYMBOL();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseDEFAULT_AUTH_SYMBOL();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseDEFINER_SYMBOL();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseDELAY_KEY_WRITE_SYMBOL();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseDES_KEY_FILE_SYMBOL();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parseDESCRIPTION_SYMBOL();
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$parseDIAGNOSTICS_SYMBOL();
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$parseDIRECTORY_SYMBOL();
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parseDISABLE_SYMBOL();
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$parseDISCARD_SYMBOL();
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$parseDISK_SYMBOL();
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$parseDUMPFILE_SYMBOL();
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$parseDUPLICATE_SYMBOL();
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$parseDYNAMIC_SYMBOL();
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$parseENCRYPTION_SYMBOL();
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$parseENDS_SYMBOL();
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$parseENUM_SYMBOL();
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        s0 = peg$parseENGINE_SYMBOL();
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          s0 = peg$parseENGINES_SYMBOL();
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            s0 = peg$parseERROR_SYMBOL();
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              s0 = peg$parseERRORS_SYMBOL();
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                s0 = peg$parseESCAPE_SYMBOL();
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  s0 = peg$parseEVENTS_SYMBOL();
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    s0 = peg$parseEVERY_SYMBOL();
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      s0 = peg$parseEXCLUDE_SYMBOL();
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        s0 = peg$parseEXPANSION_SYMBOL();
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          s0 = peg$parseEXPORT_SYMBOL();
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            s0 = peg$parseEXTENDED_SYMBOL();
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              s0 = peg$parseEXTENT_SIZE_SYMBOL();
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                s0 = peg$parseFAULTS_SYMBOL();
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                  s0 = peg$parseFAST_SYMBOL();
                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                    s0 = peg$parseFOLLOWING_SYMBOL();
                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                      s0 = peg$parseFOUND_SYMBOL();
                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                        s0 = peg$parseENABLE_SYMBOL();
                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                          s0 = peg$parseFULL_SYMBOL();
                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                            s0 = peg$parseFILE_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                              s0 = peg$parseFILTER_SYMBOL();
                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                s0 = peg$parseFIRST_SYMBOL();
                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                  s0 = peg$parseFIXED_SYMBOL();
                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                    s0 = peg$parseGENERAL_SYMBOL();
                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                      s0 = peg$parseGEOMETRY_SYMBOL();
                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                        s0 = peg$parseGEOMETRYCOLLECTION_SYMBOL();
                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                          s0 = peg$parseGET_FORMAT_SYMBOL();
                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                            s0 = peg$parseGRANTS_SYMBOL();
                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                              s0 = peg$parseGLOBAL_SYMBOL();
                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                s0 = peg$parseHASH_SYMBOL();
                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                  s0 = peg$parseHISTOGRAM_SYMBOL();
                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                    s0 = peg$parseHISTORY_SYMBOL();
                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                      s0 = peg$parseHOSTS_SYMBOL();
                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                        s0 = peg$parseHOUR_SYMBOL();
                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                          s0 = peg$parseIDENTIFIED_SYMBOL();
                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                            s0 = peg$parseIGNORE_SERVER_IDS_SYMBOL();
                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                              s0 = peg$parseINVOKER_SYMBOL();
                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                s0 = peg$parseINDEXES_SYMBOL();
                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                  s0 = peg$parseINITIAL_SIZE_SYMBOL();
                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                    s0 = peg$parseINSTANCE_SYMBOL();
                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                      s0 = peg$parseINACTIVE_SYMBOL();
                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                        s0 = peg$parseIO_SYMBOL();
                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                          s0 = peg$parseIPC_SYMBOL();
                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                            s0 = peg$parseISOLATION_SYMBOL();
                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                              s0 = peg$parseISSUER_SYMBOL();
                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                s0 = peg$parseINSERT_METHOD_SYMBOL();
                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                  s0 = peg$parseJSON_SYMBOL();
                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                    s0 = peg$parseKEY_BLOCK_SIZE_SYMBOL();
                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                      s0 = peg$parseLAST_SYMBOL();
                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                        s0 = peg$parseLEAVES_SYMBOL();
                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                          s0 = peg$parseLESS_SYMBOL();
                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                            s0 = peg$parseLEVEL_SYMBOL();
                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                              s0 = peg$parseLINESTRING_SYMBOL();
                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                s0 = peg$parseLIST_SYMBOL();
                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                  s0 = peg$parseLOCAL_SYMBOL();
                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                    s0 = peg$parseLOCKED_SYMBOL();
                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                      s0 = peg$parseLOCKS_SYMBOL();
                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                        s0 = peg$parseLOGFILE_SYMBOL();
                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                          s0 = peg$parseLOGS_SYMBOL();
                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                            s0 = peg$parseMAX_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_SYMBOL();
                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL();
                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_HOST_SYMBOL();
                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_PORT_SYMBOL();
                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_USER_SYMBOL();
                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL();
                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_SERVER_ID_SYMBOL();
                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_CONNECT_RETRY_SYMBOL();
                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_RETRY_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_DELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SSL_SYMBOL();
                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_SSL_CA_SYMBOL();
                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                            s0 = peg$parseMASTER_SSL_CAPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                              s0 = peg$parseMASTER_TLS_VERSION_SYMBOL();
                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                s0 = peg$parseMASTER_SSL_CERT_SYMBOL();
                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMASTER_SSL_CIPHER_SYMBOL();
                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMASTER_SSL_CRL_SYMBOL();
                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMASTER_SSL_CRLPATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMASTER_SSL_KEY_SYMBOL();
                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMASTER_AUTO_POSITION_SYMBOL();
                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMAX_QUERIES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMAX_STATEMENT_TIME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMAX_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMAX_UPDATES_PER_HOUR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMAX_USER_CONNECTIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMEDIUM_SYMBOL();
                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMEMORY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMERGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMESSAGE_TEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMICROSECOND_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMIGRATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMINUTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMIN_ROWS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseMODIFY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseMODE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseMONTH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseMULTILINESTRING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseMULTIPOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseMULTIPOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseMUTEX_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseMYSQL_ERRNO_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNAME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNAMES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNATIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNDBCLUSTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNESTED_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNEVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseNEXT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseNEW_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseNO_WAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseNODEGROUP_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseNULLS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseNOWAIT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseNUMBER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseNVARCHAR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseOFFSET_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseOLD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseOLD_PASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseONE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseOPTIONAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseORDINALITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseORGANIZATION_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseOTHERS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePACK_KEYS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePAGE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePARTIAL_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePARTITIONING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePARTITIONS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePASSWORD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePATH_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePHASE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parsePLUGIN_DIR_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePLUGIN_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePLUGINS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePOINT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePOLYGON_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parsePRECEDING_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parsePRESERVE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parsePREV_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseTHREAD_PRIORITY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parsePRIVILEGES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parsePROCESSLIST_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parsePROFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parsePROFILES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseQUARTER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseQUERY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseQUICK_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseREAD_ONLY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseREBUILD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseRECOVER_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREDO_BUFFER_SIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREDOFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREDUNDANT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseRELAY_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseRELAYLOG_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseRELAY_LOG_FILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseRELAY_LOG_POS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseRELAY_THREAD_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREMOTE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREORGANIZE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseREPEATABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseREPLICATE_DO_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseREPLICATE_IGNORE_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseREPLICATE_DO_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseREPLICATE_IGNORE_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s0 = peg$parseREPLICATE_REWRITE_DB_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                s0 = peg$parseUSER_RESOURCES_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s0 = peg$parseRESPECT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s0 === peg$FAILED) {
s0 = peg$parseRESUME_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseRETAIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNED_SQLSTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRETURNS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREUSE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseREVERSE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s0 === peg$FAILED) {
s0 = peg$parseROLLUP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROTATE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROUTINE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseROW_COUNT_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseROW_FORMAT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseRTREE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSCHEDULE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSCHEMA_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSECOND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIAL_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSERIALIZABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSESSION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSHARE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSIMPLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSKIP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSLOW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSNAPSHOT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOUNDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSOURCE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s0 = peg$parseSQL_AFTER_GTIDS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s0 === peg$FAILED) {
s0 = peg$parseSQL_AFTER_MTS_GAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BEFORE_GTIDS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_BUFFER_RESULT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_NO_CACHE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSQL_THREAD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSRID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTACKED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTARTS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_AUTO_RECALC_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_PERSISTENT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATS_SAMPLE_PAGES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTATUS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSTORAGE_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    s0 = peg$parseSTRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBCLASS_ORIGIN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBDATE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (s0 === peg$FAILED) {
s0 = peg$parseSUBJECT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUBPARTITIONS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUPER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSUSPEND_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWAPS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseSWITCHES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_NAME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLE_CHECKSUM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTABLESPACE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPORARY_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEMPTABLE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTEXT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTHAN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIES_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseTRANSACTION_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTRIGGERS_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_ADD_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIMESTAMP_DIFF_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTIME_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseTYPE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUDF_RETURNS_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseUNBOUNDED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNCOMMITTED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDEFINED_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDO_BUFFER_SIZE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNDOFILE_SYMBOL();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (s0 === peg$FAILED) {
s0 = peg$parseUNKNOWN_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUNTIL_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s0 = peg$parseUSER_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseUSE_FRM_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVARIABLES_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVCPU_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVIEW_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseVALUE_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWARNINGS_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        s0 = peg$parseWAIT_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEEK_SYMBOL();
if (s0 === peg$FAILED) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            s0 = peg$parseWORK_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseWEIGHT_STRING_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseX509_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXID_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseXML_SYMBOL();
if (s0 === peg$FAILED) {
s0 = peg$parseYEAR_SYMBOL();
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseSHUTDOWN_SYMBOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCUBE_SYMBOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIMPORT_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFUNCTION_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseROWS_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseROW_SYMBOL();
              }
            }
          }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseEXCHANGE_SYMBOL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseEXPIRE_SYMBOL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseONLY_SYMBOL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSUPER_SYMBOL();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseVALIDATION_SYMBOL();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseWITHOUT_SYMBOL();
                  }
                }
              }
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseADMIN_SYMBOL();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c0) {
      s0 = peg$c0;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseASSIGN_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c1) {
      s0 = peg$c1;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseNULL_SAFE_EQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c2) {
      s0 = peg$c2;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseGREATER_OR_EQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c3) {
      s0 = peg$c3;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parseGREATER_THAN_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c4) {
      s0 = peg$c4;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseLESS_OR_EQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c5) {
      s0 = peg$c5;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parseLESS_THAN_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c6) {
      s0 = peg$c6;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parseNOT_EQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c7) {
      s0 = peg$c7;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parsePLUS_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c8) {
      s0 = peg$c8;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parseMINUS_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c9) {
      s0 = peg$c9;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parseMULT_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c10) {
      s0 = peg$c10;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parseDIV_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c11) {
      s0 = peg$c11;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseMOD_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c12) {
      s0 = peg$c12;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseLOGICAL_NOT_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c13) {
      s0 = peg$c13;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseBITWISE_NOT_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c14) {
      s0 = peg$c14;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseSHIFT_LEFT_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c15) {
      s0 = peg$c15;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseSHIFT_RIGHT_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c16) {
      s0 = peg$c16;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseLOGICAL_AND_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseBITWISE_AND_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c18) {
      s0 = peg$c18;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseBITWISE_XOR_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c19) {
      s0 = peg$c19;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseLOGICAL_OR_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c20) {
      s0 = peg$c20;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseBITWISE_OR_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c21) {
      s0 = peg$c21;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseDOT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c22) {
      s0 = peg$c22;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parseCOMMA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c23) {
      s0 = peg$c23;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseSEMICOLON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseCOLON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c25) {
      s0 = peg$c25;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseOPEN_PAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c26) {
      s0 = peg$c26;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parseCLOSE_PAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c27) {
      s0 = peg$c27;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parseOPEN_CURLY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c28) {
      s0 = peg$c28;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parseCLOSE_CURLY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c29) {
      s0 = peg$c29;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseUNDERLINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c30) {
      s0 = peg$c30;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseJSON_SEPARATOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c31) {
      s0 = peg$c31;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseJSON_UNQUOTED_SEPARATOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 30) === peg$c32) {
      s0 = peg$c32;
      peg$currPos += 30;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseAT_SIGN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c33) {
      s0 = peg$c33;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

    return s0;
  }

  function peg$parseAT_TEXT_SUFFIX() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c34) {
      s0 = peg$c34;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parseAT_AT_SIGN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c35) {
      s0 = peg$c35;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseNULL2_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c36) {
      s0 = peg$c36;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parsePARAM_MARKER() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c37) {
      s0 = peg$c37;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parseINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c38) {
      s0 = peg$c38;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parseTINYINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c39) {
      s0 = peg$c39;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseSMALLINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c40) {
      s0 = peg$c40;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parseMEDIUMINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c41) {
      s0 = peg$c41;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parseBIGINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parseREAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c43) {
      s0 = peg$c43;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parseDOUBLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c44) {
      s0 = peg$c44;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    return s0;
  }

  function peg$parseFLOAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c45) {
      s0 = peg$c45;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parseDECIMAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c46) {
      s0 = peg$c46;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parseNUMERIC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c47) {
      s0 = peg$c47;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parseDATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c48) {
      s0 = peg$c48;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parseTIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c49) {
      s0 = peg$c49;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parseTIMESTAMP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c50) {
      s0 = peg$c50;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parseDATETIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c51) {
      s0 = peg$c51;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseYEAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c52) {
      s0 = peg$c52;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseCHAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c53) {
      s0 = peg$c53;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parseVARCHAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c54) {
      s0 = peg$c54;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parseBINARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c55) {
      s0 = peg$c55;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseVARBINARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c56) {
      s0 = peg$c56;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parseTINYBLOB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c57) {
      s0 = peg$c57;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parseBLOB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c58) {
      s0 = peg$c58;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parseMEDIUMBLOB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c59) {
      s0 = peg$c59;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parseLONGBLOB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c60) {
      s0 = peg$c60;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parseTINYTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c61) {
      s0 = peg$c61;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

    return s0;
  }

  function peg$parseTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c62) {
      s0 = peg$c62;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parseMEDIUMTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c63) {
      s0 = peg$c63;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parseLONGTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c64) {
      s0 = peg$c64;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }

    return s0;
  }

  function peg$parseENUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c65) {
      s0 = peg$c65;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }

    return s0;
  }

  function peg$parseSET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c66) {
      s0 = peg$c66;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }

    return s0;
  }

  function peg$parseJSON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c67) {
      s0 = peg$c67;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }

    return s0;
  }

  function peg$parseGEOMETRY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c68) {
      s0 = peg$c68;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }

    return s0;
  }

  function peg$parsePOINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c69) {
      s0 = peg$c69;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parseLINESTRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c70) {
      s0 = peg$c70;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }

    return s0;
  }

  function peg$parsePOLYGON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c71) {
      s0 = peg$c71;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }

    return s0;
  }

  function peg$parseGEOMETRYCOLLECTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c72) {
      s0 = peg$c72;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }

    return s0;
  }

  function peg$parseMULTIPOINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c73) {
      s0 = peg$c73;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }

    return s0;
  }

  function peg$parseMULTILINESTRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c74) {
      s0 = peg$c74;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }

    return s0;
  }

  function peg$parseMULTIPOLYGON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c75) {
      s0 = peg$c75;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }

    return s0;
  }

  function peg$parseACCESSIBLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c76) {
      s0 = peg$c76;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parseACCOUNT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c77) {
      s0 = peg$c77;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }

    return s0;
  }

  function peg$parseACTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c78) {
      s0 = peg$c78;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }

    return s0;
  }

  function peg$parseADD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c79) {
      s0 = peg$c79;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }

    return s0;
  }

  function peg$parseAFTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c80) {
      s0 = peg$c80;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }

    return s0;
  }

  function peg$parseAGAINST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c81) {
      s0 = peg$c81;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }

    return s0;
  }

  function peg$parseAGGREGATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c82) {
      s0 = peg$c82;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

    return s0;
  }

  function peg$parseALGORITHM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c83) {
      s0 = peg$c83;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parseALL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c84) {
      s0 = peg$c84;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }

    return s0;
  }

  function peg$parseALTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c85) {
      s0 = peg$c85;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }

    return s0;
  }

  function peg$parseALWAYS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c86) {
      s0 = peg$c86;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }

    return s0;
  }

  function peg$parseANALYSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c87) {
      s0 = peg$c87;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parseANALYZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c88) {
      s0 = peg$c88;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }

    return s0;
  }

  function peg$parseAND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c89) {
      s0 = peg$c89;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }

    return s0;
  }

  function peg$parseANY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c90) {
      s0 = peg$c90;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }

    return s0;
  }

  function peg$parseAS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c91) {
      s0 = peg$c91;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }

    return s0;
  }

  function peg$parseASC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c92) {
      s0 = peg$c92;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }

    return s0;
  }

  function peg$parseASENSITIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c93) {
      s0 = peg$c93;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }

    return s0;
  }

  function peg$parseAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c94) {
      s0 = peg$c94;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }

    return s0;
  }

  function peg$parseAUTOEXTEND_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c95) {
      s0 = peg$c95;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }

    return s0;
  }

  function peg$parseAUTO_INCREMENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c96) {
      s0 = peg$c96;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }

    return s0;
  }

  function peg$parseAVG_ROW_LENGTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c97) {
      s0 = peg$c97;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parseAVG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c98) {
      s0 = peg$c98;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parseBACKUP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c99) {
      s0 = peg$c99;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parseBEFORE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c100) {
      s0 = peg$c100;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parseBEGIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c101) {
      s0 = peg$c101;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }

    return s0;
  }

  function peg$parseBETWEEN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c102) {
      s0 = peg$c102;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }

    return s0;
  }

  function peg$parseBINLOG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c103) {
      s0 = peg$c103;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }

    return s0;
  }

  function peg$parseBIT_AND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c104) {
      s0 = peg$c104;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }

    return s0;
  }

  function peg$parseBIT_OR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c105) {
      s0 = peg$c105;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }

    return s0;
  }

  function peg$parseBIT_XOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c106) {
      s0 = peg$c106;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }

    return s0;
  }

  function peg$parseBLOCK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c107) {
      s0 = peg$c107;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }

    return s0;
  }

  function peg$parseBOOL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c108) {
      s0 = peg$c108;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }

    return s0;
  }

  function peg$parseBOOLEAN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c109) {
      s0 = peg$c109;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }

    return s0;
  }

  function peg$parseBOTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c110) {
      s0 = peg$c110;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }

    return s0;
  }

  function peg$parseBTREE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c111) {
      s0 = peg$c111;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }

    return s0;
  }

  function peg$parseBY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c112) {
      s0 = peg$c112;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }

    return s0;
  }

  function peg$parseBYTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c113) {
      s0 = peg$c113;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }

    return s0;
  }

  function peg$parseCACHE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c114) {
      s0 = peg$c114;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }

    return s0;
  }

  function peg$parseCALL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c115) {
      s0 = peg$c115;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }

    return s0;
  }

  function peg$parseCASCADE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c116) {
      s0 = peg$c116;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }

    return s0;
  }

  function peg$parseCASCADED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c117) {
      s0 = peg$c117;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parseCASE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c118) {
      s0 = peg$c118;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }

    return s0;
  }

  function peg$parseCAST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c119) {
      s0 = peg$c119;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }

    return s0;
  }

  function peg$parseCATALOG_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c120) {
      s0 = peg$c120;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }

    return s0;
  }

  function peg$parseCHAIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c121) {
      s0 = peg$c121;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }

    return s0;
  }

  function peg$parseCHANGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c122) {
      s0 = peg$c122;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }

    return s0;
  }

  function peg$parseCHANGED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c123) {
      s0 = peg$c123;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

    return s0;
  }

  function peg$parseCHANNEL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c124) {
      s0 = peg$c124;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }

    return s0;
  }

  function peg$parseCHARSET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c125) {
      s0 = peg$c125;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }

    return s0;
  }

  function peg$parseCHARACTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c126) {
      s0 = peg$c126;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }

    return s0;
  }

  function peg$parseCHECK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c127) {
      s0 = peg$c127;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }

    return s0;
  }

  function peg$parseCHECKSUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c128) {
      s0 = peg$c128;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }

    return s0;
  }

  function peg$parseCIPHER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c129) {
      s0 = peg$c129;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }

    return s0;
  }

  function peg$parseCLASS_ORIGIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c130) {
      s0 = peg$c130;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }

    return s0;
  }

  function peg$parseCLIENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c131) {
      s0 = peg$c131;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }

    return s0;
  }

  function peg$parseCLOSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c132) {
      s0 = peg$c132;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }

    return s0;
  }

  function peg$parseCOALESCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c133) {
      s0 = peg$c133;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }

    return s0;
  }

  function peg$parseCODE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c134) {
      s0 = peg$c134;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }

    return s0;
  }

  function peg$parseCOLLATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c135) {
      s0 = peg$c135;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }

    return s0;
  }

  function peg$parseCOLLATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c136) {
      s0 = peg$c136;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }

    return s0;
  }

  function peg$parseCOLUMN_FORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c137) {
      s0 = peg$c137;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }

    return s0;
  }

  function peg$parseCOLUMN_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c138) {
      s0 = peg$c138;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e138); }
    }

    return s0;
  }

  function peg$parseCOLUMNS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c139) {
      s0 = peg$c139;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }

    return s0;
  }

  function peg$parseCOLUMN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c140) {
      s0 = peg$c140;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }

    return s0;
  }

  function peg$parseCOMMENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c141) {
      s0 = peg$c141;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }

    return s0;
  }

  function peg$parseCOMMITTED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c142) {
      s0 = peg$c142;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }

    return s0;
  }

  function peg$parseCOMMIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c143) {
      s0 = peg$c143;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }

    return s0;
  }

  function peg$parseCOMPACT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c144) {
      s0 = peg$c144;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }

    return s0;
  }

  function peg$parseCOMPLETION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c145) {
      s0 = peg$c145;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }

    return s0;
  }

  function peg$parseCOMPRESSED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c146) {
      s0 = peg$c146;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }

    return s0;
  }

  function peg$parseCOMPRESSION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c147) {
      s0 = peg$c147;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }

    return s0;
  }

  function peg$parseCONCURRENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c148) {
      s0 = peg$c148;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }

    return s0;
  }

  function peg$parseCONDITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c149) {
      s0 = peg$c149;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }

    return s0;
  }

  function peg$parseCONNECTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c150) {
      s0 = peg$c150;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }

    return s0;
  }

  function peg$parseCONSISTENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c151) {
      s0 = peg$c151;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e151); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c152) {
      s0 = peg$c152;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }

    return s0;
  }

  function peg$parseCONSTRAINTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c153) {
      s0 = peg$c153;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }

    return s0;
  }

  function peg$parseOVER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c154) {
      s0 = peg$c154;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }

    return s0;
  }

  function peg$parseREPLICA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c155) {
      s0 = peg$c155;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT_CATALOG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c156) {
      s0 = peg$c156;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c157) {
      s0 = peg$c157;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT_SCHEMA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c158) {
      s0 = peg$c158;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }

    return s0;
  }

  function peg$parseCONTAINS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c159) {
      s0 = peg$c159;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }

    return s0;
  }

  function peg$parseCONTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c160) {
      s0 = peg$c160;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }

    return s0;
  }

  function peg$parseCONTINUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c161) {
      s0 = peg$c161;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }

    return s0;
  }

  function peg$parseCONTRIBUTORS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c162) {
      s0 = peg$c162;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }

    return s0;
  }

  function peg$parseCONVERT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c163) {
      s0 = peg$c163;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e163); }
    }

    return s0;
  }

  function peg$parseCOUNT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c164) {
      s0 = peg$c164;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }

    return s0;
  }

  function peg$parseCPU_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c165) {
      s0 = peg$c165;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }

    return s0;
  }

  function peg$parseCREATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c166) {
      s0 = peg$c166;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }

    return s0;
  }

  function peg$parseCROSS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c167) {
      s0 = peg$c167;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }

    return s0;
  }

  function peg$parseCUBE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c168) {
      s0 = peg$c168;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e168); }
    }

    return s0;
  }

  function peg$parseCURDATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c169) {
      s0 = peg$c169;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }

    return s0;
  }

  function peg$parseCURRENT_DATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c170) {
      s0 = peg$c170;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }

    return s0;
  }

  function peg$parseCURRENT_TIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c171) {
      s0 = peg$c171;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }

    return s0;
  }

  function peg$parseCURRENT_TIMESTAMP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c172) {
      s0 = peg$c172;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }

    return s0;
  }

  function peg$parseCURRENT_USER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c173) {
      s0 = peg$c173;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e173); }
    }

    return s0;
  }

  function peg$parseCURRENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c174) {
      s0 = peg$c174;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e174); }
    }

    return s0;
  }

  function peg$parseCURSOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c175) {
      s0 = peg$c175;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e175); }
    }

    return s0;
  }

  function peg$parseCURSOR_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c176) {
      s0 = peg$c176;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e176); }
    }

    return s0;
  }

  function peg$parseCURTIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c177) {
      s0 = peg$c177;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e177); }
    }

    return s0;
  }

  function peg$parseDATABASE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c178) {
      s0 = peg$c178;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }

    return s0;
  }

  function peg$parseDATABASES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c179) {
      s0 = peg$c179;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e179); }
    }

    return s0;
  }

  function peg$parseDATAFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c180) {
      s0 = peg$c180;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }

    return s0;
  }

  function peg$parseDATA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c181) {
      s0 = peg$c181;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e181); }
    }

    return s0;
  }

  function peg$parseDATE_ADD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c182) {
      s0 = peg$c182;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }

    return s0;
  }

  function peg$parseDATE_SUB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c183) {
      s0 = peg$c183;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }

    return s0;
  }

  function peg$parseDAY_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c184) {
      s0 = peg$c184;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e184); }
    }

    return s0;
  }

  function peg$parseDAY_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c185) {
      s0 = peg$c185;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }

    return s0;
  }

  function peg$parseDAY_MINUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c186) {
      s0 = peg$c186;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }

    return s0;
  }

  function peg$parseDAY_SECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c187) {
      s0 = peg$c187;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e187); }
    }

    return s0;
  }

  function peg$parseDAY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c188) {
      s0 = peg$c188;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }

    return s0;
  }

  function peg$parseDAYOFMONTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c189) {
      s0 = peg$c189;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e189); }
    }

    return s0;
  }

  function peg$parseDEALLOCATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c190) {
      s0 = peg$c190;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e190); }
    }

    return s0;
  }

  function peg$parseDEC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c191) {
      s0 = peg$c191;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e191); }
    }

    return s0;
  }

  function peg$parseDECLARE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c192) {
      s0 = peg$c192;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e192); }
    }

    return s0;
  }

  function peg$parseDEFAULT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c193) {
      s0 = peg$c193;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e193); }
    }

    return s0;
  }

  function peg$parseDEFAULT_AUTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c194) {
      s0 = peg$c194;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e194); }
    }

    return s0;
  }

  function peg$parseDEFINER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c195) {
      s0 = peg$c195;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e195); }
    }

    return s0;
  }

  function peg$parseDELAYED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c196) {
      s0 = peg$c196;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e196); }
    }

    return s0;
  }

  function peg$parseDELAY_KEY_WRITE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c197) {
      s0 = peg$c197;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e197); }
    }

    return s0;
  }

  function peg$parseDELETE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c198) {
      s0 = peg$c198;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }

    return s0;
  }

  function peg$parseDESC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c199) {
      s0 = peg$c199;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e199); }
    }

    return s0;
  }

  function peg$parseDESCRIBE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c200) {
      s0 = peg$c200;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e200); }
    }

    return s0;
  }

  function peg$parseDES_KEY_FILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c201) {
      s0 = peg$c201;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e201); }
    }

    return s0;
  }

  function peg$parseDETERMINISTIC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c202) {
      s0 = peg$c202;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }

    return s0;
  }

  function peg$parseDIAGNOSTICS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c203) {
      s0 = peg$c203;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }

    return s0;
  }

  function peg$parseDIRECTORY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c204) {
      s0 = peg$c204;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }

    return s0;
  }

  function peg$parseDISABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c205) {
      s0 = peg$c205;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }

    return s0;
  }

  function peg$parseDISCARD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c206) {
      s0 = peg$c206;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e206); }
    }

    return s0;
  }

  function peg$parseDISK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c207) {
      s0 = peg$c207;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }

    return s0;
  }

  function peg$parseDISTINCT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c208) {
      s0 = peg$c208;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }

    return s0;
  }

  function peg$parseDISTINCTROW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c209) {
      s0 = peg$c209;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e209); }
    }

    return s0;
  }

  function peg$parseDIV_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c210) {
      s0 = peg$c210;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e210); }
    }

    return s0;
  }

  function peg$parseDO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c211) {
      s0 = peg$c211;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e211); }
    }

    return s0;
  }

  function peg$parseDROP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c212) {
      s0 = peg$c212;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e212); }
    }

    return s0;
  }

  function peg$parseDUAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c213) {
      s0 = peg$c213;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e213); }
    }

    return s0;
  }

  function peg$parseDUMPFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c214) {
      s0 = peg$c214;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e214); }
    }

    return s0;
  }

  function peg$parseDUPLICATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c215) {
      s0 = peg$c215;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e215); }
    }

    return s0;
  }

  function peg$parseDYNAMIC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c216) {
      s0 = peg$c216;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e216); }
    }

    return s0;
  }

  function peg$parseEACH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c217) {
      s0 = peg$c217;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e217); }
    }

    return s0;
  }

  function peg$parseELSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c218) {
      s0 = peg$c218;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e218); }
    }

    return s0;
  }

  function peg$parseELSEIF_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c219) {
      s0 = peg$c219;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e219); }
    }

    return s0;
  }

  function peg$parseEMPTY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c220) {
      s0 = peg$c220;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e220); }
    }

    return s0;
  }

  function peg$parseENABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c221) {
      s0 = peg$c221;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e221); }
    }

    return s0;
  }

  function peg$parseENCLOSED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c222) {
      s0 = peg$c222;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }

    return s0;
  }

  function peg$parseENCRYPTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c223) {
      s0 = peg$c223;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e223); }
    }

    return s0;
  }

  function peg$parseEND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c224) {
      s0 = peg$c224;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e224); }
    }

    return s0;
  }

  function peg$parseENDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c225) {
      s0 = peg$c225;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e225); }
    }

    return s0;
  }

  function peg$parseENFORCED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c226) {
      s0 = peg$c226;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e226); }
    }

    return s0;
  }

  function peg$parseENGINES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c227) {
      s0 = peg$c227;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e227); }
    }

    return s0;
  }

  function peg$parseENGINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c228) {
      s0 = peg$c228;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e228); }
    }

    return s0;
  }

  function peg$parseERROR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c229) {
      s0 = peg$c229;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e229); }
    }

    return s0;
  }

  function peg$parseERRORS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c230) {
      s0 = peg$c230;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }

    return s0;
  }

  function peg$parseESCAPED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c231) {
      s0 = peg$c231;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e231); }
    }

    return s0;
  }

  function peg$parseESCAPE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c232) {
      s0 = peg$c232;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e232); }
    }

    return s0;
  }

  function peg$parseEVENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c233) {
      s0 = peg$c233;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e233); }
    }

    return s0;
  }

  function peg$parseEVENTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c234) {
      s0 = peg$c234;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e234); }
    }

    return s0;
  }

  function peg$parseEVERY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c235) {
      s0 = peg$c235;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e235); }
    }

    return s0;
  }

  function peg$parseEXCHANGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c236) {
      s0 = peg$c236;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e236); }
    }

    return s0;
  }

  function peg$parseEXCEPT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c237) {
      s0 = peg$c237;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e237); }
    }

    return s0;
  }

  function peg$parseEXECUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c238) {
      s0 = peg$c238;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e238); }
    }

    return s0;
  }

  function peg$parseEXISTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c239) {
      s0 = peg$c239;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e239); }
    }

    return s0;
  }

  function peg$parseEXIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c240) {
      s0 = peg$c240;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e240); }
    }

    return s0;
  }

  function peg$parseEXPANSION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c241) {
      s0 = peg$c241;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e241); }
    }

    return s0;
  }

  function peg$parseEXPIRE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c242) {
      s0 = peg$c242;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e242); }
    }

    return s0;
  }

  function peg$parseEXPLAIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c243) {
      s0 = peg$c243;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e243); }
    }

    return s0;
  }

  function peg$parseEXPORT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c244) {
      s0 = peg$c244;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e244); }
    }

    return s0;
  }

  function peg$parseEXTENDED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c245) {
      s0 = peg$c245;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e245); }
    }

    return s0;
  }

  function peg$parseEXTENT_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c246) {
      s0 = peg$c246;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e246); }
    }

    return s0;
  }

  function peg$parseEXTRACT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c247) {
      s0 = peg$c247;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e247); }
    }

    return s0;
  }

  function peg$parseFALSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c248) {
      s0 = peg$c248;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e248); }
    }

    return s0;
  }

  function peg$parseFAST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c249) {
      s0 = peg$c249;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e249); }
    }

    return s0;
  }

  function peg$parseFAULTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c250) {
      s0 = peg$c250;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e250); }
    }

    return s0;
  }

  function peg$parseFETCH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c251) {
      s0 = peg$c251;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e251); }
    }

    return s0;
  }

  function peg$parseFIELDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c252) {
      s0 = peg$c252;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e252); }
    }

    return s0;
  }

  function peg$parseFILE_BLOCK_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c253) {
      s0 = peg$c253;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e253); }
    }

    return s0;
  }

  function peg$parseFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c254) {
      s0 = peg$c254;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e254); }
    }

    return s0;
  }

  function peg$parseFILTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c255) {
      s0 = peg$c255;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e255); }
    }

    return s0;
  }

  function peg$parseFIRST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c256) {
      s0 = peg$c256;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e256); }
    }

    return s0;
  }

  function peg$parseFIRST_VALUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c257) {
      s0 = peg$c257;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e257); }
    }

    return s0;
  }

  function peg$parseFIXED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c258) {
      s0 = peg$c258;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e258); }
    }

    return s0;
  }

  function peg$parseFLOAT4_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c259) {
      s0 = peg$c259;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e259); }
    }

    return s0;
  }

  function peg$parseFLOAT8_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c260) {
      s0 = peg$c260;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e260); }
    }

    return s0;
  }

  function peg$parseFLUSH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c261) {
      s0 = peg$c261;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e261); }
    }

    return s0;
  }

  function peg$parseFOLLOWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c262) {
      s0 = peg$c262;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e262); }
    }

    return s0;
  }

  function peg$parseFORCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c263) {
      s0 = peg$c263;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e263); }
    }

    return s0;
  }

  function peg$parseFOREIGN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c264) {
      s0 = peg$c264;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e264); }
    }

    return s0;
  }

  function peg$parseFOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c265) {
      s0 = peg$c265;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e265); }
    }

    return s0;
  }

  function peg$parseFORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c266) {
      s0 = peg$c266;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e266); }
    }

    return s0;
  }

  function peg$parseFOUND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c267) {
      s0 = peg$c267;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e267); }
    }

    return s0;
  }

  function peg$parseFROM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c268) {
      s0 = peg$c268;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e268); }
    }

    return s0;
  }

  function peg$parseFULLTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c269) {
      s0 = peg$c269;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e269); }
    }

    return s0;
  }

  function peg$parseFULL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c270) {
      s0 = peg$c270;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e270); }
    }

    return s0;
  }

  function peg$parseFUNCTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c271) {
      s0 = peg$c271;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e271); }
    }

    return s0;
  }

  function peg$parseGENERATED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c272) {
      s0 = peg$c272;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e272); }
    }

    return s0;
  }

  function peg$parseGENERAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c273) {
      s0 = peg$c273;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e273); }
    }

    return s0;
  }

  function peg$parseGET_FORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c274) {
      s0 = peg$c274;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e274); }
    }

    return s0;
  }

  function peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 28) === peg$c275) {
      s0 = peg$c275;
      peg$currPos += 28;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e275); }
    }

    return s0;
  }

  function peg$parseGLOBAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c276) {
      s0 = peg$c276;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e276); }
    }

    return s0;
  }

  function peg$parseGRANT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c277) {
      s0 = peg$c277;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e277); }
    }

    return s0;
  }

  function peg$parseGRANTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c278) {
      s0 = peg$c278;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e278); }
    }

    return s0;
  }

  function peg$parseGROUP_CONCAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c279) {
      s0 = peg$c279;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e279); }
    }

    return s0;
  }

  function peg$parseGROUP_REPLICATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c280) {
      s0 = peg$c280;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e280); }
    }

    return s0;
  }

  function peg$parseGROUP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c281) {
      s0 = peg$c281;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e281); }
    }

    return s0;
  }

  function peg$parseHANDLER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c282) {
      s0 = peg$c282;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e282); }
    }

    return s0;
  }

  function peg$parseHASH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c283) {
      s0 = peg$c283;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e283); }
    }

    return s0;
  }

  function peg$parseHAVING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c284) {
      s0 = peg$c284;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e284); }
    }

    return s0;
  }

  function peg$parseHELP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c285) {
      s0 = peg$c285;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e285); }
    }

    return s0;
  }

  function peg$parseHIGH_PRIORITY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c286) {
      s0 = peg$c286;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e286); }
    }

    return s0;
  }

  function peg$parseHISTOGRAM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c287) {
      s0 = peg$c287;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e287); }
    }

    return s0;
  }

  function peg$parseHISTORY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c288) {
      s0 = peg$c288;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e288); }
    }

    return s0;
  }

  function peg$parseHOST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c289) {
      s0 = peg$c289;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e289); }
    }

    return s0;
  }

  function peg$parseHOSTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c290) {
      s0 = peg$c290;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e290); }
    }

    return s0;
  }

  function peg$parseHOUR_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c291) {
      s0 = peg$c291;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e291); }
    }

    return s0;
  }

  function peg$parseHOUR_MINUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c292) {
      s0 = peg$c292;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e292); }
    }

    return s0;
  }

  function peg$parseHOUR_SECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c293) {
      s0 = peg$c293;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e293); }
    }

    return s0;
  }

  function peg$parseHOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c294) {
      s0 = peg$c294;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e294); }
    }

    return s0;
  }

  function peg$parseIDENTIFIED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c295) {
      s0 = peg$c295;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e295); }
    }

    return s0;
  }

  function peg$parseIF_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c296) {
      s0 = peg$c296;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e296); }
    }

    return s0;
  }

  function peg$parseIGNORE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c297) {
      s0 = peg$c297;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e297); }
    }

    return s0;
  }

  function peg$parseIGNORE_SERVER_IDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c298) {
      s0 = peg$c298;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e298); }
    }

    return s0;
  }

  function peg$parseIMPORT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c299) {
      s0 = peg$c299;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e299); }
    }

    return s0;
  }

  function peg$parseIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c300) {
      s0 = peg$c300;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e300); }
    }

    return s0;
  }

  function peg$parseINDEXES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c301) {
      s0 = peg$c301;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e301); }
    }

    return s0;
  }

  function peg$parseINDEX_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c302) {
      s0 = peg$c302;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e302); }
    }

    return s0;
  }

  function peg$parseINFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c303) {
      s0 = peg$c303;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e303); }
    }

    return s0;
  }

  function peg$parseINITIAL_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c304) {
      s0 = peg$c304;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e304); }
    }

    return s0;
  }

  function peg$parseINNER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c305) {
      s0 = peg$c305;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e305); }
    }

    return s0;
  }

  function peg$parseINOUT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c306) {
      s0 = peg$c306;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e306); }
    }

    return s0;
  }

  function peg$parseINSENSITIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c307) {
      s0 = peg$c307;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e307); }
    }

    return s0;
  }

  function peg$parseINSERT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c308) {
      s0 = peg$c308;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e308); }
    }

    return s0;
  }

  function peg$parseINSERT_METHOD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c309) {
      s0 = peg$c309;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e309); }
    }

    return s0;
  }

  function peg$parseINSTANCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c310) {
      s0 = peg$c310;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e310); }
    }

    return s0;
  }

  function peg$parseINSTALL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c311) {
      s0 = peg$c311;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e311); }
    }

    return s0;
  }

  function peg$parseINTEGER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c312) {
      s0 = peg$c312;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e312); }
    }

    return s0;
  }

  function peg$parseINTERVAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c313) {
      s0 = peg$c313;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e313); }
    }

    return s0;
  }

  function peg$parseINTO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c314) {
      s0 = peg$c314;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e314); }
    }

    return s0;
  }

  function peg$parseINVISIBLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c315) {
      s0 = peg$c315;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e315); }
    }

    return s0;
  }

  function peg$parseINVOKER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c316) {
      s0 = peg$c316;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e316); }
    }

    return s0;
  }

  function peg$parseIO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c317) {
      s0 = peg$c317;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e317); }
    }

    return s0;
  }

  function peg$parseIPC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c318) {
      s0 = peg$c318;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e318); }
    }

    return s0;
  }

  function peg$parseIS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c319) {
      s0 = peg$c319;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e319); }
    }

    return s0;
  }

  function peg$parseISOLATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c320) {
      s0 = peg$c320;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e320); }
    }

    return s0;
  }

  function peg$parseISSUER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c321) {
      s0 = peg$c321;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e321); }
    }

    return s0;
  }

  function peg$parseITERATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c322) {
      s0 = peg$c322;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e322); }
    }

    return s0;
  }

  function peg$parseJOIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c323) {
      s0 = peg$c323;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e323); }
    }

    return s0;
  }

  function peg$parseJSON_TABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c324) {
      s0 = peg$c324;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e324); }
    }

    return s0;
  }

  function peg$parseJSON_ARRAYAGG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c325) {
      s0 = peg$c325;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e325); }
    }

    return s0;
  }

  function peg$parseJSON_OBJECTAGG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c326) {
      s0 = peg$c326;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e326); }
    }

    return s0;
  }

  function peg$parseKEYS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c327) {
      s0 = peg$c327;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e327); }
    }

    return s0;
  }

  function peg$parseKEY_BLOCK_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c328) {
      s0 = peg$c328;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e328); }
    }

    return s0;
  }

  function peg$parseKEY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c329) {
      s0 = peg$c329;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e329); }
    }

    return s0;
  }

  function peg$parseKILL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c330) {
      s0 = peg$c330;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e330); }
    }

    return s0;
  }

  function peg$parseLANGUAGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c331) {
      s0 = peg$c331;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e331); }
    }

    return s0;
  }

  function peg$parseLAST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c332) {
      s0 = peg$c332;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e332); }
    }

    return s0;
  }

  function peg$parseLAST_VALUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c333) {
      s0 = peg$c333;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e333); }
    }

    return s0;
  }

  function peg$parseLATERAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c334) {
      s0 = peg$c334;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e334); }
    }

    return s0;
  }

  function peg$parseLEAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c335) {
      s0 = peg$c335;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e335); }
    }

    return s0;
  }

  function peg$parseLEADING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c336) {
      s0 = peg$c336;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e336); }
    }

    return s0;
  }

  function peg$parseLEAVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c337) {
      s0 = peg$c337;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e337); }
    }

    return s0;
  }

  function peg$parseLEAVES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c338) {
      s0 = peg$c338;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e338); }
    }

    return s0;
  }

  function peg$parseLEFT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c339) {
      s0 = peg$c339;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e339); }
    }

    return s0;
  }

  function peg$parseLESS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c340) {
      s0 = peg$c340;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e340); }
    }

    return s0;
  }

  function peg$parseLEVEL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c341) {
      s0 = peg$c341;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e341); }
    }

    return s0;
  }

  function peg$parseLIKE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c342) {
      s0 = peg$c342;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e342); }
    }

    return s0;
  }

  function peg$parseLIMIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c343) {
      s0 = peg$c343;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e343); }
    }

    return s0;
  }

  function peg$parseLINEAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c344) {
      s0 = peg$c344;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e344); }
    }

    return s0;
  }

  function peg$parseLINES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c345) {
      s0 = peg$c345;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e345); }
    }

    return s0;
  }

  function peg$parseLIST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c346) {
      s0 = peg$c346;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e346); }
    }

    return s0;
  }

  function peg$parseLOAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c347) {
      s0 = peg$c347;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e347); }
    }

    return s0;
  }

  function peg$parseLOCALTIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c348) {
      s0 = peg$c348;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e348); }
    }

    return s0;
  }

  function peg$parseLOCALTIMESTAMP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c349) {
      s0 = peg$c349;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e349); }
    }

    return s0;
  }

  function peg$parseLOCAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c350) {
      s0 = peg$c350;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e350); }
    }

    return s0;
  }

  function peg$parseLOCATOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c351) {
      s0 = peg$c351;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e351); }
    }

    return s0;
  }

  function peg$parseLOCK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c352) {
      s0 = peg$c352;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e352); }
    }

    return s0;
  }

  function peg$parseLOCKS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c353) {
      s0 = peg$c353;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e353); }
    }

    return s0;
  }

  function peg$parseLOGFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c354) {
      s0 = peg$c354;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e354); }
    }

    return s0;
  }

  function peg$parseLOGS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c355) {
      s0 = peg$c355;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e355); }
    }

    return s0;
  }

  function peg$parseLOOP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c356) {
      s0 = peg$c356;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e356); }
    }

    return s0;
  }

  function peg$parseLOW_PRIORITY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c357) {
      s0 = peg$c357;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e357); }
    }

    return s0;
  }

  function peg$parseMASTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c358) {
      s0 = peg$c358;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e358); }
    }

    return s0;
  }

  function peg$parseMASTER_AUTO_POSITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 27) === peg$c359) {
      s0 = peg$c359;
      peg$currPos += 27;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e359); }
    }

    return s0;
  }

  function peg$parseMASTER_BIND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c360) {
      s0 = peg$c360;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e360); }
    }

    return s0;
  }

  function peg$parseMASTER_CONNECT_RETRY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 27) === peg$c361) {
      s0 = peg$c361;
      peg$currPos += 27;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e361); }
    }

    return s0;
  }

  function peg$parseMASTER_DELAY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c362) {
      s0 = peg$c362;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e362); }
    }

    return s0;
  }

  function peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 30) === peg$c363) {
      s0 = peg$c363;
      peg$currPos += 30;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e363); }
    }

    return s0;
  }

  function peg$parseMASTER_HOST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c364) {
      s0 = peg$c364;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e364); }
    }

    return s0;
  }

  function peg$parseNETWORK_NAMESPACE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c365) {
      s0 = peg$c365;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e365); }
    }

    return s0;
  }

  function peg$parseMASTER_LOG_FILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c366) {
      s0 = peg$c366;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e366); }
    }

    return s0;
  }

  function peg$parseMASTER_LOG_POS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c367) {
      s0 = peg$c367;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e367); }
    }

    return s0;
  }

  function peg$parseMASTER_PASSWORD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c368) {
      s0 = peg$c368;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e368); }
    }

    return s0;
  }

  function peg$parseMASTER_PORT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c369) {
      s0 = peg$c369;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e369); }
    }

    return s0;
  }

  function peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 29) === peg$c370) {
      s0 = peg$c370;
      peg$currPos += 29;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e370); }
    }

    return s0;
  }

  function peg$parseMASTER_RETRY_COUNT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c371) {
      s0 = peg$c371;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e371); }
    }

    return s0;
  }

  function peg$parseMASTER_SERVER_ID_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c372) {
      s0 = peg$c372;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e372); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CAPATH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c373) {
      s0 = peg$c373;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e373); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c374) {
      s0 = peg$c374;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e374); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CERT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c375) {
      s0 = peg$c375;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e375); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CIPHER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c376) {
      s0 = peg$c376;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e376); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CRL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c377) {
      s0 = peg$c377;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e377); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CRLPATH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c378) {
      s0 = peg$c378;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e378); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_KEY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c379) {
      s0 = peg$c379;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e379); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c380) {
      s0 = peg$c380;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e380); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 36) === peg$c381) {
      s0 = peg$c381;
      peg$currPos += 36;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e381); }
    }

    return s0;
  }

  function peg$parseMASTER_TLS_VERSION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c382) {
      s0 = peg$c382;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e382); }
    }

    return s0;
  }

  function peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 30) === peg$c383) {
      s0 = peg$c383;
      peg$currPos += 30;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e383); }
    }

    return s0;
  }

  function peg$parseMASTER_USER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c384) {
      s0 = peg$c384;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e384); }
    }

    return s0;
  }

  function peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 36) === peg$c385) {
      s0 = peg$c385;
      peg$currPos += 36;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e385); }
    }

    return s0;
  }

  function peg$parseMATCH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c386) {
      s0 = peg$c386;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e386); }
    }

    return s0;
  }

  function peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 31) === peg$c387) {
      s0 = peg$c387;
      peg$currPos += 31;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e387); }
    }

    return s0;
  }

  function peg$parseMAX_QUERIES_PER_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 27) === peg$c388) {
      s0 = peg$c388;
      peg$currPos += 27;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e388); }
    }

    return s0;
  }

  function peg$parseMAX_ROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c389) {
      s0 = peg$c389;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e389); }
    }

    return s0;
  }

  function peg$parseMAX_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c390) {
      s0 = peg$c390;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e390); }
    }

    return s0;
  }

  function peg$parseMAX_STATEMENT_TIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c391) {
      s0 = peg$c391;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e391); }
    }

    return s0;
  }

  function peg$parseMAX_UPDATES_PER_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 27) === peg$c392) {
      s0 = peg$c392;
      peg$currPos += 27;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e392); }
    }

    return s0;
  }

  function peg$parseMAX_USER_CONNECTIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 27) === peg$c393) {
      s0 = peg$c393;
      peg$currPos += 27;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e393); }
    }

    return s0;
  }

  function peg$parseMAXVALUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c394) {
      s0 = peg$c394;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e394); }
    }

    return s0;
  }

  function peg$parseMAX_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c395) {
      s0 = peg$c395;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e395); }
    }

    return s0;
  }

  function peg$parseMEDIUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c396) {
      s0 = peg$c396;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e396); }
    }

    return s0;
  }

  function peg$parseMEMBER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c397) {
      s0 = peg$c397;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e397); }
    }

    return s0;
  }

  function peg$parseMEMORY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c398) {
      s0 = peg$c398;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e398); }
    }

    return s0;
  }

  function peg$parseMERGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c399) {
      s0 = peg$c399;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e399); }
    }

    return s0;
  }

  function peg$parseMESSAGE_TEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c400) {
      s0 = peg$c400;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e400); }
    }

    return s0;
  }

  function peg$parseMICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c401) {
      s0 = peg$c401;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e401); }
    }

    return s0;
  }

  function peg$parseMIDDLEINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c402) {
      s0 = peg$c402;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e402); }
    }

    return s0;
  }

  function peg$parseMIGRATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c403) {
      s0 = peg$c403;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e403); }
    }

    return s0;
  }

  function peg$parseMINUTE_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c404) {
      s0 = peg$c404;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e404); }
    }

    return s0;
  }

  function peg$parseMINUTE_SECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c405) {
      s0 = peg$c405;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e405); }
    }

    return s0;
  }

  function peg$parseMINUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c406) {
      s0 = peg$c406;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e406); }
    }

    return s0;
  }

  function peg$parseMIN_ROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c407) {
      s0 = peg$c407;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e407); }
    }

    return s0;
  }

  function peg$parseMIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c408) {
      s0 = peg$c408;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e408); }
    }

    return s0;
  }

  function peg$parseMODE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c409) {
      s0 = peg$c409;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e409); }
    }

    return s0;
  }

  function peg$parseMODIFIES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c410) {
      s0 = peg$c410;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e410); }
    }

    return s0;
  }

  function peg$parseMODIFY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c411) {
      s0 = peg$c411;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e411); }
    }

    return s0;
  }

  function peg$parseMOD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c412) {
      s0 = peg$c412;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e412); }
    }

    return s0;
  }

  function peg$parseMONTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c413) {
      s0 = peg$c413;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e413); }
    }

    return s0;
  }

  function peg$parseMUTEX_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c414) {
      s0 = peg$c414;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e414); }
    }

    return s0;
  }

  function peg$parseMYSQL_ERRNO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c415) {
      s0 = peg$c415;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e415); }
    }

    return s0;
  }

  function peg$parseNAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c416) {
      s0 = peg$c416;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e416); }
    }

    return s0;
  }

  function peg$parseNAMES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c417) {
      s0 = peg$c417;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e417); }
    }

    return s0;
  }

  function peg$parseNATIONAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c418) {
      s0 = peg$c418;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e418); }
    }

    return s0;
  }

  function peg$parseNATURAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c419) {
      s0 = peg$c419;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e419); }
    }

    return s0;
  }

  function peg$parseNCHAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c420) {
      s0 = peg$c420;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e420); }
    }

    return s0;
  }

  function peg$parseNDBCLUSTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c421) {
      s0 = peg$c421;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e421); }
    }

    return s0;
  }

  function peg$parseNDB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c422) {
      s0 = peg$c422;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e422); }
    }

    return s0;
  }

  function peg$parseNEG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c423) {
      s0 = peg$c423;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e423); }
    }

    return s0;
  }

  function peg$parseNESTED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c424) {
      s0 = peg$c424;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e424); }
    }

    return s0;
  }

  function peg$parseNEVER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c425) {
      s0 = peg$c425;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e425); }
    }

    return s0;
  }

  function peg$parseNEW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c426) {
      s0 = peg$c426;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e426); }
    }

    return s0;
  }

  function peg$parseNEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c427) {
      s0 = peg$c427;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e427); }
    }

    return s0;
  }

  function peg$parseNODEGROUP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c428) {
      s0 = peg$c428;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e428); }
    }

    return s0;
  }

  function peg$parseNONE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c429) {
      s0 = peg$c429;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e429); }
    }

    return s0;
  }

  function peg$parseNONBLOCKING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c430) {
      s0 = peg$c430;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e430); }
    }

    return s0;
  }

  function peg$parseNOT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c431) {
      s0 = peg$c431;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e431); }
    }

    return s0;
  }

  function peg$parseNOWAIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c432) {
      s0 = peg$c432;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e432); }
    }

    return s0;
  }

  function peg$parseNO_WAIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c433) {
      s0 = peg$c433;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e433); }
    }

    return s0;
  }

  function peg$parseNO_WRITE_TO_BINLOG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c434) {
      s0 = peg$c434;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e434); }
    }

    return s0;
  }

  function peg$parseNULL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c435) {
      s0 = peg$c435;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e435); }
    }

    return s0;
  }

  function peg$parseNULLS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c436) {
      s0 = peg$c436;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e436); }
    }

    return s0;
  }

  function peg$parseNUMBER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c437) {
      s0 = peg$c437;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e437); }
    }

    return s0;
  }

  function peg$parseNVARCHAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c438) {
      s0 = peg$c438;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e438); }
    }

    return s0;
  }

  function peg$parseNTH_VALUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c439) {
      s0 = peg$c439;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e439); }
    }

    return s0;
  }

  function peg$parseNTILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c440) {
      s0 = peg$c440;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e440); }
    }

    return s0;
  }

  function peg$parseOF_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c441) {
      s0 = peg$c441;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e441); }
    }

    return s0;
  }

  function peg$parseOFF_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c442) {
      s0 = peg$c442;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e442); }
    }

    return s0;
  }

  function peg$parseOFFLINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c443) {
      s0 = peg$c443;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e443); }
    }

    return s0;
  }

  function peg$parseOFFSET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c444) {
      s0 = peg$c444;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e444); }
    }

    return s0;
  }

  function peg$parseOJ_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c445) {
      s0 = peg$c445;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e445); }
    }

    return s0;
  }

  function peg$parseOLD_PASSWORD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c446) {
      s0 = peg$c446;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e446); }
    }

    return s0;
  }

  function peg$parseOLD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c447) {
      s0 = peg$c447;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e447); }
    }

    return s0;
  }

  function peg$parseON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c448) {
      s0 = peg$c448;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e448); }
    }

    return s0;
  }

  function peg$parseONLINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c449) {
      s0 = peg$c449;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e449); }
    }

    return s0;
  }

  function peg$parseONE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c450) {
      s0 = peg$c450;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e450); }
    }

    return s0;
  }

  function peg$parseONLY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c451) {
      s0 = peg$c451;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e451); }
    }

    return s0;
  }

  function peg$parseOPEN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c452) {
      s0 = peg$c452;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e452); }
    }

    return s0;
  }

  function peg$parseOPTIONAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c453) {
      s0 = peg$c453;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e453); }
    }

    return s0;
  }

  function peg$parseOPTIONALLY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c454) {
      s0 = peg$c454;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e454); }
    }

    return s0;
  }

  function peg$parseOPTIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c455) {
      s0 = peg$c455;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e455); }
    }

    return s0;
  }

  function peg$parseOPTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c456) {
      s0 = peg$c456;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e456); }
    }

    return s0;
  }

  function peg$parseOPTIMIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c457) {
      s0 = peg$c457;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e457); }
    }

    return s0;
  }

  function peg$parseOPTIMIZER_COSTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c458) {
      s0 = peg$c458;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e458); }
    }

    return s0;
  }

  function peg$parseORDER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c459) {
      s0 = peg$c459;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e459); }
    }

    return s0;
  }

  function peg$parseORDINALITY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c460) {
      s0 = peg$c460;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e460); }
    }

    return s0;
  }

  function peg$parseORGANIZATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c461) {
      s0 = peg$c461;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e461); }
    }

    return s0;
  }

  function peg$parseOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c462) {
      s0 = peg$c462;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e462); }
    }

    return s0;
  }

  function peg$parseOTHERS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c463) {
      s0 = peg$c463;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e463); }
    }

    return s0;
  }

  function peg$parseOUTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c464) {
      s0 = peg$c464;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e464); }
    }

    return s0;
  }

  function peg$parseOUTFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c465) {
      s0 = peg$c465;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e465); }
    }

    return s0;
  }

  function peg$parseOUT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c466) {
      s0 = peg$c466;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e466); }
    }

    return s0;
  }

  function peg$parseOWNER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c467) {
      s0 = peg$c467;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e467); }
    }

    return s0;
  }

  function peg$parsePACK_KEYS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c468) {
      s0 = peg$c468;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e468); }
    }

    return s0;
  }

  function peg$parsePAGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c469) {
      s0 = peg$c469;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e469); }
    }

    return s0;
  }

  function peg$parsePARSER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c470) {
      s0 = peg$c470;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e470); }
    }

    return s0;
  }

  function peg$parsePARTIAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c471) {
      s0 = peg$c471;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e471); }
    }

    return s0;
  }

  function peg$parsePARTITIONING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c472) {
      s0 = peg$c472;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e472); }
    }

    return s0;
  }

  function peg$parsePARTITIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c473) {
      s0 = peg$c473;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e473); }
    }

    return s0;
  }

  function peg$parsePARTITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c474) {
      s0 = peg$c474;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e474); }
    }

    return s0;
  }

  function peg$parsePASSWORD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c475) {
      s0 = peg$c475;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e475); }
    }

    return s0;
  }

  function peg$parsePATH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c476) {
      s0 = peg$c476;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e476); }
    }

    return s0;
  }

  function peg$parsePERCENT_RANK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c477) {
      s0 = peg$c477;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e477); }
    }

    return s0;
  }

  function peg$parsePERSIST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c478) {
      s0 = peg$c478;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e478); }
    }

    return s0;
  }

  function peg$parsePERSIST_ONLY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c479) {
      s0 = peg$c479;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e479); }
    }

    return s0;
  }

  function peg$parsePHASE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c480) {
      s0 = peg$c480;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e480); }
    }

    return s0;
  }

  function peg$parsePLUGIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c481) {
      s0 = peg$c481;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e481); }
    }

    return s0;
  }

  function peg$parsePLUGINS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c482) {
      s0 = peg$c482;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e482); }
    }

    return s0;
  }

  function peg$parsePLUGIN_DIR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c483) {
      s0 = peg$c483;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e483); }
    }

    return s0;
  }

  function peg$parsePORT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c484) {
      s0 = peg$c484;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e484); }
    }

    return s0;
  }

  function peg$parsePOSITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c485) {
      s0 = peg$c485;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e485); }
    }

    return s0;
  }

  function peg$parsePRECEDES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c486) {
      s0 = peg$c486;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e486); }
    }

    return s0;
  }

  function peg$parsePRECEDING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c487) {
      s0 = peg$c487;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e487); }
    }

    return s0;
  }

  function peg$parsePRECISION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c488) {
      s0 = peg$c488;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e488); }
    }

    return s0;
  }

  function peg$parsePREPARE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c489) {
      s0 = peg$c489;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e489); }
    }

    return s0;
  }

  function peg$parsePRESERVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c490) {
      s0 = peg$c490;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e490); }
    }

    return s0;
  }

  function peg$parsePREV_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c491) {
      s0 = peg$c491;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e491); }
    }

    return s0;
  }

  function peg$parsePRIMARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c492) {
      s0 = peg$c492;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e492); }
    }

    return s0;
  }

  function peg$parsePRIVILEGES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c493) {
      s0 = peg$c493;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e493); }
    }

    return s0;
  }

  function peg$parsePRIVILEGE_CHECKS_USER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 28) === peg$c494) {
      s0 = peg$c494;
      peg$currPos += 28;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e494); }
    }

    return s0;
  }

  function peg$parsePROCEDURE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c495) {
      s0 = peg$c495;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e495); }
    }

    return s0;
  }

  function peg$parsePROCESS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c496) {
      s0 = peg$c496;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e496); }
    }

    return s0;
  }

  function peg$parsePROCESSLIST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c497) {
      s0 = peg$c497;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e497); }
    }

    return s0;
  }

  function peg$parsePROFILES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c498) {
      s0 = peg$c498;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e498); }
    }

    return s0;
  }

  function peg$parsePROFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c499) {
      s0 = peg$c499;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e499); }
    }

    return s0;
  }

  function peg$parsePROXY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c500) {
      s0 = peg$c500;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e500); }
    }

    return s0;
  }

  function peg$parsePURGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c501) {
      s0 = peg$c501;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e501); }
    }

    return s0;
  }

  function peg$parseQUARTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c502) {
      s0 = peg$c502;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e502); }
    }

    return s0;
  }

  function peg$parseQUERY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c503) {
      s0 = peg$c503;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e503); }
    }

    return s0;
  }

  function peg$parseQUICK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c504) {
      s0 = peg$c504;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e504); }
    }

    return s0;
  }

  function peg$parseRANDOM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c505) {
      s0 = peg$c505;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e505); }
    }

    return s0;
  }

  function peg$parseRANGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c506) {
      s0 = peg$c506;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e506); }
    }

    return s0;
  }

  function peg$parseRANK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c507) {
      s0 = peg$c507;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e507); }
    }

    return s0;
  }

  function peg$parseREADS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c508) {
      s0 = peg$c508;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e508); }
    }

    return s0;
  }

  function peg$parseREAD_ONLY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c509) {
      s0 = peg$c509;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e509); }
    }

    return s0;
  }

  function peg$parseREAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c510) {
      s0 = peg$c510;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e510); }
    }

    return s0;
  }

  function peg$parseREAD_WRITE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c511) {
      s0 = peg$c511;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e511); }
    }

    return s0;
  }

  function peg$parseREBUILD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c512) {
      s0 = peg$c512;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e512); }
    }

    return s0;
  }

  function peg$parseRECOVER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c513) {
      s0 = peg$c513;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e513); }
    }

    return s0;
  }

  function peg$parseREDOFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c514) {
      s0 = peg$c514;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e514); }
    }

    return s0;
  }

  function peg$parseREDO_BUFFER_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c515) {
      s0 = peg$c515;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e515); }
    }

    return s0;
  }

  function peg$parseREDUNDANT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c516) {
      s0 = peg$c516;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e516); }
    }

    return s0;
  }

  function peg$parseREFERENCES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c517) {
      s0 = peg$c517;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e517); }
    }

    return s0;
  }

  function peg$parseRECURSIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c518) {
      s0 = peg$c518;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e518); }
    }

    return s0;
  }

  function peg$parseREGEXP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c519) {
      s0 = peg$c519;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e519); }
    }

    return s0;
  }

  function peg$parseRELAYLOG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c520) {
      s0 = peg$c520;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e520); }
    }

    return s0;
  }

  function peg$parseRELAY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c521) {
      s0 = peg$c521;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e521); }
    }

    return s0;
  }

  function peg$parseRELAY_LOG_FILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c522) {
      s0 = peg$c522;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e522); }
    }

    return s0;
  }

  function peg$parseRELAY_LOG_POS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c523) {
      s0 = peg$c523;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e523); }
    }

    return s0;
  }

  function peg$parseRELAY_THREAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c524) {
      s0 = peg$c524;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e524); }
    }

    return s0;
  }

  function peg$parseRELEASE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c525) {
      s0 = peg$c525;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e525); }
    }

    return s0;
  }

  function peg$parseRELOAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c526) {
      s0 = peg$c526;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e526); }
    }

    return s0;
  }

  function peg$parseREMOTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c527) {
      s0 = peg$c527;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e527); }
    }

    return s0;
  }

  function peg$parseREMOVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c528) {
      s0 = peg$c528;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e528); }
    }

    return s0;
  }

  function peg$parseRENAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c529) {
      s0 = peg$c529;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e529); }
    }

    return s0;
  }

  function peg$parseREORGANIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c530) {
      s0 = peg$c530;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e530); }
    }

    return s0;
  }

  function peg$parseREPAIR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c531) {
      s0 = peg$c531;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e531); }
    }

    return s0;
  }

  function peg$parseREPEAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c532) {
      s0 = peg$c532;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e532); }
    }

    return s0;
  }

  function peg$parseREPEATABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c533) {
      s0 = peg$c533;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e533); }
    }

    return s0;
  }

  function peg$parseREPLACE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c534) {
      s0 = peg$c534;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e534); }
    }

    return s0;
  }

  function peg$parseREPLICATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c535) {
      s0 = peg$c535;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e535); }
    }

    return s0;
  }

  function peg$parseREPLICATE_DO_DB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c536) {
      s0 = peg$c536;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e536); }
    }

    return s0;
  }

  function peg$parseREPLICATE_IGNORE_DB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 26) === peg$c537) {
      s0 = peg$c537;
      peg$currPos += 26;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e537); }
    }

    return s0;
  }

  function peg$parseREPLICATE_DO_TABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c538) {
      s0 = peg$c538;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e538); }
    }

    return s0;
  }

  function peg$parseREPLICATE_IGNORE_TABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 29) === peg$c539) {
      s0 = peg$c539;
      peg$currPos += 29;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e539); }
    }

    return s0;
  }

  function peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 30) === peg$c540) {
      s0 = peg$c540;
      peg$currPos += 30;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e540); }
    }

    return s0;
  }

  function peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 34) === peg$c541) {
      s0 = peg$c541;
      peg$currPos += 34;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e541); }
    }

    return s0;
  }

  function peg$parseREPLICATE_REWRITE_DB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 27) === peg$c542) {
      s0 = peg$c542;
      peg$currPos += 27;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e542); }
    }

    return s0;
  }

  function peg$parseREQUIRE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c543) {
      s0 = peg$c543;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e543); }
    }

    return s0;
  }

  function peg$parseREQUIRE_ROW_FORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c544) {
      s0 = peg$c544;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e544); }
    }

    return s0;
  }

  function peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 38) === peg$c545) {
      s0 = peg$c545;
      peg$currPos += 38;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e545); }
    }

    return s0;
  }

  function peg$parseRESET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c546) {
      s0 = peg$c546;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e546); }
    }

    return s0;
  }

  function peg$parseRESIGNAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c547) {
      s0 = peg$c547;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e547); }
    }

    return s0;
  }

  function peg$parseRESOURCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c548) {
      s0 = peg$c548;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e548); }
    }

    return s0;
  }

  function peg$parseRESPECT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c549) {
      s0 = peg$c549;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e549); }
    }

    return s0;
  }

  function peg$parseRESTART_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c550) {
      s0 = peg$c550;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e550); }
    }

    return s0;
  }

  function peg$parseRESTORE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c551) {
      s0 = peg$c551;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e551); }
    }

    return s0;
  }

  function peg$parseRESTRICT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c552) {
      s0 = peg$c552;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e552); }
    }

    return s0;
  }

  function peg$parseRESUME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c553) {
      s0 = peg$c553;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e553); }
    }

    return s0;
  }

  function peg$parseRETAIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c554) {
      s0 = peg$c554;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e554); }
    }

    return s0;
  }

  function peg$parseRETURNED_SQLSTATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c555) {
      s0 = peg$c555;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e555); }
    }

    return s0;
  }

  function peg$parseRETURNS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c556) {
      s0 = peg$c556;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e556); }
    }

    return s0;
  }

  function peg$parseREUSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c557) {
      s0 = peg$c557;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e557); }
    }

    return s0;
  }

  function peg$parseREVERSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c558) {
      s0 = peg$c558;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e558); }
    }

    return s0;
  }

  function peg$parseREVOKE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c559) {
      s0 = peg$c559;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e559); }
    }

    return s0;
  }

  function peg$parseRIGHT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c560) {
      s0 = peg$c560;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e560); }
    }

    return s0;
  }

  function peg$parseRLIKE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c561) {
      s0 = peg$c561;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e561); }
    }

    return s0;
  }

  function peg$parseROLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c562) {
      s0 = peg$c562;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e562); }
    }

    return s0;
  }

  function peg$parseROLLBACK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c563) {
      s0 = peg$c563;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e563); }
    }

    return s0;
  }

  function peg$parseROLLUP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c564) {
      s0 = peg$c564;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e564); }
    }

    return s0;
  }

  function peg$parseROTATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c565) {
      s0 = peg$c565;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e565); }
    }

    return s0;
  }

  function peg$parseROW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c566) {
      s0 = peg$c566;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e566); }
    }

    return s0;
  }

  function peg$parseROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c567) {
      s0 = peg$c567;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e567); }
    }

    return s0;
  }

  function peg$parseROW_COUNT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c568) {
      s0 = peg$c568;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e568); }
    }

    return s0;
  }

  function peg$parseROW_FORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c569) {
      s0 = peg$c569;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e569); }
    }

    return s0;
  }

  function peg$parseROW_NUMBER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c570) {
      s0 = peg$c570;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e570); }
    }

    return s0;
  }

  function peg$parseRTREE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c571) {
      s0 = peg$c571;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e571); }
    }

    return s0;
  }

  function peg$parseSAVEPOINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c572) {
      s0 = peg$c572;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e572); }
    }

    return s0;
  }

  function peg$parseSCHEMA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c573) {
      s0 = peg$c573;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e573); }
    }

    return s0;
  }

  function peg$parseSCHEMAS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c574) {
      s0 = peg$c574;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e574); }
    }

    return s0;
  }

  function peg$parseSCHEMA_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c575) {
      s0 = peg$c575;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e575); }
    }

    return s0;
  }

  function peg$parseSCHEDULE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c576) {
      s0 = peg$c576;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e576); }
    }

    return s0;
  }

  function peg$parseSECOND_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c577) {
      s0 = peg$c577;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e577); }
    }

    return s0;
  }

  function peg$parseSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c578) {
      s0 = peg$c578;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e578); }
    }

    return s0;
  }

  function peg$parseSECONDARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c579) {
      s0 = peg$c579;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e579); }
    }

    return s0;
  }

  function peg$parseSECONDARY_ENGINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c580) {
      s0 = peg$c580;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e580); }
    }

    return s0;
  }

  function peg$parseSECONDARY_LOAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c581) {
      s0 = peg$c581;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e581); }
    }

    return s0;
  }

  function peg$parseSECONDARY_UNLOAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c582) {
      s0 = peg$c582;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e582); }
    }

    return s0;
  }

  function peg$parseSECURITY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c583) {
      s0 = peg$c583;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e583); }
    }

    return s0;
  }

  function peg$parseSELECT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c584) {
      s0 = peg$c584;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e584); }
    }

    return s0;
  }

  function peg$parseSENSITIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c585) {
      s0 = peg$c585;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e585); }
    }

    return s0;
  }

  function peg$parseSEPARATOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c586) {
      s0 = peg$c586;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e586); }
    }

    return s0;
  }

  function peg$parseSERIALIZABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c587) {
      s0 = peg$c587;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e587); }
    }

    return s0;
  }

  function peg$parseSERIAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c588) {
      s0 = peg$c588;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e588); }
    }

    return s0;
  }

  function peg$parseSERVER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c589) {
      s0 = peg$c589;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e589); }
    }

    return s0;
  }

  function peg$parseSERVER_OPTIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c590) {
      s0 = peg$c590;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e590); }
    }

    return s0;
  }

  function peg$parseSESSION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c591) {
      s0 = peg$c591;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e591); }
    }

    return s0;
  }

  function peg$parseSESSION_USER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c592) {
      s0 = peg$c592;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e592); }
    }

    return s0;
  }

  function peg$parseSET_VAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c593) {
      s0 = peg$c593;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e593); }
    }

    return s0;
  }

  function peg$parseSHARE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c594) {
      s0 = peg$c594;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e594); }
    }

    return s0;
  }

  function peg$parseSHOW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c595) {
      s0 = peg$c595;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e595); }
    }

    return s0;
  }

  function peg$parseSHUTDOWN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c596) {
      s0 = peg$c596;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e596); }
    }

    return s0;
  }

  function peg$parseSIGNAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c597) {
      s0 = peg$c597;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e597); }
    }

    return s0;
  }

  function peg$parseSIGNED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c598) {
      s0 = peg$c598;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e598); }
    }

    return s0;
  }

  function peg$parseSIMPLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c599) {
      s0 = peg$c599;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e599); }
    }

    return s0;
  }

  function peg$parseSKIP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c600) {
      s0 = peg$c600;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e600); }
    }

    return s0;
  }

  function peg$parseSLAVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c601) {
      s0 = peg$c601;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e601); }
    }

    return s0;
  }

  function peg$parseSLOW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c602) {
      s0 = peg$c602;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e602); }
    }

    return s0;
  }

  function peg$parseSNAPSHOT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c603) {
      s0 = peg$c603;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e603); }
    }

    return s0;
  }

  function peg$parseSOME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c604) {
      s0 = peg$c604;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e604); }
    }

    return s0;
  }

  function peg$parseSOCKET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c605) {
      s0 = peg$c605;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e605); }
    }

    return s0;
  }

  function peg$parseSONAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c606) {
      s0 = peg$c606;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e606); }
    }

    return s0;
  }

  function peg$parseSOUNDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c607) {
      s0 = peg$c607;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e607); }
    }

    return s0;
  }

  function peg$parseSOURCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c608) {
      s0 = peg$c608;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e608); }
    }

    return s0;
  }

  function peg$parseSPATIAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c609) {
      s0 = peg$c609;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e609); }
    }

    return s0;
  }

  function peg$parseSQL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c610) {
      s0 = peg$c610;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e610); }
    }

    return s0;
  }

  function peg$parseSQLEXCEPTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c611) {
      s0 = peg$c611;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e611); }
    }

    return s0;
  }

  function peg$parseSQLSTATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c612) {
      s0 = peg$c612;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e612); }
    }

    return s0;
  }

  function peg$parseSQLWARNING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c613) {
      s0 = peg$c613;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e613); }
    }

    return s0;
  }

  function peg$parseSQL_AFTER_GTIDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c614) {
      s0 = peg$c614;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e614); }
    }

    return s0;
  }

  function peg$parseSQL_AFTER_MTS_GAPS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c615) {
      s0 = peg$c615;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e615); }
    }

    return s0;
  }

  function peg$parseSQL_BEFORE_GTIDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c616) {
      s0 = peg$c616;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e616); }
    }

    return s0;
  }

  function peg$parseSQL_BIG_RESULT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c617) {
      s0 = peg$c617;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e617); }
    }

    return s0;
  }

  function peg$parseSQL_BUFFER_RESULT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c618) {
      s0 = peg$c618;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e618); }
    }

    return s0;
  }

  function peg$parseSQL_CALC_FOUND_ROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 26) === peg$c619) {
      s0 = peg$c619;
      peg$currPos += 26;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e619); }
    }

    return s0;
  }

  function peg$parseSQL_CACHE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c620) {
      s0 = peg$c620;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e620); }
    }

    return s0;
  }

  function peg$parseSQL_NO_CACHE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c621) {
      s0 = peg$c621;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e621); }
    }

    return s0;
  }

  function peg$parseSQL_SMALL_RESULT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c622) {
      s0 = peg$c622;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e622); }
    }

    return s0;
  }

  function peg$parseSQL_THREAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c623) {
      s0 = peg$c623;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e623); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_DAY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c624) {
      s0 = peg$c624;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e624); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c625) {
      s0 = peg$c625;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e625); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 26) === peg$c626) {
      s0 = peg$c626;
      peg$currPos += 26;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e626); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_MINUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c627) {
      s0 = peg$c627;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e627); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_MONTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c628) {
      s0 = peg$c628;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e628); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_QUARTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c629) {
      s0 = peg$c629;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e629); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_SECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c630) {
      s0 = peg$c630;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e630); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_WEEK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c631) {
      s0 = peg$c631;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e631); }
    }

    return s0;
  }

  function peg$parseSQL_TSI_YEAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c632) {
      s0 = peg$c632;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e632); }
    }

    return s0;
  }

  function peg$parseSRID_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c633) {
      s0 = peg$c633;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e633); }
    }

    return s0;
  }

  function peg$parseSSL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c634) {
      s0 = peg$c634;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e634); }
    }

    return s0;
  }

  function peg$parseSTACKED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c635) {
      s0 = peg$c635;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e635); }
    }

    return s0;
  }

  function peg$parseSTARTING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c636) {
      s0 = peg$c636;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e636); }
    }

    return s0;
  }

  function peg$parseSTARTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c637) {
      s0 = peg$c637;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e637); }
    }

    return s0;
  }

  function peg$parseSTATS_AUTO_RECALC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c638) {
      s0 = peg$c638;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e638); }
    }

    return s0;
  }

  function peg$parseSTATS_PERSISTENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c639) {
      s0 = peg$c639;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e639); }
    }

    return s0;
  }

  function peg$parseSTATS_SAMPLE_PAGES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c640) {
      s0 = peg$c640;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e640); }
    }

    return s0;
  }

  function peg$parseSTATUS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c641) {
      s0 = peg$c641;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e641); }
    }

    return s0;
  }

  function peg$parseSTD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c642) {
      s0 = peg$c642;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e642); }
    }

    return s0;
  }

  function peg$parseSTDDEV_POP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c643) {
      s0 = peg$c643;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e643); }
    }

    return s0;
  }

  function peg$parseSTDDEV_SAMP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c644) {
      s0 = peg$c644;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e644); }
    }

    return s0;
  }

  function peg$parseSTDDEV_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c645) {
      s0 = peg$c645;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e645); }
    }

    return s0;
  }

  function peg$parseSTOP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c646) {
      s0 = peg$c646;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e646); }
    }

    return s0;
  }

  function peg$parseSTORAGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c647) {
      s0 = peg$c647;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e647); }
    }

    return s0;
  }

  function peg$parseSTORED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c648) {
      s0 = peg$c648;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e648); }
    }

    return s0;
  }

  function peg$parseSTRAIGHT_JOIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c649) {
      s0 = peg$c649;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e649); }
    }

    return s0;
  }

  function peg$parseSTREAM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c650) {
      s0 = peg$c650;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e650); }
    }

    return s0;
  }

  function peg$parseSTRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c651) {
      s0 = peg$c651;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e651); }
    }

    return s0;
  }

  function peg$parseSUBCLASS_ORIGIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c652) {
      s0 = peg$c652;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e652); }
    }

    return s0;
  }

  function peg$parseSUBDATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c653) {
      s0 = peg$c653;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e653); }
    }

    return s0;
  }

  function peg$parseSUBJECT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c654) {
      s0 = peg$c654;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e654); }
    }

    return s0;
  }

  function peg$parseSUBPARTITIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c655) {
      s0 = peg$c655;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e655); }
    }

    return s0;
  }

  function peg$parseSUBPARTITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c656) {
      s0 = peg$c656;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e656); }
    }

    return s0;
  }

  function peg$parseSUBSTR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c657) {
      s0 = peg$c657;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e657); }
    }

    return s0;
  }

  function peg$parseSUBSTRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c658) {
      s0 = peg$c658;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e658); }
    }

    return s0;
  }

  function peg$parseSUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c659) {
      s0 = peg$c659;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e659); }
    }

    return s0;
  }

  function peg$parseSUPER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c660) {
      s0 = peg$c660;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e660); }
    }

    return s0;
  }

  function peg$parseSUSPEND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c661) {
      s0 = peg$c661;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e661); }
    }

    return s0;
  }

  function peg$parseSWAPS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c662) {
      s0 = peg$c662;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e662); }
    }

    return s0;
  }

  function peg$parseSWITCHES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c663) {
      s0 = peg$c663;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e663); }
    }

    return s0;
  }

  function peg$parseSYSDATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c664) {
      s0 = peg$c664;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e664); }
    }

    return s0;
  }

  function peg$parseSYSTEM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c665) {
      s0 = peg$c665;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e665); }
    }

    return s0;
  }

  function peg$parseSYSTEM_USER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c666) {
      s0 = peg$c666;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e666); }
    }

    return s0;
  }

  function peg$parseTABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c667) {
      s0 = peg$c667;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e667); }
    }

    return s0;
  }

  function peg$parseTABLES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c668) {
      s0 = peg$c668;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e668); }
    }

    return s0;
  }

  function peg$parseTABLESPACE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c669) {
      s0 = peg$c669;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e669); }
    }

    return s0;
  }

  function peg$parseTABLE_CHECKSUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c670) {
      s0 = peg$c670;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e670); }
    }

    return s0;
  }

  function peg$parseTABLE_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c671) {
      s0 = peg$c671;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e671); }
    }

    return s0;
  }

  function peg$parseTEMPORARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c672) {
      s0 = peg$c672;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e672); }
    }

    return s0;
  }

  function peg$parseTEMPTABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c673) {
      s0 = peg$c673;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e673); }
    }

    return s0;
  }

  function peg$parseTERMINATED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c674) {
      s0 = peg$c674;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e674); }
    }

    return s0;
  }

  function peg$parseTHAN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c675) {
      s0 = peg$c675;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e675); }
    }

    return s0;
  }

  function peg$parseTHEN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c676) {
      s0 = peg$c676;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e676); }
    }

    return s0;
  }

  function peg$parseTHREAD_PRIORITY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 22) === peg$c677) {
      s0 = peg$c677;
      peg$currPos += 22;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e677); }
    }

    return s0;
  }

  function peg$parseTIES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c678) {
      s0 = peg$c678;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e678); }
    }

    return s0;
  }

  function peg$parseTIMESTAMP_ADD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c679) {
      s0 = peg$c679;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e679); }
    }

    return s0;
  }

  function peg$parseTIMESTAMP_DIFF_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c680) {
      s0 = peg$c680;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e680); }
    }

    return s0;
  }

  function peg$parseTO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c681) {
      s0 = peg$c681;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e681); }
    }

    return s0;
  }

  function peg$parseTRAILING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c682) {
      s0 = peg$c682;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e682); }
    }

    return s0;
  }

  function peg$parseTRANSACTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c683) {
      s0 = peg$c683;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e683); }
    }

    return s0;
  }

  function peg$parseTRIGGER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c684) {
      s0 = peg$c684;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e684); }
    }

    return s0;
  }

  function peg$parseTRIGGERS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c685) {
      s0 = peg$c685;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e685); }
    }

    return s0;
  }

  function peg$parseTRIM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c686) {
      s0 = peg$c686;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e686); }
    }

    return s0;
  }

  function peg$parseTRUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c687) {
      s0 = peg$c687;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e687); }
    }

    return s0;
  }

  function peg$parseTRUNCATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c688) {
      s0 = peg$c688;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e688); }
    }

    return s0;
  }

  function peg$parseTYPES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c689) {
      s0 = peg$c689;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e689); }
    }

    return s0;
  }

  function peg$parseTYPE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c690) {
      s0 = peg$c690;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e690); }
    }

    return s0;
  }

  function peg$parseUDF_RETURNS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c691) {
      s0 = peg$c691;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e691); }
    }

    return s0;
  }

  function peg$parseUNBOUNDED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c692) {
      s0 = peg$c692;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e692); }
    }

    return s0;
  }

  function peg$parseUNCOMMITTED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c693) {
      s0 = peg$c693;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e693); }
    }

    return s0;
  }

  function peg$parseUNDEFINED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c694) {
      s0 = peg$c694;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e694); }
    }

    return s0;
  }

  function peg$parseUNDO_BUFFER_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c695) {
      s0 = peg$c695;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e695); }
    }

    return s0;
  }

  function peg$parseUNDOFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c696) {
      s0 = peg$c696;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e696); }
    }

    return s0;
  }

  function peg$parseUNDO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c697) {
      s0 = peg$c697;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e697); }
    }

    return s0;
  }

  function peg$parseUNICODE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c698) {
      s0 = peg$c698;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e698); }
    }

    return s0;
  }

  function peg$parseUNION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c699) {
      s0 = peg$c699;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e699); }
    }

    return s0;
  }

  function peg$parseUNIQUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c700) {
      s0 = peg$c700;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e700); }
    }

    return s0;
  }

  function peg$parseUNKNOWN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c701) {
      s0 = peg$c701;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e701); }
    }

    return s0;
  }

  function peg$parseUNINSTALL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c702) {
      s0 = peg$c702;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e702); }
    }

    return s0;
  }

  function peg$parseUNSIGNED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c703) {
      s0 = peg$c703;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e703); }
    }

    return s0;
  }

  function peg$parseUPDATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c704) {
      s0 = peg$c704;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e704); }
    }

    return s0;
  }

  function peg$parseUPGRADE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c705) {
      s0 = peg$c705;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e705); }
    }

    return s0;
  }

  function peg$parseUSAGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c706) {
      s0 = peg$c706;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e706); }
    }

    return s0;
  }

  function peg$parseUSER_RESOURCES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 21) === peg$c707) {
      s0 = peg$c707;
      peg$currPos += 21;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e707); }
    }

    return s0;
  }

  function peg$parseUSER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c708) {
      s0 = peg$c708;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e708); }
    }

    return s0;
  }

  function peg$parseUSE_FRM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c709) {
      s0 = peg$c709;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e709); }
    }

    return s0;
  }

  function peg$parseUSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c710) {
      s0 = peg$c710;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e710); }
    }

    return s0;
  }

  function peg$parseUSING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c711) {
      s0 = peg$c711;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e711); }
    }

    return s0;
  }

  function peg$parseUTC_DATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c712) {
      s0 = peg$c712;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e712); }
    }

    return s0;
  }

  function peg$parseUTC_TIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c713) {
      s0 = peg$c713;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e713); }
    }

    return s0;
  }

  function peg$parseUTC_TIMESTAMP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c714) {
      s0 = peg$c714;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e714); }
    }

    return s0;
  }

  function peg$parseVALIDATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c715) {
      s0 = peg$c715;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e715); }
    }

    return s0;
  }

  function peg$parseVALUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c716) {
      s0 = peg$c716;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e716); }
    }

    return s0;
  }

  function peg$parseVALUES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c717) {
      s0 = peg$c717;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e717); }
    }

    return s0;
  }

  function peg$parseVARCHARACTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c718) {
      s0 = peg$c718;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e718); }
    }

    return s0;
  }

  function peg$parseVARIABLES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c719) {
      s0 = peg$c719;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e719); }
    }

    return s0;
  }

  function peg$parseVARIANCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c720) {
      s0 = peg$c720;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e720); }
    }

    return s0;
  }

  function peg$parseVARYING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c721) {
      s0 = peg$c721;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e721); }
    }

    return s0;
  }

  function peg$parseVAR_POP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c722) {
      s0 = peg$c722;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e722); }
    }

    return s0;
  }

  function peg$parseVAR_SAMP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c723) {
      s0 = peg$c723;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e723); }
    }

    return s0;
  }

  function peg$parseVCPU_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c724) {
      s0 = peg$c724;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e724); }
    }

    return s0;
  }

  function peg$parseVIEW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c725) {
      s0 = peg$c725;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e725); }
    }

    return s0;
  }

  function peg$parseVIRTUAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c726) {
      s0 = peg$c726;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e726); }
    }

    return s0;
  }

  function peg$parseVISIBLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c727) {
      s0 = peg$c727;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e727); }
    }

    return s0;
  }

  function peg$parseWAIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c728) {
      s0 = peg$c728;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e728); }
    }

    return s0;
  }

  function peg$parseWARNINGS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c729) {
      s0 = peg$c729;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e729); }
    }

    return s0;
  }

  function peg$parseWEEK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c730) {
      s0 = peg$c730;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e730); }
    }

    return s0;
  }

  function peg$parseWHEN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c731) {
      s0 = peg$c731;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e731); }
    }

    return s0;
  }

  function peg$parseWEIGHT_STRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c732) {
      s0 = peg$c732;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e732); }
    }

    return s0;
  }

  function peg$parseWHERE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c733) {
      s0 = peg$c733;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e733); }
    }

    return s0;
  }

  function peg$parseWHILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c734) {
      s0 = peg$c734;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e734); }
    }

    return s0;
  }

  function peg$parseWINDOW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c735) {
      s0 = peg$c735;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e735); }
    }

    return s0;
  }

  function peg$parseWITH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c736) {
      s0 = peg$c736;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e736); }
    }

    return s0;
  }

  function peg$parseWITHOUT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c737) {
      s0 = peg$c737;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e737); }
    }

    return s0;
  }

  function peg$parseWORK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c738) {
      s0 = peg$c738;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e738); }
    }

    return s0;
  }

  function peg$parseWRAPPER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c739) {
      s0 = peg$c739;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e739); }
    }

    return s0;
  }

  function peg$parseWRITE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c740) {
      s0 = peg$c740;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e740); }
    }

    return s0;
  }

  function peg$parseXA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c741) {
      s0 = peg$c741;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e741); }
    }

    return s0;
  }

  function peg$parseX509_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c742) {
      s0 = peg$c742;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e742); }
    }

    return s0;
  }

  function peg$parseXID_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c743) {
      s0 = peg$c743;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e743); }
    }

    return s0;
  }

  function peg$parseXML_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c744) {
      s0 = peg$c744;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e744); }
    }

    return s0;
  }

  function peg$parseXOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c745) {
      s0 = peg$c745;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e745); }
    }

    return s0;
  }

  function peg$parseYEAR_MONTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c746) {
      s0 = peg$c746;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e746); }
    }

    return s0;
  }

  function peg$parseZEROFILL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c747) {
      s0 = peg$c747;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e747); }
    }

    return s0;
  }

  function peg$parseINT1_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c748) {
      s0 = peg$c748;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e748); }
    }

    return s0;
  }

  function peg$parseINT2_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c749) {
      s0 = peg$c749;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e749); }
    }

    return s0;
  }

  function peg$parseINT3_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c750) {
      s0 = peg$c750;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e750); }
    }

    return s0;
  }

  function peg$parseINT4_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c751) {
      s0 = peg$c751;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e751); }
    }

    return s0;
  }

  function peg$parseINT8_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c752) {
      s0 = peg$c752;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e752); }
    }

    return s0;
  }

  function peg$parseIDENTIFIER() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c753) {
      s0 = peg$c753;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e753); }
    }

    return s0;
  }

  function peg$parseBACK_TICK_QUOTED_ID() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c754) {
      s0 = peg$c754;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e754); }
    }

    return s0;
  }

  function peg$parseDOUBLE_QUOTED_TEXT() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c755) {
      s0 = peg$c755;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e755); }
    }

    return s0;
  }

  function peg$parseSINGLE_QUOTED_TEXT() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c756) {
      s0 = peg$c756;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e756); }
    }

    return s0;
  }

  function peg$parseHEX_NUMBER() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c757) {
      s0 = peg$c757;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e757); }
    }

    return s0;
  }

  function peg$parseBIN_NUMBER() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c758) {
      s0 = peg$c758;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e758); }
    }

    return s0;
  }

  function peg$parseDECIMAL_NUMBER() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c759) {
      s0 = peg$c759;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e759); }
    }

    return s0;
  }

  function peg$parseINT_NUMBER() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c760) {
      s0 = peg$c760;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e760); }
    }

    return s0;
  }

  function peg$parseFLOAT_NUMBER() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c761) {
      s0 = peg$c761;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e761); }
    }

    return s0;
  }

  function peg$parseUNDERSCORE_CHARSET() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c762) {
      s0 = peg$c762;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e762); }
    }

    return s0;
  }

  function peg$parseDOT_IDENTIFIER() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c763) {
      s0 = peg$c763;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e763); }
    }

    return s0;
  }

  function peg$parseINVALID_INPUT() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c764) {
      s0 = peg$c764;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e764); }
    }

    return s0;
  }

  function peg$parseLINEBREAK() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c765) {
      s0 = peg$c765;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e765); }
    }

    return s0;
  }

  function peg$parseSTART_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c766) {
      s0 = peg$c766;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e766); }
    }

    return s0;
  }

  function peg$parseUNLOCK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c767) {
      s0 = peg$c767;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e767); }
    }

    return s0;
  }

  function peg$parseCLONE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c768) {
      s0 = peg$c768;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e768); }
    }

    return s0;
  }

  function peg$parseGET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c769) {
      s0 = peg$c769;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e769); }
    }

    return s0;
  }

  function peg$parseASCII_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c770) {
      s0 = peg$c770;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e770); }
    }

    return s0;
  }

  function peg$parseBIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c771) {
      s0 = peg$c771;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e771); }
    }

    return s0;
  }

  function peg$parseBUCKETS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c772) {
      s0 = peg$c772;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e772); }
    }

    return s0;
  }

  function peg$parseCOMPONENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c773) {
      s0 = peg$c773;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e773); }
    }

    return s0;
  }

  function peg$parseNOW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c774) {
      s0 = peg$c774;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e774); }
    }

    return s0;
  }

  function peg$parseDEFINITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c775) {
      s0 = peg$c775;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e775); }
    }

    return s0;
  }

  function peg$parseDENSE_RANK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c776) {
      s0 = peg$c776;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e776); }
    }

    return s0;
  }

  function peg$parseDESCRIPTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c777) {
      s0 = peg$c777;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e777); }
    }

    return s0;
  }

  function peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 28) === peg$c778) {
      s0 = peg$c778;
      peg$currPos += 28;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e778); }
    }

    return s0;
  }

  function peg$parseFOLLOWING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c779) {
      s0 = peg$c779;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e779); }
    }

    return s0;
  }

  function peg$parseGROUPING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c780) {
      s0 = peg$c780;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e780); }
    }

    return s0;
  }

  function peg$parseGROUPS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c781) {
      s0 = peg$c781;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e781); }
    }

    return s0;
  }

  function peg$parseLAG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c782) {
      s0 = peg$c782;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e782); }
    }

    return s0;
  }

  function peg$parseLONG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c783) {
      s0 = peg$c783;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e783); }
    }

    return s0;
  }

  function peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 35) === peg$c784) {
      s0 = peg$c784;
      peg$currPos += 35;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e784); }
    }

    return s0;
  }

  function peg$parseNOT2_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c785) {
      s0 = peg$c785;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e785); }
    }

    return s0;
  }

  function peg$parseNO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c786) {
      s0 = peg$c786;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e786); }
    }

    return s0;
  }

  function peg$parseREFERENCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c787) {
      s0 = peg$c787;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e787); }
    }

    return s0;
  }

  function peg$parseRETURN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c788) {
      s0 = peg$c788;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e788); }
    }

    return s0;
  }

  function peg$parseSPECIFIC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c789) {
      s0 = peg$c789;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e789); }
    }

    return s0;
  }

  function peg$parseAUTHORS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c790) {
      s0 = peg$c790;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e790); }
    }

    return s0;
  }

  function peg$parseADDDATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c791) {
      s0 = peg$c791;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e791); }
    }

    return s0;
  }

  function peg$parseCONCAT_PIPES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c792) {
      s0 = peg$c792;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e792); }
    }

    return s0;
  }

  function peg$parseACTIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c793) {
      s0 = peg$c793;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e793); }
    }

    return s0;
  }

  function peg$parseADMIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c794) {
      s0 = peg$c794;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e794); }
    }

    return s0;
  }

  function peg$parseEXCLUDE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c795) {
      s0 = peg$c795;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e795); }
    }

    return s0;
  }

  function peg$parseINACTIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c796) {
      s0 = peg$c796;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e796); }
    }

    return s0;
  }

  function peg$parseLOCKED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c797) {
      s0 = peg$c797;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e797); }
    }

    return s0;
  }

  function peg$parseROUTINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c798) {
      s0 = peg$c798;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e798); }
    }

    return s0;
  }

  function peg$parseUNTIL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c799) {
      s0 = peg$c799;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e799); }
    }

    return s0;
  }

  function peg$parseARRAY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c800) {
      s0 = peg$c800;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e800); }
    }

    return s0;
  }

  function peg$parsePASSWORD_LOCK_TIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 25) === peg$c801) {
      s0 = peg$c801;
      peg$currPos += 25;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e801); }
    }

    return s0;
  }

  function peg$parseNCHAR_TEXT() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c802) {
      s0 = peg$c802;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e802); }
    }

    return s0;
  }

  function peg$parseLONG_NUMBER() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c803) {
      s0 = peg$c803;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e803); }
    }

    return s0;
  }

  function peg$parseULONGLONG_NUMBER() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c804) {
      s0 = peg$c804;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e804); }
    }

    return s0;
  }

  function peg$parseCUME_DIST_SYMBO() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c805) {
      s0 = peg$c805;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e805); }
    }

    return s0;
  }

  function peg$parseCUME_DIST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c806) {
      s0 = peg$c806;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e806); }
    }

    return s0;
  }

  function peg$parseFOUND_ROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c807) {
      s0 = peg$c807;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e807); }
    }

    return s0;
  }

  function peg$parseCONCAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c808) {
      s0 = peg$c808;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e808); }
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c809) {
      s0 = peg$c809;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e809); }
    }

    return s0;
  }


  const serverInfo = {
    ANSI_QUOTES: 1,
    isSqlModeActive() {
      return false;
    },
    getServerVersion() {
      return 80000;
    }
  };
  const serverVersion = serverInfo.getServerVersion();

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "Start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
