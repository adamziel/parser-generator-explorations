// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { EQUAL_OPERATOR: peg$parseEQUAL_OPERATOR };
  var peg$startRuleFunction = peg$parseEQUAL_OPERATOR;

  var peg$c0 = "=";
  var peg$c1 = ":=";
  var peg$c2 = "<=>";
  var peg$c3 = ">=";
  var peg$c4 = ">";
  var peg$c5 = "<=";
  var peg$c6 = "<";
  var peg$c7 = "!=";
  var peg$c8 = "<>";
  var peg$c9 = "+";
  var peg$c10 = "-";
  var peg$c11 = "*";
  var peg$c12 = "/";
  var peg$c13 = "%";
  var peg$c14 = "!";
  var peg$c15 = "~";
  var peg$c16 = "<<";
  var peg$c17 = ">>";
  var peg$c18 = "&&";
  var peg$c19 = "&";
  var peg$c20 = "^";
  var peg$c21 = "||";
  var peg$c22 = "|";
  var peg$c23 = ".";
  var peg$c24 = ",";
  var peg$c25 = ";";
  var peg$c26 = ":";
  var peg$c27 = "(";
  var peg$c28 = ")";
  var peg$c29 = "{";
  var peg$c30 = "}";
  var peg$c31 = "_";
  var peg$c32 = "->";
  var peg$c33 = "->>";
  var peg$c34 = "@";
  var peg$c35 = "@@";
  var peg$c36 = "\\N";
  var peg$c37 = "?";
  var peg$c38 = "0x";
  var peg$c39 = "x'";
  var peg$c40 = "'";
  var peg$c41 = "0b";
  var peg$c42 = "b'";
  var peg$c43 = "`";
  var peg$c44 = "\"";
  var peg$c45 = "\\";
  var peg$c46 = "/*!";
  var peg$c47 = "*/";
  var peg$c48 = "/**/";
  var peg$c49 = "/*";
  var peg$c50 = "#";
  var peg$c51 = "--";
  var peg$c52 = "ACCESSIBLE";
  var peg$c53 = "ACCOUNT";
  var peg$c54 = "ACTION";
  var peg$c55 = "ADD";
  var peg$c56 = "ADDDATE";
  var peg$c57 = "AFTER";
  var peg$c58 = "AGAINST";
  var peg$c59 = "AGGREGATE";
  var peg$c60 = "ALGORITHM";
  var peg$c61 = "ALL";
  var peg$c62 = "ALTER";
  var peg$c63 = "ALWAYS";
  var peg$c64 = "ANALYSE";
  var peg$c65 = "ANALYZE";
  var peg$c66 = "AND";
  var peg$c67 = "ANY";
  var peg$c68 = "AS";
  var peg$c69 = "ASC";
  var peg$c70 = "ASCII";
  var peg$c71 = "ASENSITIVE";
  var peg$c72 = "AT";
  var peg$c73 = "AUTHORS";
  var peg$c74 = "AUTOEXTEND_SIZE";
  var peg$c75 = "AUTO_INCREMENT";
  var peg$c76 = "AVG_ROW_LENGTH";
  var peg$c77 = "AVG";
  var peg$c78 = "BACKUP";
  var peg$c79 = "BEFORE";
  var peg$c80 = "BEGIN";
  var peg$c81 = "BETWEEN";
  var peg$c82 = "BIGINT";
  var peg$c83 = "BINARY";
  var peg$c84 = "BINLOG";
  var peg$c85 = "BIN_NUM";
  var peg$c86 = "BIT_AND";
  var peg$c87 = "BIT_OR";
  var peg$c88 = "BIT";
  var peg$c89 = "BIT_XOR";
  var peg$c90 = "BLOB";
  var peg$c91 = "BLOCK";
  var peg$c92 = "BOOLEAN";
  var peg$c93 = "BOOL";
  var peg$c94 = "BOTH";
  var peg$c95 = "BTREE";
  var peg$c96 = "BY";
  var peg$c97 = "BYTE";
  var peg$c98 = "CACHE";
  var peg$c99 = "CALL";
  var peg$c100 = "CASCADE";
  var peg$c101 = "CASCADED";
  var peg$c102 = "CASE";
  var peg$c103 = "CAST";
  var peg$c104 = "CATALOG_NAME";
  var peg$c105 = "CHAIN";
  var peg$c106 = "CHANGE";
  var peg$c107 = "CHANGED";
  var peg$c108 = "CHANNEL";
  var peg$c109 = "CHARSET";
  var peg$c110 = "CHARACTER";
  var peg$c111 = "CHAR";
  var peg$c112 = "CHECKSUM";
  var peg$c113 = "CHECK";
  var peg$c114 = "CIPHER";
  var peg$c115 = "CLASS_ORIGIN";
  var peg$c116 = "CLIENT";
  var peg$c117 = "CLOSE";
  var peg$c118 = "COALESCE";
  var peg$c119 = "CODE";
  var peg$c120 = "COLLATE";
  var peg$c121 = "COLLATION";
  var peg$c122 = "COLUMNS";
  var peg$c123 = "COLUMN";
  var peg$c124 = "COLUMN_NAME";
  var peg$c125 = "COLUMN_FORMAT";
  var peg$c126 = "COMMENT";
  var peg$c127 = "COMMITTED";
  var peg$c128 = "COMMIT";
  var peg$c129 = "COMPACT";
  var peg$c130 = "COMPLETION";
  var peg$c131 = "COMPRESSED";
  var peg$c132 = "COMPRESSION";
  var peg$c133 = "CONCURRENT";
  var peg$c134 = "CONDITION";
  var peg$c135 = "CONNECTION";
  var peg$c136 = "CONSISTENT";
  var peg$c137 = "CONSTRAINT";
  var peg$c138 = "CONSTRAINT_CATALOG";
  var peg$c139 = "CONSTRAINT_NAME";
  var peg$c140 = "CONSTRAINT_SCHEMA";
  var peg$c141 = "CONTAINS";
  var peg$c142 = "CONTEXT";
  var peg$c143 = "CONTINUE";
  var peg$c144 = "CONTRIBUTORS";
  var peg$c145 = "CONVERT";
  var peg$c146 = "COUNT";
  var peg$c147 = "CPU";
  var peg$c148 = "CREATE";
  var peg$c149 = "CROSS";
  var peg$c150 = "CUBE";
  var peg$c151 = "CURDATE";
  var peg$c152 = "CURRENT";
  var peg$c153 = "CURRENT_DATE";
  var peg$c154 = "CURRENT_TIME";
  var peg$c155 = "CURRENT_TIMESTAMP";
  var peg$c156 = "CURRENT_USER";
  var peg$c157 = "CURSOR";
  var peg$c158 = "CURSOR_NAME";
  var peg$c159 = "CURTIME";
  var peg$c160 = "DATABASE";
  var peg$c161 = "DATABASES";
  var peg$c162 = "DATAFILE";
  var peg$c163 = "DATA";
  var peg$c164 = "DATETIME";
  var peg$c165 = "DATE_ADD";
  var peg$c166 = "DATE_SUB";
  var peg$c167 = "DATE";
  var peg$c168 = "DAYOFMONTH";
  var peg$c169 = "DAY_HOUR";
  var peg$c170 = "DAY_MICROSECOND";
  var peg$c171 = "DAY_MINUTE";
  var peg$c172 = "DAY_SECOND";
  var peg$c173 = "DAY";
  var peg$c174 = "DEALLOCATE";
  var peg$c175 = "DEC";
  var peg$c176 = "DECIMAL_NUM";
  var peg$c177 = "DECIMAL";
  var peg$c178 = "DECLARE";
  var peg$c179 = "DEFAULT";
  var peg$c180 = "DEFAULT_AUTH";
  var peg$c181 = "DEFINER";
  var peg$c182 = "DELAYED";
  var peg$c183 = "DELAY_KEY_WRITE";
  var peg$c184 = "DELETE";
  var peg$c185 = "DESC";
  var peg$c186 = "DESCRIBE";
  var peg$c187 = "DES_KEY_FILE";
  var peg$c188 = "DETERMINISTIC";
  var peg$c189 = "DIAGNOSTICS";
  var peg$c190 = "DIRECTORY";
  var peg$c191 = "DISABLE";
  var peg$c192 = "DISCARD";
  var peg$c193 = "DISK";
  var peg$c194 = "DISTINCT";
  var peg$c195 = "DISTINCTROW";
  var peg$c196 = "DIV";
  var peg$c197 = "DOUBLE";
  var peg$c198 = "DO";
  var peg$c199 = "DROP";
  var peg$c200 = "DUAL";
  var peg$c201 = "DUMPFILE";
  var peg$c202 = "DUPLICATE";
  var peg$c203 = "DYNAMIC";
  var peg$c204 = "EACH";
  var peg$c205 = "ELSE";
  var peg$c206 = "ELSEIF";
  var peg$c207 = "ENABLE";
  var peg$c208 = "ENCLOSED";
  var peg$c209 = "ENCRYPTION";
  var peg$c210 = "END";
  var peg$c211 = "ENDS";
  var peg$c212 = "END_OF_INPUT";
  var peg$c213 = "ENGINES";
  var peg$c214 = "ENGINE";
  var peg$c215 = "ENUM";
  var peg$c216 = "ERROR";
  var peg$c217 = "ERRORS";
  var peg$c218 = "ESCAPED";
  var peg$c219 = "ESCAPE";
  var peg$c220 = "EVENTS";
  var peg$c221 = "EVENT";
  var peg$c222 = "EVERY";
  var peg$c223 = "EXCHANGE";
  var peg$c224 = "EXECUTE";
  var peg$c225 = "EXISTS";
  var peg$c226 = "EXIT";
  var peg$c227 = "EXPANSION";
  var peg$c228 = "EXPIRE";
  var peg$c229 = "EXPLAIN";
  var peg$c230 = "EXPORT";
  var peg$c231 = "EXTENDED";
  var peg$c232 = "EXTENT_SIZE";
  var peg$c233 = "EXTRACT";
  var peg$c234 = "FALSE";
  var peg$c235 = "FAST";
  var peg$c236 = "FAULTS";
  var peg$c237 = "FETCH";
  var peg$c238 = "FIELDS";
  var peg$c239 = "FILE";
  var peg$c240 = "FILE_BLOCK_SIZE";
  var peg$c241 = "FILTER";
  var peg$c242 = "FIRST";
  var peg$c243 = "FIXED";
  var peg$c244 = "FLOAT4";
  var peg$c245 = "FLOAT8";
  var peg$c246 = "FLOAT";
  var peg$c247 = "FLUSH";
  var peg$c248 = "FOLLOWS";
  var peg$c249 = "FORCE";
  var peg$c250 = "FOREIGN";
  var peg$c251 = "FOR";
  var peg$c252 = "FORMAT";
  var peg$c253 = "FOUND";
  var peg$c254 = "FROM";
  var peg$c255 = "FULL";
  var peg$c256 = "FULLTEXT";
  var peg$c257 = "FUNCTION";
  var peg$c258 = "GET";
  var peg$c259 = "GENERAL";
  var peg$c260 = "GENERATED";
  var peg$c261 = "GROUP_REPLICATION";
  var peg$c262 = "GEOMETRYCOLLECTION";
  var peg$c263 = "GEOMETRY";
  var peg$c264 = "GET_FORMAT";
  var peg$c265 = "GLOBAL";
  var peg$c266 = "GRANT";
  var peg$c267 = "GRANTS";
  var peg$c268 = "GROUP";
  var peg$c269 = "GROUP_CONCAT";
  var peg$c270 = "HANDLER";
  var peg$c271 = "HASH";
  var peg$c272 = "HAVING";
  var peg$c273 = "HELP";
  var peg$c274 = "HIGH_PRIORITY";
  var peg$c275 = "HOST";
  var peg$c276 = "HOSTS";
  var peg$c277 = "HOUR_MICROSECOND";
  var peg$c278 = "HOUR_MINUTE";
  var peg$c279 = "HOUR_SECOND";
  var peg$c280 = "HOUR";
  var peg$c281 = "IDENTIFIED";
  var peg$c282 = "IF";
  var peg$c283 = "IGNORE";
  var peg$c284 = "IGNORE_SERVER_IDS";
  var peg$c285 = "IMPORT";
  var peg$c286 = "INDEXES";
  var peg$c287 = "INDEX";
  var peg$c288 = "INFILE";
  var peg$c289 = "INITIAL_SIZE";
  var peg$c290 = "INNER";
  var peg$c291 = "INOUT";
  var peg$c292 = "INSENSITIVE";
  var peg$c293 = "INSERT";
  var peg$c294 = "INSERT_METHOD";
  var peg$c295 = "INSTANCE";
  var peg$c296 = "INSTALL";
  var peg$c297 = "INTEGER";
  var peg$c298 = "INTERVAL";
  var peg$c299 = "INTO";
  var peg$c300 = "INT";
  var peg$c301 = "INVOKER";
  var peg$c302 = "IN";
  var peg$c303 = "IO_AFTER_GTIDS";
  var peg$c304 = "IO_BEFORE_GTIDS";
  var peg$c305 = "IO_THREAD";
  var peg$c306 = "IO";
  var peg$c307 = "IPC";
  var peg$c308 = "IS";
  var peg$c309 = "ISOLATION";
  var peg$c310 = "ISSUER";
  var peg$c311 = "ITERATE";
  var peg$c312 = "JOIN";
  var peg$c313 = "JSON";
  var peg$c314 = "KEYS";
  var peg$c315 = "KEY_BLOCK_SIZE";
  var peg$c316 = "KEY";
  var peg$c317 = "KILL";
  var peg$c318 = "LANGUAGE";
  var peg$c319 = "LAST";
  var peg$c320 = "LEADING";
  var peg$c321 = "LEAVES";
  var peg$c322 = "LEAVE";
  var peg$c323 = "LEFT";
  var peg$c324 = "LESS";
  var peg$c325 = "LEVEL";
  var peg$c326 = "LIKE";
  var peg$c327 = "LIMIT";
  var peg$c328 = "LINEAR";
  var peg$c329 = "LINES";
  var peg$c330 = "LINESTRING";
  var peg$c331 = "LIST";
  var peg$c332 = "LOAD";
  var peg$c333 = "LOCALTIME";
  var peg$c334 = "LOCALTIMESTAMP";
  var peg$c335 = "LOCAL";
  var peg$c336 = "LOCATOR";
  var peg$c337 = "LOCKS";
  var peg$c338 = "LOCK";
  var peg$c339 = "LOGFILE";
  var peg$c340 = "LOGS";
  var peg$c341 = "LONGBLOB";
  var peg$c342 = "LONGTEXT";
  var peg$c343 = "LONG_NUM";
  var peg$c344 = "LONG";
  var peg$c345 = "LOOP";
  var peg$c346 = "LOW_PRIORITY";
  var peg$c347 = "MASTER_AUTO_POSITION";
  var peg$c348 = "MASTER_BIND";
  var peg$c349 = "MASTER_CONNECT_RETRY";
  var peg$c350 = "MASTER_DELAY";
  var peg$c351 = "MASTER_HOST";
  var peg$c352 = "MASTER_LOG_FILE";
  var peg$c353 = "MASTER_LOG_POS";
  var peg$c354 = "MASTER_PASSWORD";
  var peg$c355 = "MASTER_PORT";
  var peg$c356 = "MASTER_RETRY_COUNT";
  var peg$c357 = "MASTER_SERVER_ID";
  var peg$c358 = "MASTER_SSL_CAPATH";
  var peg$c359 = "MASTER_SSL_CA";
  var peg$c360 = "MASTER_SSL_CERT";
  var peg$c361 = "MASTER_SSL_CIPHER";
  var peg$c362 = "MASTER_SSL_CRL";
  var peg$c363 = "MASTER_SSL_CRLPATH";
  var peg$c364 = "MASTER_SSL_KEY";
  var peg$c365 = "MASTER_SSL";
  var peg$c366 = "MASTER_SSL_VERIFY_SERVER_CERT";
  var peg$c367 = "MASTER";
  var peg$c368 = "MASTER_TLS_VERSION";
  var peg$c369 = "MASTER_USER";
  var peg$c370 = "MASTER_HEARTBEAT_PERIOD";
  var peg$c371 = "MATCH";
  var peg$c372 = "MAX_CONNECTIONS_PER_HOUR";
  var peg$c373 = "MAX_QUERIES_PER_HOUR";
  var peg$c374 = "MAX_ROWS";
  var peg$c375 = "MAX_SIZE";
  var peg$c376 = "MAX_STATEMENT_TIME";
  var peg$c377 = "MAX";
  var peg$c378 = "MAX_UPDATES_PER_HOUR";
  var peg$c379 = "MAX_USER_CONNECTIONS";
  var peg$c380 = "MAXVALUE";
  var peg$c381 = "MEDIUMBLOB";
  var peg$c382 = "MEDIUMINT";
  var peg$c383 = "MEDIUMTEXT";
  var peg$c384 = "MEDIUM";
  var peg$c385 = "MEMORY";
  var peg$c386 = "MERGE";
  var peg$c387 = "MESSAGE_TEXT";
  var peg$c388 = "MICROSECOND";
  var peg$c389 = "MID";
  var peg$c390 = "MIDDLEINT";
  var peg$c391 = "MIGRATE";
  var peg$c392 = "MINUTE_MICROSECOND";
  var peg$c393 = "MINUTE_SECOND";
  var peg$c394 = "MINUTE";
  var peg$c395 = "MIN_ROWS";
  var peg$c396 = "MIN";
  var peg$c397 = "MODE";
  var peg$c398 = "MODIFIES";
  var peg$c399 = "MODIFY";
  var peg$c400 = "MOD";
  var peg$c401 = "MONTH";
  var peg$c402 = "MULTILINESTRING";
  var peg$c403 = "MULTIPOINT";
  var peg$c404 = "MULTIPOLYGON";
  var peg$c405 = "MUTEX";
  var peg$c406 = "MYSQL_ERRNO";
  var peg$c407 = "NAMES";
  var peg$c408 = "NAME";
  var peg$c409 = "NATIONAL";
  var peg$c410 = "NATURAL";
  var peg$c411 = "NCHAR_STRING";
  var peg$c412 = "NCHAR";
  var peg$c413 = "NDB";
  var peg$c414 = "NDBCLUSTER";
  var peg$c415 = "NEG";
  var peg$c416 = "NEVER";
  var peg$c417 = "NEW";
  var peg$c418 = "NEXT";
  var peg$c419 = "NODEGROUP";
  var peg$c420 = "NONE";
  var peg$c421 = "NONBLOCKING";
  var peg$c422 = "NOT";
  var peg$c423 = "NOW";
  var peg$c424 = "NO";
  var peg$c425 = "NO_WAIT";
  var peg$c426 = "NO_WRITE_TO_BINLOG";
  var peg$c427 = "NULL";
  var peg$c428 = "NUMBER";
  var peg$c429 = "NUMERIC";
  var peg$c430 = "NVARCHAR";
  var peg$c431 = "OFFLINE";
  var peg$c432 = "OFFSET";
  var peg$c433 = "OLD_PASSWORD";
  var peg$c434 = "ON";
  var peg$c435 = "ONE";
  var peg$c436 = "ONLINE";
  var peg$c437 = "ONLY";
  var peg$c438 = "OPEN";
  var peg$c439 = "OPTIMIZE";
  var peg$c440 = "OPTIMIZER_COSTS";
  var peg$c441 = "OPTIONS";
  var peg$c442 = "OPTION";
  var peg$c443 = "OPTIONALLY";
  var peg$c444 = "ORDER";
  var peg$c445 = "OR";
  var peg$c446 = "OUTER";
  var peg$c447 = "OUTFILE";
  var peg$c448 = "OUT";
  var peg$c449 = "OWNER";
  var peg$c450 = "PACK_KEYS";
  var peg$c451 = "PAGE";
  var peg$c452 = "PARSER";
  var peg$c453 = "PARTIAL";
  var peg$c454 = "PARTITIONING";
  var peg$c455 = "PARTITIONS";
  var peg$c456 = "PARTITION";
  var peg$c457 = "PASSWORD";
  var peg$c458 = "PHASE";
  var peg$c459 = "PLUGINS";
  var peg$c460 = "PLUGIN_DIR";
  var peg$c461 = "PLUGIN";
  var peg$c462 = "POINT";
  var peg$c463 = "POLYGON";
  var peg$c464 = "PORT";
  var peg$c465 = "POSITION";
  var peg$c466 = "PRECEDES";
  var peg$c467 = "PRECISION";
  var peg$c468 = "PREPARE";
  var peg$c469 = "PRESERVE";
  var peg$c470 = "PREV";
  var peg$c471 = "PRIMARY";
  var peg$c472 = "PRIVILEGES";
  var peg$c473 = "PROCEDURE";
  var peg$c474 = "PROCESS";
  var peg$c475 = "PROCESSLIST";
  var peg$c476 = "PROFILE";
  var peg$c477 = "PROFILES";
  var peg$c478 = "PROXY";
  var peg$c479 = "PURGE";
  var peg$c480 = "QUARTER";
  var peg$c481 = "QUERY";
  var peg$c482 = "QUICK";
  var peg$c483 = "RANGE";
  var peg$c484 = "READS";
  var peg$c485 = "READ_ONLY";
  var peg$c486 = "READ";
  var peg$c487 = "READ_WRITE";
  var peg$c488 = "REAL";
  var peg$c489 = "REBUILD";
  var peg$c490 = "RECOVER";
  var peg$c491 = "REDOFILE";
  var peg$c492 = "REDO_BUFFER_SIZE";
  var peg$c493 = "REDUNDANT";
  var peg$c494 = "REFERENCES";
  var peg$c495 = "REGEXP";
  var peg$c496 = "RELAY";
  var peg$c497 = "RELAYLOG";
  var peg$c498 = "RELAY_LOG_FILE";
  var peg$c499 = "RELAY_LOG_POS";
  var peg$c500 = "RELAY_THREAD";
  var peg$c501 = "RELEASE";
  var peg$c502 = "RELOAD";
  var peg$c503 = "REMOVE";
  var peg$c504 = "RENAME";
  var peg$c505 = "REORGANIZE";
  var peg$c506 = "REPAIR";
  var peg$c507 = "REPEATABLE";
  var peg$c508 = "REPEAT";
  var peg$c509 = "REPLACE";
  var peg$c510 = "REPLICATION";
  var peg$c511 = "REPLICATE_DO_DB";
  var peg$c512 = "REPLICATE_IGNORE_DB";
  var peg$c513 = "REPLICATE_DO_TABLE";
  var peg$c514 = "REPLICATE_IGNORE_TABLE";
  var peg$c515 = "REPLICATE_WILD_DO_TABLE";
  var peg$c516 = "REPLICATE_WILD_IGNORE_TABLE";
  var peg$c517 = "REPLICATE_REWRITE_DB";
  var peg$c518 = "REQUIRE";
  var peg$c519 = "RESET";
  var peg$c520 = "RESIGNAL";
  var peg$c521 = "RESTORE";
  var peg$c522 = "RESTRICT";
  var peg$c523 = "RESUME";
  var peg$c524 = "RETURNED_SQLSTATE";
  var peg$c525 = "RETURNS";
  var peg$c526 = "RETURN";
  var peg$c527 = "REVERSE";
  var peg$c528 = "REVOKE";
  var peg$c529 = "RIGHT";
  var peg$c530 = "RLIKE";
  var peg$c531 = "ROLLBACK";
  var peg$c532 = "ROLLUP";
  var peg$c533 = "ROTATE";
  var peg$c534 = "ROUTINE";
  var peg$c535 = "ROWS";
  var peg$c536 = "ROW_COUNT";
  var peg$c537 = "ROW_FORMAT";
  var peg$c538 = "ROW";
  var peg$c539 = "RTREE";
  var peg$c540 = "SAVEPOINT";
  var peg$c541 = "SCHEDULE";
  var peg$c542 = "SCHEMA";
  var peg$c543 = "SCHEMA_NAME";
  var peg$c544 = "SCHEMAS";
  var peg$c545 = "SECOND_MICROSECOND";
  var peg$c546 = "SECOND";
  var peg$c547 = "SECURITY";
  var peg$c548 = "SELECT";
  var peg$c549 = "SENSITIVE";
  var peg$c550 = "SEPARATOR";
  var peg$c551 = "SERIALIZABLE";
  var peg$c552 = "SERIAL";
  var peg$c553 = "SESSION";
  var peg$c554 = "SERVER";
  var peg$c555 = "SERVER_OPTIONS";
  var peg$c556 = "SESSION_USER";
  var peg$c557 = "SET";
  var peg$c558 = "SET_VAR";
  var peg$c559 = "SHARE";
  var peg$c560 = "SHOW";
  var peg$c561 = "SHUTDOWN";
  var peg$c562 = "SIGNAL";
  var peg$c563 = "SIGNED";
  var peg$c564 = "SIMPLE";
  var peg$c565 = "SLAVE";
  var peg$c566 = "SLOW";
  var peg$c567 = "SMALLINT";
  var peg$c568 = "SNAPSHOT";
  var peg$c569 = "SOME";
  var peg$c570 = "SOCKET";
  var peg$c571 = "SONAME";
  var peg$c572 = "SOUNDS";
  var peg$c573 = "SOURCE";
  var peg$c574 = "SPATIAL";
  var peg$c575 = "SPECIFIC";
  var peg$c576 = "SQLEXCEPTION";
  var peg$c577 = "SQLSTATE";
  var peg$c578 = "SQLWARNING";
  var peg$c579 = "SQL_AFTER_GTIDS";
  var peg$c580 = "SQL_AFTER_MTS_GAPS";
  var peg$c581 = "SQL_BEFORE_GTIDS";
  var peg$c582 = "SQL_BIG_RESULT";
  var peg$c583 = "SQL_BUFFER_RESULT";
  var peg$c584 = "SQL_CACHE";
  var peg$c585 = "SQL_CALC_FOUND_ROWS";
  var peg$c586 = "SQL_NO_CACHE";
  var peg$c587 = "SQL_SMALL_RESULT";
  var peg$c588 = "SQL";
  var peg$c589 = "SQL_THREAD";
  var peg$c590 = "SSL";
  var peg$c591 = "STACKED";
  var peg$c592 = "STARTING";
  var peg$c593 = "STARTS";
  var peg$c594 = "START";
  var peg$c595 = "STATS_AUTO_RECALC";
  var peg$c596 = "STATS_PERSISTENT";
  var peg$c597 = "STATS_SAMPLE_PAGES";
  var peg$c598 = "STATUS";
  var peg$c599 = "STDDEV_SAMP";
  var peg$c600 = "STDDEV";
  var peg$c601 = "STDDEV_POP";
  var peg$c602 = "STD";
  var peg$c603 = "STOP";
  var peg$c604 = "STORAGE";
  var peg$c605 = "STORED";
  var peg$c606 = "STRAIGHT_JOIN";
  var peg$c607 = "STRING";
  var peg$c608 = "SUBCLASS_ORIGIN";
  var peg$c609 = "SUBDATE";
  var peg$c610 = "SUBJECT";
  var peg$c611 = "SUBPARTITIONS";
  var peg$c612 = "SUBPARTITION";
  var peg$c613 = "SUBSTR";
  var peg$c614 = "SUBSTRING";
  var peg$c615 = "SUM";
  var peg$c616 = "SUPER";
  var peg$c617 = "SUSPEND";
  var peg$c618 = "SWAPS";
  var peg$c619 = "SWITCHES";
  var peg$c620 = "SYSDATE";
  var peg$c621 = "SYSTEM_USER";
  var peg$c622 = "TABLES";
  var peg$c623 = "TABLESPACE";
  var peg$c624 = "TABLE_REF_PRIORITY";
  var peg$c625 = "TABLE";
  var peg$c626 = "TABLE_CHECKSUM";
  var peg$c627 = "TABLE_NAME";
  var peg$c628 = "TEMPORARY";
  var peg$c629 = "TEMPTABLE";
  var peg$c630 = "TERMINATED";
  var peg$c631 = "TEXT";
  var peg$c632 = "THAN";
  var peg$c633 = "THEN";
  var peg$c634 = "TIMESTAMP";
  var peg$c635 = "TIMESTAMP_ADD";
  var peg$c636 = "TIMESTAMP_DIFF";
  var peg$c637 = "TIME";
  var peg$c638 = "TINYBLOB";
  var peg$c639 = "TINYINT";
  var peg$c640 = "TINYTEXT";
  var peg$c641 = "TO";
  var peg$c642 = "TRAILING";
  var peg$c643 = "TRANSACTION";
  var peg$c644 = "TRIGGERS";
  var peg$c645 = "TRIGGER";
  var peg$c646 = "TRIM";
  var peg$c647 = "TRUE";
  var peg$c648 = "TRUNCATE";
  var peg$c649 = "TYPES";
  var peg$c650 = "TYPE";
  var peg$c651 = "UDF_RETURNS";
  var peg$c652 = "UNCOMMITTED";
  var peg$c653 = "UNDEFINED";
  var peg$c654 = "UNDOFILE";
  var peg$c655 = "UNDO_BUFFER_SIZE";
  var peg$c656 = "UNDO";
  var peg$c657 = "UNICODE";
  var peg$c658 = "UNINSTALL";
  var peg$c659 = "UNION";
  var peg$c660 = "UNIQUE";
  var peg$c661 = "UNKNOWN";
  var peg$c662 = "UNLOCK";
  var peg$c663 = "UNSIGNED";
  var peg$c664 = "UNTIL";
  var peg$c665 = "UPDATE";
  var peg$c666 = "UPGRADE";
  var peg$c667 = "USAGE";
  var peg$c668 = "USER_RESOURCES";
  var peg$c669 = "USER";
  var peg$c670 = "USE_FRM";
  var peg$c671 = "USE";
  var peg$c672 = "USING";
  var peg$c673 = "UTC_DATE";
  var peg$c674 = "UTC_TIMESTAMP";
  var peg$c675 = "UTC_TIME";
  var peg$c676 = "VALIDATION";
  var peg$c677 = "VALUES";
  var peg$c678 = "VALUE";
  var peg$c679 = "VARBINARY";
  var peg$c680 = "VARCHAR";
  var peg$c681 = "VARCHARACTER";
  var peg$c682 = "VARIABLES";
  var peg$c683 = "VARIANCE";
  var peg$c684 = "VARYING";
  var peg$c685 = "VAR_POP";
  var peg$c686 = "VAR_SAMP";
  var peg$c687 = "VIEW";
  var peg$c688 = "VIRTUAL";
  var peg$c689 = "WAIT";
  var peg$c690 = "WARNINGS";
  var peg$c691 = "WEEK";
  var peg$c692 = "WEIGHT_STRING";
  var peg$c693 = "WHEN";
  var peg$c694 = "WHERE";
  var peg$c695 = "WHILE";
  var peg$c696 = "WITH";
  var peg$c697 = "WITHOUT";
  var peg$c698 = "WORK";
  var peg$c699 = "WRAPPER";
  var peg$c700 = "WRITE";
  var peg$c701 = "X509";
  var peg$c702 = "XA";
  var peg$c703 = "XID";
  var peg$c704 = "XML";
  var peg$c705 = "XOR";
  var peg$c706 = "YEAR_MONTH";
  var peg$c707 = "YEAR";
  var peg$c708 = "ZEROFILL";
  var peg$c709 = "PERSIST";
  var peg$c710 = "ROLE";
  var peg$c711 = "ADMIN";
  var peg$c712 = "INVISIBLE";
  var peg$c713 = "VISIBLE";
  var peg$c714 = "EXCEPT";
  var peg$c715 = "COMPONENT";
  var peg$c716 = "RECURSIVE";
  var peg$c717 = "JSON_OBJECTAGG";
  var peg$c718 = "JSON_ARRAYAGG";
  var peg$c719 = "OF";
  var peg$c720 = "SKIP";
  var peg$c721 = "LOCKED";
  var peg$c722 = "NOWAIT";
  var peg$c723 = "GROUPING";
  var peg$c724 = "PERSIST_ONLY";
  var peg$c725 = "HISTOGRAM";
  var peg$c726 = "BUCKETS";
  var peg$c727 = "REMOTE";
  var peg$c728 = "CLONE";
  var peg$c729 = "CUME_DIST";
  var peg$c730 = "DENSE_RANK";
  var peg$c731 = "EXCLUDE";
  var peg$c732 = "FIRST_VALUE";
  var peg$c733 = "FOLLOWING";
  var peg$c734 = "GROUPS";
  var peg$c735 = "LAG";
  var peg$c736 = "LAST_VALUE";
  var peg$c737 = "LEAD";
  var peg$c738 = "NTH_VALUE";
  var peg$c739 = "NTILE";
  var peg$c740 = "NULLS";
  var peg$c741 = "OTHERS";
  var peg$c742 = "OVER";
  var peg$c743 = "PERCENT_RANK";
  var peg$c744 = "PRECEDING";
  var peg$c745 = "RANK";
  var peg$c746 = "RESPECT";
  var peg$c747 = "ROW_NUMBER";
  var peg$c748 = "TIES";
  var peg$c749 = "UNBOUNDED";
  var peg$c750 = "WINDOW";
  var peg$c751 = "EMPTY";
  var peg$c752 = "JSON_TABLE";
  var peg$c753 = "NESTED";
  var peg$c754 = "ORDINALITY";
  var peg$c755 = "PATH";
  var peg$c756 = "HISTORY";
  var peg$c757 = "REUSE";
  var peg$c758 = "SRID";
  var peg$c759 = "THREAD_PRIORITY";
  var peg$c760 = "RESOURCE";
  var peg$c761 = "SYSTEM";
  var peg$c762 = "VCPU";
  var peg$c763 = "MASTER_PUBLIC_KEY_PATH";
  var peg$c764 = "GET_MASTER_PUBLIC_KEY_SYM";
  var peg$c765 = "RESTART";
  var peg$c766 = "DEFINITION";
  var peg$c767 = "DESCRIPTION";
  var peg$c768 = "ORGANIZATION";
  var peg$c769 = "REFERENCE";
  var peg$c770 = "OPTIONAL";
  var peg$c771 = "SECONDARY";
  var peg$c772 = "SECONDARY_ENGINE";
  var peg$c773 = "SECONDARY_LOAD";
  var peg$c774 = "SECONDARY_UNLOAD";
  var peg$c775 = "ACTIVE";
  var peg$c776 = "INACTIVE";
  var peg$c777 = "LATERAL";
  var peg$c778 = "RETAIN";
  var peg$c779 = "OLD";
  var peg$c780 = "NETWORK_NAMESPACE";
  var peg$c781 = "ENFORCED";
  var peg$c782 = "ARRAY";
  var peg$c783 = "OJ";
  var peg$c784 = "MEMBER";
  var peg$c785 = "RANDOM";
  var peg$c786 = "MASTER_COMPRESSION_ALGORITHM";
  var peg$c787 = "MASTER_ZSTD_COMPRESSION_LEVEL";
  var peg$c788 = "PRIVILEGE_CHECKS_USER";
  var peg$c789 = "MASTER_TLS_CIPHERSUITES";
  var peg$c790 = "REQUIRE_ROW_FORMAT";
  var peg$c791 = "PASSWORD_LOCK_TIME";
  var peg$c792 = "FAILED_LOGIN_ATTEMPTS";
  var peg$c793 = "REQUIRE_TABLE_PRIMARY_KEY_CHECK";
  var peg$c794 = "STREAM";
  var peg$c795 = "OFF";
  var peg$c796 = "INT1";
  var peg$c797 = "INT2";
  var peg$c798 = "INT3";
  var peg$c799 = "INT4";
  var peg$c800 = "INT8";
  var peg$c801 = "SQL_TSI_SECOND";
  var peg$c802 = "SQL_TSI_MINUTE";
  var peg$c803 = "SQL_TSI_HOUR";
  var peg$c804 = "SQL_TSI_DAY";
  var peg$c805 = "SQL_TSI_WEEK";
  var peg$c806 = "SQL_TSI_MONTH";
  var peg$c807 = "SQL_TSI_QUARTER";
  var peg$c808 = "SQL_TSI_YEAR";

  var peg$r0 = /^[Aa]/;
  var peg$r1 = /^[Bb]/;
  var peg$r2 = /^[Cc]/;
  var peg$r3 = /^[Dd]/;
  var peg$r4 = /^[Ee]/;
  var peg$r5 = /^[Ff]/;
  var peg$r6 = /^[Gg]/;
  var peg$r7 = /^[Hh]/;
  var peg$r8 = /^[Ii]/;
  var peg$r9 = /^[Jj]/;
  var peg$r10 = /^[Kk]/;
  var peg$r11 = /^[Ll]/;
  var peg$r12 = /^[Mm]/;
  var peg$r13 = /^[Nn]/;
  var peg$r14 = /^[Oo]/;
  var peg$r15 = /^[Pp]/;
  var peg$r16 = /^[Qq]/;
  var peg$r17 = /^[Rr]/;
  var peg$r18 = /^[Ss]/;
  var peg$r19 = /^[Tt]/;
  var peg$r20 = /^[Uu]/;
  var peg$r21 = /^[Vv]/;
  var peg$r22 = /^[Ww]/;
  var peg$r23 = /^[Xx]/;
  var peg$r24 = /^[Yy]/;
  var peg$r25 = /^[Zz]/;
  var peg$r26 = /^[0-9]/;
  var peg$r27 = /^[0-9a-fA-F]/;
  var peg$r28 = /^[01]/;
  var peg$r29 = /^[eE]/;
  var peg$r30 = /^[+\-]/;
  var peg$r31 = /^[a-z0-9]/;
  var peg$r32 = /^[nN]/;
  var peg$r33 = /^[^\n\r]/;
  var peg$r34 = /^[ \t]/;
  var peg$r35 = /^[\n\r]/;
  var peg$r36 = /^[$.0-9A-Z_a-z]/;
  var peg$r37 = /^[$0-9A-Z_a-z\x80-\uFFFF]/;
  var peg$r38 = /^[a-zA-Z_$\x80-\uFFFF]/;
  var peg$r39 = /^[a-df-zA-DF-Z_$\x80-\uFFFF]/;
  var peg$r40 = /^[ \t\f\r\n]/;
  var peg$r41 = /^[\x01-\b\v-\f\x0E-\x1F[\]]/;

  var peg$e0 = peg$literalExpectation("=", false);
  var peg$e1 = peg$literalExpectation(":=", false);
  var peg$e2 = peg$literalExpectation("<=>", false);
  var peg$e3 = peg$literalExpectation(">=", false);
  var peg$e4 = peg$literalExpectation(">", false);
  var peg$e5 = peg$literalExpectation("<=", false);
  var peg$e6 = peg$literalExpectation("<", false);
  var peg$e7 = peg$literalExpectation("!=", false);
  var peg$e8 = peg$literalExpectation("<>", false);
  var peg$e9 = peg$literalExpectation("+", false);
  var peg$e10 = peg$literalExpectation("-", false);
  var peg$e11 = peg$literalExpectation("*", false);
  var peg$e12 = peg$literalExpectation("/", false);
  var peg$e13 = peg$literalExpectation("%", false);
  var peg$e14 = peg$literalExpectation("!", false);
  var peg$e15 = peg$literalExpectation("~", false);
  var peg$e16 = peg$literalExpectation("<<", false);
  var peg$e17 = peg$literalExpectation(">>", false);
  var peg$e18 = peg$literalExpectation("&&", false);
  var peg$e19 = peg$literalExpectation("&", false);
  var peg$e20 = peg$literalExpectation("^", false);
  var peg$e21 = peg$literalExpectation("||", false);
  var peg$e22 = peg$literalExpectation("|", false);
  var peg$e23 = peg$literalExpectation(".", false);
  var peg$e24 = peg$literalExpectation(",", false);
  var peg$e25 = peg$literalExpectation(";", false);
  var peg$e26 = peg$literalExpectation(":", false);
  var peg$e27 = peg$literalExpectation("(", false);
  var peg$e28 = peg$literalExpectation(")", false);
  var peg$e29 = peg$literalExpectation("{", false);
  var peg$e30 = peg$literalExpectation("}", false);
  var peg$e31 = peg$literalExpectation("_", false);
  var peg$e32 = peg$literalExpectation("->", false);
  var peg$e33 = peg$literalExpectation("->>", false);
  var peg$e34 = peg$literalExpectation("@", false);
  var peg$e35 = peg$literalExpectation("@@", false);
  var peg$e36 = peg$literalExpectation("\\N", false);
  var peg$e37 = peg$literalExpectation("?", false);
  var peg$e38 = peg$classExpectation(["A", "a"], false, false);
  var peg$e39 = peg$classExpectation(["B", "b"], false, false);
  var peg$e40 = peg$classExpectation(["C", "c"], false, false);
  var peg$e41 = peg$classExpectation(["D", "d"], false, false);
  var peg$e42 = peg$classExpectation(["E", "e"], false, false);
  var peg$e43 = peg$classExpectation(["F", "f"], false, false);
  var peg$e44 = peg$classExpectation(["G", "g"], false, false);
  var peg$e45 = peg$classExpectation(["H", "h"], false, false);
  var peg$e46 = peg$classExpectation(["I", "i"], false, false);
  var peg$e47 = peg$classExpectation(["J", "j"], false, false);
  var peg$e48 = peg$classExpectation(["K", "k"], false, false);
  var peg$e49 = peg$classExpectation(["L", "l"], false, false);
  var peg$e50 = peg$classExpectation(["M", "m"], false, false);
  var peg$e51 = peg$classExpectation(["N", "n"], false, false);
  var peg$e52 = peg$classExpectation(["O", "o"], false, false);
  var peg$e53 = peg$classExpectation(["P", "p"], false, false);
  var peg$e54 = peg$classExpectation(["Q", "q"], false, false);
  var peg$e55 = peg$classExpectation(["R", "r"], false, false);
  var peg$e56 = peg$classExpectation(["S", "s"], false, false);
  var peg$e57 = peg$classExpectation(["T", "t"], false, false);
  var peg$e58 = peg$classExpectation(["U", "u"], false, false);
  var peg$e59 = peg$classExpectation(["V", "v"], false, false);
  var peg$e60 = peg$classExpectation(["W", "w"], false, false);
  var peg$e61 = peg$classExpectation(["X", "x"], false, false);
  var peg$e62 = peg$classExpectation(["Y", "y"], false, false);
  var peg$e63 = peg$classExpectation(["Z", "z"], false, false);
  var peg$e64 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e65 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e66 = peg$literalExpectation("0x", false);
  var peg$e67 = peg$literalExpectation("x'", false);
  var peg$e68 = peg$literalExpectation("'", false);
  var peg$e69 = peg$literalExpectation("0b", false);
  var peg$e70 = peg$classExpectation(["0", "1"], false, false);
  var peg$e71 = peg$literalExpectation("b'", false);
  var peg$e72 = peg$classExpectation(["e", "E"], false, false);
  var peg$e73 = peg$classExpectation(["+", "-"], false, false);
  var peg$e74 = peg$classExpectation([["a", "z"], ["0", "9"]], false, false);
  var peg$e75 = peg$classExpectation(["n", "N"], false, false);
  var peg$e76 = peg$literalExpectation("`", false);
  var peg$e77 = peg$literalExpectation("\"", false);
  var peg$e78 = peg$literalExpectation("\\", false);
  var peg$e79 = peg$anyExpectation();
  var peg$e80 = peg$literalExpectation("/*!", false);
  var peg$e81 = peg$literalExpectation("*/", false);
  var peg$e82 = peg$literalExpectation("/**/", false);
  var peg$e83 = peg$literalExpectation("/*", false);
  var peg$e84 = peg$literalExpectation("#", false);
  var peg$e85 = peg$classExpectation(["\n", "\r"], true, false);
  var peg$e86 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e87 = peg$literalExpectation("--", false);
  var peg$e88 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e89 = peg$classExpectation(["$", ".", ["0", "9"], ["A", "Z"], "_", ["a", "z"]], false, false);
  var peg$e90 = peg$classExpectation(["$", ["0", "9"], ["A", "Z"], "_", ["a", "z"], ["\x80", "\uFFFF"]], false, false);
  var peg$e91 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", "$", ["\x80", "\uFFFF"]], false, false);
  var peg$e92 = peg$classExpectation([["a", "d"], ["f", "z"], ["A", "D"], ["F", "Z"], "_", "$", ["\x80", "\uFFFF"]], false, false);
  var peg$e93 = peg$literalExpectation("ACCESSIBLE", false);
  var peg$e94 = peg$literalExpectation("ACCOUNT", false);
  var peg$e95 = peg$literalExpectation("ACTION", false);
  var peg$e96 = peg$literalExpectation("ADD", false);
  var peg$e97 = peg$literalExpectation("ADDDATE", false);
  var peg$e98 = peg$literalExpectation("AFTER", false);
  var peg$e99 = peg$literalExpectation("AGAINST", false);
  var peg$e100 = peg$literalExpectation("AGGREGATE", false);
  var peg$e101 = peg$literalExpectation("ALGORITHM", false);
  var peg$e102 = peg$literalExpectation("ALL", false);
  var peg$e103 = peg$literalExpectation("ALTER", false);
  var peg$e104 = peg$literalExpectation("ALWAYS", false);
  var peg$e105 = peg$literalExpectation("ANALYSE", false);
  var peg$e106 = peg$literalExpectation("ANALYZE", false);
  var peg$e107 = peg$literalExpectation("AND", false);
  var peg$e108 = peg$literalExpectation("ANY", false);
  var peg$e109 = peg$literalExpectation("AS", false);
  var peg$e110 = peg$literalExpectation("ASC", false);
  var peg$e111 = peg$literalExpectation("ASCII", false);
  var peg$e112 = peg$literalExpectation("ASENSITIVE", false);
  var peg$e113 = peg$literalExpectation("AT", false);
  var peg$e114 = peg$literalExpectation("AUTHORS", false);
  var peg$e115 = peg$literalExpectation("AUTOEXTEND_SIZE", false);
  var peg$e116 = peg$literalExpectation("AUTO_INCREMENT", false);
  var peg$e117 = peg$literalExpectation("AVG_ROW_LENGTH", false);
  var peg$e118 = peg$literalExpectation("AVG", false);
  var peg$e119 = peg$literalExpectation("BACKUP", false);
  var peg$e120 = peg$literalExpectation("BEFORE", false);
  var peg$e121 = peg$literalExpectation("BEGIN", false);
  var peg$e122 = peg$literalExpectation("BETWEEN", false);
  var peg$e123 = peg$literalExpectation("BIGINT", false);
  var peg$e124 = peg$literalExpectation("BINARY", false);
  var peg$e125 = peg$literalExpectation("BINLOG", false);
  var peg$e126 = peg$literalExpectation("BIN_NUM", false);
  var peg$e127 = peg$literalExpectation("BIT_AND", false);
  var peg$e128 = peg$literalExpectation("BIT_OR", false);
  var peg$e129 = peg$literalExpectation("BIT", false);
  var peg$e130 = peg$literalExpectation("BIT_XOR", false);
  var peg$e131 = peg$literalExpectation("BLOB", false);
  var peg$e132 = peg$literalExpectation("BLOCK", false);
  var peg$e133 = peg$literalExpectation("BOOLEAN", false);
  var peg$e134 = peg$literalExpectation("BOOL", false);
  var peg$e135 = peg$literalExpectation("BOTH", false);
  var peg$e136 = peg$literalExpectation("BTREE", false);
  var peg$e137 = peg$literalExpectation("BY", false);
  var peg$e138 = peg$literalExpectation("BYTE", false);
  var peg$e139 = peg$literalExpectation("CACHE", false);
  var peg$e140 = peg$literalExpectation("CALL", false);
  var peg$e141 = peg$literalExpectation("CASCADE", false);
  var peg$e142 = peg$literalExpectation("CASCADED", false);
  var peg$e143 = peg$literalExpectation("CASE", false);
  var peg$e144 = peg$literalExpectation("CAST", false);
  var peg$e145 = peg$literalExpectation("CATALOG_NAME", false);
  var peg$e146 = peg$literalExpectation("CHAIN", false);
  var peg$e147 = peg$literalExpectation("CHANGE", false);
  var peg$e148 = peg$literalExpectation("CHANGED", false);
  var peg$e149 = peg$literalExpectation("CHANNEL", false);
  var peg$e150 = peg$literalExpectation("CHARSET", false);
  var peg$e151 = peg$literalExpectation("CHARACTER", false);
  var peg$e152 = peg$literalExpectation("CHAR", false);
  var peg$e153 = peg$literalExpectation("CHECKSUM", false);
  var peg$e154 = peg$literalExpectation("CHECK", false);
  var peg$e155 = peg$literalExpectation("CIPHER", false);
  var peg$e156 = peg$literalExpectation("CLASS_ORIGIN", false);
  var peg$e157 = peg$literalExpectation("CLIENT", false);
  var peg$e158 = peg$literalExpectation("CLOSE", false);
  var peg$e159 = peg$literalExpectation("COALESCE", false);
  var peg$e160 = peg$literalExpectation("CODE", false);
  var peg$e161 = peg$literalExpectation("COLLATE", false);
  var peg$e162 = peg$literalExpectation("COLLATION", false);
  var peg$e163 = peg$literalExpectation("COLUMNS", false);
  var peg$e164 = peg$literalExpectation("COLUMN", false);
  var peg$e165 = peg$literalExpectation("COLUMN_NAME", false);
  var peg$e166 = peg$literalExpectation("COLUMN_FORMAT", false);
  var peg$e167 = peg$literalExpectation("COMMENT", false);
  var peg$e168 = peg$literalExpectation("COMMITTED", false);
  var peg$e169 = peg$literalExpectation("COMMIT", false);
  var peg$e170 = peg$literalExpectation("COMPACT", false);
  var peg$e171 = peg$literalExpectation("COMPLETION", false);
  var peg$e172 = peg$literalExpectation("COMPRESSED", false);
  var peg$e173 = peg$literalExpectation("COMPRESSION", false);
  var peg$e174 = peg$literalExpectation("CONCURRENT", false);
  var peg$e175 = peg$literalExpectation("CONDITION", false);
  var peg$e176 = peg$literalExpectation("CONNECTION", false);
  var peg$e177 = peg$literalExpectation("CONSISTENT", false);
  var peg$e178 = peg$literalExpectation("CONSTRAINT", false);
  var peg$e179 = peg$literalExpectation("CONSTRAINT_CATALOG", false);
  var peg$e180 = peg$literalExpectation("CONSTRAINT_NAME", false);
  var peg$e181 = peg$literalExpectation("CONSTRAINT_SCHEMA", false);
  var peg$e182 = peg$literalExpectation("CONTAINS", false);
  var peg$e183 = peg$literalExpectation("CONTEXT", false);
  var peg$e184 = peg$literalExpectation("CONTINUE", false);
  var peg$e185 = peg$literalExpectation("CONTRIBUTORS", false);
  var peg$e186 = peg$literalExpectation("CONVERT", false);
  var peg$e187 = peg$literalExpectation("COUNT", false);
  var peg$e188 = peg$literalExpectation("CPU", false);
  var peg$e189 = peg$literalExpectation("CREATE", false);
  var peg$e190 = peg$literalExpectation("CROSS", false);
  var peg$e191 = peg$literalExpectation("CUBE", false);
  var peg$e192 = peg$literalExpectation("CURDATE", false);
  var peg$e193 = peg$literalExpectation("CURRENT", false);
  var peg$e194 = peg$literalExpectation("CURRENT_DATE", false);
  var peg$e195 = peg$literalExpectation("CURRENT_TIME", false);
  var peg$e196 = peg$literalExpectation("CURRENT_TIMESTAMP", false);
  var peg$e197 = peg$literalExpectation("CURRENT_USER", false);
  var peg$e198 = peg$literalExpectation("CURSOR", false);
  var peg$e199 = peg$literalExpectation("CURSOR_NAME", false);
  var peg$e200 = peg$literalExpectation("CURTIME", false);
  var peg$e201 = peg$literalExpectation("DATABASE", false);
  var peg$e202 = peg$literalExpectation("DATABASES", false);
  var peg$e203 = peg$literalExpectation("DATAFILE", false);
  var peg$e204 = peg$literalExpectation("DATA", false);
  var peg$e205 = peg$literalExpectation("DATETIME", false);
  var peg$e206 = peg$literalExpectation("DATE_ADD", false);
  var peg$e207 = peg$literalExpectation("DATE_SUB", false);
  var peg$e208 = peg$literalExpectation("DATE", false);
  var peg$e209 = peg$literalExpectation("DAYOFMONTH", false);
  var peg$e210 = peg$literalExpectation("DAY_HOUR", false);
  var peg$e211 = peg$literalExpectation("DAY_MICROSECOND", false);
  var peg$e212 = peg$literalExpectation("DAY_MINUTE", false);
  var peg$e213 = peg$literalExpectation("DAY_SECOND", false);
  var peg$e214 = peg$literalExpectation("DAY", false);
  var peg$e215 = peg$literalExpectation("DEALLOCATE", false);
  var peg$e216 = peg$literalExpectation("DEC", false);
  var peg$e217 = peg$literalExpectation("DECIMAL_NUM", false);
  var peg$e218 = peg$literalExpectation("DECIMAL", false);
  var peg$e219 = peg$literalExpectation("DECLARE", false);
  var peg$e220 = peg$literalExpectation("DEFAULT", false);
  var peg$e221 = peg$literalExpectation("DEFAULT_AUTH", false);
  var peg$e222 = peg$literalExpectation("DEFINER", false);
  var peg$e223 = peg$literalExpectation("DELAYED", false);
  var peg$e224 = peg$literalExpectation("DELAY_KEY_WRITE", false);
  var peg$e225 = peg$literalExpectation("DELETE", false);
  var peg$e226 = peg$literalExpectation("DESC", false);
  var peg$e227 = peg$literalExpectation("DESCRIBE", false);
  var peg$e228 = peg$literalExpectation("DES_KEY_FILE", false);
  var peg$e229 = peg$literalExpectation("DETERMINISTIC", false);
  var peg$e230 = peg$literalExpectation("DIAGNOSTICS", false);
  var peg$e231 = peg$literalExpectation("DIRECTORY", false);
  var peg$e232 = peg$literalExpectation("DISABLE", false);
  var peg$e233 = peg$literalExpectation("DISCARD", false);
  var peg$e234 = peg$literalExpectation("DISK", false);
  var peg$e235 = peg$literalExpectation("DISTINCT", false);
  var peg$e236 = peg$literalExpectation("DISTINCTROW", false);
  var peg$e237 = peg$literalExpectation("DIV", false);
  var peg$e238 = peg$literalExpectation("DOUBLE", false);
  var peg$e239 = peg$literalExpectation("DO", false);
  var peg$e240 = peg$literalExpectation("DROP", false);
  var peg$e241 = peg$literalExpectation("DUAL", false);
  var peg$e242 = peg$literalExpectation("DUMPFILE", false);
  var peg$e243 = peg$literalExpectation("DUPLICATE", false);
  var peg$e244 = peg$literalExpectation("DYNAMIC", false);
  var peg$e245 = peg$literalExpectation("EACH", false);
  var peg$e246 = peg$literalExpectation("ELSE", false);
  var peg$e247 = peg$literalExpectation("ELSEIF", false);
  var peg$e248 = peg$literalExpectation("ENABLE", false);
  var peg$e249 = peg$literalExpectation("ENCLOSED", false);
  var peg$e250 = peg$literalExpectation("ENCRYPTION", false);
  var peg$e251 = peg$literalExpectation("END", false);
  var peg$e252 = peg$literalExpectation("ENDS", false);
  var peg$e253 = peg$literalExpectation("END_OF_INPUT", false);
  var peg$e254 = peg$literalExpectation("ENGINES", false);
  var peg$e255 = peg$literalExpectation("ENGINE", false);
  var peg$e256 = peg$literalExpectation("ENUM", false);
  var peg$e257 = peg$literalExpectation("ERROR", false);
  var peg$e258 = peg$literalExpectation("ERRORS", false);
  var peg$e259 = peg$literalExpectation("ESCAPED", false);
  var peg$e260 = peg$literalExpectation("ESCAPE", false);
  var peg$e261 = peg$literalExpectation("EVENTS", false);
  var peg$e262 = peg$literalExpectation("EVENT", false);
  var peg$e263 = peg$literalExpectation("EVERY", false);
  var peg$e264 = peg$literalExpectation("EXCHANGE", false);
  var peg$e265 = peg$literalExpectation("EXECUTE", false);
  var peg$e266 = peg$literalExpectation("EXISTS", false);
  var peg$e267 = peg$literalExpectation("EXIT", false);
  var peg$e268 = peg$literalExpectation("EXPANSION", false);
  var peg$e269 = peg$literalExpectation("EXPIRE", false);
  var peg$e270 = peg$literalExpectation("EXPLAIN", false);
  var peg$e271 = peg$literalExpectation("EXPORT", false);
  var peg$e272 = peg$literalExpectation("EXTENDED", false);
  var peg$e273 = peg$literalExpectation("EXTENT_SIZE", false);
  var peg$e274 = peg$literalExpectation("EXTRACT", false);
  var peg$e275 = peg$literalExpectation("FALSE", false);
  var peg$e276 = peg$literalExpectation("FAST", false);
  var peg$e277 = peg$literalExpectation("FAULTS", false);
  var peg$e278 = peg$literalExpectation("FETCH", false);
  var peg$e279 = peg$literalExpectation("FIELDS", false);
  var peg$e280 = peg$literalExpectation("FILE", false);
  var peg$e281 = peg$literalExpectation("FILE_BLOCK_SIZE", false);
  var peg$e282 = peg$literalExpectation("FILTER", false);
  var peg$e283 = peg$literalExpectation("FIRST", false);
  var peg$e284 = peg$literalExpectation("FIXED", false);
  var peg$e285 = peg$literalExpectation("FLOAT4", false);
  var peg$e286 = peg$literalExpectation("FLOAT8", false);
  var peg$e287 = peg$literalExpectation("FLOAT", false);
  var peg$e288 = peg$literalExpectation("FLUSH", false);
  var peg$e289 = peg$literalExpectation("FOLLOWS", false);
  var peg$e290 = peg$literalExpectation("FORCE", false);
  var peg$e291 = peg$literalExpectation("FOREIGN", false);
  var peg$e292 = peg$literalExpectation("FOR", false);
  var peg$e293 = peg$literalExpectation("FORMAT", false);
  var peg$e294 = peg$literalExpectation("FOUND", false);
  var peg$e295 = peg$literalExpectation("FROM", false);
  var peg$e296 = peg$literalExpectation("FULL", false);
  var peg$e297 = peg$literalExpectation("FULLTEXT", false);
  var peg$e298 = peg$literalExpectation("FUNCTION", false);
  var peg$e299 = peg$literalExpectation("GET", false);
  var peg$e300 = peg$literalExpectation("GENERAL", false);
  var peg$e301 = peg$literalExpectation("GENERATED", false);
  var peg$e302 = peg$literalExpectation("GROUP_REPLICATION", false);
  var peg$e303 = peg$literalExpectation("GEOMETRYCOLLECTION", false);
  var peg$e304 = peg$literalExpectation("GEOMETRY", false);
  var peg$e305 = peg$literalExpectation("GET_FORMAT", false);
  var peg$e306 = peg$literalExpectation("GLOBAL", false);
  var peg$e307 = peg$literalExpectation("GRANT", false);
  var peg$e308 = peg$literalExpectation("GRANTS", false);
  var peg$e309 = peg$literalExpectation("GROUP", false);
  var peg$e310 = peg$literalExpectation("GROUP_CONCAT", false);
  var peg$e311 = peg$literalExpectation("HANDLER", false);
  var peg$e312 = peg$literalExpectation("HASH", false);
  var peg$e313 = peg$literalExpectation("HAVING", false);
  var peg$e314 = peg$literalExpectation("HELP", false);
  var peg$e315 = peg$literalExpectation("HIGH_PRIORITY", false);
  var peg$e316 = peg$literalExpectation("HOST", false);
  var peg$e317 = peg$literalExpectation("HOSTS", false);
  var peg$e318 = peg$literalExpectation("HOUR_MICROSECOND", false);
  var peg$e319 = peg$literalExpectation("HOUR_MINUTE", false);
  var peg$e320 = peg$literalExpectation("HOUR_SECOND", false);
  var peg$e321 = peg$literalExpectation("HOUR", false);
  var peg$e322 = peg$literalExpectation("IDENTIFIED", false);
  var peg$e323 = peg$literalExpectation("IF", false);
  var peg$e324 = peg$literalExpectation("IGNORE", false);
  var peg$e325 = peg$literalExpectation("IGNORE_SERVER_IDS", false);
  var peg$e326 = peg$literalExpectation("IMPORT", false);
  var peg$e327 = peg$literalExpectation("INDEXES", false);
  var peg$e328 = peg$literalExpectation("INDEX", false);
  var peg$e329 = peg$literalExpectation("INFILE", false);
  var peg$e330 = peg$literalExpectation("INITIAL_SIZE", false);
  var peg$e331 = peg$literalExpectation("INNER", false);
  var peg$e332 = peg$literalExpectation("INOUT", false);
  var peg$e333 = peg$literalExpectation("INSENSITIVE", false);
  var peg$e334 = peg$literalExpectation("INSERT", false);
  var peg$e335 = peg$literalExpectation("INSERT_METHOD", false);
  var peg$e336 = peg$literalExpectation("INSTANCE", false);
  var peg$e337 = peg$literalExpectation("INSTALL", false);
  var peg$e338 = peg$literalExpectation("INTEGER", false);
  var peg$e339 = peg$literalExpectation("INTERVAL", false);
  var peg$e340 = peg$literalExpectation("INTO", false);
  var peg$e341 = peg$literalExpectation("INT", false);
  var peg$e342 = peg$literalExpectation("INVOKER", false);
  var peg$e343 = peg$literalExpectation("IN", false);
  var peg$e344 = peg$literalExpectation("IO_AFTER_GTIDS", false);
  var peg$e345 = peg$literalExpectation("IO_BEFORE_GTIDS", false);
  var peg$e346 = peg$literalExpectation("IO_THREAD", false);
  var peg$e347 = peg$literalExpectation("IO", false);
  var peg$e348 = peg$literalExpectation("IPC", false);
  var peg$e349 = peg$literalExpectation("IS", false);
  var peg$e350 = peg$literalExpectation("ISOLATION", false);
  var peg$e351 = peg$literalExpectation("ISSUER", false);
  var peg$e352 = peg$literalExpectation("ITERATE", false);
  var peg$e353 = peg$literalExpectation("JOIN", false);
  var peg$e354 = peg$literalExpectation("JSON", false);
  var peg$e355 = peg$literalExpectation("KEYS", false);
  var peg$e356 = peg$literalExpectation("KEY_BLOCK_SIZE", false);
  var peg$e357 = peg$literalExpectation("KEY", false);
  var peg$e358 = peg$literalExpectation("KILL", false);
  var peg$e359 = peg$literalExpectation("LANGUAGE", false);
  var peg$e360 = peg$literalExpectation("LAST", false);
  var peg$e361 = peg$literalExpectation("LEADING", false);
  var peg$e362 = peg$literalExpectation("LEAVES", false);
  var peg$e363 = peg$literalExpectation("LEAVE", false);
  var peg$e364 = peg$literalExpectation("LEFT", false);
  var peg$e365 = peg$literalExpectation("LESS", false);
  var peg$e366 = peg$literalExpectation("LEVEL", false);
  var peg$e367 = peg$literalExpectation("LIKE", false);
  var peg$e368 = peg$literalExpectation("LIMIT", false);
  var peg$e369 = peg$literalExpectation("LINEAR", false);
  var peg$e370 = peg$literalExpectation("LINES", false);
  var peg$e371 = peg$literalExpectation("LINESTRING", false);
  var peg$e372 = peg$literalExpectation("LIST", false);
  var peg$e373 = peg$literalExpectation("LOAD", false);
  var peg$e374 = peg$literalExpectation("LOCALTIME", false);
  var peg$e375 = peg$literalExpectation("LOCALTIMESTAMP", false);
  var peg$e376 = peg$literalExpectation("LOCAL", false);
  var peg$e377 = peg$literalExpectation("LOCATOR", false);
  var peg$e378 = peg$literalExpectation("LOCKS", false);
  var peg$e379 = peg$literalExpectation("LOCK", false);
  var peg$e380 = peg$literalExpectation("LOGFILE", false);
  var peg$e381 = peg$literalExpectation("LOGS", false);
  var peg$e382 = peg$literalExpectation("LONGBLOB", false);
  var peg$e383 = peg$literalExpectation("LONGTEXT", false);
  var peg$e384 = peg$literalExpectation("LONG_NUM", false);
  var peg$e385 = peg$literalExpectation("LONG", false);
  var peg$e386 = peg$literalExpectation("LOOP", false);
  var peg$e387 = peg$literalExpectation("LOW_PRIORITY", false);
  var peg$e388 = peg$literalExpectation("MASTER_AUTO_POSITION", false);
  var peg$e389 = peg$literalExpectation("MASTER_BIND", false);
  var peg$e390 = peg$literalExpectation("MASTER_CONNECT_RETRY", false);
  var peg$e391 = peg$literalExpectation("MASTER_DELAY", false);
  var peg$e392 = peg$literalExpectation("MASTER_HOST", false);
  var peg$e393 = peg$literalExpectation("MASTER_LOG_FILE", false);
  var peg$e394 = peg$literalExpectation("MASTER_LOG_POS", false);
  var peg$e395 = peg$literalExpectation("MASTER_PASSWORD", false);
  var peg$e396 = peg$literalExpectation("MASTER_PORT", false);
  var peg$e397 = peg$literalExpectation("MASTER_RETRY_COUNT", false);
  var peg$e398 = peg$literalExpectation("MASTER_SERVER_ID", false);
  var peg$e399 = peg$literalExpectation("MASTER_SSL_CAPATH", false);
  var peg$e400 = peg$literalExpectation("MASTER_SSL_CA", false);
  var peg$e401 = peg$literalExpectation("MASTER_SSL_CERT", false);
  var peg$e402 = peg$literalExpectation("MASTER_SSL_CIPHER", false);
  var peg$e403 = peg$literalExpectation("MASTER_SSL_CRL", false);
  var peg$e404 = peg$literalExpectation("MASTER_SSL_CRLPATH", false);
  var peg$e405 = peg$literalExpectation("MASTER_SSL_KEY", false);
  var peg$e406 = peg$literalExpectation("MASTER_SSL", false);
  var peg$e407 = peg$literalExpectation("MASTER_SSL_VERIFY_SERVER_CERT", false);
  var peg$e408 = peg$literalExpectation("MASTER", false);
  var peg$e409 = peg$literalExpectation("MASTER_TLS_VERSION", false);
  var peg$e410 = peg$literalExpectation("MASTER_USER", false);
  var peg$e411 = peg$literalExpectation("MASTER_HEARTBEAT_PERIOD", false);
  var peg$e412 = peg$literalExpectation("MATCH", false);
  var peg$e413 = peg$literalExpectation("MAX_CONNECTIONS_PER_HOUR", false);
  var peg$e414 = peg$literalExpectation("MAX_QUERIES_PER_HOUR", false);
  var peg$e415 = peg$literalExpectation("MAX_ROWS", false);
  var peg$e416 = peg$literalExpectation("MAX_SIZE", false);
  var peg$e417 = peg$literalExpectation("MAX_STATEMENT_TIME", false);
  var peg$e418 = peg$literalExpectation("MAX", false);
  var peg$e419 = peg$literalExpectation("MAX_UPDATES_PER_HOUR", false);
  var peg$e420 = peg$literalExpectation("MAX_USER_CONNECTIONS", false);
  var peg$e421 = peg$literalExpectation("MAXVALUE", false);
  var peg$e422 = peg$literalExpectation("MEDIUMBLOB", false);
  var peg$e423 = peg$literalExpectation("MEDIUMINT", false);
  var peg$e424 = peg$literalExpectation("MEDIUMTEXT", false);
  var peg$e425 = peg$literalExpectation("MEDIUM", false);
  var peg$e426 = peg$literalExpectation("MEMORY", false);
  var peg$e427 = peg$literalExpectation("MERGE", false);
  var peg$e428 = peg$literalExpectation("MESSAGE_TEXT", false);
  var peg$e429 = peg$literalExpectation("MICROSECOND", false);
  var peg$e430 = peg$literalExpectation("MID", false);
  var peg$e431 = peg$literalExpectation("MIDDLEINT", false);
  var peg$e432 = peg$literalExpectation("MIGRATE", false);
  var peg$e433 = peg$literalExpectation("MINUTE_MICROSECOND", false);
  var peg$e434 = peg$literalExpectation("MINUTE_SECOND", false);
  var peg$e435 = peg$literalExpectation("MINUTE", false);
  var peg$e436 = peg$literalExpectation("MIN_ROWS", false);
  var peg$e437 = peg$literalExpectation("MIN", false);
  var peg$e438 = peg$literalExpectation("MODE", false);
  var peg$e439 = peg$literalExpectation("MODIFIES", false);
  var peg$e440 = peg$literalExpectation("MODIFY", false);
  var peg$e441 = peg$literalExpectation("MOD", false);
  var peg$e442 = peg$literalExpectation("MONTH", false);
  var peg$e443 = peg$literalExpectation("MULTILINESTRING", false);
  var peg$e444 = peg$literalExpectation("MULTIPOINT", false);
  var peg$e445 = peg$literalExpectation("MULTIPOLYGON", false);
  var peg$e446 = peg$literalExpectation("MUTEX", false);
  var peg$e447 = peg$literalExpectation("MYSQL_ERRNO", false);
  var peg$e448 = peg$literalExpectation("NAMES", false);
  var peg$e449 = peg$literalExpectation("NAME", false);
  var peg$e450 = peg$literalExpectation("NATIONAL", false);
  var peg$e451 = peg$literalExpectation("NATURAL", false);
  var peg$e452 = peg$literalExpectation("NCHAR_STRING", false);
  var peg$e453 = peg$literalExpectation("NCHAR", false);
  var peg$e454 = peg$literalExpectation("NDB", false);
  var peg$e455 = peg$literalExpectation("NDBCLUSTER", false);
  var peg$e456 = peg$literalExpectation("NEG", false);
  var peg$e457 = peg$literalExpectation("NEVER", false);
  var peg$e458 = peg$literalExpectation("NEW", false);
  var peg$e459 = peg$literalExpectation("NEXT", false);
  var peg$e460 = peg$literalExpectation("NODEGROUP", false);
  var peg$e461 = peg$literalExpectation("NONE", false);
  var peg$e462 = peg$literalExpectation("NONBLOCKING", false);
  var peg$e463 = peg$literalExpectation("NOT", false);
  var peg$e464 = peg$literalExpectation("NOW", false);
  var peg$e465 = peg$literalExpectation("NO", false);
  var peg$e466 = peg$literalExpectation("NO_WAIT", false);
  var peg$e467 = peg$literalExpectation("NO_WRITE_TO_BINLOG", false);
  var peg$e468 = peg$literalExpectation("NULL", false);
  var peg$e469 = peg$literalExpectation("NUMBER", false);
  var peg$e470 = peg$literalExpectation("NUMERIC", false);
  var peg$e471 = peg$literalExpectation("NVARCHAR", false);
  var peg$e472 = peg$literalExpectation("OFFLINE", false);
  var peg$e473 = peg$literalExpectation("OFFSET", false);
  var peg$e474 = peg$literalExpectation("OLD_PASSWORD", false);
  var peg$e475 = peg$literalExpectation("ON", false);
  var peg$e476 = peg$literalExpectation("ONE", false);
  var peg$e477 = peg$literalExpectation("ONLINE", false);
  var peg$e478 = peg$literalExpectation("ONLY", false);
  var peg$e479 = peg$literalExpectation("OPEN", false);
  var peg$e480 = peg$literalExpectation("OPTIMIZE", false);
  var peg$e481 = peg$literalExpectation("OPTIMIZER_COSTS", false);
  var peg$e482 = peg$literalExpectation("OPTIONS", false);
  var peg$e483 = peg$literalExpectation("OPTION", false);
  var peg$e484 = peg$literalExpectation("OPTIONALLY", false);
  var peg$e485 = peg$literalExpectation("ORDER", false);
  var peg$e486 = peg$literalExpectation("OR", false);
  var peg$e487 = peg$literalExpectation("OUTER", false);
  var peg$e488 = peg$literalExpectation("OUTFILE", false);
  var peg$e489 = peg$literalExpectation("OUT", false);
  var peg$e490 = peg$literalExpectation("OWNER", false);
  var peg$e491 = peg$literalExpectation("PACK_KEYS", false);
  var peg$e492 = peg$literalExpectation("PAGE", false);
  var peg$e493 = peg$literalExpectation("PARSER", false);
  var peg$e494 = peg$literalExpectation("PARTIAL", false);
  var peg$e495 = peg$literalExpectation("PARTITIONING", false);
  var peg$e496 = peg$literalExpectation("PARTITIONS", false);
  var peg$e497 = peg$literalExpectation("PARTITION", false);
  var peg$e498 = peg$literalExpectation("PASSWORD", false);
  var peg$e499 = peg$literalExpectation("PHASE", false);
  var peg$e500 = peg$literalExpectation("PLUGINS", false);
  var peg$e501 = peg$literalExpectation("PLUGIN_DIR", false);
  var peg$e502 = peg$literalExpectation("PLUGIN", false);
  var peg$e503 = peg$literalExpectation("POINT", false);
  var peg$e504 = peg$literalExpectation("POLYGON", false);
  var peg$e505 = peg$literalExpectation("PORT", false);
  var peg$e506 = peg$literalExpectation("POSITION", false);
  var peg$e507 = peg$literalExpectation("PRECEDES", false);
  var peg$e508 = peg$literalExpectation("PRECISION", false);
  var peg$e509 = peg$literalExpectation("PREPARE", false);
  var peg$e510 = peg$literalExpectation("PRESERVE", false);
  var peg$e511 = peg$literalExpectation("PREV", false);
  var peg$e512 = peg$literalExpectation("PRIMARY", false);
  var peg$e513 = peg$literalExpectation("PRIVILEGES", false);
  var peg$e514 = peg$literalExpectation("PROCEDURE", false);
  var peg$e515 = peg$literalExpectation("PROCESS", false);
  var peg$e516 = peg$literalExpectation("PROCESSLIST", false);
  var peg$e517 = peg$literalExpectation("PROFILE", false);
  var peg$e518 = peg$literalExpectation("PROFILES", false);
  var peg$e519 = peg$literalExpectation("PROXY", false);
  var peg$e520 = peg$literalExpectation("PURGE", false);
  var peg$e521 = peg$literalExpectation("QUARTER", false);
  var peg$e522 = peg$literalExpectation("QUERY", false);
  var peg$e523 = peg$literalExpectation("QUICK", false);
  var peg$e524 = peg$literalExpectation("RANGE", false);
  var peg$e525 = peg$literalExpectation("READS", false);
  var peg$e526 = peg$literalExpectation("READ_ONLY", false);
  var peg$e527 = peg$literalExpectation("READ", false);
  var peg$e528 = peg$literalExpectation("READ_WRITE", false);
  var peg$e529 = peg$literalExpectation("REAL", false);
  var peg$e530 = peg$literalExpectation("REBUILD", false);
  var peg$e531 = peg$literalExpectation("RECOVER", false);
  var peg$e532 = peg$literalExpectation("REDOFILE", false);
  var peg$e533 = peg$literalExpectation("REDO_BUFFER_SIZE", false);
  var peg$e534 = peg$literalExpectation("REDUNDANT", false);
  var peg$e535 = peg$literalExpectation("REFERENCES", false);
  var peg$e536 = peg$literalExpectation("REGEXP", false);
  var peg$e537 = peg$literalExpectation("RELAY", false);
  var peg$e538 = peg$literalExpectation("RELAYLOG", false);
  var peg$e539 = peg$literalExpectation("RELAY_LOG_FILE", false);
  var peg$e540 = peg$literalExpectation("RELAY_LOG_POS", false);
  var peg$e541 = peg$literalExpectation("RELAY_THREAD", false);
  var peg$e542 = peg$literalExpectation("RELEASE", false);
  var peg$e543 = peg$literalExpectation("RELOAD", false);
  var peg$e544 = peg$literalExpectation("REMOVE", false);
  var peg$e545 = peg$literalExpectation("RENAME", false);
  var peg$e546 = peg$literalExpectation("REORGANIZE", false);
  var peg$e547 = peg$literalExpectation("REPAIR", false);
  var peg$e548 = peg$literalExpectation("REPEATABLE", false);
  var peg$e549 = peg$literalExpectation("REPEAT", false);
  var peg$e550 = peg$literalExpectation("REPLACE", false);
  var peg$e551 = peg$literalExpectation("REPLICATION", false);
  var peg$e552 = peg$literalExpectation("REPLICATE_DO_DB", false);
  var peg$e553 = peg$literalExpectation("REPLICATE_IGNORE_DB", false);
  var peg$e554 = peg$literalExpectation("REPLICATE_DO_TABLE", false);
  var peg$e555 = peg$literalExpectation("REPLICATE_IGNORE_TABLE", false);
  var peg$e556 = peg$literalExpectation("REPLICATE_WILD_DO_TABLE", false);
  var peg$e557 = peg$literalExpectation("REPLICATE_WILD_IGNORE_TABLE", false);
  var peg$e558 = peg$literalExpectation("REPLICATE_REWRITE_DB", false);
  var peg$e559 = peg$literalExpectation("REQUIRE", false);
  var peg$e560 = peg$literalExpectation("RESET", false);
  var peg$e561 = peg$literalExpectation("RESIGNAL", false);
  var peg$e562 = peg$literalExpectation("RESTORE", false);
  var peg$e563 = peg$literalExpectation("RESTRICT", false);
  var peg$e564 = peg$literalExpectation("RESUME", false);
  var peg$e565 = peg$literalExpectation("RETURNED_SQLSTATE", false);
  var peg$e566 = peg$literalExpectation("RETURNS", false);
  var peg$e567 = peg$literalExpectation("RETURN", false);
  var peg$e568 = peg$literalExpectation("REVERSE", false);
  var peg$e569 = peg$literalExpectation("REVOKE", false);
  var peg$e570 = peg$literalExpectation("RIGHT", false);
  var peg$e571 = peg$literalExpectation("RLIKE", false);
  var peg$e572 = peg$literalExpectation("ROLLBACK", false);
  var peg$e573 = peg$literalExpectation("ROLLUP", false);
  var peg$e574 = peg$literalExpectation("ROTATE", false);
  var peg$e575 = peg$literalExpectation("ROUTINE", false);
  var peg$e576 = peg$literalExpectation("ROWS", false);
  var peg$e577 = peg$literalExpectation("ROW_COUNT", false);
  var peg$e578 = peg$literalExpectation("ROW_FORMAT", false);
  var peg$e579 = peg$literalExpectation("ROW", false);
  var peg$e580 = peg$literalExpectation("RTREE", false);
  var peg$e581 = peg$literalExpectation("SAVEPOINT", false);
  var peg$e582 = peg$literalExpectation("SCHEDULE", false);
  var peg$e583 = peg$literalExpectation("SCHEMA", false);
  var peg$e584 = peg$literalExpectation("SCHEMA_NAME", false);
  var peg$e585 = peg$literalExpectation("SCHEMAS", false);
  var peg$e586 = peg$literalExpectation("SECOND_MICROSECOND", false);
  var peg$e587 = peg$literalExpectation("SECOND", false);
  var peg$e588 = peg$literalExpectation("SECURITY", false);
  var peg$e589 = peg$literalExpectation("SELECT", false);
  var peg$e590 = peg$literalExpectation("SENSITIVE", false);
  var peg$e591 = peg$literalExpectation("SEPARATOR", false);
  var peg$e592 = peg$literalExpectation("SERIALIZABLE", false);
  var peg$e593 = peg$literalExpectation("SERIAL", false);
  var peg$e594 = peg$literalExpectation("SESSION", false);
  var peg$e595 = peg$literalExpectation("SERVER", false);
  var peg$e596 = peg$literalExpectation("SERVER_OPTIONS", false);
  var peg$e597 = peg$literalExpectation("SESSION_USER", false);
  var peg$e598 = peg$literalExpectation("SET", false);
  var peg$e599 = peg$literalExpectation("SET_VAR", false);
  var peg$e600 = peg$literalExpectation("SHARE", false);
  var peg$e601 = peg$literalExpectation("SHOW", false);
  var peg$e602 = peg$literalExpectation("SHUTDOWN", false);
  var peg$e603 = peg$literalExpectation("SIGNAL", false);
  var peg$e604 = peg$literalExpectation("SIGNED", false);
  var peg$e605 = peg$literalExpectation("SIMPLE", false);
  var peg$e606 = peg$literalExpectation("SLAVE", false);
  var peg$e607 = peg$literalExpectation("SLOW", false);
  var peg$e608 = peg$literalExpectation("SMALLINT", false);
  var peg$e609 = peg$literalExpectation("SNAPSHOT", false);
  var peg$e610 = peg$literalExpectation("SOME", false);
  var peg$e611 = peg$literalExpectation("SOCKET", false);
  var peg$e612 = peg$literalExpectation("SONAME", false);
  var peg$e613 = peg$literalExpectation("SOUNDS", false);
  var peg$e614 = peg$literalExpectation("SOURCE", false);
  var peg$e615 = peg$literalExpectation("SPATIAL", false);
  var peg$e616 = peg$literalExpectation("SPECIFIC", false);
  var peg$e617 = peg$literalExpectation("SQLEXCEPTION", false);
  var peg$e618 = peg$literalExpectation("SQLSTATE", false);
  var peg$e619 = peg$literalExpectation("SQLWARNING", false);
  var peg$e620 = peg$literalExpectation("SQL_AFTER_GTIDS", false);
  var peg$e621 = peg$literalExpectation("SQL_AFTER_MTS_GAPS", false);
  var peg$e622 = peg$literalExpectation("SQL_BEFORE_GTIDS", false);
  var peg$e623 = peg$literalExpectation("SQL_BIG_RESULT", false);
  var peg$e624 = peg$literalExpectation("SQL_BUFFER_RESULT", false);
  var peg$e625 = peg$literalExpectation("SQL_CACHE", false);
  var peg$e626 = peg$literalExpectation("SQL_CALC_FOUND_ROWS", false);
  var peg$e627 = peg$literalExpectation("SQL_NO_CACHE", false);
  var peg$e628 = peg$literalExpectation("SQL_SMALL_RESULT", false);
  var peg$e629 = peg$literalExpectation("SQL", false);
  var peg$e630 = peg$literalExpectation("SQL_THREAD", false);
  var peg$e631 = peg$literalExpectation("SSL", false);
  var peg$e632 = peg$literalExpectation("STACKED", false);
  var peg$e633 = peg$literalExpectation("STARTING", false);
  var peg$e634 = peg$literalExpectation("STARTS", false);
  var peg$e635 = peg$literalExpectation("START", false);
  var peg$e636 = peg$literalExpectation("STATS_AUTO_RECALC", false);
  var peg$e637 = peg$literalExpectation("STATS_PERSISTENT", false);
  var peg$e638 = peg$literalExpectation("STATS_SAMPLE_PAGES", false);
  var peg$e639 = peg$literalExpectation("STATUS", false);
  var peg$e640 = peg$literalExpectation("STDDEV_SAMP", false);
  var peg$e641 = peg$literalExpectation("STDDEV", false);
  var peg$e642 = peg$literalExpectation("STDDEV_POP", false);
  var peg$e643 = peg$literalExpectation("STD", false);
  var peg$e644 = peg$literalExpectation("STOP", false);
  var peg$e645 = peg$literalExpectation("STORAGE", false);
  var peg$e646 = peg$literalExpectation("STORED", false);
  var peg$e647 = peg$literalExpectation("STRAIGHT_JOIN", false);
  var peg$e648 = peg$literalExpectation("STRING", false);
  var peg$e649 = peg$literalExpectation("SUBCLASS_ORIGIN", false);
  var peg$e650 = peg$literalExpectation("SUBDATE", false);
  var peg$e651 = peg$literalExpectation("SUBJECT", false);
  var peg$e652 = peg$literalExpectation("SUBPARTITIONS", false);
  var peg$e653 = peg$literalExpectation("SUBPARTITION", false);
  var peg$e654 = peg$literalExpectation("SUBSTR", false);
  var peg$e655 = peg$literalExpectation("SUBSTRING", false);
  var peg$e656 = peg$literalExpectation("SUM", false);
  var peg$e657 = peg$literalExpectation("SUPER", false);
  var peg$e658 = peg$literalExpectation("SUSPEND", false);
  var peg$e659 = peg$literalExpectation("SWAPS", false);
  var peg$e660 = peg$literalExpectation("SWITCHES", false);
  var peg$e661 = peg$literalExpectation("SYSDATE", false);
  var peg$e662 = peg$literalExpectation("SYSTEM_USER", false);
  var peg$e663 = peg$literalExpectation("TABLES", false);
  var peg$e664 = peg$literalExpectation("TABLESPACE", false);
  var peg$e665 = peg$literalExpectation("TABLE_REF_PRIORITY", false);
  var peg$e666 = peg$literalExpectation("TABLE", false);
  var peg$e667 = peg$literalExpectation("TABLE_CHECKSUM", false);
  var peg$e668 = peg$literalExpectation("TABLE_NAME", false);
  var peg$e669 = peg$literalExpectation("TEMPORARY", false);
  var peg$e670 = peg$literalExpectation("TEMPTABLE", false);
  var peg$e671 = peg$literalExpectation("TERMINATED", false);
  var peg$e672 = peg$literalExpectation("TEXT", false);
  var peg$e673 = peg$literalExpectation("THAN", false);
  var peg$e674 = peg$literalExpectation("THEN", false);
  var peg$e675 = peg$literalExpectation("TIMESTAMP", false);
  var peg$e676 = peg$literalExpectation("TIMESTAMP_ADD", false);
  var peg$e677 = peg$literalExpectation("TIMESTAMP_DIFF", false);
  var peg$e678 = peg$literalExpectation("TIME", false);
  var peg$e679 = peg$literalExpectation("TINYBLOB", false);
  var peg$e680 = peg$literalExpectation("TINYINT", false);
  var peg$e681 = peg$literalExpectation("TINYTEXT", false);
  var peg$e682 = peg$literalExpectation("TO", false);
  var peg$e683 = peg$literalExpectation("TRAILING", false);
  var peg$e684 = peg$literalExpectation("TRANSACTION", false);
  var peg$e685 = peg$literalExpectation("TRIGGERS", false);
  var peg$e686 = peg$literalExpectation("TRIGGER", false);
  var peg$e687 = peg$literalExpectation("TRIM", false);
  var peg$e688 = peg$literalExpectation("TRUE", false);
  var peg$e689 = peg$literalExpectation("TRUNCATE", false);
  var peg$e690 = peg$literalExpectation("TYPES", false);
  var peg$e691 = peg$literalExpectation("TYPE", false);
  var peg$e692 = peg$literalExpectation("UDF_RETURNS", false);
  var peg$e693 = peg$literalExpectation("UNCOMMITTED", false);
  var peg$e694 = peg$literalExpectation("UNDEFINED", false);
  var peg$e695 = peg$literalExpectation("UNDOFILE", false);
  var peg$e696 = peg$literalExpectation("UNDO_BUFFER_SIZE", false);
  var peg$e697 = peg$literalExpectation("UNDO", false);
  var peg$e698 = peg$literalExpectation("UNICODE", false);
  var peg$e699 = peg$literalExpectation("UNINSTALL", false);
  var peg$e700 = peg$literalExpectation("UNION", false);
  var peg$e701 = peg$literalExpectation("UNIQUE", false);
  var peg$e702 = peg$literalExpectation("UNKNOWN", false);
  var peg$e703 = peg$literalExpectation("UNLOCK", false);
  var peg$e704 = peg$literalExpectation("UNSIGNED", false);
  var peg$e705 = peg$literalExpectation("UNTIL", false);
  var peg$e706 = peg$literalExpectation("UPDATE", false);
  var peg$e707 = peg$literalExpectation("UPGRADE", false);
  var peg$e708 = peg$literalExpectation("USAGE", false);
  var peg$e709 = peg$literalExpectation("USER_RESOURCES", false);
  var peg$e710 = peg$literalExpectation("USER", false);
  var peg$e711 = peg$literalExpectation("USE_FRM", false);
  var peg$e712 = peg$literalExpectation("USE", false);
  var peg$e713 = peg$literalExpectation("USING", false);
  var peg$e714 = peg$literalExpectation("UTC_DATE", false);
  var peg$e715 = peg$literalExpectation("UTC_TIMESTAMP", false);
  var peg$e716 = peg$literalExpectation("UTC_TIME", false);
  var peg$e717 = peg$literalExpectation("VALIDATION", false);
  var peg$e718 = peg$literalExpectation("VALUES", false);
  var peg$e719 = peg$literalExpectation("VALUE", false);
  var peg$e720 = peg$literalExpectation("VARBINARY", false);
  var peg$e721 = peg$literalExpectation("VARCHAR", false);
  var peg$e722 = peg$literalExpectation("VARCHARACTER", false);
  var peg$e723 = peg$literalExpectation("VARIABLES", false);
  var peg$e724 = peg$literalExpectation("VARIANCE", false);
  var peg$e725 = peg$literalExpectation("VARYING", false);
  var peg$e726 = peg$literalExpectation("VAR_POP", false);
  var peg$e727 = peg$literalExpectation("VAR_SAMP", false);
  var peg$e728 = peg$literalExpectation("VIEW", false);
  var peg$e729 = peg$literalExpectation("VIRTUAL", false);
  var peg$e730 = peg$literalExpectation("WAIT", false);
  var peg$e731 = peg$literalExpectation("WARNINGS", false);
  var peg$e732 = peg$literalExpectation("WEEK", false);
  var peg$e733 = peg$literalExpectation("WEIGHT_STRING", false);
  var peg$e734 = peg$literalExpectation("WHEN", false);
  var peg$e735 = peg$literalExpectation("WHERE", false);
  var peg$e736 = peg$literalExpectation("WHILE", false);
  var peg$e737 = peg$literalExpectation("WITH", false);
  var peg$e738 = peg$literalExpectation("WITHOUT", false);
  var peg$e739 = peg$literalExpectation("WORK", false);
  var peg$e740 = peg$literalExpectation("WRAPPER", false);
  var peg$e741 = peg$literalExpectation("WRITE", false);
  var peg$e742 = peg$literalExpectation("X509", false);
  var peg$e743 = peg$literalExpectation("XA", false);
  var peg$e744 = peg$literalExpectation("XID", false);
  var peg$e745 = peg$literalExpectation("XML", false);
  var peg$e746 = peg$literalExpectation("XOR", false);
  var peg$e747 = peg$literalExpectation("YEAR_MONTH", false);
  var peg$e748 = peg$literalExpectation("YEAR", false);
  var peg$e749 = peg$literalExpectation("ZEROFILL", false);
  var peg$e750 = peg$literalExpectation("PERSIST", false);
  var peg$e751 = peg$literalExpectation("ROLE", false);
  var peg$e752 = peg$literalExpectation("ADMIN", false);
  var peg$e753 = peg$literalExpectation("INVISIBLE", false);
  var peg$e754 = peg$literalExpectation("VISIBLE", false);
  var peg$e755 = peg$literalExpectation("EXCEPT", false);
  var peg$e756 = peg$literalExpectation("COMPONENT", false);
  var peg$e757 = peg$literalExpectation("RECURSIVE", false);
  var peg$e758 = peg$literalExpectation("JSON_OBJECTAGG", false);
  var peg$e759 = peg$literalExpectation("JSON_ARRAYAGG", false);
  var peg$e760 = peg$literalExpectation("OF", false);
  var peg$e761 = peg$literalExpectation("SKIP", false);
  var peg$e762 = peg$literalExpectation("LOCKED", false);
  var peg$e763 = peg$literalExpectation("NOWAIT", false);
  var peg$e764 = peg$literalExpectation("GROUPING", false);
  var peg$e765 = peg$literalExpectation("PERSIST_ONLY", false);
  var peg$e766 = peg$literalExpectation("HISTOGRAM", false);
  var peg$e767 = peg$literalExpectation("BUCKETS", false);
  var peg$e768 = peg$literalExpectation("REMOTE", false);
  var peg$e769 = peg$literalExpectation("CLONE", false);
  var peg$e770 = peg$literalExpectation("CUME_DIST", false);
  var peg$e771 = peg$literalExpectation("DENSE_RANK", false);
  var peg$e772 = peg$literalExpectation("EXCLUDE", false);
  var peg$e773 = peg$literalExpectation("FIRST_VALUE", false);
  var peg$e774 = peg$literalExpectation("FOLLOWING", false);
  var peg$e775 = peg$literalExpectation("GROUPS", false);
  var peg$e776 = peg$literalExpectation("LAG", false);
  var peg$e777 = peg$literalExpectation("LAST_VALUE", false);
  var peg$e778 = peg$literalExpectation("LEAD", false);
  var peg$e779 = peg$literalExpectation("NTH_VALUE", false);
  var peg$e780 = peg$literalExpectation("NTILE", false);
  var peg$e781 = peg$literalExpectation("NULLS", false);
  var peg$e782 = peg$literalExpectation("OTHERS", false);
  var peg$e783 = peg$literalExpectation("OVER", false);
  var peg$e784 = peg$literalExpectation("PERCENT_RANK", false);
  var peg$e785 = peg$literalExpectation("PRECEDING", false);
  var peg$e786 = peg$literalExpectation("RANK", false);
  var peg$e787 = peg$literalExpectation("RESPECT", false);
  var peg$e788 = peg$literalExpectation("ROW_NUMBER", false);
  var peg$e789 = peg$literalExpectation("TIES", false);
  var peg$e790 = peg$literalExpectation("UNBOUNDED", false);
  var peg$e791 = peg$literalExpectation("WINDOW", false);
  var peg$e792 = peg$literalExpectation("EMPTY", false);
  var peg$e793 = peg$literalExpectation("JSON_TABLE", false);
  var peg$e794 = peg$literalExpectation("NESTED", false);
  var peg$e795 = peg$literalExpectation("ORDINALITY", false);
  var peg$e796 = peg$literalExpectation("PATH", false);
  var peg$e797 = peg$literalExpectation("HISTORY", false);
  var peg$e798 = peg$literalExpectation("REUSE", false);
  var peg$e799 = peg$literalExpectation("SRID", false);
  var peg$e800 = peg$literalExpectation("THREAD_PRIORITY", false);
  var peg$e801 = peg$literalExpectation("RESOURCE", false);
  var peg$e802 = peg$literalExpectation("SYSTEM", false);
  var peg$e803 = peg$literalExpectation("VCPU", false);
  var peg$e804 = peg$literalExpectation("MASTER_PUBLIC_KEY_PATH", false);
  var peg$e805 = peg$literalExpectation("GET_MASTER_PUBLIC_KEY_SYM", false);
  var peg$e806 = peg$literalExpectation("RESTART", false);
  var peg$e807 = peg$literalExpectation("DEFINITION", false);
  var peg$e808 = peg$literalExpectation("DESCRIPTION", false);
  var peg$e809 = peg$literalExpectation("ORGANIZATION", false);
  var peg$e810 = peg$literalExpectation("REFERENCE", false);
  var peg$e811 = peg$literalExpectation("OPTIONAL", false);
  var peg$e812 = peg$literalExpectation("SECONDARY", false);
  var peg$e813 = peg$literalExpectation("SECONDARY_ENGINE", false);
  var peg$e814 = peg$literalExpectation("SECONDARY_LOAD", false);
  var peg$e815 = peg$literalExpectation("SECONDARY_UNLOAD", false);
  var peg$e816 = peg$literalExpectation("ACTIVE", false);
  var peg$e817 = peg$literalExpectation("INACTIVE", false);
  var peg$e818 = peg$literalExpectation("LATERAL", false);
  var peg$e819 = peg$literalExpectation("RETAIN", false);
  var peg$e820 = peg$literalExpectation("OLD", false);
  var peg$e821 = peg$literalExpectation("NETWORK_NAMESPACE", false);
  var peg$e822 = peg$literalExpectation("ENFORCED", false);
  var peg$e823 = peg$literalExpectation("ARRAY", false);
  var peg$e824 = peg$literalExpectation("OJ", false);
  var peg$e825 = peg$literalExpectation("MEMBER", false);
  var peg$e826 = peg$literalExpectation("RANDOM", false);
  var peg$e827 = peg$literalExpectation("MASTER_COMPRESSION_ALGORITHM", false);
  var peg$e828 = peg$literalExpectation("MASTER_ZSTD_COMPRESSION_LEVEL", false);
  var peg$e829 = peg$literalExpectation("PRIVILEGE_CHECKS_USER", false);
  var peg$e830 = peg$literalExpectation("MASTER_TLS_CIPHERSUITES", false);
  var peg$e831 = peg$literalExpectation("REQUIRE_ROW_FORMAT", false);
  var peg$e832 = peg$literalExpectation("PASSWORD_LOCK_TIME", false);
  var peg$e833 = peg$literalExpectation("FAILED_LOGIN_ATTEMPTS", false);
  var peg$e834 = peg$literalExpectation("REQUIRE_TABLE_PRIMARY_KEY_CHECK", false);
  var peg$e835 = peg$literalExpectation("STREAM", false);
  var peg$e836 = peg$literalExpectation("OFF", false);
  var peg$e837 = peg$literalExpectation("INT1", false);
  var peg$e838 = peg$literalExpectation("INT2", false);
  var peg$e839 = peg$literalExpectation("INT3", false);
  var peg$e840 = peg$literalExpectation("INT4", false);
  var peg$e841 = peg$literalExpectation("INT8", false);
  var peg$e842 = peg$literalExpectation("SQL_TSI_SECOND", false);
  var peg$e843 = peg$literalExpectation("SQL_TSI_MINUTE", false);
  var peg$e844 = peg$literalExpectation("SQL_TSI_HOUR", false);
  var peg$e845 = peg$literalExpectation("SQL_TSI_DAY", false);
  var peg$e846 = peg$literalExpectation("SQL_TSI_WEEK", false);
  var peg$e847 = peg$literalExpectation("SQL_TSI_MONTH", false);
  var peg$e848 = peg$literalExpectation("SQL_TSI_QUARTER", false);
  var peg$e849 = peg$literalExpectation("SQL_TSI_YEAR", false);
  var peg$e850 = peg$classExpectation([" ", "\t", "\f", "\r", "\n"], false, false);
  var peg$e851 = peg$classExpectation([["\x01", "\b"], ["\v", "\f"], ["\x0E", "\x1F"], "[", "]"], false, false);

  var peg$f0 = function() { return 'NOT_EQUAL_OPERATOR'; };
  var peg$f1 = function() { return options.isSqlModeActive('PipesAsConcat') ? 'CONCAT_PIPES_SYMBOL' : 'LOGICAL_OR_OPERATOR'; };
  var peg$f2 = function() { return options.serverVersion >= 50708 ? 'JSON_SEPARATOR_SYMBOL' : null; };
  var peg$f3 = function() { return options.serverVersion >= 50713 ? 'JSON_UNQUOTED_SEPARATOR_SYMBOL' : null; };
  var peg$f4 = function() { return identifier.determineNumericType(text()); };
  var peg$f5 = function() {
      options.emitDot();
      return 'IDENTIFIER';
    };
  var peg$f6 = function() { return options.checkCharset(text()); };
  var peg$f7 = function() { return options.checkVersion(text()); };
  var peg$f8 = function() { return ''; };
  var peg$f9 = function() { options.inVersionComment = true; return ''; };
  var peg$f10 = function() { return options.inVersionComment; };
  var peg$f11 = function() { options.inVersionComment = false; return ''; };
  var peg$f12 = function() { return ''; };
  var peg$f13 = function() { return ''; };
  var peg$f14 = function() { return ''; };
  var peg$f15 = function() { return options.serverVersion >= 50707; };
  var peg$f16 = function() { return identifier.determineFunction('ADDDATE_SYMBOL'); };
  var peg$f17 = function() { return options.serverVersion >= 50707; };
  var peg$f18 = function() { return options.serverVersion < 80000; };
  var peg$f19 = function() { return identifier.determineFunction('ASCII_SYMBOL'); };
  var peg$f20 = function() { return options.serverVersion < 50700; };
  var peg$f21 = function() { return identifier.determineFunction('AVG_SYMBOL'); };
  var peg$f22 = function() { return identifier.determineFunction('BIT_AND_SYMBOL'); };
  var peg$f23 = function() { return identifier.determineFunction('BIT_OR_SYMBOL'); };
  var peg$f24 = function() { return identifier.determineFunction('BIT_XOR_SYMBOL'); };
  var peg$f25 = function() { return identifier.determineFunction('CAST_SYMBOL'); };
  var peg$f26 = function() { return options.serverVersion >= 50706; };
  var peg$f27 = function() { return 'CHAR_SYMBOL'; };
  var peg$f28 = function() { return options.serverVersion >= 50707; };
  var peg$f29 = function() { return options.serverVersion < 50700; };
  var peg$f30 = function() { return identifier.determineFunction('COUNT_SYMBOL'); };
  var peg$f31 = function() { return identifier.determineFunction('CURDATE_SYMBOL'); };
  var peg$f32 = function() { return options.serverVersion >= 50604; };
  var peg$f33 = function() { return identifier.determineFunction('CURDATE_SYMBOL'); };
  var peg$f34 = function() { return identifier.determineFunction('CURTIME_SYMBOL'); };
  var peg$f35 = function() { return 'NOW_SYMBOL'; };
  var peg$f36 = function() { return identifier.determineFunction('CURTIME_SYMBOL'); };
  var peg$f37 = function() { return identifier.determineFunction('DATE_ADD_SYMBOL'); };
  var peg$f38 = function() { return identifier.determineFunction('DATE_SUB_SYMBOL'); };
  var peg$f39 = function() { return 'DAY_SYMBOL'; };
  var peg$f40 = function() { return 'DECIMAL_SYMBOL'; };
  var peg$f41 = function() { return options.serverVersion >= 50604; };
  var peg$f42 = function() { return options.serverVersion < 80000; };
  var peg$f43 = function() { return 'DISTINCT_SYMBOL'; };
  var peg$f44 = function() { return options.serverVersion >= 50711; };
  var peg$f45 = function() { return options.serverVersion >= 50606; };
  var peg$f46 = function() { return options.serverVersion >= 50606; };
  var peg$f47 = function() { return identifier.determineFunction('EXTRACT_SYMBOL'); };
  var peg$f48 = function() { return 'COLUMNS_SYMBOL'; };
  var peg$f49 = function() { return options.serverVersion >= 50707; };
  var peg$f50 = function() { return options.serverVersion >= 50700; };
  var peg$f51 = function() { return 'FLOAT_SYMBOL'; };
  var peg$f52 = function() { return 'DOUBLE_SYMBOL'; };
  var peg$f53 = function() { return options.serverVersion >= 50700; };
  var peg$f54 = function() { return options.serverVersion >= 50604; };
  var peg$f55 = function() { return options.serverVersion >= 50707; };
  var peg$f56 = function() { return options.serverVersion >= 50707; };
  var peg$f57 = function() { return identifier.determineFunction('GROUP_CONCAT_SYMBOL'); };
  var peg$f58 = function() { return options.serverVersion >= 50713; };
  var peg$f59 = function() { return 'INT_SYMBOL'; };
  var peg$f60 = function() { return 'RELAY_THREAD_SYMBOL'; };
  var peg$f61 = function() { return options.serverVersion >= 50708; };
  var peg$f62 = function() { return 'NOW_SYMBOL'; };
  var peg$f63 = function() { return 'NOW_SYMBOL'; };
  var peg$f64 = function() { return options.serverVersion >= 50605; };
  var peg$f65 = function() { return options.serverVersion >= 50602; };
  var peg$f66 = function() { return options.serverVersion >= 50601; };
  var peg$f67 = function() { return options.serverVersion >= 50603; };
  var peg$f68 = function() { return options.serverVersion >= 50603; };
  var peg$f69 = function() { return options.serverVersion >= 50713; };
  var peg$f70 = function() { return 50704 < options.serverVersion && options.serverVersion < 50708; };
  var peg$f71 = function() { return identifier.determineFunction('MAX_SYMBOL'); };
  var peg$f72 = function() { return identifier.determineFunction('SUBSTRING_SYMBOL'); };
  var peg$f73 = function() { return 'MEDIUMINT_SYMBOL'; };
  var peg$f74 = function() { return identifier.determineFunction('MIN_SYMBOL'); };
  var peg$f75 = function() { return 'NDBCLUSTER_SYMBOL'; };
  var peg$f76 = function() { return options.serverVersion >= 50704; };
  var peg$f77 = function() { return 50700 < options.serverVersion && options.serverVersion < 50706; };
  var peg$f78 = function() {
      return options.isSqlModeActive('HighNotPrecedence')
        ? 'NOT2_SYMBOL'
        : 'NOT_SYMBOL';
    };
  var peg$f79 = function() { return identifier.determineFunction('NOW_SYMBOL'); };
  var peg$f80 = function() { return options.serverVersion >= 50606; };
  var peg$f81 = function() { return options.serverVersion < 50706; };
  var peg$f82 = function() { return options.serverVersion >= 50605; };
  var peg$f83 = function() { return options.serverVersion >= 50706; };
  var peg$f84 = function() { return options.serverVersion >= 50604; };
  var peg$f85 = function() { return identifier.determineFunction('POSITION_SYMBOL'); };
  var peg$f86 = function() { return options.serverVersion >= 50700; };
  var peg$f87 = function() { return options.serverVersion < 80000; };
  var peg$f88 = function() { return identifier.determineFunction('REPEAT_SYMBOL'); };
  var peg$f89 = function() { return identifier.determineFunction('REPLACE_SYMBOL'); };
  var peg$f90 = function() { return options.serverVersion >= 50700; };
  var peg$f91 = function() { return options.serverVersion >= 50700; };
  var peg$f92 = function() { return options.serverVersion >= 50700; };
  var peg$f93 = function() { return options.serverVersion >= 50700; };
  var peg$f94 = function() { return options.serverVersion >= 50700; };
  var peg$f95 = function() { return options.serverVersion >= 50700; };
  var peg$f96 = function() { return options.serverVersion >= 50700; };
  var peg$f97 = function() { return 'REGEXP_SYMBOL'; };
  var peg$f98 = function() { return options.serverVersion >= 50713; };
  var peg$f99 = function() { return 'DATABASE_SYMBOL'; };
  var peg$f100 = function() { return 'DATABASES_SYMBOL'; };
  var peg$f101 = function() { return identifier.determineFunction('USER_SYMBOL'); };
  var peg$f102 = function() { return 'ANY_SYMBOL'; };
  var peg$f103 = function() { return options.serverVersion >= 50606; };
  var peg$f104 = function() { return options.serverVersion < 80000; };
  var peg$f105 = function() { return options.serverVersion >= 50700; };
  var peg$f106 = function() { return identifier.determineFunction('STDDEV_SAMP_SYMBOL'); };
  var peg$f107 = function() { return identifier.determineFunction('STD_SYMBOL'); };
  var peg$f108 = function() { return identifier.determineFunction('STD_SYMBOL'); };
  var peg$f109 = function() { return identifier.determineFunction('STD_SYMBOL'); };
  var peg$f110 = function() { return options.serverVersion >= 50707; };
  var peg$f111 = function() { return identifier.determineFunction('SUBDATE_SYMBOL'); };
  var peg$f112 = function() { return identifier.determineFunction('SUBSTRING_SYMBOL'); };
  var peg$f113 = function() { return identifier.determineFunction('SUBSTRING_SYMBOL'); };
  var peg$f114 = function() { return identifier.determineFunction('SUM_SYMBOL'); };
  var peg$f115 = function() { return identifier.determineFunction('SYSDATE_SYMBOL'); };
  var peg$f116 = function() { return identifier.determineFunction('USER_SYMBOL'); };
  var peg$f117 = function() { return options.serverVersion < 80000; };
  var peg$f118 = function() { return identifier.determineFunction('TRIM_SYMBOL'); };
  var peg$f119 = function() { return options.serverVersion >= 50706; };
  var peg$f120 = function() { return 'VARCHAR_SYMBOL'; };
  var peg$f121 = function() { return identifier.determineFunction('VARIANCE_SYMBOL'); };
  var peg$f122 = function() { return identifier.determineFunction('VARIANCE_SYMBOL'); };
  var peg$f123 = function() { return identifier.determineFunction('VAR_SAMP_SYMBOL'); };
  var peg$f124 = function() { return options.serverVersion >= 50707; };
  var peg$f125 = function() { return options.serverVersion >= 50704; };
  var peg$f126 = function() { return options.serverVersion >= 80000; };
  var peg$f127 = function() { return options.serverVersion >= 80000; };
  var peg$f128 = function() { return options.serverVersion >= 80000; };
  var peg$f129 = function() { return options.serverVersion >= 80000; };
  var peg$f130 = function() { return options.serverVersion >= 80000; };
  var peg$f131 = function() { return options.serverVersion >= 80000; };
  var peg$f132 = function() { return options.serverVersion >= 80000; };
  var peg$f133 = function() { return options.serverVersion >= 80000; };
  var peg$f134 = function() { return options.serverVersion >= 80000; };
  var peg$f135 = function() { return options.serverVersion >= 80000; };
  var peg$f136 = function() { return options.serverVersion >= 80000; };
  var peg$f137 = function() { return options.serverVersion >= 80000; };
  var peg$f138 = function() { return options.serverVersion >= 80000; };
  var peg$f139 = function() { return options.serverVersion >= 80000; };
  var peg$f140 = function() { return options.serverVersion >= 80000; };
  var peg$f141 = function() { return options.serverVersion >= 80000; };
  var peg$f142 = function() { return options.serverVersion >= 80000; };
  var peg$f143 = function() { return options.serverVersion >= 80000; };
  var peg$f144 = function() { return options.serverVersion >= 80003 && options.serverVersion < 80014; };
  var peg$f145 = function() { return options.serverVersion >= 80000; };
  var peg$f146 = function() { return options.serverVersion >= 80000; };
  var peg$f147 = function() { return options.serverVersion >= 80000; };
  var peg$f148 = function() { return options.serverVersion >= 80000; };
  var peg$f149 = function() { return options.serverVersion >= 80000; };
  var peg$f150 = function() { return options.serverVersion >= 80000; };
  var peg$f151 = function() { return options.serverVersion >= 80000; };
  var peg$f152 = function() { return options.serverVersion >= 80000; };
  var peg$f153 = function() { return options.serverVersion >= 80000; };
  var peg$f154 = function() { return options.serverVersion >= 80000; };
  var peg$f155 = function() { return options.serverVersion >= 80000; };
  var peg$f156 = function() { return options.serverVersion >= 80000; };
  var peg$f157 = function() { return options.serverVersion >= 80000; };
  var peg$f158 = function() { return options.serverVersion >= 80000; };
  var peg$f159 = function() { return options.serverVersion >= 80000; };
  var peg$f160 = function() { return options.serverVersion >= 80000; };
  var peg$f161 = function() { return options.serverVersion >= 80000; };
  var peg$f162 = function() { return options.serverVersion >= 80000; };
  var peg$f163 = function() { return options.serverVersion >= 80000; };
  var peg$f164 = function() { return options.serverVersion >= 80000; };
  var peg$f165 = function() { return options.serverVersion >= 80000; };
  var peg$f166 = function() { return options.serverVersion >= 80000; };
  var peg$f167 = function() { return options.serverVersion >= 80000; };
  var peg$f168 = function() { return options.serverVersion >= 80000; };
  var peg$f169 = function() { return options.serverVersion >= 80000; };
  var peg$f170 = function() { return options.serverVersion >= 80000; };
  var peg$f171 = function() { return options.serverVersion >= 80000; };
  var peg$f172 = function() { return options.serverVersion >= 80000; };
  var peg$f173 = function() { return options.serverVersion >= 80000; };
  var peg$f174 = function() { return options.serverVersion >= 80000; };
  var peg$f175 = function() { return options.serverVersion >= 80000; };
  var peg$f176 = function() { return options.serverVersion >= 80000; };
  var peg$f177 = function() { return options.serverVersion >= 80000; };
  var peg$f178 = function() { return options.serverVersion >= 80000; };
  var peg$f179 = function() { return options.serverVersion >= 80000; };
  var peg$f180 = function() { return options.serverVersion >= 80000; };
  var peg$f181 = function() { return options.serverVersion >= 80000; };
  var peg$f182 = function() { return options.serverVersion >= 80011; };
  var peg$f183 = function() { return options.serverVersion >= 80011; };
  var peg$f184 = function() { return options.serverVersion >= 80011; };
  var peg$f185 = function() { return options.serverVersion >= 80011; };
  var peg$f186 = function() { return options.serverVersion >= 80011; };
  var peg$f187 = function() { return options.serverVersion >= 80013; };
  var peg$f188 = function() { return options.serverVersion >= 80013; };
  var peg$f189 = function() { return options.serverVersion >= 80013; };
  var peg$f190 = function() { return options.serverVersion >= 80013; };
  var peg$f191 = function() { return options.serverVersion >= 80013; };
  var peg$f192 = function() { return options.serverVersion >= 80014; };
  var peg$f193 = function() { return options.serverVersion >= 80014; };
  var peg$f194 = function() { return options.serverVersion >= 80014; };
  var peg$f195 = function() { return options.serverVersion >= 80014; };
  var peg$f196 = function() { return options.serverVersion >= 80014; };
  var peg$f197 = function() { return options.serverVersion >= 80017; };
  var peg$f198 = function() { return options.serverVersion >= 80017; };
  var peg$f199 = function() { return options.serverVersion >= 80017; };
  var peg$f200 = function() { return options.serverVersion >= 80017; };
  var peg$f201 = function() { return options.serverVersion >= 80017; };
  var peg$f202 = function() { return options.serverVersion >= 80018; };
  var peg$f203 = function() { return options.serverVersion >= 80018; };
  var peg$f204 = function() { return options.serverVersion >= 80018; };
  var peg$f205 = function() { return options.serverVersion >= 80018; };
  var peg$f206 = function() { return options.serverVersion >= 80018; };
  var peg$f207 = function() { return options.serverVersion >= 80019; };
  var peg$f208 = function() { return options.serverVersion >= 80019; };
  var peg$f209 = function() { return options.serverVersion >= 80019; };
  var peg$f210 = function() { return options.serverVersion >= 80019; };
  var peg$f211 = function() { return options.serverVersion >= 80019; };
  var peg$f212 = function() { return options.serverVersion >= 80019; };
  var peg$f213 = function() { return 'TINYINT_SYMBOL'; };
  var peg$f214 = function() { return 'SMALLINT_SYMBOL'; };
  var peg$f215 = function() { return 'MEDIUMINT_SYMBOL'; };
  var peg$f216 = function() { return 'INT_SYMBOL'; };
  var peg$f217 = function() { return 'BIGINT_SYMBOL'; };
  var peg$f218 = function() { return 'SECOND_SYMBOL'; };
  var peg$f219 = function() { return 'MINUTE_SYMBOL'; };
  var peg$f220 = function() { return 'HOUR_SYMBOL'; };
  var peg$f221 = function() { return 'DAY_SYMBOL'; };
  var peg$f222 = function() { return 'WEEK_SYMBOL'; };
  var peg$f223 = function() { return 'MONTH_SYMBOL'; };
  var peg$f224 = function() { return 'QUARTER_SYMBOL'; };
  var peg$f225 = function() { return 'YEAR_SYMBOL'; };
  var peg$f226 = function() { return ''; };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseEQUAL_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseASSIGN_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c1) {
      s0 = peg$c1;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseNULL_SAFE_EQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c2) {
      s0 = peg$c2;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseGREATER_OR_EQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c3) {
      s0 = peg$c3;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parseGREATER_THAN_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 62) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseLESS_OR_EQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c5) {
      s0 = peg$c5;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parseLESS_THAN_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 60) {
      s0 = peg$c6;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parseNOT_EQUAL_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c7) {
      s0 = peg$c7;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parseNOT_EQUAL2_OPERATOR() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePLUS_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c9;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parseMINUS_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c10;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parseMULT_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c11;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseDIV_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 47) {
      s0 = peg$c12;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseMOD_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 37) {
      s0 = peg$c13;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseLOGICAL_NOT_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 33) {
      s0 = peg$c14;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseBITWISE_NOT_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 126) {
      s0 = peg$c15;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseSHIFT_LEFT_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c16) {
      s0 = peg$c16;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseSHIFT_RIGHT_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseLOGICAL_AND_OPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c18) {
      s0 = peg$c18;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseBITWISE_AND_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 38) {
      s0 = peg$c19;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseBITWISE_XOR_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 94) {
      s0 = peg$c20;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseLOGICAL_OR_OPERATOR() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBITWISE_OR_OPERATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 124) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parseDOT_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c23;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseCOMMA_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c24;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseSEMICOLON_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c25;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseCOLON_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c26;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parseOPEN_PAR_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c27;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parseCLOSE_PAR_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c28;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parseOPEN_CURLY_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 123) {
      s0 = peg$c29;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseCLOSE_CURLY_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 125) {
      s0 = peg$c30;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseUNDERLINE_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 95) {
      s0 = peg$c31;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseJSON_SEPARATOR_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f2();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseJSON_UNQUOTED_SEPARATOR_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAT_SIGN_SYMBOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 64) {
      s0 = peg$c34;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parseAT_TEXT_SUFFIX() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSIMPLE_IDENTIFIER();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAT_AT_SIGN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c35) {
      s0 = peg$c35;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseNULL2_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c36) {
      s0 = peg$c36;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parsePARAM_MARKER() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 63) {
      s0 = peg$c37;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parseA() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r0.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parseB() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseC() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parseD() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r3.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parseE() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r4.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parseF() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r5.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parseG() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r6.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    return s0;
  }

  function peg$parseH() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r7.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parseI() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r8.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parseJ() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r9.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parseK() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r10.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parseL() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r11.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parseM() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r12.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parseN() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r13.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseO() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r14.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseP() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r15.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parseQ() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r16.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parseR() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r17.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseS() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r18.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parseT() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r19.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parseU() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r20.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parseV() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r21.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parseW() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r22.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parseX() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r23.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

    return s0;
  }

  function peg$parseY() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r24.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parseZ() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r25.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r26.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }

    return s0;
  }

  function peg$parseDIGITS() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseDIGIT();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseDIGIT();
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXDIGIT() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r27.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }

    return s0;
  }

  function peg$parseHEX_NUMBER() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseHEXDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseHEXDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseHEXDIGIT();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseHEXDIGIT();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c40;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e68); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBIN_NUMBER() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r28.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r28.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e70); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c42) {
        s1 = peg$c42;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r28.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = input.charAt(peg$currPos);
            if (peg$r28.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e70); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c40;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e68); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseINT_NUMBER() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseDIGITS();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDECIMAL_NUMBER() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDIGITS();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c23;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGITS();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFLOAT_NUMBER() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDIGITS();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s3 = peg$c23;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s3 !== peg$FAILED) {
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseDIGITS();
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r29.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s3 !== peg$FAILED) {
        s4 = input.charAt(peg$currPos);
        if (peg$r30.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseDIGITS();
        if (s5 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDOT_IDENTIFIER() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseLETTER_WHEN_UNQUOTED();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseLETTER_WHEN_UNQUOTED();
        }
        peg$savedPos = s0;
        s0 = peg$f5();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUNDERSCORE_CHARSET() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r31.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r31.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e74); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIDENTIFIER() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGITS();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGITS();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r29.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseLETTER_WHEN_UNQUOTED();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseLETTER_WHEN_UNQUOTED();
          }
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDIGITS();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDIGITS();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLETTER_WITHOUT_FLOAT_PART();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseLETTER_WHEN_UNQUOTED();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseLETTER_WHEN_UNQUOTED();
          }
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseLETTER_WHEN_UNQUOTED();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseLETTER_WHEN_UNQUOTED();
          }
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseNCHAR_TEXT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r32.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSINGLE_QUOTED_TEXT();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBACK_TICK() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 96) {
      s0 = peg$c43;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parseSINGLE_QUOTE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c40;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }

    return s0;
  }

  function peg$parseDOUBLE_QUOTE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c44;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }

    return s0;
  }

  function peg$parseBACK_TICK_QUOTED_ID() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseBACK_TICK();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseBACK_TICK_ESCAPE();
      if (s3 === peg$FAILED) {
        s3 = peg$parseBACK_TICK_CONTENT();
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseBACK_TICK_ESCAPE();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBACK_TICK_CONTENT();
        }
      }
      s3 = peg$parseBACK_TICK();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBACK_TICK_ESCAPE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBACK_TICK_CONTENT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseBACK_TICK();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDOUBLE_QUOTED_TEXT() {
    var s0, s1, s2, s3, s4;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseDOUBLE_QUOTE();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDOUBLE_QUOTED_CONTENT();
      s4 = peg$parseDOUBLE_QUOTE();
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseDOUBLE_QUOTE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDOUBLE_QUOTED_CONTENT();
          s4 = peg$parseDOUBLE_QUOTE();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDOUBLE_QUOTED_CONTENT() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseDOUBLE_QUOTE_ESCAPE();
    if (s1 === peg$FAILED) {
      s1 = peg$parseDOUBLE_QUOTE_CHAR();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseDOUBLE_QUOTE_ESCAPE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDOUBLE_QUOTE_CHAR();
      }
    }

    return s0;
  }

  function peg$parseDOUBLE_QUOTE_ESCAPE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDOUBLE_QUOTE_CHAR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseDOUBLE_QUOTE();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSINGLE_QUOTED_TEXT() {
    var s0, s1, s2, s3, s4;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseSINGLE_QUOTE();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseSINGLE_QUOTED_CONTENT();
      s4 = peg$parseSINGLE_QUOTE();
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseSINGLE_QUOTE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSINGLE_QUOTED_CONTENT();
          s4 = peg$parseSINGLE_QUOTE();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSINGLE_QUOTED_CONTENT() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseSINGLE_QUOTE_ESCAPE();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSINGLE_QUOTE_CHAR();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseSINGLE_QUOTE_ESCAPE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSINGLE_QUOTE_CHAR();
      }
    }

    return s0;
  }

  function peg$parseSINGLE_QUOTE_ESCAPE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSINGLE_QUOTE_CHAR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseSINGLE_QUOTE();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVERSION_COMMENT_START() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c46) {
      s1 = peg$c46;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDIGITS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$f7();
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseVERSION_COMMENT_CONTENT();
          if (input.substr(peg$currPos, 2) === peg$c47) {
            s5 = peg$c47;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e81); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f8();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVERSION_COMMENT_CONTENT() {
    var s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c47) {
      s3 = peg$c47;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c47) {
        s3 = peg$c47;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e79); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMYSQL_COMMENT_START() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c46) {
      s1 = peg$c46;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVERSION_COMMENT_END() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f10();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBLOCK_COMMENT() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c48) {
      s1 = peg$c48;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c49) {
        s2 = peg$c49;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBLOCK_COMMENT_CONTENT();
        if (input.substr(peg$currPos, 2) === peg$c47) {
          s4 = peg$c47;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBLOCK_COMMENT_CONTENT() {
    var s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c47) {
      s3 = peg$c47;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c47) {
        s3 = peg$c47;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e79); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePOUND_COMMENT() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r33.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e85); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r33.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e85); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f13();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDASHDASH_COMMENT() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDOUBLE_DASH();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = input.charAt(peg$currPos);
      if (peg$r34.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r33.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e85); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r33.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e85); }
          }
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseLINEBREAK();
        if (s2 === peg$FAILED) {
          s2 = '';
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f14();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDOUBLE_DASH() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c51) {
      s0 = peg$c51;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parseLINEBREAK() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r35.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }

    return s0;
  }

  function peg$parseSIMPLE_IDENTIFIER() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r36.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r36.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e89); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseML_COMMENT_HEAD() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c49) {
      s0 = peg$c49;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parseML_COMMENT_END() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c47) {
      s0 = peg$c47;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }

    return s0;
  }

  function peg$parseLETTER_WHEN_UNQUOTED() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r37.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }

    return s0;
  }

  function peg$parseLETTER_WHEN_UNQUOTED_NO_DIGIT() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r38.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }

    return s0;
  }

  function peg$parseLETTER_WITHOUT_FLOAT_PART() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r39.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }

    return s0;
  }

  function peg$parseACCESSIBLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c52) {
      s0 = peg$c52;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }

    return s0;
  }

  function peg$parseACCOUNT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c53) {
      s1 = peg$c53;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f15();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseACTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c54) {
      s0 = peg$c54;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }

    return s0;
  }

  function peg$parseADD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c55) {
      s0 = peg$c55;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }

    return s0;
  }

  function peg$parseADDDATE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAFTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c57) {
      s0 = peg$c57;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parseAGAINST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c58) {
      s0 = peg$c58;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parseAGGREGATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c59) {
      s0 = peg$c59;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parseALGORITHM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c60) {
      s0 = peg$c60;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }

    return s0;
  }

  function peg$parseALL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c61) {
      s0 = peg$c61;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }

    return s0;
  }

  function peg$parseALTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c62) {
      s0 = peg$c62;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }

    return s0;
  }

  function peg$parseALWAYS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f17();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseANALYSE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c64) {
      s1 = peg$c64;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f18();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseANALYZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c65) {
      s0 = peg$c65;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }

    return s0;
  }

  function peg$parseAND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c66) {
      s0 = peg$c66;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }

    return s0;
  }

  function peg$parseANY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c67) {
      s0 = peg$c67;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }

    return s0;
  }

  function peg$parseAS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c68) {
      s0 = peg$c68;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }

    return s0;
  }

  function peg$parseASC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c69) {
      s0 = peg$c69;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }

    return s0;
  }

  function peg$parseASCII_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c70) {
      s1 = peg$c70;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseASENSITIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c71) {
      s0 = peg$c71;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }

    return s0;
  }

  function peg$parseAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c72) {
      s0 = peg$c72;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }

    return s0;
  }

  function peg$parseAUTHORS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f20();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAUTOEXTEND_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c74) {
      s0 = peg$c74;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }

    return s0;
  }

  function peg$parseAUTO_INCREMENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c75) {
      s0 = peg$c75;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }

    return s0;
  }

  function peg$parseAVG_ROW_LENGTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c76) {
      s0 = peg$c76;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parseAVG_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c77) {
      s1 = peg$c77;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBACKUP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c78) {
      s0 = peg$c78;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }

    return s0;
  }

  function peg$parseBEFORE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c79) {
      s0 = peg$c79;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }

    return s0;
  }

  function peg$parseBEGIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c80) {
      s0 = peg$c80;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }

    return s0;
  }

  function peg$parseBETWEEN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c81) {
      s0 = peg$c81;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }

    return s0;
  }

  function peg$parseBIGINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c82) {
      s0 = peg$c82;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

    return s0;
  }

  function peg$parseBINARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c83) {
      s0 = peg$c83;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }

    return s0;
  }

  function peg$parseBINLOG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c84) {
      s0 = peg$c84;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }

    return s0;
  }

  function peg$parseBIN_NUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c85) {
      s0 = peg$c85;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }

    return s0;
  }

  function peg$parseBIT_AND_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBIT_OR_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c87) {
      s1 = peg$c87;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c88) {
      s0 = peg$c88;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }

    return s0;
  }

  function peg$parseBIT_XOR_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBLOB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c90) {
      s0 = peg$c90;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }

    return s0;
  }

  function peg$parseBLOCK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c91) {
      s0 = peg$c91;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }

    return s0;
  }

  function peg$parseBOOLEAN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c92) {
      s0 = peg$c92;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }

    return s0;
  }

  function peg$parseBOOL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c93) {
      s0 = peg$c93;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }

    return s0;
  }

  function peg$parseBOTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c94) {
      s0 = peg$c94;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }

    return s0;
  }

  function peg$parseBTREE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c95) {
      s0 = peg$c95;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }

    return s0;
  }

  function peg$parseBY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c96) {
      s0 = peg$c96;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }

    return s0;
  }

  function peg$parseBYTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c97) {
      s0 = peg$c97;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e138); }
    }

    return s0;
  }

  function peg$parseCACHE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c98) {
      s0 = peg$c98;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }

    return s0;
  }

  function peg$parseCALL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c99) {
      s0 = peg$c99;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }

    return s0;
  }

  function peg$parseCASCADE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c100) {
      s0 = peg$c100;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }

    return s0;
  }

  function peg$parseCASCADED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c101) {
      s0 = peg$c101;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }

    return s0;
  }

  function peg$parseCASE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c102) {
      s0 = peg$c102;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }

    return s0;
  }

  function peg$parseCAST_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c103) {
      s1 = peg$c103;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f25();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCATALOG_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c104) {
      s0 = peg$c104;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }

    return s0;
  }

  function peg$parseCHAIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c105) {
      s0 = peg$c105;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }

    return s0;
  }

  function peg$parseCHANGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c106) {
      s0 = peg$c106;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }

    return s0;
  }

  function peg$parseCHANGED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c107) {
      s0 = peg$c107;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }

    return s0;
  }

  function peg$parseCHANNEL_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c108) {
      s1 = peg$c108;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f26();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCHARSET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c109) {
      s0 = peg$c109;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }

    return s0;
  }

  function peg$parseCHARACTER_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c110) {
      s1 = peg$c110;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e151); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f27();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCHAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c111) {
      s0 = peg$c111;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }

    return s0;
  }

  function peg$parseCHECKSUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c112) {
      s0 = peg$c112;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }

    return s0;
  }

  function peg$parseCHECK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c113) {
      s0 = peg$c113;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }

    return s0;
  }

  function peg$parseCIPHER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c114) {
      s0 = peg$c114;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }

    return s0;
  }

  function peg$parseCLASS_ORIGIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c115) {
      s0 = peg$c115;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }

    return s0;
  }

  function peg$parseCLIENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c116) {
      s0 = peg$c116;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }

    return s0;
  }

  function peg$parseCLOSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c117) {
      s0 = peg$c117;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }

    return s0;
  }

  function peg$parseCOALESCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c118) {
      s0 = peg$c118;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }

    return s0;
  }

  function peg$parseCODE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c119) {
      s0 = peg$c119;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }

    return s0;
  }

  function peg$parseCOLLATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c120) {
      s0 = peg$c120;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }

    return s0;
  }

  function peg$parseCOLLATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c121) {
      s0 = peg$c121;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }

    return s0;
  }

  function peg$parseCOLUMNS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c122) {
      s0 = peg$c122;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e163); }
    }

    return s0;
  }

  function peg$parseCOLUMN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c123) {
      s0 = peg$c123;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }

    return s0;
  }

  function peg$parseCOLUMN_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c124) {
      s0 = peg$c124;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }

    return s0;
  }

  function peg$parseCOLUMN_FORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c125) {
      s0 = peg$c125;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }

    return s0;
  }

  function peg$parseCOMMENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c126) {
      s0 = peg$c126;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }

    return s0;
  }

  function peg$parseCOMMITTED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c127) {
      s0 = peg$c127;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e168); }
    }

    return s0;
  }

  function peg$parseCOMMIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c128) {
      s0 = peg$c128;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }

    return s0;
  }

  function peg$parseCOMPACT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c129) {
      s0 = peg$c129;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }

    return s0;
  }

  function peg$parseCOMPLETION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c130) {
      s0 = peg$c130;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }

    return s0;
  }

  function peg$parseCOMPRESSED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c131) {
      s0 = peg$c131;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }

    return s0;
  }

  function peg$parseCOMPRESSION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c132) {
      s1 = peg$c132;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e173); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f28();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCONCURRENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c133) {
      s0 = peg$c133;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e174); }
    }

    return s0;
  }

  function peg$parseCONDITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c134) {
      s0 = peg$c134;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e175); }
    }

    return s0;
  }

  function peg$parseCONNECTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c135) {
      s0 = peg$c135;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e176); }
    }

    return s0;
  }

  function peg$parseCONSISTENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c136) {
      s0 = peg$c136;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e177); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c137) {
      s0 = peg$c137;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT_CATALOG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c138) {
      s0 = peg$c138;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e179); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c139) {
      s0 = peg$c139;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT_SCHEMA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c140) {
      s0 = peg$c140;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e181); }
    }

    return s0;
  }

  function peg$parseCONTAINS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c141) {
      s0 = peg$c141;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }

    return s0;
  }

  function peg$parseCONTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c142) {
      s0 = peg$c142;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }

    return s0;
  }

  function peg$parseCONTINUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c143) {
      s0 = peg$c143;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e184); }
    }

    return s0;
  }

  function peg$parseCONTRIBUTORS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c144) {
      s1 = peg$c144;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f29();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCONVERT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c145) {
      s0 = peg$c145;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }

    return s0;
  }

  function peg$parseCOUNT_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c146) {
      s1 = peg$c146;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e187); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCPU_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c147) {
      s0 = peg$c147;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }

    return s0;
  }

  function peg$parseCREATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c148) {
      s0 = peg$c148;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e189); }
    }

    return s0;
  }

  function peg$parseCROSS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c149) {
      s0 = peg$c149;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e190); }
    }

    return s0;
  }

  function peg$parseCUBE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c150) {
      s0 = peg$c150;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e191); }
    }

    return s0;
  }

  function peg$parseCURDATE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c151) {
      s1 = peg$c151;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e192); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCURRENT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c152) {
      s1 = peg$c152;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e193); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f32();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCURRENT_DATE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c153) {
      s1 = peg$c153;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e194); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCURRENT_TIME_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c154) {
      s1 = peg$c154;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e195); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f34();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCURRENT_TIMESTAMP_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17) === peg$c155) {
      s1 = peg$c155;
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e196); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCURRENT_USER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c156) {
      s0 = peg$c156;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e197); }
    }

    return s0;
  }

  function peg$parseCURSOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c157) {
      s0 = peg$c157;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }

    return s0;
  }

  function peg$parseCURSOR_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c158) {
      s0 = peg$c158;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e199); }
    }

    return s0;
  }

  function peg$parseCURTIME_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c159) {
      s1 = peg$c159;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e200); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDATABASE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c160) {
      s0 = peg$c160;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e201); }
    }

    return s0;
  }

  function peg$parseDATABASES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c161) {
      s0 = peg$c161;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }

    return s0;
  }

  function peg$parseDATAFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c162) {
      s0 = peg$c162;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }

    return s0;
  }

  function peg$parseDATA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c163) {
      s0 = peg$c163;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }

    return s0;
  }

  function peg$parseDATETIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c164) {
      s0 = peg$c164;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }

    return s0;
  }

  function peg$parseDATE_ADD_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c165) {
      s1 = peg$c165;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e206); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDATE_SUB_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c166) {
      s1 = peg$c166;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f38();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c167) {
      s0 = peg$c167;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }

    return s0;
  }

  function peg$parseDAYOFMONTH_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c168) {
      s1 = peg$c168;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e209); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDAY_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c169) {
      s0 = peg$c169;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e210); }
    }

    return s0;
  }

  function peg$parseDAY_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c170) {
      s0 = peg$c170;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e211); }
    }

    return s0;
  }

  function peg$parseDAY_MINUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c171) {
      s0 = peg$c171;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e212); }
    }

    return s0;
  }

  function peg$parseDAY_SECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c172) {
      s0 = peg$c172;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e213); }
    }

    return s0;
  }

  function peg$parseDAY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c173) {
      s0 = peg$c173;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e214); }
    }

    return s0;
  }

  function peg$parseDEALLOCATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c174) {
      s0 = peg$c174;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e215); }
    }

    return s0;
  }

  function peg$parseDEC_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c175) {
      s1 = peg$c175;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e216); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDECIMAL_NUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c176) {
      s0 = peg$c176;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e217); }
    }

    return s0;
  }

  function peg$parseDECIMAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c177) {
      s0 = peg$c177;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e218); }
    }

    return s0;
  }

  function peg$parseDECLARE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c178) {
      s0 = peg$c178;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e219); }
    }

    return s0;
  }

  function peg$parseDEFAULT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c179) {
      s0 = peg$c179;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e220); }
    }

    return s0;
  }

  function peg$parseDEFAULT_AUTH_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c180) {
      s1 = peg$c180;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e221); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f41();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEFINER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c181) {
      s0 = peg$c181;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }

    return s0;
  }

  function peg$parseDELAYED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c182) {
      s0 = peg$c182;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e223); }
    }

    return s0;
  }

  function peg$parseDELAY_KEY_WRITE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c183) {
      s0 = peg$c183;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e224); }
    }

    return s0;
  }

  function peg$parseDELETE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c184) {
      s0 = peg$c184;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e225); }
    }

    return s0;
  }

  function peg$parseDESC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c185) {
      s0 = peg$c185;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e226); }
    }

    return s0;
  }

  function peg$parseDESCRIBE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c186) {
      s0 = peg$c186;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e227); }
    }

    return s0;
  }

  function peg$parseDES_KEY_FILE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c187) {
      s1 = peg$c187;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e228); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f42();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDETERMINISTIC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c188) {
      s0 = peg$c188;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e229); }
    }

    return s0;
  }

  function peg$parseDIAGNOSTICS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c189) {
      s0 = peg$c189;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }

    return s0;
  }

  function peg$parseDIRECTORY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c190) {
      s0 = peg$c190;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e231); }
    }

    return s0;
  }

  function peg$parseDISABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c191) {
      s0 = peg$c191;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e232); }
    }

    return s0;
  }

  function peg$parseDISCARD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c192) {
      s0 = peg$c192;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e233); }
    }

    return s0;
  }

  function peg$parseDISK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c193) {
      s0 = peg$c193;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e234); }
    }

    return s0;
  }

  function peg$parseDISTINCT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c194) {
      s0 = peg$c194;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e235); }
    }

    return s0;
  }

  function peg$parseDISTINCTROW_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c195) {
      s1 = peg$c195;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e236); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f43();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDIV_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c196) {
      s0 = peg$c196;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e237); }
    }

    return s0;
  }

  function peg$parseDOUBLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c197) {
      s0 = peg$c197;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e238); }
    }

    return s0;
  }

  function peg$parseDO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c198) {
      s0 = peg$c198;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e239); }
    }

    return s0;
  }

  function peg$parseDROP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c199) {
      s0 = peg$c199;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e240); }
    }

    return s0;
  }

  function peg$parseDUAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c200) {
      s0 = peg$c200;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e241); }
    }

    return s0;
  }

  function peg$parseDUMPFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c201) {
      s0 = peg$c201;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e242); }
    }

    return s0;
  }

  function peg$parseDUPLICATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c202) {
      s0 = peg$c202;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e243); }
    }

    return s0;
  }

  function peg$parseDYNAMIC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c203) {
      s0 = peg$c203;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e244); }
    }

    return s0;
  }

  function peg$parseEACH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c204) {
      s0 = peg$c204;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e245); }
    }

    return s0;
  }

  function peg$parseELSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c205) {
      s0 = peg$c205;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e246); }
    }

    return s0;
  }

  function peg$parseELSEIF_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c206) {
      s0 = peg$c206;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e247); }
    }

    return s0;
  }

  function peg$parseENABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c207) {
      s0 = peg$c207;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e248); }
    }

    return s0;
  }

  function peg$parseENCLOSED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c208) {
      s0 = peg$c208;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e249); }
    }

    return s0;
  }

  function peg$parseENCRYPTION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c209) {
      s1 = peg$c209;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e250); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f44();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c210) {
      s0 = peg$c210;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e251); }
    }

    return s0;
  }

  function peg$parseENDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c211) {
      s0 = peg$c211;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e252); }
    }

    return s0;
  }

  function peg$parseEND_OF_INPUT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c212) {
      s0 = peg$c212;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e253); }
    }

    return s0;
  }

  function peg$parseENGINES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c213) {
      s0 = peg$c213;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e254); }
    }

    return s0;
  }

  function peg$parseENGINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c214) {
      s0 = peg$c214;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e255); }
    }

    return s0;
  }

  function peg$parseENUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c215) {
      s0 = peg$c215;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e256); }
    }

    return s0;
  }

  function peg$parseERROR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c216) {
      s0 = peg$c216;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e257); }
    }

    return s0;
  }

  function peg$parseERRORS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c217) {
      s0 = peg$c217;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e258); }
    }

    return s0;
  }

  function peg$parseESCAPED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c218) {
      s0 = peg$c218;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e259); }
    }

    return s0;
  }

  function peg$parseESCAPE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c219) {
      s0 = peg$c219;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e260); }
    }

    return s0;
  }

  function peg$parseEVENTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c220) {
      s0 = peg$c220;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e261); }
    }

    return s0;
  }

  function peg$parseEVENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c221) {
      s0 = peg$c221;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e262); }
    }

    return s0;
  }

  function peg$parseEVERY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c222) {
      s0 = peg$c222;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e263); }
    }

    return s0;
  }

  function peg$parseEXCHANGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c223) {
      s0 = peg$c223;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e264); }
    }

    return s0;
  }

  function peg$parseEXECUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c224) {
      s0 = peg$c224;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e265); }
    }

    return s0;
  }

  function peg$parseEXISTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c225) {
      s0 = peg$c225;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e266); }
    }

    return s0;
  }

  function peg$parseEXIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c226) {
      s0 = peg$c226;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e267); }
    }

    return s0;
  }

  function peg$parseEXPANSION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c227) {
      s0 = peg$c227;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e268); }
    }

    return s0;
  }

  function peg$parseEXPIRE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c228) {
      s1 = peg$c228;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e269); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f45();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXPLAIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c229) {
      s0 = peg$c229;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e270); }
    }

    return s0;
  }

  function peg$parseEXPORT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c230) {
      s1 = peg$c230;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e271); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f46();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXTENDED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c231) {
      s0 = peg$c231;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e272); }
    }

    return s0;
  }

  function peg$parseEXTENT_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c232) {
      s0 = peg$c232;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e273); }
    }

    return s0;
  }

  function peg$parseEXTRACT_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c233) {
      s1 = peg$c233;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e274); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFALSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c234) {
      s0 = peg$c234;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e275); }
    }

    return s0;
  }

  function peg$parseFAST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c235) {
      s0 = peg$c235;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e276); }
    }

    return s0;
  }

  function peg$parseFAULTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c236) {
      s0 = peg$c236;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e277); }
    }

    return s0;
  }

  function peg$parseFETCH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c237) {
      s0 = peg$c237;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e278); }
    }

    return s0;
  }

  function peg$parseFIELDS_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c238) {
      s1 = peg$c238;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e279); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c239) {
      s0 = peg$c239;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e280); }
    }

    return s0;
  }

  function peg$parseFILE_BLOCK_SIZE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c240) {
      s1 = peg$c240;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e281); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f49();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFILTER_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c241) {
      s1 = peg$c241;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e282); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f50();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFIRST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c242) {
      s0 = peg$c242;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e283); }
    }

    return s0;
  }

  function peg$parseFIXED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c243) {
      s0 = peg$c243;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e284); }
    }

    return s0;
  }

  function peg$parseFLOAT4_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c244) {
      s1 = peg$c244;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e285); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f51();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFLOAT8_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c245) {
      s1 = peg$c245;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e286); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f52();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFLOAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c246) {
      s0 = peg$c246;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e287); }
    }

    return s0;
  }

  function peg$parseFLUSH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c247) {
      s0 = peg$c247;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e288); }
    }

    return s0;
  }

  function peg$parseFOLLOWS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c248) {
      s1 = peg$c248;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e289); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f53();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFORCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c249) {
      s0 = peg$c249;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e290); }
    }

    return s0;
  }

  function peg$parseFOREIGN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c250) {
      s0 = peg$c250;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e291); }
    }

    return s0;
  }

  function peg$parseFOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c251) {
      s0 = peg$c251;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e292); }
    }

    return s0;
  }

  function peg$parseFORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c252) {
      s0 = peg$c252;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e293); }
    }

    return s0;
  }

  function peg$parseFOUND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c253) {
      s0 = peg$c253;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e294); }
    }

    return s0;
  }

  function peg$parseFROM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c254) {
      s0 = peg$c254;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e295); }
    }

    return s0;
  }

  function peg$parseFULL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c255) {
      s0 = peg$c255;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e296); }
    }

    return s0;
  }

  function peg$parseFULLTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c256) {
      s0 = peg$c256;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e297); }
    }

    return s0;
  }

  function peg$parseFUNCTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c257) {
      s0 = peg$c257;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e298); }
    }

    return s0;
  }

  function peg$parseGET_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c258) {
      s1 = peg$c258;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e299); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f54();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGENERAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c259) {
      s0 = peg$c259;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e300); }
    }

    return s0;
  }

  function peg$parseGENERATED_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c260) {
      s1 = peg$c260;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e301); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f55();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGROUP_REPLICATION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17) === peg$c261) {
      s1 = peg$c261;
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e302); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f56();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGEOMETRYCOLLECTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c262) {
      s0 = peg$c262;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e303); }
    }

    return s0;
  }

  function peg$parseGEOMETRY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c263) {
      s0 = peg$c263;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e304); }
    }

    return s0;
  }

  function peg$parseGET_FORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c264) {
      s0 = peg$c264;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e305); }
    }

    return s0;
  }

  function peg$parseGLOBAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c265) {
      s0 = peg$c265;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e306); }
    }

    return s0;
  }

  function peg$parseGRANT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c266) {
      s0 = peg$c266;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e307); }
    }

    return s0;
  }

  function peg$parseGRANTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c267) {
      s0 = peg$c267;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e308); }
    }

    return s0;
  }

  function peg$parseGROUP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c268) {
      s0 = peg$c268;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e309); }
    }

    return s0;
  }

  function peg$parseGROUP_CONCAT_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c269) {
      s1 = peg$c269;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e310); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f57();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHANDLER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c270) {
      s0 = peg$c270;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e311); }
    }

    return s0;
  }

  function peg$parseHASH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c271) {
      s0 = peg$c271;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e312); }
    }

    return s0;
  }

  function peg$parseHAVING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c272) {
      s0 = peg$c272;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e313); }
    }

    return s0;
  }

  function peg$parseHELP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c273) {
      s0 = peg$c273;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e314); }
    }

    return s0;
  }

  function peg$parseHIGH_PRIORITY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c274) {
      s0 = peg$c274;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e315); }
    }

    return s0;
  }

  function peg$parseHOST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c275) {
      s0 = peg$c275;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e316); }
    }

    return s0;
  }

  function peg$parseHOSTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c276) {
      s0 = peg$c276;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e317); }
    }

    return s0;
  }

  function peg$parseHOUR_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c277) {
      s0 = peg$c277;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e318); }
    }

    return s0;
  }

  function peg$parseHOUR_MINUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c278) {
      s0 = peg$c278;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e319); }
    }

    return s0;
  }

  function peg$parseHOUR_SECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c279) {
      s0 = peg$c279;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e320); }
    }

    return s0;
  }

  function peg$parseHOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c280) {
      s0 = peg$c280;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e321); }
    }

    return s0;
  }

  function peg$parseIDENTIFIED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c281) {
      s0 = peg$c281;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e322); }
    }

    return s0;
  }

  function peg$parseIF_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c282) {
      s0 = peg$c282;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e323); }
    }

    return s0;
  }

  function peg$parseIGNORE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c283) {
      s0 = peg$c283;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e324); }
    }

    return s0;
  }

  function peg$parseIGNORE_SERVER_IDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c284) {
      s0 = peg$c284;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e325); }
    }

    return s0;
  }

  function peg$parseIMPORT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c285) {
      s0 = peg$c285;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e326); }
    }

    return s0;
  }

  function peg$parseINDEXES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c286) {
      s0 = peg$c286;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e327); }
    }

    return s0;
  }

  function peg$parseINDEX_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c287) {
      s0 = peg$c287;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e328); }
    }

    return s0;
  }

  function peg$parseINFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c288) {
      s0 = peg$c288;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e329); }
    }

    return s0;
  }

  function peg$parseINITIAL_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c289) {
      s0 = peg$c289;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e330); }
    }

    return s0;
  }

  function peg$parseINNER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c290) {
      s0 = peg$c290;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e331); }
    }

    return s0;
  }

  function peg$parseINOUT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c291) {
      s0 = peg$c291;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e332); }
    }

    return s0;
  }

  function peg$parseINSENSITIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c292) {
      s0 = peg$c292;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e333); }
    }

    return s0;
  }

  function peg$parseINSERT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c293) {
      s0 = peg$c293;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e334); }
    }

    return s0;
  }

  function peg$parseINSERT_METHOD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c294) {
      s0 = peg$c294;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e335); }
    }

    return s0;
  }

  function peg$parseINSTANCE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c295) {
      s1 = peg$c295;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e336); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f58();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINSTALL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c296) {
      s0 = peg$c296;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e337); }
    }

    return s0;
  }

  function peg$parseINTEGER_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c297) {
      s1 = peg$c297;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e338); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f59();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINTERVAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c298) {
      s0 = peg$c298;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e339); }
    }

    return s0;
  }

  function peg$parseINTO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c299) {
      s0 = peg$c299;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e340); }
    }

    return s0;
  }

  function peg$parseINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c300) {
      s0 = peg$c300;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e341); }
    }

    return s0;
  }

  function peg$parseINVOKER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c301) {
      s0 = peg$c301;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e342); }
    }

    return s0;
  }

  function peg$parseIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c302) {
      s0 = peg$c302;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e343); }
    }

    return s0;
  }

  function peg$parseIO_AFTER_GTIDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c303) {
      s0 = peg$c303;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e344); }
    }

    return s0;
  }

  function peg$parseIO_BEFORE_GTIDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c304) {
      s0 = peg$c304;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e345); }
    }

    return s0;
  }

  function peg$parseIO_THREAD_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c305) {
      s1 = peg$c305;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e346); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f60();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c306) {
      s0 = peg$c306;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e347); }
    }

    return s0;
  }

  function peg$parseIPC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c307) {
      s0 = peg$c307;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e348); }
    }

    return s0;
  }

  function peg$parseIS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c308) {
      s0 = peg$c308;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e349); }
    }

    return s0;
  }

  function peg$parseISOLATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c309) {
      s0 = peg$c309;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e350); }
    }

    return s0;
  }

  function peg$parseISSUER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c310) {
      s0 = peg$c310;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e351); }
    }

    return s0;
  }

  function peg$parseITERATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c311) {
      s0 = peg$c311;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e352); }
    }

    return s0;
  }

  function peg$parseJOIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c312) {
      s0 = peg$c312;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e353); }
    }

    return s0;
  }

  function peg$parseJSON_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c313) {
      s1 = peg$c313;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e354); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f61();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKEYS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c314) {
      s0 = peg$c314;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e355); }
    }

    return s0;
  }

  function peg$parseKEY_BLOCK_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c315) {
      s0 = peg$c315;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e356); }
    }

    return s0;
  }

  function peg$parseKEY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c316) {
      s0 = peg$c316;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e357); }
    }

    return s0;
  }

  function peg$parseKILL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c317) {
      s0 = peg$c317;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e358); }
    }

    return s0;
  }

  function peg$parseLANGUAGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c318) {
      s0 = peg$c318;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e359); }
    }

    return s0;
  }

  function peg$parseLAST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c319) {
      s0 = peg$c319;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e360); }
    }

    return s0;
  }

  function peg$parseLEADING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c320) {
      s0 = peg$c320;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e361); }
    }

    return s0;
  }

  function peg$parseLEAVES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c321) {
      s0 = peg$c321;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e362); }
    }

    return s0;
  }

  function peg$parseLEAVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c322) {
      s0 = peg$c322;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e363); }
    }

    return s0;
  }

  function peg$parseLEFT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c323) {
      s0 = peg$c323;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e364); }
    }

    return s0;
  }

  function peg$parseLESS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c324) {
      s0 = peg$c324;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e365); }
    }

    return s0;
  }

  function peg$parseLEVEL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c325) {
      s0 = peg$c325;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e366); }
    }

    return s0;
  }

  function peg$parseLIKE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c326) {
      s0 = peg$c326;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e367); }
    }

    return s0;
  }

  function peg$parseLIMIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c327) {
      s0 = peg$c327;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e368); }
    }

    return s0;
  }

  function peg$parseLINEAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c328) {
      s0 = peg$c328;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e369); }
    }

    return s0;
  }

  function peg$parseLINES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c329) {
      s0 = peg$c329;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e370); }
    }

    return s0;
  }

  function peg$parseLINESTRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c330) {
      s0 = peg$c330;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e371); }
    }

    return s0;
  }

  function peg$parseLIST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c331) {
      s0 = peg$c331;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e372); }
    }

    return s0;
  }

  function peg$parseLOAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c332) {
      s0 = peg$c332;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e373); }
    }

    return s0;
  }

  function peg$parseLOCALTIME_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c333) {
      s1 = peg$c333;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e374); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f62();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLOCALTIMESTAMP_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c334) {
      s1 = peg$c334;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e375); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f63();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLOCAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c335) {
      s0 = peg$c335;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e376); }
    }

    return s0;
  }

  function peg$parseLOCATOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c336) {
      s0 = peg$c336;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e377); }
    }

    return s0;
  }

  function peg$parseLOCKS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c337) {
      s0 = peg$c337;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e378); }
    }

    return s0;
  }

  function peg$parseLOCK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c338) {
      s0 = peg$c338;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e379); }
    }

    return s0;
  }

  function peg$parseLOGFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c339) {
      s0 = peg$c339;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e380); }
    }

    return s0;
  }

  function peg$parseLOGS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c340) {
      s0 = peg$c340;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e381); }
    }

    return s0;
  }

  function peg$parseLONGBLOB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c341) {
      s0 = peg$c341;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e382); }
    }

    return s0;
  }

  function peg$parseLONGTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c342) {
      s0 = peg$c342;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e383); }
    }

    return s0;
  }

  function peg$parseLONG_NUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c343) {
      s0 = peg$c343;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e384); }
    }

    return s0;
  }

  function peg$parseLONG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c344) {
      s0 = peg$c344;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e385); }
    }

    return s0;
  }

  function peg$parseLOOP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c345) {
      s0 = peg$c345;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e386); }
    }

    return s0;
  }

  function peg$parseLOW_PRIORITY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c346) {
      s0 = peg$c346;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e387); }
    }

    return s0;
  }

  function peg$parseMASTER_AUTO_POSITION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 20) === peg$c347) {
      s1 = peg$c347;
      peg$currPos += 20;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e388); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f64();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_BIND_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c348) {
      s1 = peg$c348;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e389); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f65();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_CONNECT_RETRY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c349) {
      s0 = peg$c349;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e390); }
    }

    return s0;
  }

  function peg$parseMASTER_DELAY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c350) {
      s0 = peg$c350;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e391); }
    }

    return s0;
  }

  function peg$parseMASTER_HOST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c351) {
      s0 = peg$c351;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e392); }
    }

    return s0;
  }

  function peg$parseMASTER_LOG_FILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c352) {
      s0 = peg$c352;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e393); }
    }

    return s0;
  }

  function peg$parseMASTER_LOG_POS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c353) {
      s0 = peg$c353;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e394); }
    }

    return s0;
  }

  function peg$parseMASTER_PASSWORD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c354) {
      s0 = peg$c354;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e395); }
    }

    return s0;
  }

  function peg$parseMASTER_PORT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c355) {
      s0 = peg$c355;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e396); }
    }

    return s0;
  }

  function peg$parseMASTER_RETRY_COUNT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c356) {
      s1 = peg$c356;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e397); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f66();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_SERVER_ID_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c357) {
      s0 = peg$c357;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e398); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CAPATH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c358) {
      s0 = peg$c358;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e399); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c359) {
      s0 = peg$c359;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e400); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CERT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c360) {
      s0 = peg$c360;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e401); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CIPHER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c361) {
      s0 = peg$c361;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e402); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CRL_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c362) {
      s1 = peg$c362;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e403); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f67();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_SSL_CRLPATH_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c363) {
      s1 = peg$c363;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e404); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f68();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_SSL_KEY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c364) {
      s0 = peg$c364;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e405); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c365) {
      s0 = peg$c365;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e406); }
    }

    return s0;
  }

  function peg$parseMASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 29) === peg$c366) {
      s0 = peg$c366;
      peg$currPos += 29;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e407); }
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    return s0;
  }

  function peg$parseMASTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c367) {
      s0 = peg$c367;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e408); }
    }

    return s0;
  }

  function peg$parseMASTER_TLS_VERSION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c368) {
      s1 = peg$c368;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e409); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f69();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_USER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c369) {
      s0 = peg$c369;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e410); }
    }

    return s0;
  }

  function peg$parseMASTER_HEARTBEAT_PERIOD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 23) === peg$c370) {
      s0 = peg$c370;
      peg$currPos += 23;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e411); }
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    return s0;
  }

  function peg$parseMATCH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c371) {
      s0 = peg$c371;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e412); }
    }

    return s0;
  }

  function peg$parseMAX_CONNECTIONS_PER_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 24) === peg$c372) {
      s0 = peg$c372;
      peg$currPos += 24;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e413); }
    }

    return s0;
  }

  function peg$parseMAX_QUERIES_PER_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c373) {
      s0 = peg$c373;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e414); }
    }

    return s0;
  }

  function peg$parseMAX_ROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c374) {
      s0 = peg$c374;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e415); }
    }

    return s0;
  }

  function peg$parseMAX_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c375) {
      s0 = peg$c375;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e416); }
    }

    return s0;
  }

  function peg$parseMAX_STATEMENT_TIME_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c376) {
      s1 = peg$c376;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e417); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f70();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMAX_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c377) {
      s1 = peg$c377;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e418); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f71();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMAX_UPDATES_PER_HOUR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c378) {
      s0 = peg$c378;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e419); }
    }

    return s0;
  }

  function peg$parseMAX_USER_CONNECTIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c379) {
      s0 = peg$c379;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e420); }
    }

    return s0;
  }

  function peg$parseMAXVALUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c380) {
      s0 = peg$c380;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e421); }
    }

    return s0;
  }

  function peg$parseMEDIUMBLOB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c381) {
      s0 = peg$c381;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e422); }
    }

    return s0;
  }

  function peg$parseMEDIUMINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c382) {
      s0 = peg$c382;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e423); }
    }

    return s0;
  }

  function peg$parseMEDIUMTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c383) {
      s0 = peg$c383;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e424); }
    }

    return s0;
  }

  function peg$parseMEDIUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c384) {
      s0 = peg$c384;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e425); }
    }

    return s0;
  }

  function peg$parseMEMORY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c385) {
      s0 = peg$c385;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e426); }
    }

    return s0;
  }

  function peg$parseMERGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c386) {
      s0 = peg$c386;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e427); }
    }

    return s0;
  }

  function peg$parseMESSAGE_TEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c387) {
      s0 = peg$c387;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e428); }
    }

    return s0;
  }

  function peg$parseMICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c388) {
      s0 = peg$c388;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e429); }
    }

    return s0;
  }

  function peg$parseMID_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c389) {
      s1 = peg$c389;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e430); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f72();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMIDDLEINT_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c390) {
      s1 = peg$c390;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e431); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f73();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMIGRATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c391) {
      s0 = peg$c391;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e432); }
    }

    return s0;
  }

  function peg$parseMINUTE_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c392) {
      s0 = peg$c392;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e433); }
    }

    return s0;
  }

  function peg$parseMINUTE_SECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c393) {
      s0 = peg$c393;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e434); }
    }

    return s0;
  }

  function peg$parseMINUTE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c394) {
      s0 = peg$c394;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e435); }
    }

    return s0;
  }

  function peg$parseMIN_ROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c395) {
      s0 = peg$c395;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e436); }
    }

    return s0;
  }

  function peg$parseMIN_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c396) {
      s1 = peg$c396;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e437); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f74();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMODE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c397) {
      s0 = peg$c397;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e438); }
    }

    return s0;
  }

  function peg$parseMODIFIES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c398) {
      s0 = peg$c398;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e439); }
    }

    return s0;
  }

  function peg$parseMODIFY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c399) {
      s0 = peg$c399;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e440); }
    }

    return s0;
  }

  function peg$parseMOD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c400) {
      s0 = peg$c400;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e441); }
    }

    return s0;
  }

  function peg$parseMONTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c401) {
      s0 = peg$c401;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e442); }
    }

    return s0;
  }

  function peg$parseMULTILINESTRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c402) {
      s0 = peg$c402;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e443); }
    }

    return s0;
  }

  function peg$parseMULTIPOINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c403) {
      s0 = peg$c403;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e444); }
    }

    return s0;
  }

  function peg$parseMULTIPOLYGON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c404) {
      s0 = peg$c404;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e445); }
    }

    return s0;
  }

  function peg$parseMUTEX_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c405) {
      s0 = peg$c405;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e446); }
    }

    return s0;
  }

  function peg$parseMYSQL_ERRNO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c406) {
      s0 = peg$c406;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e447); }
    }

    return s0;
  }

  function peg$parseNAMES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c407) {
      s0 = peg$c407;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e448); }
    }

    return s0;
  }

  function peg$parseNAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c408) {
      s0 = peg$c408;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e449); }
    }

    return s0;
  }

  function peg$parseNATIONAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c409) {
      s0 = peg$c409;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e450); }
    }

    return s0;
  }

  function peg$parseNATURAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c410) {
      s0 = peg$c410;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e451); }
    }

    return s0;
  }

  function peg$parseNCHAR_STRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c411) {
      s0 = peg$c411;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e452); }
    }

    return s0;
  }

  function peg$parseNCHAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c412) {
      s0 = peg$c412;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e453); }
    }

    return s0;
  }

  function peg$parseNDB_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c413) {
      s1 = peg$c413;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e454); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNDBCLUSTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c414) {
      s0 = peg$c414;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e455); }
    }

    return s0;
  }

  function peg$parseNEG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c415) {
      s0 = peg$c415;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e456); }
    }

    return s0;
  }

  function peg$parseNEVER_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c416) {
      s1 = peg$c416;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e457); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f76();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNEW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c417) {
      s0 = peg$c417;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e458); }
    }

    return s0;
  }

  function peg$parseNEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c418) {
      s0 = peg$c418;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e459); }
    }

    return s0;
  }

  function peg$parseNODEGROUP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c419) {
      s0 = peg$c419;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e460); }
    }

    return s0;
  }

  function peg$parseNONE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c420) {
      s0 = peg$c420;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e461); }
    }

    return s0;
  }

  function peg$parseNONBLOCKING_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c421) {
      s1 = peg$c421;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e462); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f77();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNOT_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c422) {
      s1 = peg$c422;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e463); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f78();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNOW_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c423) {
      s1 = peg$c423;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e464); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f79();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c424) {
      s0 = peg$c424;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e465); }
    }

    return s0;
  }

  function peg$parseNO_WAIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c425) {
      s0 = peg$c425;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e466); }
    }

    return s0;
  }

  function peg$parseNO_WRITE_TO_BINLOG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c426) {
      s0 = peg$c426;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e467); }
    }

    return s0;
  }

  function peg$parseNULL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c427) {
      s0 = peg$c427;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e468); }
    }

    return s0;
  }

  function peg$parseNUMBER_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c428) {
      s1 = peg$c428;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e469); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f80();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNUMERIC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c429) {
      s0 = peg$c429;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e470); }
    }

    return s0;
  }

  function peg$parseNVARCHAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c430) {
      s0 = peg$c430;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e471); }
    }

    return s0;
  }

  function peg$parseOFFLINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c431) {
      s0 = peg$c431;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e472); }
    }

    return s0;
  }

  function peg$parseOFFSET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c432) {
      s0 = peg$c432;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e473); }
    }

    return s0;
  }

  function peg$parseOLD_PASSWORD_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c433) {
      s1 = peg$c433;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e474); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f81();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c434) {
      s0 = peg$c434;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e475); }
    }

    return s0;
  }

  function peg$parseONE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c435) {
      s0 = peg$c435;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e476); }
    }

    return s0;
  }

  function peg$parseONLINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c436) {
      s0 = peg$c436;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e477); }
    }

    return s0;
  }

  function peg$parseONLY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c437) {
      s1 = peg$c437;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e478); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f82();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOPEN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c438) {
      s0 = peg$c438;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e479); }
    }

    return s0;
  }

  function peg$parseOPTIMIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c439) {
      s0 = peg$c439;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e480); }
    }

    return s0;
  }

  function peg$parseOPTIMIZER_COSTS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c440) {
      s1 = peg$c440;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e481); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f83();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOPTIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c441) {
      s0 = peg$c441;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e482); }
    }

    return s0;
  }

  function peg$parseOPTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c442) {
      s0 = peg$c442;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e483); }
    }

    return s0;
  }

  function peg$parseOPTIONALLY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c443) {
      s0 = peg$c443;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e484); }
    }

    return s0;
  }

  function peg$parseORDER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c444) {
      s0 = peg$c444;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e485); }
    }

    return s0;
  }

  function peg$parseOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c445) {
      s0 = peg$c445;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e486); }
    }

    return s0;
  }

  function peg$parseOUTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c446) {
      s0 = peg$c446;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e487); }
    }

    return s0;
  }

  function peg$parseOUTFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c447) {
      s0 = peg$c447;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e488); }
    }

    return s0;
  }

  function peg$parseOUT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c448) {
      s0 = peg$c448;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e489); }
    }

    return s0;
  }

  function peg$parseOWNER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c449) {
      s0 = peg$c449;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e490); }
    }

    return s0;
  }

  function peg$parsePACK_KEYS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c450) {
      s0 = peg$c450;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e491); }
    }

    return s0;
  }

  function peg$parsePAGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c451) {
      s0 = peg$c451;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e492); }
    }

    return s0;
  }

  function peg$parsePARSER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c452) {
      s0 = peg$c452;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e493); }
    }

    return s0;
  }

  function peg$parsePARTIAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c453) {
      s0 = peg$c453;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e494); }
    }

    return s0;
  }

  function peg$parsePARTITIONING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c454) {
      s0 = peg$c454;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e495); }
    }

    return s0;
  }

  function peg$parsePARTITIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c455) {
      s0 = peg$c455;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e496); }
    }

    return s0;
  }

  function peg$parsePARTITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c456) {
      s0 = peg$c456;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e497); }
    }

    return s0;
  }

  function peg$parsePASSWORD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c457) {
      s0 = peg$c457;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e498); }
    }

    return s0;
  }

  function peg$parsePHASE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c458) {
      s0 = peg$c458;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e499); }
    }

    return s0;
  }

  function peg$parsePLUGINS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c459) {
      s0 = peg$c459;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e500); }
    }

    return s0;
  }

  function peg$parsePLUGIN_DIR_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c460) {
      s1 = peg$c460;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e501); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f84();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePLUGIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c461) {
      s0 = peg$c461;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e502); }
    }

    return s0;
  }

  function peg$parsePOINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c462) {
      s0 = peg$c462;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e503); }
    }

    return s0;
  }

  function peg$parsePOLYGON_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c463) {
      s0 = peg$c463;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e504); }
    }

    return s0;
  }

  function peg$parsePORT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c464) {
      s0 = peg$c464;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e505); }
    }

    return s0;
  }

  function peg$parsePOSITION_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c465) {
      s1 = peg$c465;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e506); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePRECEDES_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c466) {
      s1 = peg$c466;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e507); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f86();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePRECISION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c467) {
      s0 = peg$c467;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e508); }
    }

    return s0;
  }

  function peg$parsePREPARE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c468) {
      s0 = peg$c468;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e509); }
    }

    return s0;
  }

  function peg$parsePRESERVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c469) {
      s0 = peg$c469;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e510); }
    }

    return s0;
  }

  function peg$parsePREV_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c470) {
      s0 = peg$c470;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e511); }
    }

    return s0;
  }

  function peg$parsePRIMARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c471) {
      s0 = peg$c471;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e512); }
    }

    return s0;
  }

  function peg$parsePRIVILEGES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c472) {
      s0 = peg$c472;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e513); }
    }

    return s0;
  }

  function peg$parsePROCEDURE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c473) {
      s0 = peg$c473;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e514); }
    }

    return s0;
  }

  function peg$parsePROCESS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c474) {
      s0 = peg$c474;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e515); }
    }

    return s0;
  }

  function peg$parsePROCESSLIST_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c475) {
      s0 = peg$c475;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e516); }
    }

    return s0;
  }

  function peg$parsePROFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c476) {
      s0 = peg$c476;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e517); }
    }

    return s0;
  }

  function peg$parsePROFILES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c477) {
      s0 = peg$c477;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e518); }
    }

    return s0;
  }

  function peg$parsePROXY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c478) {
      s0 = peg$c478;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e519); }
    }

    return s0;
  }

  function peg$parsePURGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c479) {
      s0 = peg$c479;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e520); }
    }

    return s0;
  }

  function peg$parseQUARTER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c480) {
      s0 = peg$c480;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e521); }
    }

    return s0;
  }

  function peg$parseQUERY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c481) {
      s0 = peg$c481;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e522); }
    }

    return s0;
  }

  function peg$parseQUICK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c482) {
      s0 = peg$c482;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e523); }
    }

    return s0;
  }

  function peg$parseRANGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c483) {
      s0 = peg$c483;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e524); }
    }

    return s0;
  }

  function peg$parseREADS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c484) {
      s0 = peg$c484;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e525); }
    }

    return s0;
  }

  function peg$parseREAD_ONLY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c485) {
      s0 = peg$c485;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e526); }
    }

    return s0;
  }

  function peg$parseREAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c486) {
      s0 = peg$c486;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e527); }
    }

    return s0;
  }

  function peg$parseREAD_WRITE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c487) {
      s0 = peg$c487;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e528); }
    }

    return s0;
  }

  function peg$parseREAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c488) {
      s0 = peg$c488;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e529); }
    }

    return s0;
  }

  function peg$parseREBUILD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c489) {
      s0 = peg$c489;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e530); }
    }

    return s0;
  }

  function peg$parseRECOVER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c490) {
      s0 = peg$c490;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e531); }
    }

    return s0;
  }

  function peg$parseREDOFILE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c491) {
      s1 = peg$c491;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e532); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f87();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREDO_BUFFER_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c492) {
      s0 = peg$c492;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e533); }
    }

    return s0;
  }

  function peg$parseREDUNDANT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c493) {
      s0 = peg$c493;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e534); }
    }

    return s0;
  }

  function peg$parseREFERENCES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c494) {
      s0 = peg$c494;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e535); }
    }

    return s0;
  }

  function peg$parseREGEXP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c495) {
      s0 = peg$c495;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e536); }
    }

    return s0;
  }

  function peg$parseRELAY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c496) {
      s0 = peg$c496;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e537); }
    }

    return s0;
  }

  function peg$parseRELAYLOG_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c497) {
      s0 = peg$c497;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e538); }
    }

    return s0;
  }

  function peg$parseRELAY_LOG_FILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c498) {
      s0 = peg$c498;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e539); }
    }

    return s0;
  }

  function peg$parseRELAY_LOG_POS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c499) {
      s0 = peg$c499;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e540); }
    }

    return s0;
  }

  function peg$parseRELAY_THREAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c500) {
      s0 = peg$c500;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e541); }
    }

    return s0;
  }

  function peg$parseRELEASE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c501) {
      s0 = peg$c501;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e542); }
    }

    return s0;
  }

  function peg$parseRELOAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c502) {
      s0 = peg$c502;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e543); }
    }

    return s0;
  }

  function peg$parseREMOVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c503) {
      s0 = peg$c503;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e544); }
    }

    return s0;
  }

  function peg$parseRENAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c504) {
      s0 = peg$c504;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e545); }
    }

    return s0;
  }

  function peg$parseREORGANIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c505) {
      s0 = peg$c505;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e546); }
    }

    return s0;
  }

  function peg$parseREPAIR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c506) {
      s0 = peg$c506;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e547); }
    }

    return s0;
  }

  function peg$parseREPEATABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c507) {
      s0 = peg$c507;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e548); }
    }

    return s0;
  }

  function peg$parseREPEAT_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c508) {
      s1 = peg$c508;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e549); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f88();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseREPLACE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c509) {
      s1 = peg$c509;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e550); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f89();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseREPLICATION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c510) {
      s0 = peg$c510;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e551); }
    }

    return s0;
  }

  function peg$parseREPLICATE_DO_DB_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c511) {
      s1 = peg$c511;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e552); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f90();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREPLICATE_IGNORE_DB_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19) === peg$c512) {
      s1 = peg$c512;
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e553); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f91();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREPLICATE_DO_TABLE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c513) {
      s1 = peg$c513;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e554); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f92();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREPLICATE_IGNORE_TABLE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 22) === peg$c514) {
      s1 = peg$c514;
      peg$currPos += 22;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e555); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f93();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREPLICATE_WILD_DO_TABLE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 23) === peg$c515) {
      s1 = peg$c515;
      peg$currPos += 23;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e556); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f94();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 27) === peg$c516) {
      s1 = peg$c516;
      peg$currPos += 27;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e557); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f95();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREPLICATE_REWRITE_DB_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 20) === peg$c517) {
      s1 = peg$c517;
      peg$currPos += 20;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e558); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f96();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREQUIRE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c518) {
      s0 = peg$c518;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e559); }
    }

    return s0;
  }

  function peg$parseRESET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c519) {
      s0 = peg$c519;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e560); }
    }

    return s0;
  }

  function peg$parseRESIGNAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c520) {
      s0 = peg$c520;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e561); }
    }

    return s0;
  }

  function peg$parseRESTORE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c521) {
      s0 = peg$c521;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e562); }
    }

    return s0;
  }

  function peg$parseRESTRICT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c522) {
      s0 = peg$c522;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e563); }
    }

    return s0;
  }

  function peg$parseRESUME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c523) {
      s0 = peg$c523;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e564); }
    }

    return s0;
  }

  function peg$parseRETURNED_SQLSTATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c524) {
      s0 = peg$c524;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e565); }
    }

    return s0;
  }

  function peg$parseRETURNS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c525) {
      s0 = peg$c525;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e566); }
    }

    return s0;
  }

  function peg$parseRETURN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c526) {
      s0 = peg$c526;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e567); }
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    return s0;
  }

  function peg$parseREVERSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c527) {
      s0 = peg$c527;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e568); }
    }

    return s0;
  }

  function peg$parseREVOKE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c528) {
      s0 = peg$c528;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e569); }
    }

    return s0;
  }

  function peg$parseRIGHT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c529) {
      s0 = peg$c529;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e570); }
    }

    return s0;
  }

  function peg$parseRLIKE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c530) {
      s1 = peg$c530;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e571); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f97();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseROLLBACK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c531) {
      s0 = peg$c531;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e572); }
    }

    return s0;
  }

  function peg$parseROLLUP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c532) {
      s0 = peg$c532;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e573); }
    }

    return s0;
  }

  function peg$parseROTATE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c533) {
      s1 = peg$c533;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e574); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f98();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseROUTINE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c534) {
      s0 = peg$c534;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e575); }
    }

    return s0;
  }

  function peg$parseROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c535) {
      s0 = peg$c535;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e576); }
    }

    return s0;
  }

  function peg$parseROW_COUNT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c536) {
      s0 = peg$c536;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e577); }
    }

    return s0;
  }

  function peg$parseROW_FORMAT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c537) {
      s0 = peg$c537;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e578); }
    }

    return s0;
  }

  function peg$parseROW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c538) {
      s0 = peg$c538;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e579); }
    }

    return s0;
  }

  function peg$parseRTREE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c539) {
      s0 = peg$c539;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e580); }
    }

    return s0;
  }

  function peg$parseSAVEPOINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c540) {
      s0 = peg$c540;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e581); }
    }

    return s0;
  }

  function peg$parseSCHEDULE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c541) {
      s0 = peg$c541;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e582); }
    }

    return s0;
  }

  function peg$parseSCHEMA_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c542) {
      s1 = peg$c542;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e583); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f99();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSCHEMA_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c543) {
      s0 = peg$c543;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e584); }
    }

    return s0;
  }

  function peg$parseSCHEMAS_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c544) {
      s1 = peg$c544;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e585); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f100();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSECOND_MICROSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c545) {
      s0 = peg$c545;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e586); }
    }

    return s0;
  }

  function peg$parseSECOND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c546) {
      s0 = peg$c546;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e587); }
    }

    return s0;
  }

  function peg$parseSECURITY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c547) {
      s0 = peg$c547;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e588); }
    }

    return s0;
  }

  function peg$parseSELECT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c548) {
      s0 = peg$c548;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e589); }
    }

    return s0;
  }

  function peg$parseSENSITIVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c549) {
      s0 = peg$c549;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e590); }
    }

    return s0;
  }

  function peg$parseSEPARATOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c550) {
      s0 = peg$c550;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e591); }
    }

    return s0;
  }

  function peg$parseSERIALIZABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c551) {
      s0 = peg$c551;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e592); }
    }

    return s0;
  }

  function peg$parseSERIAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c552) {
      s0 = peg$c552;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e593); }
    }

    return s0;
  }

  function peg$parseSESSION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c553) {
      s0 = peg$c553;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e594); }
    }

    return s0;
  }

  function peg$parseSERVER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c554) {
      s0 = peg$c554;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e595); }
    }

    return s0;
  }

  function peg$parseSERVER_OPTIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c555) {
      s0 = peg$c555;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e596); }
    }

    return s0;
  }

  function peg$parseSESSION_USER_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c556) {
      s1 = peg$c556;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e597); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f101();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c557) {
      s0 = peg$c557;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e598); }
    }

    return s0;
  }

  function peg$parseSET_VAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c558) {
      s0 = peg$c558;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e599); }
    }

    return s0;
  }

  function peg$parseSHARE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c559) {
      s0 = peg$c559;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e600); }
    }

    return s0;
  }

  function peg$parseSHOW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c560) {
      s0 = peg$c560;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e601); }
    }

    return s0;
  }

  function peg$parseSHUTDOWN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c561) {
      s0 = peg$c561;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e602); }
    }

    return s0;
  }

  function peg$parseSIGNAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c562) {
      s0 = peg$c562;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e603); }
    }

    return s0;
  }

  function peg$parseSIGNED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c563) {
      s0 = peg$c563;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e604); }
    }

    return s0;
  }

  function peg$parseSIMPLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c564) {
      s0 = peg$c564;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e605); }
    }

    return s0;
  }

  function peg$parseSLAVE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c565) {
      s0 = peg$c565;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e606); }
    }

    return s0;
  }

  function peg$parseSLOW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c566) {
      s0 = peg$c566;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e607); }
    }

    return s0;
  }

  function peg$parseSMALLINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c567) {
      s0 = peg$c567;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e608); }
    }

    return s0;
  }

  function peg$parseSNAPSHOT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c568) {
      s0 = peg$c568;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e609); }
    }

    return s0;
  }

  function peg$parseSOME_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c569) {
      s1 = peg$c569;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e610); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f102();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSOCKET_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c570) {
      s0 = peg$c570;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e611); }
    }

    return s0;
  }

  function peg$parseSONAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c571) {
      s0 = peg$c571;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e612); }
    }

    return s0;
  }

  function peg$parseSOUNDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c572) {
      s0 = peg$c572;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e613); }
    }

    return s0;
  }

  function peg$parseSOURCE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c573) {
      s0 = peg$c573;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e614); }
    }

    return s0;
  }

  function peg$parseSPATIAL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c574) {
      s0 = peg$c574;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e615); }
    }

    return s0;
  }

  function peg$parseSPECIFIC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c575) {
      s0 = peg$c575;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e616); }
    }

    return s0;
  }

  function peg$parseSQLEXCEPTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c576) {
      s0 = peg$c576;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e617); }
    }

    return s0;
  }

  function peg$parseSQLSTATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c577) {
      s0 = peg$c577;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e618); }
    }

    return s0;
  }

  function peg$parseSQLWARNING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c578) {
      s0 = peg$c578;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e619); }
    }

    return s0;
  }

  function peg$parseSQL_AFTER_GTIDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c579) {
      s0 = peg$c579;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e620); }
    }

    return s0;
  }

  function peg$parseSQL_AFTER_MTS_GAPS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c580) {
      s1 = peg$c580;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e621); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f103();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSQL_BEFORE_GTIDS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c581) {
      s0 = peg$c581;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e622); }
    }

    return s0;
  }

  function peg$parseSQL_BIG_RESULT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c582) {
      s0 = peg$c582;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e623); }
    }

    return s0;
  }

  function peg$parseSQL_BUFFER_RESULT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c583) {
      s0 = peg$c583;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e624); }
    }

    return s0;
  }

  function peg$parseSQL_CACHE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c584) {
      s1 = peg$c584;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e625); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f104();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSQL_CALC_FOUND_ROWS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 19) === peg$c585) {
      s0 = peg$c585;
      peg$currPos += 19;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e626); }
    }

    return s0;
  }

  function peg$parseSQL_NO_CACHE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c586) {
      s0 = peg$c586;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e627); }
    }

    return s0;
  }

  function peg$parseSQL_SMALL_RESULT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c587) {
      s0 = peg$c587;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e628); }
    }

    return s0;
  }

  function peg$parseSQL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c588) {
      s0 = peg$c588;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e629); }
    }

    return s0;
  }

  function peg$parseSQL_THREAD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c589) {
      s0 = peg$c589;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e630); }
    }

    return s0;
  }

  function peg$parseSSL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c590) {
      s0 = peg$c590;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e631); }
    }

    return s0;
  }

  function peg$parseSTACKED_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c591) {
      s1 = peg$c591;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e632); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f105();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTARTING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c592) {
      s0 = peg$c592;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e633); }
    }

    return s0;
  }

  function peg$parseSTARTS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c593) {
      s0 = peg$c593;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e634); }
    }

    return s0;
  }

  function peg$parseSTART_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c594) {
      s0 = peg$c594;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e635); }
    }

    return s0;
  }

  function peg$parseSTATS_AUTO_RECALC_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c595) {
      s0 = peg$c595;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e636); }
    }

    return s0;
  }

  function peg$parseSTATS_PERSISTENT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c596) {
      s0 = peg$c596;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e637); }
    }

    return s0;
  }

  function peg$parseSTATS_SAMPLE_PAGES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c597) {
      s0 = peg$c597;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e638); }
    }

    return s0;
  }

  function peg$parseSTATUS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c598) {
      s0 = peg$c598;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e639); }
    }

    return s0;
  }

  function peg$parseSTDDEV_SAMP_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c599) {
      s1 = peg$c599;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e640); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f106();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTDDEV_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c600) {
      s1 = peg$c600;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e641); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f107();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTDDEV_POP_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c601) {
      s1 = peg$c601;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e642); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f108();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTD_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c602) {
      s1 = peg$c602;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e643); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f109();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTOP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c603) {
      s0 = peg$c603;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e644); }
    }

    return s0;
  }

  function peg$parseSTORAGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c604) {
      s0 = peg$c604;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e645); }
    }

    return s0;
  }

  function peg$parseSTORED_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c605) {
      s1 = peg$c605;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e646); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f110();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTRAIGHT_JOIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c606) {
      s0 = peg$c606;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e647); }
    }

    return s0;
  }

  function peg$parseSTRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c607) {
      s0 = peg$c607;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e648); }
    }

    return s0;
  }

  function peg$parseSUBCLASS_ORIGIN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c608) {
      s0 = peg$c608;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e649); }
    }

    return s0;
  }

  function peg$parseSUBDATE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c609) {
      s1 = peg$c609;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e650); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f111();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUBJECT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c610) {
      s0 = peg$c610;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e651); }
    }

    return s0;
  }

  function peg$parseSUBPARTITIONS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c611) {
      s0 = peg$c611;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e652); }
    }

    return s0;
  }

  function peg$parseSUBPARTITION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c612) {
      s0 = peg$c612;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e653); }
    }

    return s0;
  }

  function peg$parseSUBSTR_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c613) {
      s1 = peg$c613;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e654); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f112();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUBSTRING_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c614) {
      s1 = peg$c614;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e655); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f113();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUM_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c615) {
      s1 = peg$c615;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e656); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f114();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUPER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c616) {
      s0 = peg$c616;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e657); }
    }

    return s0;
  }

  function peg$parseSUSPEND_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c617) {
      s0 = peg$c617;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e658); }
    }

    return s0;
  }

  function peg$parseSWAPS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c618) {
      s0 = peg$c618;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e659); }
    }

    return s0;
  }

  function peg$parseSWITCHES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c619) {
      s0 = peg$c619;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e660); }
    }

    return s0;
  }

  function peg$parseSYSDATE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c620) {
      s1 = peg$c620;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e661); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f115();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSYSTEM_USER_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c621) {
      s1 = peg$c621;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e662); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f116();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTABLES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c622) {
      s0 = peg$c622;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e663); }
    }

    return s0;
  }

  function peg$parseTABLESPACE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c623) {
      s0 = peg$c623;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e664); }
    }

    return s0;
  }

  function peg$parseTABLE_REF_PRIORITY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c624) {
      s1 = peg$c624;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e665); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f117();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c625) {
      s0 = peg$c625;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e666); }
    }

    return s0;
  }

  function peg$parseTABLE_CHECKSUM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c626) {
      s0 = peg$c626;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e667); }
    }

    return s0;
  }

  function peg$parseTABLE_NAME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c627) {
      s0 = peg$c627;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e668); }
    }

    return s0;
  }

  function peg$parseTEMPORARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c628) {
      s0 = peg$c628;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e669); }
    }

    return s0;
  }

  function peg$parseTEMPTABLE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c629) {
      s0 = peg$c629;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e670); }
    }

    return s0;
  }

  function peg$parseTERMINATED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c630) {
      s0 = peg$c630;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e671); }
    }

    return s0;
  }

  function peg$parseTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c631) {
      s0 = peg$c631;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e672); }
    }

    return s0;
  }

  function peg$parseTHAN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c632) {
      s0 = peg$c632;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e673); }
    }

    return s0;
  }

  function peg$parseTHEN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c633) {
      s0 = peg$c633;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e674); }
    }

    return s0;
  }

  function peg$parseTIMESTAMP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c634) {
      s0 = peg$c634;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e675); }
    }

    return s0;
  }

  function peg$parseTIMESTAMP_ADD_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c635) {
      s0 = peg$c635;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e676); }
    }

    return s0;
  }

  function peg$parseTIMESTAMP_DIFF_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c636) {
      s0 = peg$c636;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e677); }
    }

    return s0;
  }

  function peg$parseTIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c637) {
      s0 = peg$c637;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e678); }
    }

    return s0;
  }

  function peg$parseTINYBLOB_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c638) {
      s0 = peg$c638;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e679); }
    }

    return s0;
  }

  function peg$parseTINYINT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c639) {
      s0 = peg$c639;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e680); }
    }

    return s0;
  }

  function peg$parseTINYTEXT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c640) {
      s0 = peg$c640;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e681); }
    }

    return s0;
  }

  function peg$parseTO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c641) {
      s0 = peg$c641;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e682); }
    }

    return s0;
  }

  function peg$parseTRAILING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c642) {
      s0 = peg$c642;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e683); }
    }

    return s0;
  }

  function peg$parseTRANSACTION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c643) {
      s0 = peg$c643;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e684); }
    }

    return s0;
  }

  function peg$parseTRIGGERS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c644) {
      s0 = peg$c644;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e685); }
    }

    return s0;
  }

  function peg$parseTRIGGER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c645) {
      s0 = peg$c645;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e686); }
    }

    return s0;
  }

  function peg$parseTRIM_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c646) {
      s1 = peg$c646;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e687); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f118();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTRUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c647) {
      s0 = peg$c647;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e688); }
    }

    return s0;
  }

  function peg$parseTRUNCATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c648) {
      s0 = peg$c648;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e689); }
    }

    return s0;
  }

  function peg$parseTYPES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c649) {
      s0 = peg$c649;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e690); }
    }

    return s0;
  }

  function peg$parseTYPE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c650) {
      s0 = peg$c650;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e691); }
    }

    return s0;
  }

  function peg$parseUDF_RETURNS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c651) {
      s0 = peg$c651;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e692); }
    }

    return s0;
  }

  function peg$parseUNCOMMITTED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c652) {
      s0 = peg$c652;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e693); }
    }

    return s0;
  }

  function peg$parseUNDEFINED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c653) {
      s0 = peg$c653;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e694); }
    }

    return s0;
  }

  function peg$parseUNDOFILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c654) {
      s0 = peg$c654;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e695); }
    }

    return s0;
  }

  function peg$parseUNDO_BUFFER_SIZE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c655) {
      s0 = peg$c655;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e696); }
    }

    return s0;
  }

  function peg$parseUNDO_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c656) {
      s0 = peg$c656;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e697); }
    }

    return s0;
  }

  function peg$parseUNICODE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c657) {
      s0 = peg$c657;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e698); }
    }

    return s0;
  }

  function peg$parseUNINSTALL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c658) {
      s0 = peg$c658;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e699); }
    }

    return s0;
  }

  function peg$parseUNION_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c659) {
      s0 = peg$c659;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e700); }
    }

    return s0;
  }

  function peg$parseUNIQUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c660) {
      s0 = peg$c660;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e701); }
    }

    return s0;
  }

  function peg$parseUNKNOWN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c661) {
      s0 = peg$c661;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e702); }
    }

    return s0;
  }

  function peg$parseUNLOCK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c662) {
      s0 = peg$c662;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e703); }
    }

    return s0;
  }

  function peg$parseUNSIGNED_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c663) {
      s0 = peg$c663;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e704); }
    }

    return s0;
  }

  function peg$parseUNTIL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c664) {
      s0 = peg$c664;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e705); }
    }

    return s0;
  }

  function peg$parseUPDATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c665) {
      s0 = peg$c665;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e706); }
    }

    return s0;
  }

  function peg$parseUPGRADE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c666) {
      s0 = peg$c666;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e707); }
    }

    return s0;
  }

  function peg$parseUSAGE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c667) {
      s0 = peg$c667;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e708); }
    }

    return s0;
  }

  function peg$parseUSER_RESOURCES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c668) {
      s0 = peg$c668;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e709); }
    }

    return s0;
  }

  function peg$parseUSER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c669) {
      s0 = peg$c669;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e710); }
    }

    return s0;
  }

  function peg$parseUSE_FRM_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c670) {
      s0 = peg$c670;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e711); }
    }

    return s0;
  }

  function peg$parseUSE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c671) {
      s0 = peg$c671;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e712); }
    }

    return s0;
  }

  function peg$parseUSING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c672) {
      s0 = peg$c672;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e713); }
    }

    return s0;
  }

  function peg$parseUTC_DATE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c673) {
      s0 = peg$c673;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e714); }
    }

    return s0;
  }

  function peg$parseUTC_TIMESTAMP_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c674) {
      s0 = peg$c674;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e715); }
    }

    return s0;
  }

  function peg$parseUTC_TIME_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c675) {
      s0 = peg$c675;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e716); }
    }

    return s0;
  }

  function peg$parseVALIDATION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c676) {
      s1 = peg$c676;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e717); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f119();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVALUES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c677) {
      s0 = peg$c677;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e718); }
    }

    return s0;
  }

  function peg$parseVALUE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c678) {
      s0 = peg$c678;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e719); }
    }

    return s0;
  }

  function peg$parseVARBINARY_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c679) {
      s0 = peg$c679;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e720); }
    }

    return s0;
  }

  function peg$parseVARCHAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c680) {
      s0 = peg$c680;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e721); }
    }

    return s0;
  }

  function peg$parseVARCHARACTER_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c681) {
      s1 = peg$c681;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e722); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f120();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVARIABLES_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c682) {
      s0 = peg$c682;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e723); }
    }

    return s0;
  }

  function peg$parseVARIANCE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c683) {
      s1 = peg$c683;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e724); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f121();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVARYING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c684) {
      s0 = peg$c684;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e725); }
    }

    return s0;
  }

  function peg$parseVAR_POP_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c685) {
      s1 = peg$c685;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e726); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f122();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVAR_SAMP_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c686) {
      s1 = peg$c686;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e727); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f123();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVIEW_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c687) {
      s0 = peg$c687;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e728); }
    }

    return s0;
  }

  function peg$parseVIRTUAL_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c688) {
      s1 = peg$c688;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e729); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f124();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWAIT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c689) {
      s0 = peg$c689;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e730); }
    }

    return s0;
  }

  function peg$parseWARNINGS_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c690) {
      s0 = peg$c690;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e731); }
    }

    return s0;
  }

  function peg$parseWEEK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c691) {
      s0 = peg$c691;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e732); }
    }

    return s0;
  }

  function peg$parseWEIGHT_STRING_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c692) {
      s0 = peg$c692;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e733); }
    }

    return s0;
  }

  function peg$parseWHEN_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c693) {
      s0 = peg$c693;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e734); }
    }

    return s0;
  }

  function peg$parseWHERE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c694) {
      s0 = peg$c694;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e735); }
    }

    return s0;
  }

  function peg$parseWHILE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c695) {
      s0 = peg$c695;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e736); }
    }

    return s0;
  }

  function peg$parseWITH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c696) {
      s0 = peg$c696;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e737); }
    }

    return s0;
  }

  function peg$parseWITHOUT_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c697) {
      s0 = peg$c697;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e738); }
    }

    return s0;
  }

  function peg$parseWORK_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c698) {
      s0 = peg$c698;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e739); }
    }

    return s0;
  }

  function peg$parseWRAPPER_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c699) {
      s0 = peg$c699;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e740); }
    }

    return s0;
  }

  function peg$parseWRITE_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c700) {
      s0 = peg$c700;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e741); }
    }

    return s0;
  }

  function peg$parseX509_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c701) {
      s0 = peg$c701;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e742); }
    }

    return s0;
  }

  function peg$parseXA_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c702) {
      s0 = peg$c702;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e743); }
    }

    return s0;
  }

  function peg$parseXID_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c703) {
      s1 = peg$c703;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e744); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f125();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseXML_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c704) {
      s0 = peg$c704;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e745); }
    }

    return s0;
  }

  function peg$parseXOR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c705) {
      s0 = peg$c705;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e746); }
    }

    return s0;
  }

  function peg$parseYEAR_MONTH_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c706) {
      s0 = peg$c706;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e747); }
    }

    return s0;
  }

  function peg$parseYEAR_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c707) {
      s0 = peg$c707;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e748); }
    }

    return s0;
  }

  function peg$parseZEROFILL_SYMBOL() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c708) {
      s0 = peg$c708;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e749); }
    }

    return s0;
  }

  function peg$parsePERSIST_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c709) {
      s1 = peg$c709;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e750); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f126();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseROLE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c710) {
      s1 = peg$c710;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e751); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f127();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseADMIN_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c711) {
      s1 = peg$c711;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e752); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f128();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINVISIBLE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c712) {
      s1 = peg$c712;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e753); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f129();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVISIBLE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c713) {
      s1 = peg$c713;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e754); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f130();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXCEPT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c714) {
      s1 = peg$c714;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e755); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f131();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMPONENT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c715) {
      s1 = peg$c715;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e756); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f132();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRECURSIVE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c716) {
      s1 = peg$c716;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e757); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f133();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJSON_OBJECTAGG_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c717) {
      s1 = peg$c717;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e758); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f134();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJSON_ARRAYAGG_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c718) {
      s1 = peg$c718;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e759); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f135();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOF_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c719) {
      s1 = peg$c719;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e760); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f136();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSKIP_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c720) {
      s1 = peg$c720;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e761); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f137();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLOCKED_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c721) {
      s1 = peg$c721;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e762); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f138();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNOWAIT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c722) {
      s1 = peg$c722;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e763); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f139();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGROUPING_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c723) {
      s1 = peg$c723;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e764); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f140();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePERSIST_ONLY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c724) {
      s1 = peg$c724;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e765); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f141();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHISTOGRAM_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c725) {
      s1 = peg$c725;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e766); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f142();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBUCKETS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c726) {
      s1 = peg$c726;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e767); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f143();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREMOTE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c727) {
      s1 = peg$c727;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e768); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f144();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCLONE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c728) {
      s1 = peg$c728;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e769); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f145();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCUME_DIST_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c729) {
      s1 = peg$c729;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e770); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f146();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDENSE_RANK_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c730) {
      s1 = peg$c730;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e771); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f147();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXCLUDE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c731) {
      s1 = peg$c731;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e772); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f148();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFIRST_VALUE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c732) {
      s1 = peg$c732;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e773); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f149();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFOLLOWING_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c733) {
      s1 = peg$c733;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e774); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f150();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGROUPS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c734) {
      s1 = peg$c734;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e775); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f151();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLAG_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c735) {
      s1 = peg$c735;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e776); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f152();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLAST_VALUE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c736) {
      s1 = peg$c736;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e777); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f153();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLEAD_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c737) {
      s1 = peg$c737;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e778); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f154();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNTH_VALUE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c738) {
      s1 = peg$c738;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e779); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f155();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNTILE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c739) {
      s1 = peg$c739;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e780); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f156();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNULLS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c740) {
      s1 = peg$c740;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e781); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f157();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOTHERS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c741) {
      s1 = peg$c741;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e782); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f158();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOVER_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c742) {
      s1 = peg$c742;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e783); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f159();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePERCENT_RANK_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c743) {
      s1 = peg$c743;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e784); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f160();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePRECEDING_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c744) {
      s1 = peg$c744;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e785); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f161();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRANK_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c745) {
      s1 = peg$c745;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e786); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f162();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRESPECT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c746) {
      s1 = peg$c746;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e787); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f163();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseROW_NUMBER_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c747) {
      s1 = peg$c747;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e788); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f164();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTIES_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c748) {
      s1 = peg$c748;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e789); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f165();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUNBOUNDED_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c749) {
      s1 = peg$c749;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e790); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f166();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWINDOW_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c750) {
      s1 = peg$c750;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e791); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f167();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEMPTY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c751) {
      s1 = peg$c751;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e792); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f168();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJSON_TABLE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c752) {
      s1 = peg$c752;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e793); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f169();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNESTED_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c753) {
      s1 = peg$c753;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e794); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f170();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseORDINALITY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c754) {
      s1 = peg$c754;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e795); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f171();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePATH_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c755) {
      s1 = peg$c755;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e796); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f172();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHISTORY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c756) {
      s1 = peg$c756;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e797); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f173();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREUSE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c757) {
      s1 = peg$c757;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e798); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f174();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSRID_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c758) {
      s1 = peg$c758;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e799); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f175();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTHREAD_PRIORITY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c759) {
      s1 = peg$c759;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e800); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f176();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRESOURCE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c760) {
      s1 = peg$c760;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e801); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f177();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSYSTEM_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c761) {
      s1 = peg$c761;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e802); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f178();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVCPU_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c762) {
      s1 = peg$c762;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e803); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f179();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_PUBLIC_KEY_PATH_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 22) === peg$c763) {
      s1 = peg$c763;
      peg$currPos += 22;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e804); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f180();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGET_MASTER_PUBLIC_KEY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 25) === peg$c764) {
      s1 = peg$c764;
      peg$currPos += 25;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e805); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f181();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRESTART_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c765) {
      s1 = peg$c765;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e806); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f182();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEFINITION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c766) {
      s1 = peg$c766;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e807); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f183();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDESCRIPTION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c767) {
      s1 = peg$c767;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e808); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f184();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseORGANIZATION_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c768) {
      s1 = peg$c768;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e809); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f185();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREFERENCE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c769) {
      s1 = peg$c769;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e810); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f186();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOPTIONAL_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c770) {
      s1 = peg$c770;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e811); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f187();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSECONDARY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c771) {
      s1 = peg$c771;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e812); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f188();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSECONDARY_ENGINE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c772) {
      s1 = peg$c772;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e813); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f189();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSECONDARY_LOAD_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c773) {
      s1 = peg$c773;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e814); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f190();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSECONDARY_UNLOAD_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c774) {
      s1 = peg$c774;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e815); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f191();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseACTIVE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c775) {
      s1 = peg$c775;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e816); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f192();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINACTIVE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c776) {
      s1 = peg$c776;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e817); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f193();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLATERAL_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c777) {
      s1 = peg$c777;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e818); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f194();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRETAIN_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c778) {
      s1 = peg$c778;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e819); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f195();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOLD_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c779) {
      s1 = peg$c779;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e820); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f196();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNETWORK_NAMESPACE_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17) === peg$c780) {
      s1 = peg$c780;
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e821); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f197();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseENFORCED_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c781) {
      s1 = peg$c781;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e822); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f198();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseARRAY_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c782) {
      s1 = peg$c782;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e823); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f199();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOJ_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c783) {
      s1 = peg$c783;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e824); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f200();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMEMBER_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c784) {
      s1 = peg$c784;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e825); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f201();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRANDOM_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c785) {
      s1 = peg$c785;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e826); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f202();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_COMPRESSION_ALGORITHM_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 28) === peg$c786) {
      s1 = peg$c786;
      peg$currPos += 28;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e827); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f203();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 29) === peg$c787) {
      s1 = peg$c787;
      peg$currPos += 29;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e828); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f204();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePRIVILEGE_CHECKS_USER_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 21) === peg$c788) {
      s1 = peg$c788;
      peg$currPos += 21;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e829); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f205();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMASTER_TLS_CIPHERSUITES_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 23) === peg$c789) {
      s1 = peg$c789;
      peg$currPos += 23;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e830); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f206();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREQUIRE_ROW_FORMAT_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c790) {
      s1 = peg$c790;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e831); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f207();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePASSWORD_LOCK_TIME_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c791) {
      s1 = peg$c791;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e832); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f208();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFAILED_LOGIN_ATTEMPTS_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 21) === peg$c792) {
      s1 = peg$c792;
      peg$currPos += 21;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e833); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f209();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 31) === peg$c793) {
      s1 = peg$c793;
      peg$currPos += 31;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e834); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f210();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTREAM_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c794) {
      s1 = peg$c794;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e835); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f211();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOFF_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c795) {
      s1 = peg$c795;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e836); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f212();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINT1_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c796) {
      s1 = peg$c796;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e837); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f213();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINT2_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c797) {
      s1 = peg$c797;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e838); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f214();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINT3_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c798) {
      s1 = peg$c798;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e839); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f215();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINT4_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c799) {
      s1 = peg$c799;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e840); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f216();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINT8_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c800) {
      s1 = peg$c800;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e841); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f217();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_TSI_SECOND_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c801) {
      s1 = peg$c801;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e842); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f218();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_TSI_MINUTE_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c802) {
      s1 = peg$c802;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e843); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f219();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_TSI_HOUR_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c803) {
      s1 = peg$c803;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e844); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f220();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_TSI_DAY_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c804) {
      s1 = peg$c804;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e845); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f221();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_TSI_WEEK_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c805) {
      s1 = peg$c805;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e846); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f222();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_TSI_MONTH_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c806) {
      s1 = peg$c806;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e847); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f223();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_TSI_QUARTER_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c807) {
      s1 = peg$c807;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e848); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f224();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSQL_TSI_YEAR_SYMBOL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c808) {
      s1 = peg$c808;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e849); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f225();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWHITESPACE() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r40.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e850); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f226();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINVALID_INPUT() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r41.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e851); }
    }

    return s0;
  }


  const identifier = require('./identifier');

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "EQUAL_OPERATOR"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
